const onstopcameraclick = (event) => {
    var videoinput = document.getElementById('main-video-area');
    var canvas = document.getElementById('main-canvas-area');
    var stop_video = document.getElementById('clear-video-area');

    var mediaStream = videoinput.srcObject;
    var tracks = mediaStream.getTracks();

    tracks.forEach(track => track.stop());

    canvas.style.display = 'none';
    stop_video.style.display = 'none';

    location.reload();
};

const onmainbuttonclick = async (event) => {

    // Main video area
    var videoinput = document.getElementById('main-video-area');
    var canvas = document.getElementById('main-canvas-area');
    var stop_video = document.getElementById('clear-video-area');
    var preview_area = document.getElementById('preview-area');

    // Setting page size
    videoinput.width = 800;
    videoinput.height = 600;

    // Open web camera
    var stream = await navigator.mediaDevices.getUserMedia({ video: { width: 800, height: 600 }, audio: true });
    videoinput.srcObject = stream;

    // Play video from webcam
    videoinput.play();

    // Draw Canvas
    drawcanvas_videoframe();
    
    // Show Canvas
    canvas.style.display = '';
    stop_video.style.display = '';
    preview_area.style.display = '';
};

const drawcanvas_videoframe = async () => {
    var videoinput = document.getElementById('main-video-area');
    var canvas = document.getElementById('main-canvas-area');
    var ctx = canvas.getContext('2d');

    if(videoinput.paused || videoinput.ended) return false;

    canvas.width = videoinput.width + 10;
    canvas.height = videoinput.height + 10;
    canvas.style.width = videoinput.width + 10;
    canvas.style.height = videoinput.height + 10;

    // Draw Video
    ctx.drawImage(videoinput, 0, 0, canvas.width, canvas.height);
    
    // INFERENCE
    // ======================
    // Get Model Type
    var framework = document.getElementById("framework");
    var predictions = null;

    // Get image from canvas

    try {
        if(framework.value == '0' ) {        // ONNX
            // Prepare Image
            var prepared_data = prepare_image('main-canvas-area');

            predictions = await detection(prepared_data.resize_image, window.session, prepared_data.resize_ratio, onnx_config);
                
            drawoutputtocanvas(predictions, ctx);    
        } else if(framework.value == '1') {     // Tensorflow.js
            var model_select = document.getElementById('model-select');
            var model_id = parseInt(model_select.value);
            predictions = await detect_face('main-canvas-area', window.resnet_backbone, model_id, 1, 32, canvas.width, canvas.height, tensorflow_config);

            drawbbox_landmark(ctx, predictions);
        }

        hide_alert();
    } catch(error) {
        alert('We have a problem during inference.');
        show_alert('We have a problem during inference.');
        var videoinput = document.getElementById('main-video-area');
        var stop_video = document.getElementById('clear-video-area');

        var mediaStream = videoinput.srcObject;
        var tracks = mediaStream.getTracks();

        tracks.forEach(track => track.stop());

        canvas.style.display = 'none';
        stop_video.style.display = 'none';
        return;
    }
    requestAnimationFrame(drawcanvas_videoframe);
};

const onvideotagplaying = (event) => {
    requestAnimationFrame(drawcanvas_videoframe);
};

const onstopbuttonclick = (event) => {
    var videoinput = document.getElementById('main-video-area');
    var stop_button = document.getElementById('stop-video');
 
    if (!videoinput.paused) {
        videoinput.pause();
        stop_button.innerText = 'Play Camera';
    } else {
        videoinput.play();
        stop_button.innerText = 'Pause Camera';
    }
};

const oncapturefaceclick =  async (event) => {
    event.preventDefault();

    // Get Model Type
    var framework = document.getElementById("framework");
    var predictions = null;

    // Get image from canvas
    var canvas = document.getElementById("main-canvas-area");
    var ctx = canvas.getContext("2d");

    try {
        if(framework.value == '0' ) {        // ONNX
            show_alert('Detecting by ONNX.js. Please wait...');

            // Prepare Image
            console.log('Prepare Image');
            var prepared_data = prepare_image('main-canvas-area');

            predictions = await detection(prepared_data.resize_image, window.session, prepared_data.resize_ratio, onnx_config);
                
            drawoutputtocanvas(predictions, ctx);    
        } else if(framework.value == '1') {     // Tensorflow.js
            show_alert('Detecting by Tensorflow.js. Please wait...');

            var model_select = document.getElementById('model-select');
            var model_id = parseInt(model_select.value);
            predictions = await detect_face('main-canvas-area', window.resnet_backbone, model_id, 1, 32, canvas.width, canvas.height, tensorflow_config);

            drawbbox_landmark(ctx, predictions);
        }

        alert('Detection complete.');
        show_alert('Detection complete.');
        hide_alert();
	
	var canvas_url = canvas.toDataURL('image/jpg'); 
	var download_image_area = document.getElementById('download-image-area');
	download_image_area.style.display = '';
		
	var download_image_btn = document.getElementById('main-image-area');
	download_image_btn.src = canvas_url;	

	canvas.style.display = 'none';
	document.getElementById('preview-area').style.display = 'none';
    } catch(error) {
        alert('We found a problem during detecting.');
        show_alert('We found a problem during detecting.');
    }
};

const onbrowsechange = (event) => {

    var canvas = document.getElementById('main-canvas-area'),
        context = canvas.getContext('2d');
    var remove_image_area = document.getElementById('clear-image-area');
    var img = new Image;

    img.onload = function() {
        context.clearRect(0, 0, canvas.width, canvas.height);
        canvas.width = img.width;
        canvas.height = img.height;
        context.drawImage(img, 0, 0);

        canvas.style.display = '';
        remove_image_area.style.display = '';
	document.getElementById('preview-area').style.display = '';
    }
    
    img.src = URL.createObjectURL(event.target.files[0]);
};

const onloadmodelclick = async (event) => {
    show_alert('Loading model.');

    try {
        if(framework.value == '0') {        // ONNX
            // Model Selection
            var model_select = document.getElementById('model-select');
            var model_path = onnx_config.model[parseInt(model_select.value)];

            // Load model
            console.log(`Model Path = ${model_path}`);
            window.session = new onnx.InferenceSession({ backendHint: 'wasm' });    //wasm
            await window.session.loadModel(model_path); //'./model/ResNet50.onnx');
        } else if(framework.value == '1') {     // Tensorflow.js
            var model_select = document.getElementById('model-select');
            var model_id = parseInt(model_select.value);

            window.resnet_backbone = await tf.loadLayersModel(tensorflow_config.url[model_id]);
        }

        show_alert('Finish loading model.');
        alert('Finish Loading Model');
        hide_alert();
    } catch(error) {
        console.error(error);
        alert('We found an error during loading model.');
        show_alert('We found an error during loading model.');
    }
};

const onclearimage = (event) => {
    var canvas = document.getElementById('main-canvas-area');
    var context = canvas.getContext('2d');
    var remove_image_area = document.getElementById('clear-image-area');
    var browsefile = document.getElementById('browseimage');

    context.clearRect(0, 0, canvas.width, canvas.height);
    
    canvas.style.display = 'none';
    remove_image_area.style.display = 'none';
    document.getElementById('preview-area').style.display = 'none';
    browsefile.value = '';

};

const downloadimagebtnclick = (event) => {
    	event.preventDefault();
    	var canvas = document.getElementById('main-canvas-area');
	var target = event.target;
	var canvas_url = canvas.toDataURL('image/jpg');
	target.href = canvas_url;
};

const show_alert = (text) => {
    var alert_area = document.getElementById('alert-area');
    var alert_text = document.getElementById('alert-text');

    alert_area.style.display = '';
    alert_text.innerHTML = text;
};

const hide_alert = () => {
    var alert_area = document.getElementById('alert-area');
    alert_area.style.display = 'none';
};

/*
async function make_base()
{
    var canvas = document.getElementById('main-canvas-area'),
    context = canvas.getContext('2d');
    base_image = new Image(800, 450);
    canvas.width = 800;
    canvas.height = 450;
    base_image.src = 'pic/prayuth.jpg';
    base_image.onload = function()  {
        context.drawImage(base_image, 0, 0);
    }
}
*/

var capture_face = document.getElementById('capture-face');
capture_face.addEventListener('click', oncapturefaceclick);

var browsefile = document.getElementById('browseimage');
browsefile.addEventListener('change', onbrowsechange);

var load_model_area = document.getElementById('load-model-btn');
load_model_area.addEventListener('click', onloadmodelclick);

var clear_image_area = document.getElementById('clear-image');
clear_image_area.addEventListener('click', onclearimage);

var open_camera = document.getElementById('open-camera');
open_camera.addEventListener('click', onmainbuttonclick);

var stop_camera = document.getElementById('stop-capture');
stop_camera.addEventListener('click', onstopcameraclick);

var onnx_config = {
    name: 'Resnet50',
    min_sizes: [[16, 32], [64, 128], [256, 512]],
    steps: [8, 16, 32],
    variance: [0.1, 0.2],
    clip: false,
    loc_weight: 2.0,
    gpu_train: true,
    batch_size: 24,
    ngpu: 4,
    epoch: 100,
    decay1: 70,
    decay2: 90,
    image_size: 800,
    pretrain: true,
    return_layers: {'layer2': 1, 'layer3': 2, 'layer4': 3},
    in_channel: 256,
    out_channel: 256,
    confidence_threshold: 0.02,
    top_k: 5000,
    keep_top_k: 740,
    nms_threshold: 0.4,
    model: ["./model/ResNet50.onnx", "./model/Mobile0.25.onnx"]
};

// Configuration
var tensorflow_config = {
    input_size: [800, 600],
    min_size: [[16, 32], [64, 128], [256, 512]],
    out_ch: 256,
    url: ['model/ResNet50/model.json', 'model/MobileNetV2/model.json'],
    steps: [8, 16, 32],
    variances: [0.1, 0.2],
    iou_thresh: 0.4,
    score_thresh: 0.02,
    top_k: 5000,
    clip: false,
    weight: ["model/weights_total.json", "model/weights_MobileNetV2.json"]
};

//Debugging Purpose
//make_base();
