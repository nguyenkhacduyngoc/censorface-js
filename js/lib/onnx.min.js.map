{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./lib/util.ts","webpack:///./lib/tensor.ts","webpack:///./lib/backends/webgl/glsl-source.ts","webpack:///./lib/instrument.ts","webpack:///./lib/wasm-binding.ts","webpack:///./lib/operators.ts","webpack:///./lib/backends/webgl/glsl-definitions.ts","webpack:///./node_modules/protobufjs/src/util/minimal.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/onnx-proto/dist/onnx.js","webpack:///./lib/backends/webgl/ops/reshape.ts","webpack:///./lib/opset.ts","webpack:///./node_modules/buffer/index.js","webpack:///./node_modules/long/src/long.js","webpack:///./lib/ops/batch-normalization.ts","webpack:///./lib/ops/binary-op.ts","webpack:///./lib/ops/conv.ts","webpack:///./lib/backends/cpu/ops/matmul.ts","webpack:///./lib/ops/matmul.ts","webpack:///./lib/ops/gemm.ts","webpack:///./lib/ops/instance-normalization.ts","webpack:///./lib/ops/pool.ts","webpack:///./lib/ops/softmax.ts","webpack:///./lib/ops/sum.ts","webpack:///./node_modules/process/browser.js","webpack:///./lib/env.ts","webpack:///./lib/api/index.ts","webpack:///./lib/backends/cpu/op-resolve-rules.ts","webpack:///./node_modules/protobufjs/src/writer.js","webpack:///./node_modules/protobufjs/src/reader.js","webpack:///./lib/ops/concat.ts","webpack:///./lib/ops/dropout.ts","webpack:///./lib/ops/flatten.ts","webpack:///./lib/ops/gather.ts","webpack:///./lib/ops/image-scaler.ts","webpack:///./lib/ops/pad.ts","webpack:///./lib/ops/reduce-op.ts","webpack:///./lib/ops/reshape.ts","webpack:///./lib/ops/slice.ts","webpack:///./lib/ops/squeeze.ts","webpack:///./lib/ops/tile.ts","webpack:///./lib/ops/transpose.ts","webpack:///./lib/backends/cpu/ops/unary-op.ts","webpack:///./lib/ops/unary-op.ts","webpack:///./lib/ops/unsqueeze.ts","webpack:///./lib/ops/upsample.ts","webpack:///./node_modules/platform/platform.js","webpack:///./node_modules/path-browserify/index.js","webpack:///./lib/ops/clip.ts","webpack:///./lib/backends/webgl/utils.ts","webpack:///./lib/api/tensor-impl.ts","webpack:///./lib/api/tensor-impl-utils.ts","webpack:///./lib/api/onnx-impl.ts","webpack:///./lib/backends/backend-cpu.ts","webpack:///./lib/backends/cpu/session-handler.ts","webpack:///./lib/backends/cpu/inference-handler.ts","webpack:///./lib/backends/cpu/ops/argMax.ts","webpack:///./lib/ops/argMax.ts","webpack:///./node_modules/base64-js/index.js","webpack:///./node_modules/ieee754/index.js","webpack:///./node_modules/isarray/index.js","webpack:///./node_modules/protobufjs/minimal.js","webpack:///./node_modules/protobufjs/src/index-minimal.js","webpack:///./node_modules/@protobufjs/aspromise/index.js","webpack:///./node_modules/@protobufjs/base64/index.js","webpack:///./node_modules/@protobufjs/eventemitter/index.js","webpack:///./node_modules/@protobufjs/float/index.js","webpack:///./node_modules/@protobufjs/inquire/index.js","webpack:///./node_modules/@protobufjs/utf8/index.js","webpack:///./node_modules/@protobufjs/pool/index.js","webpack:///./node_modules/protobufjs/src/util/longbits.js","webpack:///./node_modules/protobufjs/src/writer_buffer.js","webpack:///./node_modules/protobufjs/src/reader_buffer.js","webpack:///./node_modules/protobufjs/src/rpc.js","webpack:///./node_modules/protobufjs/src/rpc/service.js","webpack:///./node_modules/protobufjs/src/roots.js","webpack:///./lib/backends/cpu/ops/batch-normalization.ts","webpack:///./lib/backends/cpu/ops/binary-op.ts","webpack:///./lib/backends/cpu/ops/cast.ts","webpack:///./lib/ops/cast.ts","webpack:///./lib/backends/cpu/ops/concat.ts","webpack:///./lib/backends/cpu/ops/conv.ts","webpack:///./lib/backends/cpu/ops/dropout.ts","webpack:///./lib/backends/cpu/ops/expand.ts","webpack:///./lib/ops/expand.ts","webpack:///./lib/backends/cpu/ops/flatten.ts","webpack:///./lib/backends/cpu/ops/gather.ts","webpack:///./lib/backends/cpu/ops/gemm.ts","webpack:///./lib/backends/cpu/ops/image-scaler.ts","webpack:///./lib/backends/cpu/ops/instance-normalization.ts","webpack:///./lib/backends/cpu/ops/lrn.ts","webpack:///./lib/ops/lrn.ts","webpack:///./lib/backends/cpu/ops/pad.ts","webpack:///./lib/backends/cpu/ops/pool.ts","webpack:///./lib/backends/cpu/ops/reduce.ts","webpack:///./lib/backends/cpu/ops/reshape.ts","webpack:///./lib/backends/cpu/ops/shape.ts","webpack:///./lib/ops/shape.ts","webpack:///./lib/backends/cpu/ops/slice.ts","webpack:///./lib/backends/cpu/ops/softmax.ts","webpack:///./lib/backends/cpu/ops/squeeze.ts","webpack:///./lib/backends/cpu/ops/sum.ts","webpack:///./lib/backends/cpu/ops/tile.ts","webpack:///./lib/backends/cpu/ops/transpose.ts","webpack:///./lib/backends/cpu/ops/unsqueeze.ts","webpack:///./lib/backends/cpu/ops/upsample.ts","webpack:///./lib/backends/backend-wasm.ts","webpack:///(webpack)/buildin/module.js","webpack:///./lib/wasm-binding-core.ts","webpack:///./dist/onnx-wasm.js","webpack:///./lib/worker/worker-main.ts","webpack:///./lib/backends/wasm/session-handler.ts","webpack:///./lib/backends/wasm/inference-handler.ts","webpack:///./lib/backends/wasm/op-resolve-rules.ts","webpack:///./lib/backends/wasm/ops/batch-normalization.ts","webpack:///./lib/backends/wasm/ops/binary-op.ts","webpack:///./lib/backends/wasm/ops/clip.ts","webpack:///./lib/backends/wasm/ops/conv.ts","webpack:///./lib/backends/wasm/ops/gemm.ts","webpack:///./lib/backends/wasm/ops/instance-normalization.ts","webpack:///./lib/backends/wasm/ops/matmul.ts","webpack:///./lib/backends/wasm/ops/pool.ts","webpack:///./lib/backends/wasm/ops/softmax.ts","webpack:///./lib/backends/wasm/ops/sum.ts","webpack:///./lib/backends/backend-webgl.ts","webpack:///./lib/backends/webgl/session-handler.ts","webpack:///./lib/backends/webgl/inference-handler.ts","webpack:///./lib/backends/webgl/ops/uint8-encode.ts","webpack:///./lib/backends/webgl/op-resolve-rules.ts","webpack:///./lib/backends/webgl/ops/batch-normalization.ts","webpack:///./lib/backends/webgl/ops/binary-op.ts","webpack:///./lib/backends/webgl/ops/clip.ts","webpack:///./lib/backends/webgl/ops/concat.ts","webpack:///./lib/backends/webgl/ops/conv.ts","webpack:///./lib/backends/webgl/ops/dropout.ts","webpack:///./lib/backends/webgl/ops/elu.ts","webpack:///./lib/ops/elu.ts","webpack:///./lib/backends/webgl/ops/flatten.ts","webpack:///./lib/backends/webgl/ops/gather.ts","webpack:///./lib/backends/webgl/ops/gemm.ts","webpack:///./lib/backends/webgl/ops/image-scaler.ts","webpack:///./lib/backends/webgl/ops/instance-normalization.ts","webpack:///./lib/backends/webgl/ops/leaky-relu.ts","webpack:///./lib/ops/leaky-relu.ts","webpack:///./lib/backends/webgl/ops/matmul.ts","webpack:///./lib/backends/webgl/ops/pad.ts","webpack:///./lib/backends/webgl/ops/pool.ts","webpack:///./lib/backends/webgl/ops/reduce.ts","webpack:///./lib/backends/webgl/ops/slice.ts","webpack:///./lib/backends/webgl/ops/softmax.ts","webpack:///./lib/backends/webgl/ops/split.ts","webpack:///./lib/ops/split.ts","webpack:///./lib/backends/webgl/ops/squeeze.ts","webpack:///./lib/backends/webgl/ops/sum.ts","webpack:///./lib/backends/webgl/ops/tile.ts","webpack:///./lib/backends/webgl/ops/transpose.ts","webpack:///./lib/backends/webgl/ops/unary-op.ts","webpack:///./lib/backends/webgl/ops/unsqueeze.ts","webpack:///./lib/backends/webgl/ops/upsample.ts","webpack:///./lib/backends/webgl/program-manager.ts","webpack:///./lib/backends/webgl/glsl-preprocessor.ts","webpack:///./lib/backends/webgl/glsl-function-inliner.ts","webpack:///./lib/backends/webgl/glsl-registered-libs.ts","webpack:///./lib/backends/webgl/glsl-coordinate-lib.ts","webpack:///./lib/backends/webgl/glsl-encoding-lib.ts","webpack:///./lib/backends/webgl/glsl-fragcolor-lib.ts","webpack:///./lib/backends/webgl/glsl-shape-utils-lib.ts","webpack:///./lib/backends/webgl/glsl-vec-lib.ts","webpack:///./lib/backends/webgl/texture-layout-strategy.ts","webpack:///./lib/backends/webgl/texture-manager.ts","webpack:///./lib/backends/webgl/webgl-context-factory.ts","webpack:///./lib/backends/webgl/webgl-context.ts","webpack:///./lib/backends/webgl/texture-data-encoder.ts","webpack:///./lib/api/env-impl.ts","webpack:///./lib/api/tensor.ts","webpack:///./lib/api/inference-session.ts","webpack:///./lib/api/inference-session-impl.ts","webpack:///./lib/session.ts","webpack:///./node_modules/util/util.js","webpack:///./node_modules/util/support/isBufferBrowser.js","webpack:///./node_modules/util/node_modules/inherits/inherits_browser.js","webpack:///./lib/backend.ts","webpack:///./lib/execution-plan.ts","webpack:///./lib/model.ts","webpack:///./lib/graph.ts","webpack:///./lib/attribute.ts"],"names":["root","factory","exports","module","define","amd","a","i","window","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","inputs","length","expectedDimensions","dims","preprocessInputShapes","dimsA","dimsB","postprocessOutputShape","outputShape","aRank","bRank","splice","pop","calcMatMulShape","b","undefined","MatMulUtil","calcShape","adims","bdims","isMatMul","arank","brank","crank","Math","max","cdims","Array","cShapeMatMul","aLen","bLen","index","broadcastedIndices","originalShape","originalIndices","BroadcastUtil","fillIndex","dimOffset","calc","op","inplace","resultType","ShapeUtil","areEqual","size","Tensor","type","set","outputIndices","originalIndicesA","originalIndicesB","valA","valB","isAScalar","isBScalar","rest","j","floor","isValidBroadcast","shape","finalShape","inputRank","finalRank","target","source","targetIndex","sourceIndex","blockSize","Error","offset","getShapeOfGemmResult","leftShape","transLeft","rightShape","transRight","biasShape","M","K","N","kDim","GemmUtil","tensorDataTypeFromProto","typeProto","onnx","TensorProto","DataType","INT8","UINT8","BOOL","INT16","UINT16","INT32","UINT32","FLOAT","DOUBLE","STRING","INT64","UINT64","tensorDimsFromProto","map","isLong","toNumber","tensorValueTypeFromProto","valueType","tensorType","ProtoUtil","elemType","dim","dimValue","longToNumber","LongUtil","getSizeFromDimensionRange","sizeFromDimension","axis","sizeToDimension","start","end","computeStrides","rank","strides","transpose","slice","reverse","indicesToOffset","indices","offsetToIndices","normalizeAxis","tensorRank","normalizeAxes","axes","x","incrementIndex","axisToIncrementOn","k","calculateReshapedDims","originalDims","shapeHints","nDims","reshapedDims","unknownDimension","newTensorSize","oldTensorSize","sortBasedOnPerm","perm","v","padShape","pad","shape1","shape2","every","validateDimsAndCalcSize","TypeError","Number","isInteger","flattenShape","total","reduce","y","right","squeezeShape","outputDims","inSqueezeList","indexOf","push","unsqueezeShape","fill","inputDimsIterator","sqr","pow","axpy","alpha","powx","mul","MathUtil","splitShape","split","numOutputs","SplitUtil","determineSplit","shapes","offsets","numElementsAlongAxis","calcReduce","keepdims","op1","op2","forEach","ind","ReduceUtil","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","numberData","data","dataId","input","curAxisInd","pos","res","step","keepDims","filter","adjustPoolAttributes","isGlobalOperator","inputDims","kernelShape","pads","adjustPadsBasedOnAutoPad","dilations","autoPad","PoolConvUtil","adjustPadAndReturnShape","computePoolOutputShape","computeShapeHelper","computeConvOutputShape","filterDims","inSize","stride","dilation","kernel","padHeadIndex","padTailIndex","dkernel","padNeeded","dataProvider","asyncDataProvider","cache","this","empty","RangeError","isArray","constructor","dataviewConstructor","buf","ArrayBuffer","sizeof","dataBuffer","createView","getData","_strides","fromProto","tensorProto","dataType","stringData","str","Buffer","from","buffer","byteOffset","byteLength","toString","rawData","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","array","floatData","int32Data","int64Data","doubleData","uint64Data","element","fromData","Uint8Array","Int8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","greaterThanOrEqual","lessThan","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","fromBits","getFloat64","GLSL_ES_2_0","version","attribute","varyingVertex","varyingFrag","texture2D","output","outputDeclaration","GLSL_ES_3_0","getGlsl","glsl","outputShapeLength","log","severity","content","category","console","color","SEVERITY_VALUE","verbose","info","warning","error","LOGGER_PROVIDER_MAP","NoOpLoggerProvider","ConsoleLoggerProvider","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","arg0","arg1","arg2","arg3","logInternal","stack","config","Date","toISOString","reset","previousConfig","Logger","startTime","endCallback","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","now","stop","logOneEvent","event","func","begin","isPromise","then","Promise","resolve","reject","reason","flush","Event","e","EventRecord","toFixed","currentTime","previousPointer","Profiler","performance","workers","WORKER_NUMBER","completeCallbacks","initialized","initializing","numWorkers","initTimeout","waitForBindingInitTimeoutId","clearWaitForBindingInit","clearTimeout","onFulfilled","bindingInitTask","bindingCore","init","rejectAfterTimeOutPromise","setTimeout","Worker","areWebWorkersSupported","workerInitTasks","workerId","workerInitTask","resolveWorkerInit","rejectWorkerInit","worker","default","onerror","onmessage","perfData","shift","race","all","err","getInstance","WasmBinding","instance","ccallRemote","functionName","calculateOffsets","params","ccallSerialize","postMessage","perf","startTimeWorker","endTimeWorker","ccallDeserialize","NUMBER_TYPES","INT_TYPES","FLOAT_TYPES","FunctionType","glContext","programInfo","GlslContext","context","GlslLib","routineBody","dependencies","GlslLibRoutine","addDependency","node","GlslLibRoutineNode","returnOrderedNodes","nodes","cycleCheck","Set","alreadyTraversed","result","createOrderedNodes","graphNodes","dfsTraverse","has","add","delete","TopologicalSortGlslRoutines","util","merge","dst","src","ifNotSet","keys","newError","CustomError","message","properties","captureStackTrace","asPromise","base64","EventEmitter","float","inquire","utf8","pool","LongBits","global","self","emptyArray","freeze","emptyObject","isNode","Boolean","process","versions","isFinite","isString","String","isObject","isset","isSet","obj","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","newBuffer","sizeOrArray","Long","dcodeIO","key2Re","key32Re","key64Re","longToHash","toHash","zeroHash","longFromHash","hash","unsigned","bits","fromHash","lo","hi","lcFirst","charAt","toLowerCase","substring","ProtocolError","oneOfGetter","fieldNames","fieldMap","oneOfSetter","toJSONOptions","longs","enums","bytes","json","_configure","encoding","allocUnsafe","g","Function","$protobuf","$Reader","Reader","$Writer","Writer","$util","$root","roots","valuesById","values","Version","AttributeProto","floats","ints","strings","tensors","graphs","refAttrName","docString","f","encode","writer","uint32","string","int64","fork","ldelim","GraphProto","int32","encodeDelimited","decode","reader","len","tag","end2","skipType","decodeDelimited","verify","low","high","fromObject","fromValue","parseInt","toObject","options","arrays","defaults","long","AttributeType","toJSON","ValueInfoProto","TypeProto","NodeProto","opType","domain","ModelProto","opsetImport","metadataProps","irVersion","producerName","producerVersion","modelVersion","graph","OperatorSetIdProto","StringStringEntryProto","TensorAnnotation","quantParameterTensorNames","tensorName","initializer","valueInfo","quantizationAnnotation","externalData","segment","dataLocation","Segment","double","uint64","DataLocation","TensorShapeProto","Dimension","$oneOfFields","dimParam","denotation","oneofs","run","inferenceHandler","integerData","reshape","Reshape","inputTD","getOrCreateTextureData","packedShape","channels","getPackedShape","newTextureLayout","height","width","unpackedShape","createSharedTextureData","texture","tensor","WebGLReshape","matchSelector","selector","endsWith","rangeStart","isNaN","pair","rangeEnd","opsets","rules","rule","versionSelector","opConstructor","opset","join","ieee754","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","__proto__","arg","encodingOrOffset","fromArrayLike","fromArrayBuffer","isEncoding","actual","write","fromString","isBuffer","checked","copy","val","assertSize","isView","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","arr","indexSize","arrLength","valLength","read","readUInt16BE","foundIndex","found","hexWrite","remaining","strLen","parsed","substr","blitBuffer","asciiWrite","byteArray","charCodeAt","asciiToBytes","latin1Write","base64Write","ucs2Write","units","utf16leToBytes","fromByteArray","min","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","fromCharCode","apply","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","subarray","typedArraySupport","poolSize","_augment","species","configurable","allocUnsafeSlow","_isBuffer","compare","concat","list","swap16","swap32","swap64","arguments","equals","inspect","match","thisStart","thisEnd","thisCopy","targetCopy","includes","_arr","ret","out","toHex","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","code","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","trim","replace","stringtrim","base64clean","wasm","WebAssembly","Instance","Module","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","eq","radixLong","div","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","other","notEquals","neq","ne","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","gte","ge","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","toUnsigned","shru","shr","shl","log2","ceil","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","initialize","attributes","epsilon","getFloat","momentum","spatial","getInt","checkInputs","checkInputTypes","X","scale","B","mean","var_","BatchNormalization","typeConstraint","BinaryOp","getString","getInts","group","spatialRank","Conv","matMul","MatMul","mat2dShape","num2dMatrices","offsetY","indicesA","indicesB","offsetA","offsetB","matMul2d","A","C","transA","transB","beta","offsetC","mm","nn","sum","kk","matMul2d_tAtB","matMul2d_tA","matMul2d_tB","matMul2d_","CpuMatMul","isOptionalC","Gemm","InstanceNormalization","countIncludePad","ceilMode","PoolBase","AveragePool","GlobalAveragePool","storageOrder","MaxPool","GlobalMaxPool","Softmax","Sum","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","marker","runClearTimeout","Item","noop","nextTick","args","title","browser","env","argv","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","umask","backend","platform","debug","EnvironmentImpl","onnxImpl","CPU_OP_RESOLVE_RULES","CpuUnaryOp","unaryOps","abs","acos","acosh","CpuBinaryOp","e1","e2","CpuArgMax","asin","asinh","atan","atanh","CpuAveragePool","CpuBatchNormalization","CpuCast","clip","clipInitializer","CpuConcat","CpuConv","cos","cosh","CpuDropout","elu","eluInitializer","exp","CpuExpand","CpuFlatten","CpuGather","CpuGemm","CpuGlobalAveragePool","CpuGlobalMaxPool","CpuImageScaler","CpuInstanceNormalization","isNan","leakyRelu","leakyReluInitializer","CpuLrn","CpuMaxPool","CpuPad","reciprocal","cpuReduce","CpuReduceLogSum","CpuReduceMax","CpuReduceMean","CpuReduceMin","CpuReduceProd","CpuReduceSum","CpuReduceSumSquare","relu","CpuReshape","CpuShape","sigmoid","sign","sin","sinh","CpuSliceV10","CpuSlice","CpuSoftmax","sqrt","CpuSqueeze","CpuSum","tan","tanh","CpuTile","CpuTranspose","CpuUnsqueeze","CpuUpsample","CpuUpsampleV9","BufferWriter","Op","fn","next","State","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","sint32","sint64","zzEncode","bool","fixed32","sfixed32","fixed64","sfixed64","writeBytes","finish","BufferWriter_","BufferReader","indexOutOfRange","writeLength","create_array","readLongVarint","readFixed32_end","readFixed64","_slice","skip","wireType","BufferReader_","zzDecode","inputType","inputDimensionality","Concat","ratio","testMode","Dropout","Flatten","Gather","bias","getFloats","ImageScaler","Pad","ReduceBase","starts","ends","Slice","SliceV10","Squeeze","Tile","Transpose","attributesInitializer","unaryOp","UnaryOp","Unsqueeze","scales","roi","Upsample","UpsampleV9","objectTypes","freeExports","freeModule","nodeType","freeGlobal","maxSafeInteger","reOpera","objectProto","capitalize","toUpperCase","format","test","forOwn","callback","getClassOf","qualify","accumulator","each","parse","ua","isCustomContext","nav","navigator","userAgent","isSpecialCasedOS","likeChrome","airRuntimeClass","enviroClass","javaClass","java","phantomClass","rhino","environment","doc","document","opera","operamini","operaClass","arch","description","prerelease","useFeatures","layout","guess","RegExp","pattern","exec","label","guesses","getName","product","getProduct","manufacturer","getManufacturer","os","cleanupOS","getOS","getVersion","patterns","unshift","parseFloat","runtime","flash","system","Capabilities","phantom","major","minor","patch","documentMode","lang","System","getProperty","require","electron","nw","appMinorVersion","external","family","architecture","cpuClass","normalizeArray","parts","allowAboveRoot","up","last","xs","resolvedPath","resolvedAbsolute","path","normalize","isAbsolute","trailingSlash","paths","relative","to","fromParts","toParts","samePartsLength","outputParts","sep","delimiter","dirname","hasRoot","matchedSlash","basename","extname","startDot","startPart","preDotState","Clip","inferredDims","internalTensor","indexArray","Utils","validateIndices","idx","matchElementType","cpu","CpuBackend","WasmBackend","webgl","WebGLBackend","ENV","envImpl","createSessionHandler","CpuSessionHandler","dispose","createInferenceHandler","CpuInferenceHandler","profiler","resolveOperator","session","argMax","ArgMax","Y","b64","lens","getLens","validLen","placeHoldersLen","tmp","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","len2","encodeChunk","lookup","num","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","protobuf","configure","build","rpc","ctx","pending","s64","chunk","_listeners","evt","f32","f8b","writeFloat_f32_cpy","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloat_ieee754","writeUint","round","exponent","readFloat_ieee754","readUint","uint","mantissa","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDouble_ieee754","off0","off1","readDouble_ieee754","moduleName","eval","c1","c2","SIZE","MAX","slab","zero","toLong","mask","part0","part1","part2","writeStringBuffer","writeBytesBuffer","Service","rpcImpl","requestDelimited","responseDelimited","rpcCall","method","requestCtor","responseCtor","request","response","endedByRPC","batchNormalization","variance","inputDimensions","channelSize","scaleData","bData","meanData","varianceData","nc","opLambda","binaryOp","cast","Cast","inputData","outputData","input0","inputShape","concatAxisSize","dataNShape","dataN","axisIndex","axisPitch","outputBase","inputIndex","inputAxisPitch","inputSize","Util","outputOffset","w","wDims","conv2d","W","input_num","input_channels","input_height","input_width","filter_num","filter_channels","filter_height","filter_width","filter_size","kernel_shape","output_num","output_channels","output_height","output_width","output_image_size","X_offset","Y_offset","W_offset","kernel_dim","col_buffer_data","image_id","X_image_offset","Y_image_offset","group_id","im2col","biasData","batchSize","outputChannels","dataSize","batch","channel","data_im","data_col","kernel_h","kernel_w","dilation_h","dilation_w","pad_t","pad_l","pad_b","pad_r","stride_h","stride_w","output_h","output_w","height_col","width_col","channels_col","w_offset","h_offset","c_im","h","h_pad","w_pad","nip","kh","kw","dst_offset","src_offset","iy","ix","dropout","isTestMode","expand","Expand","shapeData","dimensions","originalDimensions","flatten","gather","newDims","indicesData","dimsStrides","newDimsStrides","newLogicalIndex","oldLogicalIndex","oldOffset","gemm","imageScaler","H","hw","instanceNormalization","temp","physicalOffset","iterEnd","currentChannel","lrn","Lrn","tensorDataSize","paddedSquareData","alphaOverSize","prePad","scaleSliceStart","arrayCopyHelper","outputDimensions","assign","getPadDimension","acc","cur","inx","mapToArrayIndex","getReflectionIndex","getEdgeIndex","position","numberIndex","dimension","some","arrayIndex","averagePool","globalAveragePool","maxPool","globalMaxPool","MIN_SAFE_INTEGER","startVal","processOp","finalOp","kernelSize","kernelStrides","stridesRank","outputSize","outputStride","curInd","startInd","isPad","reduceSum","reduceSumSquare","reduceLogSum","reduceMax","reduceMin","reduceMean","reduceProd","numItems","Shape","adjustedStarts","newDimsStride","oldDimsStride","softmax","D","squeeze","tile","repeats","finalPerm","inpDim","numElementsInBlock","numAxesInPrefix","suffixBlocksize","prefixBlocksize","isSuffix","inpAxis","numAxes","targetDims","numBlocks","startTargetIndex","sourceOffset","doTransposeEltWise","sizeOffset","doTranspose","unsqueeze","xDims","yDims","upsampleNearest","upsampleLinear","xData","yData","inputDimCounter","inputDimFactor","outputDimCounter","yIdx","xIdx","dimIdx","currentInputDimCounter","originalIdx","getOriginalCoordinate","is2D","numChannels","inputHeight","inputWidth","outputHeight","outputWidth","heightScale","widthScale","yOriginal","xOriginal","inputWidthMulY1","inputWidthMulY2","inX1","inX2","dy1","dy2","dx1","dx2","inY","inY1","inY2","inX","xOffset","yOffset","x11","x21","x12","x22","upsampleBilinear","xResized","xScale","cpuFallback","hardwareConcurrency","defaultNumWorkers","checkIfNumWorkersIsValid","isWasmSupported","WasmSessionHandler","wasmBinding","webpackPolyfill","deprecate","children","ptr8","numBytesAllocated","ccall","expandMemory","HEAPU8","startTimeFunc","endTimeFunc","ccallRaw","param","paramData","paramType","paramPass","heapU8","heap32","heapU32","heapF32","offset8","offset32","boolArray","int32Array","float32Array","heapI32","minBytesRequired","_free","_malloc","_scriptDir","currentScript","__filename","moduleOverrides","arguments_","ENVIRONMENT_IS_WEB","ENVIRONMENT_IS_WORKER","ENVIRONMENT_IS_NODE","ENVIRONMENT_IS_SHELL","importScripts","read_","readBinary","nodeFS","nodePath","scriptDirectory","locateFile","__dirname","filename","binary","assert","ex","ExitStatus","abort","readbuffer","scriptArgs","print","warn","printErr","location","href","url","xhr","XMLHttpRequest","open","send","responseText","responseType","wasmBinary","wasmMemory","setTempRet0","wasmTable","Table","ABORT","condition","text","UTF8Decoder","TextDecoder","UTF8ArrayToString","u8Array","maxBytesToRead","endIdx","endPtr","u0","u1","u2","ch","UTF8ToString","ptr","HEAP32","WASM_PAGE_SIZE","alignUp","multiple","updateGlobalBufferAndViews","DYNAMIC_BASE","DYNAMICTOP_PTR","INITIAL_INITIAL_MEMORY","callRuntimeCallbacks","callbacks","Memory","__ATPRERUN__","__ATINIT__","__ATMAIN__","__ATEXIT__","__ATPOSTRUN__","preRun","addOnPreRun","initRuntime","preMain","postRun","addOnPostRun","cb","runDependencies","runDependencyWatcher","dependenciesFulfilled","addRunDependency","id","removeRunDependency","clearInterval","what","RuntimeError","dataURIPrefix","isDataURI","startsWith","wasmBinaryFile","getBinary","getBinaryPromise","fetch","credentials","catch","createWasm","asmLibraryArg","receiveInstance","receiveInstantiatedSource","instantiateArrayBuffer","receiver","instantiate","instantiateStreaming","instantiateAsync","___assert_fail","line","___cxa_allocate_exception","___wasm_call_ctors","___exception_infos","__ZSt18uncaught_exceptionv","uncaught_exceptions","___cxa_throw","destructor","adjusted","refcount","caught","rethrown","_abort","_emscripten_get_heap_size","_emscripten_get_sbrk_ptr","_emscripten_memcpy_big","dest","copyWithin","emscripten_realloc_buffer","grow","_emscripten_resize_heap","requestedSize","oldSize","cutDown","overGrownHeapSize","SYSCALLS","mappings","buffers","printChar","stream","curr","varargs","getStr","get64","_fd_close","fd","_fd_seek","offset_low","offset_high","whence","newOffset","flush_NO_FILESYSTEM","_fflush","_fd_write","iov","iovcnt","pnum","_setTempRet0","$i","asm","calledRun","status","doRun","old","runCaller","fallbackToCpuOps","opResolveRules","WASM_OP_RESOLVE_RULES","WasmInferenceHandler","WasmBinaryOp","WasmAveragePool","WasmBatchNormalization","WasmClip","WasmConv","WasmGemm","WasmGlobalAveragePool","WasmGlobalMaxPool","WasmInstanceNormalization","WasmMatMul","WasmMaxPool","WasmSoftmax","WasmSum","binaryOpType","numThreads","numFilterMaps","numWebWorkers","determineNumThreads","workerNumber","wDimsSp","wSizeSp","wDimsFinal","yDimsSp","ySizeSp","yDimsFinal","wArray","yArray","bArray","workerTasks","resultData","poolType","poolFunc","xDimsSp","xSizeSp","xDimsFinal","createWebGLContext","contextId","matmulMaxBatchSize","textureCacheMode","WebGLSessionHandler","programManager","ProgramManager","layoutStrategy","AlwaysKeepOriginalSizeStrategy","maxTextureSize","textureManager","TextureManager","reuseTextures","textureDataCache","Map","WebGLInferenceHandler","onGraphInitialized","initializers","getValues","isInitializer","tensorId","getTextureData","setTextureData","textureData","clearActiveTextures","td","releaseTexture","WEBGL_OP_RESOLVE_RULES","artifact","getArtifact","createProgramInfo","setArtifact","runData","createRunData","outputTextureData","createTextureLayoutFromShape","createTextureData","createTextureDataFromLayout","createTextureDataFromLayoutBindTensor","usage","JSON","stringify","createTextureFromLayout","createTextureDataFromTexture","readTexture","getOrCreateTextureLayout","prefs","computeTextureWH","isFloat32DownloadSupported","uint8TD","WebGLUint8Encode","runInternal","readUint8TextureAsFloat","outputLayout","inputLayouts","samplers","shaderSource","hasMain","encoder","getEncoder","allocateTexture","inputTextureDatas","uniformData","WebGLUnaryOp","glslAbs","glslAcos","binaryOps","WebGLBinaryOp","glslAdd","glslAnd","glslAsin","glslAtan","WebGLAveragePool","WebGLBatchNormalization","glslCeil","WebGLClip","WebGLConcat","WebGLConv","glslCos","glslDiv","WebGLDropout","glslEqual","WebGLElu","glslExp","WebGLFlatten","glslFloor","WebGLGather","WebGLGemm","WebGLGlobalAveragePool","WebGLGlobalMaxPool","glslGreater","glslIdentity","WebGLImageScaler","WebGLInstanceNormalization","WebGLLeakyRelu","glslLess","glslLog","WebGLMatMul","WebGLMaxPool","glslMul","glslNeg","glslNot","glslOr","WebGLPad","glslPow","glslPRelu","reduceOps","WebGLReduceLogSum","WebGLReduceMax","WebGLReduceMean","WebGLReduceMin","WebGLReduceProd","WebGLReduceSum","WebGLReduceSumSquare","glslRelu","glslSigmoid","glslSin","WebGLSliceV10","WebGLSlice","WebGLSoftmax","WebGLSplit","outputs","glslSqrt","WebGLSqueeze","glslSub","WebGLSum","glslTan","glslTanh","WebGLTile","WebGLTranspose","WebGLUpsample","WebGLUnsqueeze","glslXor","handler","inputTDs","outputTD","glslFunc","outputRank","aBcast","bBcast","body","ValueBased","fname","glslBuiltinBinary","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","fetchDataFromCorrectTextureMethod","getValueFromArrayIndexMethod","variables","arrayLength","sizeInConcatAxis","previousSum","numberOfTensors","codeLines","arrayRank","readSize","artifacts","programInfos","createProgramInfos","runDatas","createRunDatas","xshape","kshape","calcOutputShape","im2colProgramInfo","createIm2ColProgramInfo","createDotProductProgramInfo","kTD","newKernelData","prepKernelForDotProduct","runtDataIm2Col","draw","gl","sharedDim","sharedDimReadSize","sharedDimOffsetLocation","uniformLocations","find","blend","enable","BLEND","checkError","blendEquation","FUNC_ADD","blendFunc","uniform1i","disable","im2colDims","calcIm2ColDims","breakAxis","im2colLayout","bLayout","adjustedKernelShape","kLayout","initValue","isBlendSupported","calcSharedDimReadSize","numFeatureMaps","oldRowSize","newRowSize","adjustPads","inputSpatialShape","outChannels","dilatedKernelShape","outputSpatialShape","preferredBatchSize","calcBlockSize","toExponential","Elu","indexDataShape","indexCopyOps","aShape","bShape","oShape","createGetBiasMethod","pi","createMeanAndVarianceProgramInfo","xLayout","outputUnpackedShape","createComputOutputProgramInfo","scaleLayout","meanAndVarianceLayout","meanAndVarianceProgramInfo","scaleTD","bTD","LeakyRelu","alayout","getPadFunction","inputLayout","block","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","GeneratePoolingCode","createMaxPoolProgramInfo","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","sh","phStart","phEnd","dimH","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","arrayName","iRank","idxCopy","ops","getOps","WebGLGenericReduce","idxZero","sliceOps","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","textureWidth","textureHeight","createComputScaleProgramInfo","xlayout","createComputeMaxProgramInfo","computeMaxProgramInfo","computeScaleProgramInfo","count","getProgramCount","results","rundata","Split","sumLine","tileOps","getOutputShape","inputShapes","getAdjustedPerm","unpackedOutputShape","getPermFunctionBody","getPositionalFunction","Positional","reverseFunc","glslBuiltinUnary","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","repo","attributesBound","buildArtifact","program","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","doDraw","vertexShader","deleteShader","deleteProgram","preprocessor","GlslPreprocessor","fragScript","preprocess","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","bindTexture","uniform1fv","uniform1f","uniform1iv","uniformHandle","bindTextureToUniform","getAttribLocation","sampler","getUniformLocation","variable","reference","libs","glslLibRoutineDependencyGraph","glslRegistry","lib","libName","routinesInLib","getFunctions","routine","currentNode","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","getImports","script","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","uniformLines","INLINE_FUNC_DEF_REGEX","inlineDefs","tokens","regexString","regex","declLine","newBody","paramRedecLine","replacement","EncodingGlslLib","FragColorGlslLib","VecGlslLib","ShapeUtilsGlslLib","CoordsGlslLib","offsetToCoords","coordsToOffset","toVec","valueFrom","getCustomTypes","yScale","stridesBlock","funcName","getValueFromSingle","varName","encodeFloat32","decodeFloat32","encodeUint8","endianness","isLittleEndian","decodeUint8","setFragColor","getColorAsFloat","bcastIndex","bcastMatmulIndex","incrementIndices","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","assignmentBlock","wsize","hsize","totalSize","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","internalFormat","textureType","updateTexture","toTextureData","toTensorData","deleteTexture","createNewWebGLContext","canvas","createElement","createCanvas","ca","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","getContext","WebGLContext","webgl2","isContextLost","DEPTH_TEST","STENCIL_TEST","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","SCISSOR_TEST","CULL_FACE","cullFace","BACK","frameBufferBound","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","allocate","readPixels","RGBA","isFramebufferReady","getActiveTexture","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","DataEncoders","RedFloat32DataEncoder","isRenderFloat32Supported","RGBAFloatDataEncoder","textureHalfFloatExtension","HALF_FLOAT_OES","Uint8DataEncoder","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","createDefaultGeometry","geometry","bufferData","STATIC_DRAW","fb","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","textureFloatExtension","RGBA32F","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","R32F","RED","textureSize","ALPHA","UNSIGNED_BYTE","TensorImpl","InferenceSession","InferenceSessionImpl","Session","loadModel","Blob","URL","createObjectURL","inputFeed","modelInputFeed","convertedOutput","tensorUtils","fromInternalTensor","startProfiling","endProfiling","_initialized","backendHint","graphInputTypes","graphInputDims","Backend","sessionHandler","_model","Model","promisify","readFile","arrayBuffer","modelProtoBlob","graphInitializer","transformGraph","load","initializeOps","_executionPlan","ExecutionPlan","_ops","inputTensors","normalizeAndValidateInputs","execute","outputTensors","createOutput","modelInputNames","getInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","getInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","getOutputNames","getNodes","getOwnPropertyDescriptors","descriptors","getOwnPropertyDescriptor","formatRegExp","objects","_","isNull","msg","noDeprecation","warned","throwDeprecation","traceDeprecation","trace","debugEnviron","debugs","opts","seen","stylize","stylizeNoColor","colors","isBoolean","showHidden","_extend","isUndefined","customInspect","stylizeWithColor","formatValue","styleType","style","styles","recurseTimes","isFunction","primitive","simple","isNumber","formatPrimitive","visibleKeys","arrayToHash","getOwnPropertyNames","isError","formatError","isRegExp","isDate","base","braces","toUTCString","formatProperty","formatArray","prev","numLinesEst","reduceToSingleString","desc","ar","re","objectToString","debuglog","NODE_DEBUG","pid","isNullOrUndefined","isSymbol","isPrimitive","months","timestamp","time","getHours","getMinutes","getSeconds","getDate","getMonth","inherits","origin","kCustomPromisifiedSymbol","callbackifyOnRejected","newReason","original","writable","promiseResolve","promiseReject","promise","setPrototypeOf","getPrototypeOf","defineProperties","custom","callbackify","callbackified","maybeCb","rej","ctor","superCtor","super_","TempCtor","backendsCache","tryLoadBackend","backendObj","isBackend","disabled","hint","hints","KernelOp","_starter","resolved","_values","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","thisValue","modelProto","_opsets","_graph","Graph","graphProto","GraphImpl","_from","_to","_nodeProto","Attribute","executeNode","buildGraph","checkIsAcyclic","_allInputIndices","_allInputNames","_allOutputIndices","_allOutputNames","_allData","_nodes","dataIndices","nodesIndices","inputValueNames","currentIndex","Value","nodeProto","pick","Node","dataIndex","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","finalizeGraph","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","_attributes","attr","getValue","getType","defaultValue","getTensor","getStrings","getTensors","valueAndType","INT","TENSOR","FLOATS","INTS","STRINGS","TENSORS","GRAPH","GRAPHS","getValueNoCheck","numberValue","maybeLong","utf8String"],"mappings":"CAAA,SAA2CA,EAAMC,GAChD,GAAsB,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,SACb,GAAqB,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,OACP,CACJ,IAAIK,EAAIL,IACR,IAAI,IAAIM,KAAKD,GAAuB,iBAAZJ,QAAuBA,QAAUF,GAAMO,GAAKD,EAAEC,IAPxE,CASGC,QAAQ,WACX,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUT,QAGnC,IAAIC,EAASM,EAAiBE,GAAY,CACzCJ,EAAGI,EACHC,GAAG,EACHV,QAAS,IAUV,OANAW,EAAQF,GAAUG,KAAKX,EAAOD,QAASC,EAAQA,EAAOD,QAASQ,GAG/DP,EAAOS,GAAI,EAGJT,EAAOD,QA0Df,OArDAQ,EAAoBK,EAAIF,EAGxBH,EAAoBM,EAAIP,EAGxBC,EAAoBO,EAAI,SAASf,EAASgB,EAAMC,GAC3CT,EAAoBU,EAAElB,EAASgB,IAClCG,OAAOC,eAAepB,EAASgB,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhET,EAAoBe,EAAI,SAASvB,GACX,oBAAXwB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAepB,EAASwB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAepB,EAAS,aAAc,CAAE0B,OAAO,KAQvDlB,EAAoBmB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQlB,EAAoBkB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAvB,EAAoBe,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOlB,EAAoBO,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRtB,EAAoB0B,EAAI,SAASjC,GAChC,IAAIgB,EAAShB,GAAUA,EAAO4B,WAC7B,WAAwB,OAAO5B,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAO,EAAoBO,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRT,EAAoBU,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG5B,EAAoB+B,EAAI,GAIjB/B,EAAoBA,EAAoBgC,EAAI,I,47BC/ErD,eACA,OAGA,OAMA,4BAAiCC,G,IAAkB,wDACjD,IAAKA,GAAUA,EAAOC,SAAWC,EAAmBD,OAClD,OAAO,EAET,IAAK,IAAIrC,EAAI,EAAGA,EAAIoC,EAAOC,OAAQrC,IACjC,IAAKoC,EAAOpC,GAAGuC,MAAQH,EAAOpC,GAAGuC,KAAKF,SAAWC,EAAmBtC,GAClE,OAAO,EAGX,OAAO,GAGT,+BAkDA,OA3CS,EAAAwC,sBAAP,SAA6BC,EAA8BC,GAYzD,MAAO,CAPqB,IAAjBD,EAAMJ,OAAgB,CAAC,EAAGI,EAAM,IAAMA,EAKrB,IAAjBC,EAAML,OAAgB,CAACK,EAAM,GAAI,GAAKA,IAY5C,EAAAC,uBAAP,SAA8BC,EAAuBC,EAAeC,GAEpD,IAAVD,GAEFD,EAAYG,OAAOH,EAAYP,OAAS,EAAG,GAG/B,IAAVS,GACFF,EAAYI,OAUT,EAAAC,gBAAP,SAAuBlD,EAAqBmD,GAC1C,OAAQnD,EAAE,KAAOmD,EAAE,QAAMC,EAAY,CAACpD,EAAE,GAAImD,EAAE,KAElD,EAlDA,GAAa,EAAAE,aAoDb,+BA4KA,OApKS,EAAAC,UAAP,SAAiBC,EAA8BC,EAA8BC,G,WAAA,IAAAA,OAAA,GAE3E,IAAMC,EAAQH,EAAMjB,OACdqB,EAAQH,EAAMlB,OACpB,GAAc,IAAVoB,EACF,OAAOF,EAET,GAAc,IAAVG,EACF,OAAOJ,EAET,IAAMK,EAAQC,KAAKC,IAAIP,EAAMjB,OAAQkB,EAAMlB,QACrCyB,EAAQ,IAAIC,MAAcJ,GAGhC,GAAIH,EAAU,CACZ,GAAIC,EAAQ,GAAKC,EAAQ,EACvB,OAEF,IAAMM,EACFZ,EAAWH,gBAAgB,CAACK,EAAMG,EAAQ,GAAIH,EAAMG,EAAQ,IAAK,CAACF,EAAMG,EAAQ,GAAIH,EAAMG,EAAQ,KACtG,QAAqBP,IAAjBa,EACF,OAEF,IAAuCA,EAAY,GAAlDF,EAAMH,EAAQ,GAAE,KAAEG,EAAMH,EAAQ,GAAE,KAGrC,IAAK,IAAI3D,EAAIwD,EAAW,EAAI,EAAGxD,GAAK2D,EAAO3D,IAAK,CAC9C,IAAMiE,EAAOR,EAAQzD,EAAI,EAAI,EAAIsD,EAAMG,EAAQzD,GACzCkE,EAAOR,EAAQ1D,EAAI,EAAI,EAAIuD,EAAMG,EAAQ1D,GAE/C,GAAIiE,IAASC,GAAQD,EAAO,GAAKC,EAAO,EACtC,OAEFJ,EAAMH,EAAQ3D,GAAK4D,KAAKC,IAAII,EAAMC,GAGpC,OAAOJ,GASF,EAAAK,MAAP,SAAaC,EAA2CC,GAItD,IAAMC,EAAkB,IAAIP,MAAMM,EAAchC,QAEhD,OADAkC,EAAcC,UAAUJ,EAAoBC,EAAeC,GACpDA,GAUF,EAAAE,UAAP,SACIJ,EAA2CC,EAAsCC,GAKnF,IADA,IAAMG,EAAYL,EAAmB/B,OAASgC,EAAchC,OACnDrC,EAAI,EAAGA,EAAIqE,EAAchC,OAAQrC,IACxCsE,EAAgBtE,GAAKoE,EAAmBK,EAAYzE,GAAKqE,EAAcrE,IAYpE,EAAA0E,KAAP,SACI3E,EAAWmD,EAAWyB,EAA+DC,EACrFC,GACF,IAAMjC,EAAc2B,EAAclB,UAAUtD,EAAEwC,KAAMW,EAAEX,MAEtD,GAAIK,EAAa,CACf,GAAIgC,IAAYE,EAAUC,SAASnC,EAAa7C,EAAEwC,MAEhD,OAGF,IAAMyC,EAAOF,EAAUE,KAAKpC,GACtBnC,EAAImE,EAAU7E,EAAI,IAAI,EAAAkF,OAAOrC,EAAaiC,GAAc9E,EAAEmF,MAGhE,GAA2B,IAAvBtC,EAAYP,OACd5B,EAAE0E,IAAI,GAAIR,EAAG5E,EAAEkB,IAAI,IAAKiC,EAAEjC,IAAI,UAI3B,CACH,IAAMmE,EAAgB,IAAIrB,MAAcnB,EAAYP,QAC9CgD,EAAmB,IAAItB,MAAMhE,EAAEwC,KAAKF,QACpCiD,EAAmB,IAAIvB,MAAMb,EAAEX,KAAKF,QACtCkD,EAAsB,EACtBC,EAAsB,EACtBC,GAAY,EACZC,GAAY,EACM,IAAlB3F,EAAEwC,KAAKF,SACTkD,EAAOxF,EAAEkB,IAAI,IACbwE,GAAY,GAEQ,IAAlBvC,EAAEX,KAAKF,SACTmD,EAAOtC,EAAEjC,IAAI,IACbyE,GAAY,GAGd,IADA,IAAIC,OAAI,EACC3F,EAAI,EAAGA,EAAIgF,EAAMhF,IAAK,CAE7B2F,EAAO3F,EACP,IAAK,IAAI4F,EAAIhD,EAAYP,OAAS,EAAGuD,GAAK,EAAGA,IAC3CR,EAAcQ,GAAKD,EAAO/C,EAAYgD,GACtCD,EAAO/B,KAAKiC,MAAMF,EAAO/C,EAAYgD,IAGlCH,IAEHlB,EAAcC,UAAUY,EAAerF,EAAEwC,KAAM8C,GAC/CE,EAAOxF,EAAEkB,IAAIoE,IAEVK,IACHnB,EAAcC,UAAUY,EAAelC,EAAEX,KAAM+C,GAC/CE,EAAOtC,EAAEjC,IAAIqE,IAGf7E,EAAE0E,IAAIC,EAAeT,EAAGY,EAAMC,KAIlC,OAAO/E,IAWJ,EAAAqF,iBAAP,SAAwBC,EAA8BC,GAEpD,IAAMC,EAAYF,EAAM1D,OAClB6D,EAAYF,EAAW3D,OAC7B,GAAI4D,EAAYC,EACd,OAAO,EAET,IAAK,IAAIlG,EAAI,EAAGA,GAAKiG,EAAWjG,IAC9B,GAA6B,IAAzB+F,EAAME,EAAYjG,IAAY+F,EAAME,EAAYjG,KAAOgG,EAAWE,EAAYlG,GAChF,OAAO,EAGX,OAAO,GAEX,EA5KA,GAAa,EAAAuE,gBAgLb,2BACI4B,EAAoCC,EAAoCC,EAAqBC,EAC7FC,GACF,GAAID,EAAc,GAAKA,GAAeF,EAAO/D,OAC3C,MAAM,IAAImE,MAAM,6BAElB,GAAIH,EAAc,GAAKA,GAAeF,EAAO9D,OAC3C,MAAM,IAAImE,MAAM,6BAElB,GAAIF,EAAcC,EAAYH,EAAO/D,OACnC,MAAM,IAAImE,MAAM,kDAElB,GAAIH,EAAcE,EAAYJ,EAAO9D,OACnC,MAAM,IAAImE,MAAM,4CAGlB,IAAK,IAAIC,EAAS,EAAGA,EAASF,EAAWE,IACvCN,EAAOE,EAAcI,GAAUL,EAAOE,EAAcG,IAIxD,+BA+CA,OA3CS,EAAAC,qBAAP,SACIC,EAAkCC,EAAoBC,EAAmCC,EACzFC,GACF,GAAyB,IAArBJ,EAAUtE,QAAsC,IAAtBwE,EAAWxE,OACvC,MAAM,IAAImE,MAAM,8BAGlB,IAAIQ,EACAC,EACAC,EAEAN,GACFI,EAAIL,EAAU,GACdM,EAAIN,EAAU,KAEdK,EAAIL,EAAU,GACdM,EAAIN,EAAU,IAGhB,IAAIQ,GAAQ,EAUZ,GARIL,GACFI,EAAIL,EAAW,GACfM,EAAO,IAEPD,EAAIL,EAAW,GACfM,EAAO,GAGLN,EAAWM,KAAUF,EACvB,MAAM,IAAIT,MAAM,sBAGlB,GAAIQ,GAAK,GAAKE,GAAK,GAAKD,GAAK,EAC3B,MAAM,IAAIT,MAAM,2BAGlB,GAAIO,IAAcxC,EAAcuB,iBAAiBiB,EAAW,CAACC,EAAGE,IAC9D,MAAM,IAAIV,MAAM,0CAGlB,MAAO,CAACQ,EAAGE,EAAGD,IAElB,EA/CA,GAAa,EAAAG,WAiDb,+BA+CA,OA9CS,EAAAC,wBAAP,SAA+BC,GAC7B,OAAQA,GACN,KAAK,EAAAC,KAAKC,YAAYC,SAASC,KAC7B,MAAO,OACT,KAAK,EAAAH,KAAKC,YAAYC,SAASE,MAC7B,MAAO,QACT,KAAK,EAAAJ,KAAKC,YAAYC,SAASG,KAC7B,MAAO,OACT,KAAK,EAAAL,KAAKC,YAAYC,SAASI,MAC7B,MAAO,QACT,KAAK,EAAAN,KAAKC,YAAYC,SAASK,OAC7B,MAAO,SACT,KAAK,EAAAP,KAAKC,YAAYC,SAASM,MAC7B,MAAO,QACT,KAAK,EAAAR,KAAKC,YAAYC,SAASO,OAC7B,MAAO,SACT,KAAK,EAAAT,KAAKC,YAAYC,SAASQ,MAC7B,MAAO,UACT,KAAK,EAAAV,KAAKC,YAAYC,SAASS,OAC7B,MAAO,UACT,KAAK,EAAAX,KAAKC,YAAYC,SAASU,OAC7B,MAAO,SAIT,KAAK,EAAAZ,KAAKC,YAAYC,SAASW,MAC7B,MAAO,QACT,KAAK,EAAAb,KAAKC,YAAYC,SAASY,OAC7B,MAAO,SAET,QACE,MAAM,IAAI7B,MAAM,0BAA0B,EAAAe,KAAKC,YAAYC,SAASH,MAInE,EAAAgB,oBAAP,SAA2B/F,GAEzB,OAAOA,EAAKgG,KAAI,SAAA7H,GAAK,iBAAK8H,OAAO9H,GAAKA,EAAE+H,WAAa/H,MAGhD,EAAAgI,yBAAP,SAAgCC,GAC9B,MAAO,CACLC,WAAYC,EAAUxB,wBAAwBsB,EAAUG,UACxD/C,MAAO,CAACxD,KAAMsG,EAAUP,oBAAoBK,EAAU5C,MAAOgD,IAAKR,KAAI,SAAA7H,GAAK,OAAAA,EAAEsI,gBAGnF,EA/CA,GAAa,EAAAH,YAiDb,+BAIA,OAHS,EAAAI,aAAP,SAAoBpH,GAClB,OAAO,UAAK2G,OAAO3G,GAAKA,EAAE4G,WAAa5G,GAE3C,EAJA,GAAa,EAAAqH,WAMb,+BA4UA,OA3US,EAAAlE,KAAP,SAAYzC,GACV,OAAOuC,EAAUqE,0BAA0B5G,EAAM,EAAGA,EAAKF,SAIpD,EAAA+G,kBAAP,SAAyB7G,EAA6B8G,GACpD,GAAIA,EAAO,GAAKA,EAAO9G,EAAKF,OAC1B,MAAM,IAAImE,MAAM,wBAAwB6C,EAAI,wCAAwC9G,EAAKF,OAAM,gBAEjG,OAAOyC,EAAUqE,0BAA0B5G,EAAM8G,EAAM9G,EAAKF,SAIvD,EAAAiH,gBAAP,SAAuB/G,EAA6B8G,GAClD,GAAIA,EAAO,GAAKA,EAAO9G,EAAKF,OAC1B,MAAM,IAAImE,MAAM,wBAAwB6C,EAAI,sCAAsC9G,EAAKF,OAAM,gBAE/F,OAAOyC,EAAUqE,0BAA0B5G,EAAM,EAAG8G,IAG/C,EAAAF,0BAAP,SAAiC5G,EAA6BgH,EAAeC,GAE3E,IADA,IAAIxE,EAAO,EACFhF,EAAIuJ,EAAOvJ,EAAIwJ,EAAKxJ,IAAK,CAGhC,GAAIuC,EAAKvC,IAAM,EACb,MAAM,IAAIwG,MAEN,sHAENxB,GAAQzC,EAAKvC,GAEf,OAAOgF,GAGF,EAAAyE,eAAP,SAAsBlH,GACpB,IAAMmH,EAAOnH,EAAKF,OAClB,GAAa,IAATqH,EACF,MAAO,GACF,GAAa,IAATA,EACT,MAAO,CAAC,GAEV,IAAMC,EAAU,IAAI5F,MAAM2F,GAC1BC,EAAQD,EAAO,GAAK,EACpBC,EAAQD,EAAO,GAAKnH,EAAKmH,EAAO,GAChC,IAAK,IAAI1J,EAAI0J,EAAO,EAAG1J,GAAK,IAAKA,EAC/B2J,EAAQ3J,GAAK2J,EAAQ3J,EAAI,GAAKuC,EAAKvC,EAAI,GAEzC,OAAO2J,GAGF,EAAAC,UAAP,SAAiBrH,GAEf,OADaA,EAAKsH,QACNC,WAGP,EAAAC,gBAAP,SAAuBC,EAAgCL,EAAgCN,QACxElG,IAATkG,IACFA,EAAOW,EAAQ3H,QAGjB,IADA,IAAIoE,EAAS,EACJzG,EAAI,EAAGA,EAAIqJ,IAAQrJ,EAC1ByG,GAAUkD,EAAQ3J,GAAKgK,EAAQhK,GAEjC,OAAOyG,GAGF,EAAAwD,gBAAP,SAAuBxD,EAAgBkD,GACrC,IAAMD,EAAOC,EAAQtH,OACrB,GAAa,IAATqH,EACF,MAAO,GACF,GAAa,IAATA,EACT,MAAO,CAACjD,EAASkD,EAAQ,IAG3B,IADA,IAAMK,EAAoB,IAAIjG,MAAM4F,EAAQtH,QACnCrC,EAAI,EAAGA,EAAIgK,EAAQ3H,OAAS,IAAKrC,EACxCgK,EAAQhK,GAAK4D,KAAKiC,MAAMY,EAASkD,EAAQ3J,IACzCyG,GAAUuD,EAAQhK,GAAK2J,EAAQ3J,GAGjC,OADAgK,EAAQA,EAAQ3H,OAAS,GAAKoE,EACvBuD,GAMF,EAAAE,cAAP,SAAqBb,EAAcc,GACjC,GAAId,GAAQc,GAAcd,GAAQc,EAChC,MAAM,IAAI3D,MAAM,wCAElB,OAAO6C,EAAO,EAAIA,EAAOc,EAAad,GAGjC,EAAAe,cAAP,SAAqBC,EAA6BF,GAAlD,WACE,OAAOE,EAAK9B,KAAI,SAAA+B,GAAK,SAAKJ,cAAcI,EAAGH,OAWtC,EAAAI,eAAP,SAAsBpG,EAAiB5B,EAA6BiI,GAClE,GAAoB,IAAhBjI,EAAKF,QAAiC,IAAjB8B,EAAM9B,OAC7B,MAAM,IAAImE,MAAM,oDAElB,QAA0BrD,IAAtBqH,EACFA,EAAoBjI,EAAKF,YAEzB,GAAImI,GAAqB,GAAKA,EAAoBjI,EAAKF,OACrD,MAAM,IAAImE,MAAM,kCAIpB,IAAK,IAAIiE,EAAID,EAAoB,EAAGC,GAAK,IACvCtG,EAAMsG,OACFtG,EAAMsG,GAAKlI,EAAKkI,OAFwBA,EAK5CtG,EAAMsG,GAAK,GAgBR,EAAAC,sBAAP,SACIC,EACAC,GAEF,GAA0B,IAAtBA,EAAWvI,OAAc,CAC3B,GAA4B,IAAxBsI,EAAatI,QAAiD,IAAjCyC,EAAUE,KAAK2F,GAC9C,MAAO,GAEP,MAAM,IAAInE,MAAM,qCAQpB,IAJA,IAAMqE,EAAQD,EAAWvI,OACnByI,EAAe,IAAI/G,MAAc8G,GACnCE,GAAoB,EACpBC,EAAgB,EACXhL,EAAI,EAAGA,EAAI6K,EAAO7K,IAAK,CAC9B,GAAI4K,EAAW5K,IAAM,EACnB,MAAM,IAAIwG,MAAM,qDAElB,IAAuB,IAAnBoE,EAAW5K,GAAW,CACxB,IAA0B,IAAtB+K,EACF,MAAM,IAAIvE,MAAM,kDAElBuE,EAAmB/K,MACd,CACL,GAAsB,IAAlB4K,EAAW5K,GAAU,CACvB,GAAIA,GAAK2K,EAAatI,OACpB,MAAM,IAAImE,MAAM,gFAElBsE,EAAa9K,GAAK2K,EAAa3K,QAE/B8K,EAAa9K,GAAK4K,EAAW5K,GAE/BgL,GAAiBF,EAAa9K,IAIlC,IAAMiL,EAAgBnG,EAAUE,KAAK2F,GACrC,IAA0B,IAAtBI,EAAyB,CAC3B,GAAIE,EAAgBD,GAAkB,EACpC,MAAM,IAAIxE,MAAM,6EACZmE,EAAY,oBAAoBC,EAAU,KAEhDE,EAAaC,GAAoBE,EAAgBD,OAIjD,GAAIA,IAAkBC,EACpB,MAAM,IAAIzE,MAAM,2DAGpB,OAAOsE,GASF,EAAAI,gBAAP,SAAuBnL,EAA0BoL,GAC/C,OAAIA,EACKA,EAAK5C,KAAI,SAAC6C,GAAM,OAAArL,EAAEqL,MAElBrL,EAAE8J,QAAQC,WASd,EAAAuB,SAAP,SAAgB9I,EAA6B+I,GAC3C,IAAM5B,EAAOnH,EAAKF,OAClB,OAAOE,EAAKgG,KAAI,SAAC6C,EAAGpL,GAAM,OAAAoL,EAAIE,EAAItL,GAAKsL,EAAItL,EAAI0J,OAQ1C,EAAA3E,SAAP,SAAgBwG,EAA+BC,GAC7C,OAAID,EAAOlJ,SAAWmJ,EAAOnJ,QAGtBkJ,EAAOE,OAAM,SAACL,EAAGpL,GAAM,OAAAoL,IAAMI,EAAOxL,OAOtC,EAAA0L,wBAAP,SAA+BnJ,G,QAC7B,GAAIA,EAAKF,OAAS,EAChB,MAAM,IAAIsJ,UAAU,mDAEtB,IAAI3G,EAAO,E,IACX,IAAgB,QAAAzC,GAAI,8BAAE,CAAjB,IAAMV,EAAC,QACV,IAAK+J,OAAOC,UAAUhK,GACpB,MAAM,IAAI8J,UAAU,kBAAkB9J,EAAC,sBAEzC,GAAIA,EAAI,GAAKA,EAAI,WACf,MAAM,IAAI8J,UAAU,yBAAyB9J,EAAC,mBAEhDmD,GAAQnD,G,iGAEV,OAAOmD,GAQF,EAAA8G,aAAP,SAAoBvJ,EAA6B8G,GAC3CA,EAAO,IACTA,GAAQ9G,EAAKF,QAEf,IAAM0J,EAAQxJ,EAAKyJ,QAAO,SAAC1B,EAAG2B,GAAM,OAAA3B,EAAI2B,IAAG,GACrCC,EAAQ3J,EAAKsH,MAAMR,GAAM2C,QAAO,SAAC1B,EAAG2B,GAAM,OAAA3B,EAAI2B,IAAG,GAGvD,MAFmB,CAACF,EAAQG,EAAOA,IAU9B,EAAAC,aAAP,SAAoB5J,EAA6B8H,GAC/C,IAAM+B,EAAa,IAAIrI,MAGvBsG,EAAOvF,EAAUsF,cAAcC,EAAM9H,EAAKF,QAE1C,IAAK,IAAIrC,EAAI,EAAGA,EAAIuC,EAAKF,OAAQrC,IAAK,CACpC,IAAMqM,EAAgBhC,EAAKiC,QAAQtM,IAAM,EACzC,GAAIqM,GAA6B,IAAZ9J,EAAKvC,GACxB,MAAM,IAAIwG,MAAM,6CAGG,IAAhB6D,EAAKhI,QAAgBE,EAAKvC,GAAK,GAAOqK,EAAKhI,OAAS,IAAMgK,IAC7DD,EAAWG,KAAKhK,EAAKvC,IAIzB,OAAOoM,GAQF,EAAAI,eAAP,SAAsBjK,EAA6B8H,GACjD,IAAM+B,EAAa,IAAIrI,MAAcxB,EAAKF,OAASgI,EAAKhI,QAGxD+J,EAAWK,KAAK,GAGhB,IAAK,IAAIzM,EAAI,EAAGA,EAAIqK,EAAKhI,OAAQrC,IAAK,CACpC,IAAMqJ,EAAOvE,EAAUoF,cAAcG,EAAKrK,GAAIuC,EAAKF,QACnD,GAAIgH,GAAQ+C,EAAW/J,OACrB,MAAM,IAAImE,MAAM,mCAElB,GAAyB,IAArB4F,EAAW/C,GACb,MAAM,IAAI7C,MAAM,+BAGlB4F,EAAW/C,GAAQ,EAIrB,IAAIqD,EAAoB,EACxB,IAAS1M,EAAI,EAAGA,EAAIoM,EAAW/J,OAAQrC,IACf,IAAlBoM,EAAWpM,KACboM,EAAWpM,GAAKuC,EAAKmK,MAMzB,GAAIA,IAAsBnK,EAAKF,OAC7B,MAAM,IAAImE,MAAM,qDAGlB,OAAO4F,GAEX,EA5UA,GAAa,EAAAtH,YA+Ub,+BAwFA,OAtFS,EAAA6H,IAAP,SACIxG,EAAoCC,EAAoCC,EAAqBC,EAC7FC,GACF,GAAID,EAAc,GAAKA,GAAeF,EAAO/D,OAC3C,MAAM,IAAImE,MAAM,6BAElB,GAAIH,EAAc,GAAKA,GAAeF,EAAO9D,OAC3C,MAAM,IAAImE,MAAM,6BAElB,GAAIF,EAAcC,EAAYH,EAAO/D,OACnC,MAAM,IAAImE,MAAM,kDAElB,GAAIH,EAAcE,EAAYJ,EAAO9D,OACnC,MAAM,IAAImE,MAAM,4CAGlB,IAAK,IAAIC,EAAS,EAAGA,EAASF,EAAWE,IACvCN,EAAOE,EAAcI,IAAW7C,KAAKgJ,IAAIxG,EAAOE,EAAcG,GAAS,IAKpE,EAAAoG,KAAP,SACI1G,EAAoCC,EAAoCC,EAAqBC,EAC7FC,EAAmBuG,GACrB,GAAIxG,EAAc,GAAKA,GAAeF,EAAO/D,OAC3C,MAAM,IAAImE,MAAM,6BAElB,GAAIH,EAAc,GAAKA,GAAeF,EAAO9D,OAC3C,MAAM,IAAImE,MAAM,6BAElB,GAAIF,EAAcC,EAAYH,EAAO/D,OACnC,MAAM,IAAImE,MAAM,kDAElB,GAAIH,EAAcE,EAAYJ,EAAO9D,OACnC,MAAM,IAAImE,MAAM,4CAGlB,IAAK,IAAIC,EAAS,EAAGA,EAASF,EAAWE,IACvCN,EAAOE,EAAcI,IAAYqG,EAAQ1G,EAAOE,EAAcG,IAK3D,EAAAsG,KAAP,SACI5G,EAAoCC,EAAoCC,EAAqBC,EAC7FC,EAAmBrD,GACrB,GAAIoD,EAAc,GAAKA,GAAeF,EAAO/D,OAC3C,MAAM,IAAImE,MAAM,6BAElB,GAAIH,EAAc,GAAKA,GAAeF,EAAO9D,OAC3C,MAAM,IAAImE,MAAM,6BAElB,GAAIF,EAAcC,EAAYH,EAAO/D,OACnC,MAAM,IAAImE,MAAM,kDAElB,GAAIH,EAAcE,EAAYJ,EAAO9D,OACnC,MAAM,IAAImE,MAAM,4CAGlB,IAAK,IAAIC,EAAS,EAAGA,EAASF,EAAWE,IACvCN,EAAOE,EAAcI,GAAU7C,KAAKgJ,IAAIxG,EAAOE,EAAcG,GAASvD,IAKnE,EAAA8J,IAAP,SACI7G,EAAoCC,EAAoCC,EAAqBC,EAC7FC,GACF,GAAID,EAAc,GAAKA,GAAeF,EAAO/D,OAC3C,MAAM,IAAImE,MAAM,6BAElB,GAAIH,EAAc,GAAKA,GAAeF,EAAO9D,OAC3C,MAAM,IAAImE,MAAM,6BAElB,GAAIF,EAAcC,EAAYH,EAAO/D,OACnC,MAAM,IAAImE,MAAM,kDAElB,GAAIH,EAAcE,EAAYJ,EAAO9D,OACnC,MAAM,IAAImE,MAAM,4CAGlB,IAAK,IAAIC,EAAS,EAAGA,EAASF,EAAWE,IACvCN,EAAOE,EAAcI,GAAWL,EAAOE,EAAcG,GAAUN,EAAOE,EAAcI,IAG1F,EAxFA,GAAa,EAAAwG,WA0Fb,+BAsCA,OA/BS,EAAAC,WAAP,SAAkB3K,EAA6B8G,EAAc8D,EAAiBC,GAE5E,GAAqB,IAAjBD,EAAM9K,OAAc,CACtB,IAAK+K,EACH,MAAM,IAAI5G,MAAM,8EAElB6G,EAAUC,eAAe/K,EAAK8G,GAAO+D,EAAYD,GAKnD,IAFA,IAAMI,EAAqB,GACrBC,EAAU,CAAC,GACRxN,EAAI,EAAGA,EAAImN,EAAM9K,SAAUrC,EAAG,CAC3B,IAANA,GACFwN,EAAQjB,KAAKiB,EAAQxN,EAAI,GAAKmN,EAAMnN,EAAI,IAE1C,IAAM+F,EAAQxD,EAAKsH,QACnB9D,EAAMsD,GAAQ8D,EAAMnN,GACpBuN,EAAOhB,KAAKxG,GAEd,MAAO,CAACwH,EAAQC,IAGX,EAAAF,eAAP,SAAsBG,EAA8BL,EAAoBD,GAEtE,GAAIM,EAAuBL,GAAe,EACxC,MAAM,IAAI5G,MAAM,4CAElB,IAAK,IAAIxG,EAAI,EAAGA,EAAIoN,IAAcpN,EAChCmN,EAAMZ,KAAKkB,EAAuBL,IAGxC,EAtCA,GAAa,EAAAC,YAwCb,+BA4FA,OAlFS,EAAAK,WAAP,SACI3N,EAAWsK,EAAgBsD,EAAmBC,EAC9CC,GACF,IAAMtL,EAAOxC,EAAEwC,KAAKsH,MAAM,GAEN,IAAhBQ,EAAKhI,QACPE,EAAKuL,SAAQ,SAACpN,EAAGqN,GAAQ,OAAA1D,EAAKkC,KAAKwB,MAWrC,IARA,IAAM3B,EAAa4B,EAAWC,gBAAgB1L,EAAM8H,GAAM,GAGpDrF,EAAOF,EAAUE,KAAKoH,GACtBH,EAAI,IAAI,EAAAhH,OAAOmH,EAAYrM,EAAEmF,MAC7ByE,EAAU7E,EAAU2E,eAAe2C,GACnC8B,EAAepJ,EAAU2E,eAAelH,GACxC4L,EAAW,IAAIpK,MAAMxB,EAAKF,QACvBrC,EAAI,EAAGA,EAAIgF,EAAMhF,IAAK,CAC7B,IAAMgK,EAAUlF,EAAUmF,gBAAgBjK,EAAG2J,GAE7CpF,EAAcC,UAAUwF,EAASzH,EAAM4L,GACvClC,EAAE9G,IACE6E,EACAgE,EAAWI,iBACPrO,EAAEsO,WAAYhE,EAAM9H,EAAM,EAAGuC,EAAUiF,gBAAgBoE,EAAUD,GAAeN,EAAKC,IAG/F,OAAIF,EACK1B,EAGA,IAAI,EAAAhH,OACP+I,EAAWC,gBAAgB1L,EAAM8H,EAAMsD,GAAW1B,EAAE/G,UAAM/B,OAAWA,EAAW8I,EAAEqC,KAAMrC,EAAEsC,SAe3F,EAAAH,iBAAP,SACII,EAA0BnE,EAAgB9H,EAAgBkM,EAAoBC,EAC9Ed,EAA4BC,GAC9B,IAAIc,EAAM,EACV,GAAIF,GAAcpE,EAAKhI,OACrB,OAAOuL,EAAIY,EAAME,IAInB,IAFA,IAAMrF,EAAOgB,EAAKoE,GACZG,EAAOvF,GAAQ9G,EAAKF,OAAS,EAAIyC,EAAUE,KAAKzC,EAAKsH,MAAMR,EAAO,IAC/DrJ,EAAI,EAAGA,EAAIuC,EAAK8G,GAAOrJ,IAC9B2O,EAAY,IAAN3O,EAAUgO,EAAWI,iBAAiBI,EAAOnE,EAAM9H,EAAMkM,EAAa,EAAGC,EAAKd,EAAKC,GACzEA,EAAIc,EAAKX,EAAWI,iBAAiBI,EAAOnE,EAAM9H,EAAMkM,EAAa,EAAGC,EAAKd,EAAKC,IAClGa,GAAOE,EAET,OAAOD,GAUF,EAAAV,gBAAP,SAAuB1L,EAA6B8H,EAA6BwE,GAE/E,IADA,IAAMzC,EAAa7J,EAAKsH,QACf7J,EAAI,EAAGA,EAAIqK,EAAKhI,OAAQrC,IAE7BoM,EAAW/B,EAAKrK,IADd6O,EACoB,EAEA,EAG1B,OAAOzC,EAAW0C,QAAO,SAAA/F,GAAO,OAAQ,IAARA,MAEpC,EA5FA,GAAa,EAAAiF,aA8Fb,+BA4LA,OAnLS,EAAAe,qBAAP,SACIC,EAA2BC,EAAkCC,EAAuBvF,EACpFwF,GACF,IAAKH,GAAoBE,EAAY7M,SAAW4M,EAAU5M,OAAS,EACjE,MAAM,IAAImE,MAAM,sFAGlB,GAAIwI,EAEF,IAAK,IAAIjG,EAAM,EAAGA,EAAMkG,EAAU5M,OAAS,EAAG0G,IACxCA,GAAOmG,EAAY7M,OACrB6M,EAAY3C,KAAK0C,EAAUlG,EAAM,IAEjCmG,EAAYnG,GAAOkG,EAAUlG,EAAM,GAMzC,IAASA,EAAM,EAAGA,EAAMmG,EAAY7M,OAAQ0G,IAC1C,GAAIA,EAAMY,EAAQtH,QAChB,GAAIsH,EAAQZ,GAAO,EACjB,MAAM,IAAIvC,MAAM,qDAGlBmD,EAAQ4C,KAAK,GAKjB,IAASxD,EAAM,EAAGA,EAA2B,EAArBmG,EAAY7M,OAAY0G,IAC9C,GAAIA,EAAMoG,EAAK9M,QACb,GAAI8M,EAAKpG,GAAO,EACd,MAAM,IAAIvC,MAAM,iDAGlB2I,EAAK5C,KAAK,GAKd,IAASxD,EAAM,EAAGA,EAAMmG,EAAY7M,OAAQ0G,IAAO,CACjD,GAAImG,EAAYnG,IAAQ,EACtB,MAAM,IAAIvC,MAAM,2CAGlB,GAAI2I,EAAKpG,IAAQmG,EAAYnG,IAAQoG,EAAKpG,EAAMmG,EAAY7M,SAAW6M,EAAYnG,GACjF,MAAM,IAAIvC,MAAM,wCAMf,EAAA4I,yBAAP,SACIH,EAAkCtF,EAAmB0F,EAAqBH,EAAuBC,EACjGG,GACF,GAAKA,EAAL,CAIA,GAAIH,EAAK9M,SAAW,GAAK4M,EAAU5M,OAAS,GAC1C,MAAM,IAAImE,MAAM,gEAGlB,GAAImD,EAAQtH,SAAY4M,EAAU5M,OAAS,EACzC,MAAM,IAAImE,MAAM,6DAGlB,GAAI0I,EAAY7M,SAAY4M,EAAU5M,OAAS,EAC7C,MAAM,IAAImE,MAAM,mEAGlB,IAAK,IAAIuC,EAAM,EAAGA,EAAMkG,EAAU5M,OAAS,EAAG0G,IAC5CwG,EAAaC,wBACTP,EAAUlG,EAAM,GAAIY,EAAQZ,GAAMsG,EAAUtG,GAAMmG,EAAYnG,GAAMoG,EAAMpG,EAAKA,EAAMkG,EAAU5M,OAAS,EACxGiN,KAcD,EAAAG,uBAAP,SACIT,EAA2BC,EAAkCtF,EAAmBuF,EAChFC,EAAgBG,GAClB,GAAIL,EAAU5M,QAAU,EACtB,MAAM,IAAImE,MAAM,8CAIlB,IAAM4F,EAAa,CAAC6C,EAAU,GAAIA,EAAU,IAGtCI,EAAY,IAAItL,MAAcmL,EAAY7M,QAAQoK,KAAK,GAI7D,OAFA8C,EAAaG,mBACTV,EAAkBC,EAAW7C,EAAYzC,EAAS0F,EAAWH,EAAaC,EAAMG,GAC7ElD,GAaF,EAAAuD,uBAAP,SACIV,EAAkCW,EAAmCjG,EAAmB0F,EACxFH,EAAuBC,EAAgBG,GACzC,GAAIL,EAAU5M,QAAU,GAAKuN,EAAWvN,QAAU,EAChD,MAAM,IAAImE,MAAM,2DAIlB,IAAM4F,EAAa,CAAC6C,EAAU,GAAIW,EAAW,IAG7C,OADAL,EAAaG,oBAAmB,EAAOT,EAAW7C,EAAYzC,EAAS0F,EAAWH,EAAaC,EAAMG,GAC9FlD,GAMM,EAAAsD,mBAAf,SACIV,EAA2BC,EAAkC7C,EAAsBzC,EACnF0F,EAAkCH,EAAoCC,EAAgBG,GACxF,GAAIN,EACF,IAAK,IAAIjG,EAAM,EAAGA,EAAMkG,EAAU5M,OAAS,EAAG0G,IAC5CqD,EAAWG,KAAK,QAGlB,IAASxD,EAAM,EAAGA,EAAMkG,EAAU5M,OAAS,EAAG0G,IAC5CqD,EAAWG,KAAKgD,EAAaC,wBACzBP,EAAUlG,EAAM,GAAIY,EAAQZ,GAAMsG,EAAUtG,GAAMmG,EAAYnG,GAAMoG,EAAMpG,EAAKA,EAAMkG,EAAU5M,OAAS,EACxGiN,KAOK,EAAAE,wBAAf,SACIK,EAAgBC,EAAgBC,EAAkBC,EAAgBb,EAAgBc,EAClFC,EAAsBZ,GACxB,IAAMa,EAAUJ,GAAYC,EAAS,GAAK,EAC1C,IAAIV,GAAuB,WAAZA,EAoBb,OAAO1L,KAAKiC,OAAQgK,EAASV,EAAKc,GAAgBd,EAAKe,GAAgBC,GAAWL,EAAU,GAnB5F,OAAQR,GACN,IAAK,QAGH,OAFAH,EAAKc,GAAgB,EACrBd,EAAKe,GAAgB,EACdtM,KAAKiC,OAAQgK,EAASM,GAAWL,EAAU,GACpD,IAAK,aACL,IAAK,aACH,GAAiB,IAAbC,EACF,MAAM,IAAIvJ,MAAM,uDAElB,IACM4J,IADoBP,EAASC,EAAS,GAAKA,EACX,GAAKA,EAASE,EAASH,EAG7D,OAFAV,EAAKc,GAA6B,eAAZX,EAA4B1L,KAAKiC,OAAOuK,EAAY,GAAK,GAAKxM,KAAKiC,MAAMuK,EAAY,GAC3GjB,EAAKe,GAAgBE,EAAYjB,EAAKc,GAC/BrM,KAAKiC,OAAQgK,EAASO,EAAYJ,GAAUF,EAAU,GAC/D,QACE,MAAM,IAAItJ,MAAM,8BAM1B,EA5LA,GAAa,EAAA+I,gB,0jDCt6Bb,eACA,OAEA,OAoCA,aAkHE,WAIoBhN,EAIA2C,EAA+BmL,EACvCC,EAA+CC,EAIvChC,QAAA,IAAAA,MAAA,IATA,KAAAhM,OAIA,KAAA2C,OAA+B,KAAAmL,eACvC,KAAAC,oBAA+C,KAAAC,QAIvC,KAAAhC,SAClBiC,KAAKxL,KAAO,EAAAF,UAAU4G,wBAAwBnJ,GAC9C,IAAMyC,EAAOwL,KAAKxL,KACZyL,OAA0BtN,IAAjBkN,QAAoDlN,IAAtBmN,QAA6CnN,IAAVoN,EAEhF,QAAcpN,IAAVoN,GACEA,EAAMlO,SAAW2C,EACnB,MAAM,IAAI0L,WAAW,yCAIzB,GAAa,WAATxL,EAAmB,CACrB,UAAc/B,IAAVoN,GAAyBxM,MAAM4M,QAAQJ,IAAWA,EAAM9E,OAAM,SAAAzL,GAAK,MAAa,iBAANA,MAC5E,MAAM,IAAI2L,UAAU,kCAGlB8E,IACFF,EAAQ,IAAIxM,MAAciB,QAEvB,CACL,QAAc7B,IAAVoN,EAAqB,CACvB,IAAMK,EAAcC,EAAoB3L,GACxC,KAAMqL,aAAiBK,GACrB,MAAM,IAAIjF,UAAU,wBAAwBiF,EAAYjQ,MAI5D,GAAI8P,EAAO,CACT,IAAMK,EAAM,IAAIC,YAAY/L,EAkHpC,SAAgBE,GACd,OAAQA,GACN,IAAK,OACL,IAAK,OACL,IAAK,QACH,OAAO,EACT,IAAK,QACL,IAAK,SACH,OAAO,EACT,IAAK,QACL,IAAK,SACL,IAAK,UACH,OAAO,EACT,IAAK,UACH,OAAO,EACT,QACE,MAAM,IAAIsB,MAAM,qCAAqCtB,IAlIhB8L,CAAO9L,IAC1CsL,KAAKD,MA2Jb,SAAoBU,EAAyB/L,GAC3C,OAAO,IAAK2L,EAAoB3L,GAAzB,CAAgC+L,GA5JpBC,CAAWJ,EAAK5L,KA+GrC,OAvQE,sBAAI,mBAAI,C,IAAR,WACE,QAAmB/B,IAAfqN,KAAKD,MAAqB,CAC5B,IAAMjC,EAAOkC,KAAKH,aAAcG,KAAKjC,QACrC,GAAID,EAAKjM,SAAWmO,KAAKxL,KACvB,MAAM,IAAIwB,MAAM,8FAElBgK,KAAKD,MAAQjC,EAEf,OAAOkC,KAAKD,O,gCAMd,sBAAI,yBAAU,C,IAAd,WACE,GAAkB,WAAdC,KAAKtL,KACP,MAAM,IAAIyG,UAAU,2BAGtB,OAAO6E,KAAKlC,M,gCAOd,sBAAI,0BAAW,C,IAAf,WACE,OAAQkC,KAAKtL,MACX,IAAK,QACL,IAAK,OACL,IAAK,SACL,IAAK,QACL,IAAK,QACL,IAAK,SACL,IAAK,OACH,OAAOsL,KAAKlC,KAEd,QACE,MAAM,IAAI3C,UAAU,gF,gCAO1B,sBAAI,wBAAS,C,IAAb,WACE,OAAQ6E,KAAKtL,MACX,IAAK,UACL,IAAK,UACH,OAAOsL,KAAKlC,KAEd,QACE,MAAM,IAAI3C,UAAU,+C,gCAQ1B,sBAAI,yBAAU,C,IAAd,WACE,GAAkB,WAAd6E,KAAKtL,KACP,OAAOsL,KAAKlC,KAEd,MAAM,IAAI3C,UAAU,uC,gCAMtB,YAAA1K,IAAA,SAAI+I,GACF,OAAOwG,KAAKlC,KAAK,EAAAxJ,UAAUiF,gBAAgBC,EAASwG,KAAK7G,WAM3D,YAAAxE,IAAA,SAAI6E,EAAgC3I,GAClCmP,KAAKlC,KAAK,EAAAxJ,UAAUiF,gBAAgBC,EAASwG,KAAK7G,UAAYtI,GAM1D,YAAA8P,QAAN,W,4GAIqBhO,IAAfqN,KAAKD,MAAL,OACF,EAAAC,KAAa,GAAMA,KAAKF,kBAAmBE,KAAKjC,U,OAAhD,EAAKgC,MAAQ,S,iBAEf,MAAO,CAAP,EAAOC,KAAKD,eAYd,sBAAI,sBAAO,C,IAAX,WAIE,OAHKC,KAAKY,WACRZ,KAAKY,SAAW,EAAAtM,UAAU2E,eAAe+G,KAAKjO,OAEzCiO,KAAKY,U,gCAsDP,EAAAC,UAAP,SAAiBC,GACf,IAAKA,EACH,MAAM,IAAI9K,MAAM,+CAElB,IAAMtB,EAAO,EAAA2D,UAAUxB,wBAAwBiK,EAAYC,UAGrDlQ,EAAQ,IAAI4D,EAFL,EAAA4D,UAAUP,oBAAoBgJ,EAAY/O,MAExB2C,GAE/B,GAAa,WAATA,EAGFoM,EAAYE,WAAY1D,SAAQ,SAAC2D,EAAKzR,GACpC,IAAM8Q,EAAMY,EAAOC,KAAKF,EAAIG,OAAQH,EAAII,WAAYJ,EAAIK,YACxDzQ,EAAMiN,KAAKtO,GAAK8Q,EAAIiB,mBAGjB,GACHT,EAAYU,SAAqD,iBAAnCV,EAAYU,QAAQF,YAClDR,EAAYU,QAAQF,WAAa,EAAG,CAItC,IAAMG,EAAW5Q,EAAMiN,KACjB4D,EACF,IAAIC,SAASb,EAAYU,QAAQJ,OAAQN,EAAYU,QAAQH,WAAYP,EAAYU,QAAQF,YAC3FM,EAkGZ,SAAqBlN,GACnB,OAAQA,GACN,KAAK,EAAAqC,KAAKC,YAAYC,SAASE,MAC/B,KAAK,EAAAJ,KAAKC,YAAYC,SAASC,KAC/B,KAAK,EAAAH,KAAKC,YAAYC,SAASG,KAC7B,OAAO,EACT,KAAK,EAAAL,KAAKC,YAAYC,SAASK,OAC/B,KAAK,EAAAP,KAAKC,YAAYC,SAASI,MAC7B,OAAO,EACT,KAAK,EAAAN,KAAKC,YAAYC,SAASQ,MAC/B,KAAK,EAAAV,KAAKC,YAAYC,SAASM,MAC/B,KAAK,EAAAR,KAAKC,YAAYC,SAASO,OAC7B,OAAO,EACT,KAAK,EAAAT,KAAKC,YAAYC,SAASW,MAC/B,KAAK,EAAAb,KAAKC,YAAYC,SAASS,OAC/B,KAAK,EAAAX,KAAKC,YAAYC,SAASY,OAC7B,OAAO,EACT,QACE,MAAM,IAAI7B,MAAM,qCAAqC,EAAAe,KAAKC,YAAYC,SAASvC,KApH3DmN,CAAYf,EAAYC,UACtC,EAASD,EAAYU,QAAQF,WAAaM,EAEhD,GAAId,EAAYU,QAAQF,WAAaM,GAAgB,EACnD,MAAM,IAAI5L,MAAM,yBAElB,GAAIyL,EAAS5P,SAAW,EACtB,MAAM,IAAImE,MAAM,0BAGlB,IAAK,IAAIxG,EAAI,EAAGA,EAAI,EAAQA,IAAK,CAC/B,IAAM6B,EAAIyQ,EAAUJ,EAAYZ,EAAYC,SAAWvR,EAAIoS,GAC3DH,EAASjS,GAAK6B,OAEX,CAEL,IAAI0Q,OAAK,EACT,OAAQjB,EAAYC,UAClB,KAAK,EAAAhK,KAAKC,YAAYC,SAASQ,MAC7BsK,EAAQjB,EAAYkB,UACpB,MACF,KAAK,EAAAjL,KAAKC,YAAYC,SAASM,MAC/B,KAAK,EAAAR,KAAKC,YAAYC,SAASI,MAC/B,KAAK,EAAAN,KAAKC,YAAYC,SAASK,OAC/B,KAAK,EAAAP,KAAKC,YAAYC,SAASC,KAC/B,KAAK,EAAAH,KAAKC,YAAYC,SAASE,MAC/B,KAAK,EAAAJ,KAAKC,YAAYC,SAASG,KAC7B2K,EAAQjB,EAAYmB,UACpB,MACF,KAAK,EAAAlL,KAAKC,YAAYC,SAASW,MAC7BmK,EAAQjB,EAAYoB,UACpB,MACF,KAAK,EAAAnL,KAAKC,YAAYC,SAASS,OAC7BqK,EAAQjB,EAAYqB,WACpB,MACF,KAAK,EAAApL,KAAKC,YAAYC,SAASO,OAC/B,KAAK,EAAAT,KAAKC,YAAYC,SAASY,OAC7BkK,EAAQjB,EAAYsB,WACpB,MACF,QAEE,MAAM,IAAIpM,MAAM,oBAGpB,GAAI+L,QACF,MAAM,IAAI/L,MAAM,oDAGlB,IAAM8H,EAAOjN,EAAMiN,KACnB,GAAIA,EAAKjM,SAAWkQ,EAAMlQ,OACxB,MAAM,IAAImE,MAAM,yBAGlB,IAASxG,EAAI,EAAGA,EAAIuS,EAAMlQ,OAAQrC,IAAK,CACrC,IAAM6S,EAAUN,EAAMvS,GAClB,UAAKwI,OAAOqK,GACdvE,EAAKtO,GAAKiJ,EAAa4J,EAASvB,EAAYC,UAE5CjD,EAAKtO,GAAK6S,GAKhB,OAAOxR,GAUF,EAAAyR,SAAP,SAAgBxE,EAA2C/L,EAA6B2C,GACtF,OAAO,IAAID,EAAO1C,EAAM2C,OAAM/B,OAAWA,EAAWmL,IAExD,EA3QA,GA2TA,SAASuC,EAAoB3L,GAC3B,OAAQA,GACN,IAAK,OACL,IAAK,QACH,OAAO6N,WACT,IAAK,OACH,OAAOC,UACT,IAAK,QACH,OAAOC,WACT,IAAK,SACH,OAAOC,YACT,IAAK,QACH,OAAOC,WACT,IAAK,SACH,OAAOC,YACT,IAAK,UACH,OAAOC,aACT,IAAK,UACH,OAAOC,aACT,QAEE,MAAM,IAAI9M,MAAM,sBAKtB,SAASyC,EAAajJ,EAASkF,GAE7B,GAAIA,IAAS,EAAAqC,KAAKC,YAAYC,SAASW,OACrC,GAAIpI,EAAEuT,mBAAmB,aAAevT,EAAEwT,UAAU,YAClD,MAAM,IAAI7H,UAAU,8BAEjB,IAAIzG,IAAS,EAAAqC,KAAKC,YAAYC,SAASO,QAAU9C,IAAS,EAAAqC,KAAKC,YAAYC,SAASY,OAKzF,MAAM,IAAIsD,UAAU,oBAAoB,EAAApE,KAAKC,YAAYC,SAASvC,IAJlE,GAAIlF,EAAEuT,mBAAmB,aAAevT,EAAEwT,SAAS,GACjD,MAAM,IAAI7H,UAAU,2BAMxB,OAAO3L,EAAEyI,WAIX,SAAS6J,EAAUmB,EAAgBvO,EAAiC2M,GAClE,OAAQ3M,GACN,KAAK,EAAAqC,KAAKC,YAAYC,SAASG,KAC/B,KAAK,EAAAL,KAAKC,YAAYC,SAASE,MAC7B,OAAO8L,EAAKC,SAAS7B,GACvB,KAAK,EAAAtK,KAAKC,YAAYC,SAASC,KAC7B,OAAO+L,EAAKE,QAAQ9B,GACtB,KAAK,EAAAtK,KAAKC,YAAYC,SAASK,OAC7B,OAAO2L,EAAKG,UAAU/B,GAAY,GACpC,KAAK,EAAAtK,KAAKC,YAAYC,SAASI,MAC7B,OAAO4L,EAAKI,SAAShC,GAAY,GACnC,KAAK,EAAAtK,KAAKC,YAAYC,SAASQ,MAC7B,OAAOwL,EAAKK,WAAWjC,GAAY,GACrC,KAAK,EAAAtK,KAAKC,YAAYC,SAASM,MAC7B,OAAO0L,EAAKM,SAASlC,GAAY,GACnC,KAAK,EAAAtK,KAAKC,YAAYC,SAASO,OAC7B,OAAOyL,EAAKO,UAAUnC,GAAY,GACpC,KAAK,EAAAtK,KAAKC,YAAYC,SAASW,MAC7B,OAAOa,EACH,UAAKgL,SAASR,EAAKO,UAAUnC,GAAY,GAAO4B,EAAKO,UAAUnC,EAAa,GAAG,IAAO,GAAQ3M,GACpG,KAAK,EAAAqC,KAAKC,YAAYC,SAASS,OAC7B,OAAOuL,EAAKS,WAAWrC,GAAY,GACrC,KAAK,EAAAtK,KAAKC,YAAYC,SAASY,OAC7B,OAAOY,EACH,UAAKgL,SAASR,EAAKO,UAAUnC,GAAY,GAAO4B,EAAKO,UAAUnC,EAAa,GAAG,IAAO,GAAO3M,GACnG,QACE,MAAM,IAAIsB,MAAM,sCAAsC,EAAAe,KAAKC,YAAYC,SAASvC,KAjYzE,EAAAD,W,mMC1Bb,IAAMkP,EAAoB,CACxBC,QAAS,GACTC,UAAW,YACXC,cAAe,UACfC,YAAa,UACbC,UAAW,YACXC,OAAQ,eACRC,kBAAmB,IAEfC,EAAoB,CACxBP,QAAS,kBACTC,UAAW,KACXC,cAAe,MACfC,YAAa,KACbC,UAAW,UACXC,OAAQ,cACRC,kBAAmB,yBAGrB,SAAgBE,EAAQR,GACtB,OAAmB,IAAZA,EAAgBD,EAAcQ,EADvC,YAIA,iCAAsCP,GACpC,IAAMS,EAAOD,EAAQR,GACrB,OAAUS,EAAKT,QAAO,yCAEhBS,EAAKR,UAAS,0BACdQ,EAAKR,UAAS,gCAEdQ,EAAKP,cAAa,8IAS1B,iCAAsCF,GACpC,IAAMS,EAAOD,EAAQR,GACrB,OAAUS,EAAKT,QAAO,+FAIlBS,EAAKN,YAAW,yBAChBM,EAAKH,kBAAiB,YAK5B,oCAAyCN,EAAcU,GAErD,MAAO,sCAESA,EAAiB,sFAHpBF,EAAQR,GAMZK,OAAM,wB,uHCAjB,+BAIA,OAHE,YAAAM,IAAA,SAAIC,EAA2BC,EAAiBC,KAGlD,EAJA,GAKA,2BAmBA,OAlBE,YAAAH,IAAA,SAAIC,EAA2BC,EAAiBC,GAC9CC,QAAQJ,IAAOvE,KAAK4E,MAAMJ,GAAS,KAAIE,EAAW,QAAaA,EAAW,QAAa,IAAKD,IAGtF,YAAAG,MAAR,SAAcJ,GACZ,OAAQA,GACN,IAAK,UACH,MAAO,gBACT,IAAK,OACH,MAAO,aACT,IAAK,UACH,MAAO,gBACT,IAAK,QACH,MAAO,gBACT,QACE,MAAM,IAAIxO,MAAM,yBAAyBwO,KAGjD,EAnBA,GAqBMK,EAAiB,CACrBC,QAAS,IACTC,KAAM,IACNC,QAAS,IACTC,MAAO,KAGHC,IAAmB,MAChB,KAAG,IAAIC,EACd,EAAU,QAAG,IAAIC,E,GAEbC,EAAwB,CAC5BC,SAAU,UACVC,gBAAiB,OACjBC,aAAa,EACbC,mBAAmB,GAEjBC,IAAiB,MAC2C,IAAKL,EAAgD,GAMrH,SAASd,EACLoB,EAA8BC,EAAeC,EAAsBC,GACrE,QAAanT,IAATiT,EAEF,OAkB6BlB,EAlBEiB,EAmB1B,CACLb,QAASP,EAAIO,QAAQ1T,KAAK,KAAMsT,GAChCK,KAAMR,EAAIQ,KAAK3T,KAAK,KAAMsT,GAC1BM,QAAST,EAAIS,QAAQ5T,KAAK,KAAMsT,GAChCO,MAAOV,EAAIU,MAAM7T,KAAK,KAAMsT,IAtBvB,QAAa/R,IAATkT,EAETE,EAAYJ,EAAyBC,EAAM,QACtC,GAAoB,iBAATC,QAA8BlT,IAATmT,EAErCC,EAAYJ,EAAyBC,EAAMC,QACtC,GAAoB,iBAATA,QAA8BlT,IAATmT,EAErCC,EAAYJ,EAAyBE,EAAM,EAAGD,OACzC,IAAoB,iBAATC,GAAqC,iBAATC,EAI5C,MAAM,IAAI3K,UAAU,kBAFpB4K,EAAYJ,EAAyBE,EAAMC,EAAMF,GAMrD,IAAiClB,EAYjC,SAASqB,EAAYvB,EAA2BC,EAAiBuB,EAAetB,GAC9E,IAAMuB,EAASP,EAAkBhB,GAAY,KAAOgB,EAAkB,IAClEb,EAAeL,GAAYK,EAAeoB,EAAOV,mBAIjDU,EAAOT,cACTf,GAAa,IAAIyB,MAAOC,cAAa,IAAI1B,GAGvCwB,EAAOR,kBAIXP,EAAoBe,EAAOX,UAAUf,IAAIC,EAAUC,EAASC,KAI9D,SAAUH,GAsBR,SAAgB6B,EAAMH,GACpBP,EAAoB,GAEpB/Q,EAAI,GAAIsR,GAAU,IAEpB,SAAgBtR,EAAI+P,EAAkBuB,GACpC,GAAiB,MAAbvB,EACF0B,EAAMH,OACD,CACL,IAAMI,EAAiBX,EAAkBhB,IAAaW,EACtDK,EAAkBhB,GAAY,CAC5BY,SAAUW,EAAOX,UAAYe,EAAef,SAC5CC,gBAAiBU,EAAOV,iBAAmBc,EAAed,gBAC1DC,iBAAqC7S,IAAvBsT,EAAOT,YAA6Ba,EAAeb,YAAcS,EAAOT,YACtFC,uBAAiD9S,IAA7BsT,EAAOR,kBAAmCY,EAAeZ,kBACfQ,EAAOR,oBAlC3D,EAAAX,QAAhB,SAAwBa,EAAcC,GACpCrB,EAAI,UAAWoB,EAAMC,IAIP,EAAAb,KAAhB,SAAqBY,EAAcC,GACjCrB,EAAI,OAAQoB,EAAMC,IAIJ,EAAAZ,QAAhB,SAAwBW,EAAcC,GACpCrB,EAAI,UAAWoB,EAAMC,IAIP,EAAAX,MAAhB,SAAsBU,EAAcC,GAClCrB,EAAI,QAASoB,EAAMC,IAGL,EAAAQ,MAAK,EAKL,EAAAzR,IAAG,EA3BrB,CAAU4P,MAAG,KA8CA,EAAA+B,OAAiB/B,EAgB9B,iBACE,WACWG,EAAyCvU,EAAqBoW,EAC7DC,GADD,KAAA9B,WAAyC,KAAAvU,OAAqB,KAAAoW,YAC7D,KAAAC,cAKd,OAHE,YAAAxN,IAAA,WACEgH,KAAKwG,YAAYxG,OAErB,EARA,GAUA,EACE,SACW0E,EAAyCvU,EAAqBoW,EAA0BE,GAAxF,KAAA/B,WAAyC,KAAAvU,OAAqB,KAAAoW,YAA0B,KAAAE,WAGrG,aAQE,WAAoBC,EAA0BC,EAAyBC,GA2G/D,KAAAC,UAAW,EASX,KAAAC,cAAgB,EAnHtB9G,KAAK6G,UAAW,EAChB7G,KAAK+G,sBAAuCpU,IAApB+T,EAAgC,IAAQA,EAChE1G,KAAKgH,qBAAqCrU,IAAnBgU,EAA+B,GAAKA,EAC3D3G,KAAKiH,kCAA+DtU,IAAhCiU,EAA4C,IAAOA,EAiH3F,OA5HS,EAAA1V,OAAP,SAAc+U,GACZ,YAAetT,IAAXsT,EACK,IAAIjG,KAEN,IAAIA,KAAKiG,EAAOS,gBAAiBT,EAAOU,eAAgBV,EAAOW,8BAWxE,YAAA7N,MAAA,WACEiH,KAAK6G,UAAW,EAChB7G,KAAKkH,cAAgB,GACrBlH,KAAKmH,WAAa,EAAAC,MAClBpH,KAAK8G,cAAgB,GAIvB,YAAAO,KAAA,WAEE,IADArH,KAAK6G,UAAW,EACT7G,KAAK8G,cAAgB9G,KAAKkH,cAAcrV,OAAQmO,KAAK8G,gBAC1D9G,KAAKsH,YAAYtH,KAAKkH,cAAclH,KAAK8G,iBAQ7C,YAAAS,MAAA,SAAS7C,EAAkCvU,EAAcqX,GACvD,IAAMD,EAAQvH,KAAK6G,SAAW7G,KAAKyH,MAAM/C,EAAUvU,QAAQwC,EACvD+U,GAAY,EAEhB,IACE,IAAM,EAAMF,IAGZ,OAAI,GAA2C,mBAA5B,EAAmBG,MACpCD,GAAY,EACL,IAAIE,SAAW,SAACC,EAASC,GAC7B,EACIH,MACG,SAAA9W,GACEgX,EAAQhX,GACJ0W,GACFA,EAAMvO,SAGV,SAAA+O,GACED,EAAOC,GACHR,GACFA,EAAMvO,aAMf,E,SAGF0O,GAAaH,GAChBA,EAAMvO,QAMZ,YAAAyO,MAAA,SAAM/C,EAAkCvU,GAAxC,WACE,IAAK6P,KAAK6G,SACR,MAAM,IAAI7Q,MAAM,+BAElB,IAAMuQ,EAAY,EAAAa,MAElB,OADApH,KAAKgI,MAAMzB,GACJ,IAAI0B,EAAMvD,EAAUvU,EAAMoW,GAAW,SAAA2B,GAAK,SAAKlP,IAAIkP,OAIpD,YAAAlP,IAAR,SAAYuO,GACV,GAAIvH,KAAKkH,cAAcrV,OAASmO,KAAK+G,iBAAkB,CACrD,IAAMN,EAAU,EAAAW,MAChBpH,KAAKkH,cAAcnL,KAAK,IAAIoM,EAAYZ,EAAM7C,SAAU6C,EAAMpX,KAAMoX,EAAMhB,UAAWE,IACrFzG,KAAKgI,MAAMvB,KAIP,YAAAa,YAAR,SAAoBC,GAClB,EAAAjB,OAAOxB,QACH,YAAYyC,EAAM7C,UACd6C,EAAMd,QAAUc,EAAMhB,WAAW6B,QAAQ,GAAE,gBAAgBb,EAAMpX,KAAI,QAAQoX,EAAMd,QAAQ2B,QAAQ,KAGrG,YAAAJ,MAAR,SAAcK,GACZ,GAAIrI,KAAKkH,cAAcrV,OAASmO,KAAK8G,eAAiB9G,KAAKgH,iBACvDqB,EAAcrI,KAAKmH,YAAcnH,KAAKiH,6BAA8B,CAGtE,IAAK,IAAMqB,EAAkBtI,KAAK8G,cAAe9G,KAAK8G,cAAgBwB,EAAkBtI,KAAKgH,iBACxFhH,KAAK8G,cAAgB9G,KAAKkH,cAAcrV,OACxCmO,KAAK8G,gBACR9G,KAAKsH,YAAYtH,KAAKkH,cAAclH,KAAK8G,gBAG3C9G,KAAKmH,WAAa,EAAAC,QAItB,sBAAI,sBAAO,C,IAAX,WACE,OAAOpH,KAAK6G,U,gCAYhB,EA7HA,GAAa,EAAA0B,WAkIA,EAAAnB,IAA8B,oBAAhBoB,aAA+BA,YAAYpB,IAAO,WAAM,OAAAoB,YAAYpB,OAAQlB,KAAKkB,K,y8BC5X5G,IAWIqB,EACAC,EAIAC,EAhBJ,OACA,YAiBIC,GAAc,EACdC,GAAe,EAOnB,gBAAqBC,EAAoBC,GACvC,GAAIH,EACF,OAAOhB,QAAQC,UAEjB,GAAIgB,EACF,MAAM,IAAI7S,MAAM,wCAIlB,OADA6S,GAAe,EACR,IAAIjB,SAAc,SAACC,EAASC,GAIjC,IAAIkB,EACEC,EAA0B,gBACMtW,IAAhCqW,IAEFE,aAAaF,GACbA,OAA8BrW,IAI5BwW,EAAc,WAClBF,IACApB,IACAgB,GAAe,EACfD,GAAc,GAQVQ,EAAkBC,EAAYC,OAI9BC,EAA4B,IAAI3B,SAAQ,SAACC,EAASC,GACtDkB,EAA8BQ,YAAW,WACvC1B,EAAO,gEACNiB,MAIDD,EAAa,GACf,EAAAxC,OAAOxB,QAAQ,sBAAuB,sBAAsBgE,EAAU,cA6H5E,WAGE,GAAsB,oBAAXrZ,aAA4D,IAA1BA,OAAega,OAC1D,OAAO,EAET,OAAO,EAjICC,IAKF,EAAApD,OAAOrB,MAAM,sBAAuB,0EACpCyD,EAAgB,IALhB,EAAApC,OAAOxB,QACH,sBAAuB,qDAAqDgE,EAAU,YAC1FJ,EAAgBI,KASlB,EAAAxC,OAAOxB,QAAQ,sBAAuB,+DACtC4D,EAAgB,GAGlB,IAAMiB,EAAkB,IAAIpW,MAAqBmV,GACjDD,EAAU,IAAIlV,MAAMmV,GACpBC,EAAoB,IAAIpV,MAAMmV,GAE9B,I,eAASkB,GACP,IAAMC,EAAiB,IAAIjC,SAAc,SAACkC,EAAmBC,GAE3D,IAAMC,EAAS,EAAQ,KAA8DC,UACrFxB,EAAQmB,GAAYI,EACpBrB,EAAkBiB,GAAY,GAC9BI,EAAOE,QAAU,SAAAhC,GACf,EAAA5B,OAAOrB,MAAM,sBAAuB,UAAU2E,EAAQ,SAAS1B,GAC3DU,GAGFmB,KAGJC,EAAOG,UAAY,SAAAjC,GACjB,KAAIA,GAAKA,EAAEpK,MAAQoK,EAAEpK,KAAKpJ,MAUxB,MAAM,IAAIsB,MAAM,oCAThB,GAAoB,iBAAhBkS,EAAEpK,KAAKpJ,KACToV,QACK,IAAoB,UAAhB5B,EAAEpK,KAAKpJ,KAIhB,MAAM,IAAIsB,MAAM,qCAAqCkS,EAAEpK,KAAKpJ,MAH5D,IAAM0V,EAAWlC,EAAEpK,KAAKsM,SACxBzB,EAAkBiB,GAAUS,OAA5B1B,CAAqCT,EAAEpK,KAAKsD,OAAuBgJ,QAS3ET,EAAgBC,GAAYC,GA7BrBD,EAAW,EAAGA,EAAWlB,EAAekB,I,EAAxCA,GAmCThC,QAAQ0C,KAAK,CAAClB,EAAiBG,IAC1B5B,MACG,WAEEC,QAAQ2C,IAAIZ,GACPhC,KAEGwB,GAGA,SAACjB,GACC,EAAA5B,OAAOtB,QACH,sBACA,+FACIkD,GAERQ,EAAgB,EAChBS,UA5FD,SAACqB,GAClBvB,IACAnB,EAAO0C,GACP3B,GAAe,SAkGrB,+B,+CAwCA,OAxCiC,OAExB,EAAA4B,YAAP,WAIE,OAHKC,EAAYC,WACfD,EAAYC,SAAW,IAAID,GAEtBA,EAAYC,UAErB,sBAAW,iBAAY,C,IAAvB,WACE,OAAOjC,G,gCAET,YAAAkC,YAAA,SAAYhB,EAAkBiB,G,IAAsB,wDAClD,IAAKjC,EACH,MAAM,IAAI5S,MAAM,2DAGlB,GAAI4T,EAAW,GAAKA,GAAYlB,EAC9B,MAAM,IAAI1S,MAAM,qBAAqB4T,EAAQ,4BAA4BlB,EAAa,KAGxF,IAAMzS,EAAmB,GACnBzB,EAAOkW,EAAYI,iBAAiB7U,EAAQ8U,GAC5C3J,EAAS,IAAIb,YAAY/L,GAC/BkW,EAAYM,eAAe,IAAIzI,WAAWnB,GAASnL,EAAQ8U,GAE3D,IAAMxE,EAAY8C,EAAYjC,MAG9B,OAFAqB,EAAQmB,GAAUqB,YAAY,CAACvW,KAAM,QAAS8S,KAAMqD,EAAczJ,OAAM,GAAG,CAACA,IAErE,IAAIwG,SAAyB,SAACC,EAASC,GAC5Ca,EAAkBiB,GAAU7N,MAAK,SAACqF,EAAQ8J,GACxCA,EAAKC,gBAAkBD,EAAK3E,UAC5B2E,EAAKE,cAAgBF,EAAKzE,QAC1ByE,EAAK3E,UAAYA,EACjB2E,EAAKzE,QAAU4C,EAAYjC,MAE3BsD,EAAYW,iBAAiB,IAAI9I,WAAWnB,GAASnL,EAAQ8U,GAC7DlD,EAAQqD,UAIhB,EAxCA,CAAiC7B,EAAYqB,aAAhC,EAAAA,e,8HChJA,EAAAY,aACT,CAAC,UAAW,UAAW,QAAS,QAAS,OAAQ,SAAU,SAAU,SAC5D,EAAAC,UAA4C,CAAC,QAAS,QAAS,OAAQ,SAAU,SAAU,SAC3F,EAAAC,YAA8C,CAAC,UAAW,Y,gMCXvE,SAAYC,GACV,+BACA,+BAFF,CAAY,EAAAA,eAAA,EAAAA,aAAY,KAexB,MACE,SAAmBC,EAAgCC,GAAhC,KAAAD,YAAgC,KAAAC,eADxC,EAAAC,cAGb,MACE,SAAmBC,GAAA,KAAAA,WADC,EAAAC,UAOtB,MACE,SAAmBC,EAA4BC,GAA5B,KAAAD,cAA4B,KAAAC,gBADpC,EAAAC,iBAMb,iBAGE,WAAmB9b,EAAc4b,EAAsBC,GAApC,KAAA7b,OAEf6P,KAAKgM,aADHA,GAGkB,GAGlBD,IACF/L,KAAK+L,YAAcA,GAQzB,OALE,YAAAG,cAAA,SAAcC,GACRA,GACFnM,KAAKgM,aAAajQ,KAAKoQ,IAG7B,EAnBA,GAAa,EAAAC,qBAsBb,+BA0DA,OAzDS,EAAAC,mBAAP,SAA0BC,GACxB,IAAKA,GAA0B,IAAjBA,EAAMza,OAClB,MAAO,GAGT,GAAqB,IAAjBya,EAAMza,OACR,OAAOya,EAGT,IAAMC,EAAa,IAAIC,IACjBC,EAAmB,IAAID,IACvBE,EAAS,IAAInZ,MAGnB,OADAyM,KAAK2M,mBAAmBL,EAAOC,EAAYE,EAAkBC,GACtDA,GAGM,EAAAC,mBAAf,SACIC,EAAkCL,EAAyBE,EAC3DC,GACF,IAAK,IAAIld,EAAI,EAAGA,EAAIod,EAAW/a,SAAUrC,EACvCwQ,KAAK6M,YAAYD,EAAWpd,GAAI+c,EAAYE,EAAkBC,IAInD,EAAAG,YAAf,SACI5d,EAA0Bsd,EAAyBE,EAA+BC,GAEpF,GAAKzd,IAAQwd,EAAiBK,IAAI7d,EAAKkB,MAAvC,CAKA,GAAIoc,EAAWO,IAAI7d,EAAKkB,MACtB,MAAM,IAAI6F,MAAM,oFAIlBuW,EAAWQ,IAAI9d,EAAKkB,MAGpB,IAAM6b,EAAe/c,EAAK+c,aAC1B,GAAIA,GAAgBA,EAAana,OAAS,EACxC,IAAK,IAAIrC,EAAI,EAAGA,EAAIwc,EAAana,SAAUrC,EACzCwQ,KAAK6M,YAAYb,EAAaxc,GAAI+c,EAAYE,EAAkBC,GAKpEA,EAAO3Q,KAAK9M,GAGZwd,EAAiBM,IAAI9d,EAAKkB,MAG1Boc,EAAWS,OAAO/d,EAAKkB,QAE3B,EA1DA,GAAa,EAAA8c,+B,8BC3Db,YACA,IAAIC,EAAO/d,EAoOX,SAASge,EAAMC,EAAKC,EAAKC,GACrB,IAAK,IAAIC,EAAOjd,OAAOid,KAAKF,GAAM7d,EAAI,EAAGA,EAAI+d,EAAK1b,SAAUrC,OACnCmD,IAAjBya,EAAIG,EAAK/d,KAAsB8d,IAC/BF,EAAIG,EAAK/d,IAAM6d,EAAIE,EAAK/d,KAChC,OAAO4d,EAoBX,SAASI,EAASrd,GAEd,SAASsd,EAAYC,EAASC,GAE1B,KAAM3N,gBAAgByN,GAClB,OAAO,IAAIA,EAAYC,EAASC,GAKpCrd,OAAOC,eAAeyP,KAAM,UAAW,CAAEvP,IAAK,WAAa,OAAOid,KAG9D1X,MAAM4X,kBACN5X,MAAM4X,kBAAkB5N,KAAMyN,GAE9Bnd,OAAOC,eAAeyP,KAAM,QAAS,CAAEnP,OAAO,IAAImF,OAAQgQ,OAAS,KAEnE2H,GACAR,EAAMnN,KAAM2N,GAWpB,OARCF,EAAYjc,UAAYlB,OAAOY,OAAO8E,MAAMxE,YAAY4O,YAAcqN,EAEvEnd,OAAOC,eAAekd,EAAYjc,UAAW,OAAQ,CAAEf,IAAK,WAAa,OAAON,KAEhFsd,EAAYjc,UAAU+P,SAAW,WAC7B,OAAOvB,KAAK7P,KAAO,KAAO6P,KAAK0N,SAG5BD,EAvRXP,EAAKW,UAAY,EAAQ,IAGzBX,EAAKY,OAAS,EAAQ,IAGtBZ,EAAKa,aAAe,EAAQ,IAG5Bb,EAAKc,MAAQ,EAAQ,IAGrBd,EAAKe,QAAU,EAAQ,IAGvBf,EAAKgB,KAAO,EAAQ,IAGpBhB,EAAKiB,KAAO,EAAQ,IAGpBjB,EAAKkB,SAAW,EAAQ,IAGxBlB,EAAKmB,OAA2B,oBAAX5e,QAA0BA,aACf,IAAX4e,GAA0BA,GACf,oBAAXC,MAA0BA,MACjCtO,KAQdkN,EAAKqB,WAAaje,OAAOke,OAASle,OAAOke,OAAO,IAAiC,GAOjFtB,EAAKuB,YAAcne,OAAOke,OAASle,OAAOke,OAAO,IAAiC,GAQlFtB,EAAKwB,OAASC,QAAQzB,EAAKmB,OAAOO,SAAW1B,EAAKmB,OAAOO,QAAQC,UAAY3B,EAAKmB,OAAOO,QAAQC,SAAS1C,MAQ1Ge,EAAK7R,UAAYD,OAAOC,WAAwC,SAAmBxK,GAC/E,MAAwB,iBAAVA,GAAsBie,SAASje,IAAUuC,KAAKiC,MAAMxE,KAAWA,GAQjFqc,EAAK6B,SAAW,SAAkBle,GAC9B,MAAwB,iBAAVA,GAAsBA,aAAiBme,QAQzD9B,EAAK+B,SAAW,SAAkBpe,GAC9B,OAAOA,GAA0B,iBAAVA,GAW3Bqc,EAAKgC,MAQLhC,EAAKiC,MAAQ,SAAeC,EAAKC,GAC7B,IAAIxe,EAAQue,EAAIC,GAChB,QAAa,MAATxe,IAAiBue,EAAI3d,eAAe4d,MACZ,iBAAVxe,IAAuB0C,MAAM4M,QAAQtP,GAASA,EAAMgB,OAASvB,OAAOid,KAAK1c,GAAOgB,QAAU,IAehHqb,EAAKhM,OAAS,WACV,IACI,IAAIA,EAASgM,EAAKe,QAAQ,UAAU/M,OAEpC,OAAOA,EAAO1P,UAAU8d,UAAYpO,EAAoC,KAC1E,MAAOgH,GAEL,OAAO,MAPD,GAYdgF,EAAKqC,aAAe,KAGpBrC,EAAKsC,oBAAsB,KAO3BtC,EAAKuC,UAAY,SAAmBC,GAEhC,MAA8B,iBAAhBA,EACRxC,EAAKhM,OACDgM,EAAKsC,oBAAoBE,GACzB,IAAIxC,EAAK3Z,MAAMmc,GACnBxC,EAAKhM,OACDgM,EAAKqC,aAAaG,GACI,oBAAfnN,WACHmN,EACA,IAAInN,WAAWmN,IAOjCxC,EAAK3Z,MAA8B,oBAAfgP,WAA6BA,WAAwChP,MAezF2Z,EAAKyC,KAAkCzC,EAAKmB,OAAOuB,SAAsC1C,EAAKmB,OAAOuB,QAAQD,MACtEzC,EAAKmB,OAAOsB,MACvCzC,EAAKe,QAAQ,QAOzBf,EAAK2C,OAAS,mBAOd3C,EAAK4C,QAAU,wBAOf5C,EAAK6C,QAAU,6CAOf7C,EAAK8C,WAAa,SAAoBnf,GAClC,OAAOA,EACDqc,EAAKkB,SAASjN,KAAKtQ,GAAOof,SAC1B/C,EAAKkB,SAAS8B,UASxBhD,EAAKiD,aAAe,SAAsBC,EAAMC,GAC5C,IAAIC,EAAOpD,EAAKkB,SAASmC,SAASH,GAClC,OAAIlD,EAAKyC,KACEzC,EAAKyC,KAAKlM,SAAS6M,EAAKE,GAAIF,EAAKG,GAAIJ,GACzCC,EAAKrY,SAAS0W,QAAQ0B,KAkBjCnD,EAAKC,MAAQA,EAObD,EAAKwD,QAAU,SAAiBzP,GAC5B,OAAOA,EAAI0P,OAAO,GAAGC,cAAgB3P,EAAI4P,UAAU,IA0CvD3D,EAAKM,SAAWA,EAmBhBN,EAAK4D,cAAgBtD,EAAS,iBAoB9BN,EAAK6D,YAAc,SAAkBC,GAEjC,IADA,IAAIC,EAAW,GACNzhB,EAAI,EAAGA,EAAIwhB,EAAWnf,SAAUrC,EACrCyhB,EAASD,EAAWxhB,IAAM,EAO9B,OAAO,WACH,IAAK,IAAI+d,EAAOjd,OAAOid,KAAKvN,MAAOxQ,EAAI+d,EAAK1b,OAAS,EAAGrC,GAAK,IAAKA,EAC9D,GAA0B,IAAtByhB,EAAS1D,EAAK/d,UAA+BmD,IAAlBqN,KAAKuN,EAAK/d,KAAuC,OAAlBwQ,KAAKuN,EAAK/d,IACpE,OAAO+d,EAAK/d,KAiB5B0d,EAAKgE,YAAc,SAAkBF,GAQjC,OAAO,SAAS7gB,GACZ,IAAK,IAAIX,EAAI,EAAGA,EAAIwhB,EAAWnf,SAAUrC,EACjCwhB,EAAWxhB,KAAOW,UACX6P,KAAKgR,EAAWxhB,MAoBvC0d,EAAKiE,cAAgB,CACjBC,MAAOpC,OACPqC,MAAOrC,OACPsC,MAAOtC,OACPuC,MAAM,GAIVrE,EAAKsE,WAAa,WACd,IAAItQ,EAASgM,EAAKhM,OAEbA,GAMLgM,EAAKqC,aAAerO,EAAOC,OAASoB,WAAWpB,MAAQD,EAAOC,MAE1D,SAAqBtQ,EAAO4gB,GACxB,OAAO,IAAIvQ,EAAOrQ,EAAO4gB,IAEjCvE,EAAKsC,oBAAsBtO,EAAOwQ,aAE9B,SAA4Bld,GACxB,OAAO,IAAI0M,EAAO1M,KAbtB0Y,EAAKqC,aAAerC,EAAKsC,oBAAsB,Q,+BC9YvD,IAAImC,EAGJA,EAAI,WACH,OAAO3R,KADJ,GAIJ,IAEC2R,EAAIA,GAAK,IAAIC,SAAS,cAAb,GACR,MAAO1J,GAEc,iBAAXzY,SAAqBkiB,EAAIliB,QAOrCL,EAAOD,QAAUwiB,G,6BChBjB,IAAIE,EAAY,EAAQ,IAGpBC,EAAUD,EAAUE,OAAQC,EAAUH,EAAUI,OAAQC,EAAQL,EAAU3E,KAG1EiF,EAAQN,EAAUO,MAAe,UAAMP,EAAUO,MAAe,QAAI,IAExED,EAAMpb,KAAO,WAOT,IAcQsb,EAAiBC,EAdrBvb,EAAO,GAkwJX,OArvJAA,EAAKwb,SACGF,EAAa,IAAIC,EAAShiB,OAAOY,OAAOmhB,IACrCA,EAAW,GAAK,kBAAoB,EAC3CC,EAAOD,EAAW,GAAK,yBAA2B,EAClDC,EAAOD,EAAW,GAAK,yBAA2B,EAClDC,EAAOD,EAAW,GAAK,wBAA0B,EACjDC,EAAOD,EAAW,GAAK,wBAA0B,EACjDC,EAAOD,EAAW,GAAK,cAAgB,EAChCC,GAGXvb,EAAKyb,eAAiB,WA8BlB,SAASA,EAAe7E,GAMpB,GALA3N,KAAKyS,OAAS,GACdzS,KAAK0S,KAAO,GACZ1S,KAAK2S,QAAU,GACf3S,KAAK4S,QAAU,GACf5S,KAAK6S,OAAS,GACVlF,EACA,IAAK,IAAIJ,EAAOjd,OAAOid,KAAKI,GAAane,EAAI,EAAGA,EAAI+d,EAAK1b,SAAUrC,EACpC,MAAvBme,EAAWJ,EAAK/d,MAChBwQ,KAAKuN,EAAK/d,IAAMme,EAAWJ,EAAK/d,KAoqBhD,OA3pBAgjB,EAAehhB,UAAUrB,KAAO,GAQhCqiB,EAAehhB,UAAUshB,YAAc,GAQvCN,EAAehhB,UAAUuhB,UAAY,GAQrCP,EAAehhB,UAAUkD,KAAO,EAQhC8d,EAAehhB,UAAUwhB,EAAI,EAQ7BR,EAAehhB,UAAUhC,EAAI0iB,EAAMvC,KAAOuC,EAAMvC,KAAKlM,SAAS,EAAE,GAAE,GAAS,EAQ3E+O,EAAehhB,UAAUG,EAAIugB,EAAMzC,UAAU,IAQ7C+C,EAAehhB,UAAUV,EAAI,KAQ7B0hB,EAAehhB,UAAUmgB,EAAI,KAQ7Ba,EAAehhB,UAAUihB,OAASP,EAAM3D,WAQxCiE,EAAehhB,UAAUkhB,KAAOR,EAAM3D,WAQtCiE,EAAehhB,UAAUmhB,QAAUT,EAAM3D,WAQzCiE,EAAehhB,UAAUohB,QAAUV,EAAM3D,WAQzCiE,EAAehhB,UAAUqhB,OAASX,EAAM3D,WAUxCiE,EAAethB,OAAS,SAAgByc,GACpC,OAAO,IAAI6E,EAAe7E,IAY9B6E,EAAeS,OAAS,SAAgBvF,EAASwF,GAe7C,GAdKA,IACDA,EAASlB,EAAQ9gB,UACD,MAAhBwc,EAAQvd,MAAgBud,EAAQjc,eAAe,SAC/CyhB,EAAOC,OAA8B,IAAIC,OAAO1F,EAAQvd,MAC3C,MAAbud,EAAQsF,GAAatF,EAAQjc,eAAe,MAC5CyhB,EAAOC,OAA8B,IAAInF,MAAMN,EAAQsF,GAC1C,MAAbtF,EAAQle,GAAake,EAAQjc,eAAe,MAC5CyhB,EAAOC,OAA8B,IAAIE,MAAM3F,EAAQle,GAC1C,MAAbke,EAAQ/b,GAAa+b,EAAQjc,eAAe,MAC5CyhB,EAAOC,OAA8B,IAAI7B,MAAM5D,EAAQ/b,GAC1C,MAAb+b,EAAQ5c,GAAa4c,EAAQjc,eAAe,MAC5C0gB,EAAMpb,KAAKC,YAAYic,OAAOvF,EAAQ5c,EAAGoiB,EAAOC,OAA8B,IAAIG,QAAQC,SAC7E,MAAb7F,EAAQiE,GAAajE,EAAQjc,eAAe,MAC5C0gB,EAAMpb,KAAKyc,WAAWP,OAAOvF,EAAQiE,EAAGuB,EAAOC,OAA8B,IAAIG,QAAQC,SACvE,MAAlB7F,EAAQ+E,QAAkB/E,EAAQ+E,OAAO5gB,OAAQ,CACjDqhB,EAAOC,OAA8B,IAAIG,OACzC,IAAK,IAAI9jB,EAAI,EAAGA,EAAIke,EAAQ+E,OAAO5gB,SAAUrC,EACzC0jB,EAAOlF,MAAMN,EAAQ+E,OAAOjjB,IAChC0jB,EAAOK,SAEX,GAAoB,MAAhB7F,EAAQgF,MAAgBhF,EAAQgF,KAAK7gB,OAAQ,CAC7CqhB,EAAOC,OAA8B,IAAIG,OACzC,IAAS9jB,EAAI,EAAGA,EAAIke,EAAQgF,KAAK7gB,SAAUrC,EACvC0jB,EAAOG,MAAM3F,EAAQgF,KAAKljB,IAC9B0jB,EAAOK,SAEX,GAAuB,MAAnB7F,EAAQiF,SAAmBjF,EAAQiF,QAAQ9gB,OAC3C,IAASrC,EAAI,EAAGA,EAAIke,EAAQiF,QAAQ9gB,SAAUrC,EAC1C0jB,EAAOC,OAA8B,IAAI7B,MAAM5D,EAAQiF,QAAQnjB,IACvE,GAAuB,MAAnBke,EAAQkF,SAAmBlF,EAAQkF,QAAQ/gB,OAC3C,IAASrC,EAAI,EAAGA,EAAIke,EAAQkF,QAAQ/gB,SAAUrC,EAC1C2iB,EAAMpb,KAAKC,YAAYic,OAAOvF,EAAQkF,QAAQpjB,GAAI0jB,EAAOC,OAA+B,IAAIG,QAAQC,SAC5G,GAAsB,MAAlB7F,EAAQmF,QAAkBnF,EAAQmF,OAAOhhB,OACzC,IAASrC,EAAI,EAAGA,EAAIke,EAAQmF,OAAOhhB,SAAUrC,EACzC2iB,EAAMpb,KAAKyc,WAAWP,OAAOvF,EAAQmF,OAAOrjB,GAAI0jB,EAAOC,OAA+B,IAAIG,QAAQC,SAO1G,OANyB,MAArB7F,EAAQqF,WAAqBrF,EAAQjc,eAAe,cACpDyhB,EAAOC,OAA+B,KAAKC,OAAO1F,EAAQqF,WAC1C,MAAhBrF,EAAQhZ,MAAgBgZ,EAAQjc,eAAe,SAC/CyhB,EAAOC,OAA+B,KAAKM,MAAM/F,EAAQhZ,MAClC,MAAvBgZ,EAAQoF,aAAuBpF,EAAQjc,eAAe,gBACtDyhB,EAAOC,OAA+B,KAAKC,OAAO1F,EAAQoF,aACvDI,GAYXV,EAAekB,gBAAkB,SAAyBhG,EAASwF,GAC/D,OAAOlT,KAAKiT,OAAOvF,EAASwF,GAAQK,UAcxCf,EAAemB,OAAS,SAAgBC,EAAQ/hB,GACtC+hB,aAAkB9B,IACpB8B,EAAS9B,EAAQ5gB,OAAO0iB,IAE5B,IADA,IAAI5a,OAAiBrG,IAAXd,EAAuB+hB,EAAOC,IAAMD,EAAO1V,IAAMrM,EAAQ6b,EAAU,IAAIyE,EAAMpb,KAAKyb,eACrFoB,EAAO1V,IAAMlF,GAAK,CACrB,IAAI8a,EAAMF,EAAOT,SACjB,OAAQW,IAAQ,GAChB,KAAK,EACDpG,EAAQvd,KAAOyjB,EAAOR,SACtB,MACJ,KAAK,GACD1F,EAAQoF,YAAcc,EAAOR,SAC7B,MACJ,KAAK,GACD1F,EAAQqF,UAAYa,EAAOR,SAC3B,MACJ,KAAK,GACD1F,EAAQhZ,KAAOkf,EAAOH,QACtB,MACJ,KAAK,EACD/F,EAAQsF,EAAIY,EAAO5F,QACnB,MACJ,KAAK,EACDN,EAAQle,EAAIokB,EAAOP,QACnB,MACJ,KAAK,EACD3F,EAAQ/b,EAAIiiB,EAAOtC,QACnB,MACJ,KAAK,EACD5D,EAAQ5c,EAAIqhB,EAAMpb,KAAKC,YAAY2c,OAAOC,EAAQA,EAAOT,UACzD,MACJ,KAAK,EACDzF,EAAQiE,EAAIQ,EAAMpb,KAAKyc,WAAWG,OAAOC,EAAQA,EAAOT,UACxD,MACJ,KAAK,EAGD,GAFMzF,EAAQ+E,QAAU/E,EAAQ+E,OAAO5gB,SACnC6b,EAAQ+E,OAAS,IACH,IAAP,EAANqB,GAED,IADA,IAAIC,EAAOH,EAAOT,SAAWS,EAAO1V,IAC7B0V,EAAO1V,IAAM6V,GAChBrG,EAAQ+E,OAAO1W,KAAK6X,EAAO5F,cAE/BN,EAAQ+E,OAAO1W,KAAK6X,EAAO5F,SAC/B,MACJ,KAAK,EAGD,GAFMN,EAAQgF,MAAQhF,EAAQgF,KAAK7gB,SAC/B6b,EAAQgF,KAAO,IACD,IAAP,EAANoB,GAED,IADIC,EAAOH,EAAOT,SAAWS,EAAO1V,IAC7B0V,EAAO1V,IAAM6V,GAChBrG,EAAQgF,KAAK3W,KAAK6X,EAAOP,cAE7B3F,EAAQgF,KAAK3W,KAAK6X,EAAOP,SAC7B,MACJ,KAAK,EACK3F,EAAQiF,SAAWjF,EAAQiF,QAAQ9gB,SACrC6b,EAAQiF,QAAU,IACtBjF,EAAQiF,QAAQ5W,KAAK6X,EAAOtC,SAC5B,MACJ,KAAK,GACK5D,EAAQkF,SAAWlF,EAAQkF,QAAQ/gB,SACrC6b,EAAQkF,QAAU,IACtBlF,EAAQkF,QAAQ7W,KAAKoW,EAAMpb,KAAKC,YAAY2c,OAAOC,EAAQA,EAAOT,WAClE,MACJ,KAAK,GACKzF,EAAQmF,QAAUnF,EAAQmF,OAAOhhB,SACnC6b,EAAQmF,OAAS,IACrBnF,EAAQmF,OAAO9W,KAAKoW,EAAMpb,KAAKyc,WAAWG,OAAOC,EAAQA,EAAOT,WAChE,MACJ,QACIS,EAAOI,SAAe,EAANF,IAIxB,OAAOpG,GAaX8E,EAAeyB,gBAAkB,SAAyBL,GAGtD,OAFMA,aAAkB9B,IACpB8B,EAAS,IAAI9B,EAAQ8B,IAClB5T,KAAK2T,OAAOC,EAAQA,EAAOT,WAWtCX,EAAe0B,OAAS,SAAgBxG,GACpC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAoB,MAAhBA,EAAQvd,MAAgBud,EAAQjc,eAAe,UAC1CygB,EAAMnD,SAASrB,EAAQvd,MACxB,MAAO,wBACf,GAA2B,MAAvBud,EAAQoF,aAAuBpF,EAAQjc,eAAe,iBACjDygB,EAAMnD,SAASrB,EAAQoF,aACxB,MAAO,+BACf,GAAyB,MAArBpF,EAAQqF,WAAqBrF,EAAQjc,eAAe,eAC/CygB,EAAMnD,SAASrB,EAAQqF,WACxB,MAAO,6BACf,GAAoB,MAAhBrF,EAAQhZ,MAAgBgZ,EAAQjc,eAAe,QAC/C,OAAQic,EAAQhZ,MAChB,QACI,MAAO,4BACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,IAGT,GAAiB,MAAbgZ,EAAQsF,GAAatF,EAAQjc,eAAe,MACnB,iBAAdic,EAAQsF,EACf,MAAO,qBACf,GAAiB,MAAbtF,EAAQle,GAAake,EAAQjc,eAAe,QACvCygB,EAAM7W,UAAUqS,EAAQle,IAAQke,EAAQle,GAAK0iB,EAAM7W,UAAUqS,EAAQle,EAAE2kB,MAAQjC,EAAM7W,UAAUqS,EAAQle,EAAE4kB,OAC1G,MAAO,2BACf,GAAiB,MAAb1G,EAAQ/b,GAAa+b,EAAQjc,eAAe,QACtCic,EAAQ/b,GAAiC,iBAArB+b,EAAQ/b,EAAEE,QAAuBqgB,EAAMnD,SAASrB,EAAQ/b,IAC9E,MAAO,qBACf,GAAiB,MAAb+b,EAAQ5c,GAAa4c,EAAQjc,eAAe,OACxCwT,EAAQkN,EAAMpb,KAAKC,YAAYkd,OAAOxG,EAAQ5c,IAE9C,MAAO,KAAOmU,EAEtB,GAAiB,MAAbyI,EAAQiE,GAAajE,EAAQjc,eAAe,OACxCwT,EAAQkN,EAAMpb,KAAKyc,WAAWU,OAAOxG,EAAQiE,IAE7C,MAAO,KAAO1M,EAEtB,GAAsB,MAAlByI,EAAQ+E,QAAkB/E,EAAQjc,eAAe,UAAW,CAC5D,IAAK8B,MAAM4M,QAAQuN,EAAQ+E,QACvB,MAAO,yBACX,IAAK,IAAIjjB,EAAI,EAAGA,EAAIke,EAAQ+E,OAAO5gB,SAAUrC,EACzC,GAAiC,iBAAtBke,EAAQ+E,OAAOjjB,GACtB,MAAO,4BAEnB,GAAoB,MAAhBke,EAAQgF,MAAgBhF,EAAQjc,eAAe,QAAS,CACxD,IAAK8B,MAAM4M,QAAQuN,EAAQgF,MACvB,MAAO,uBACX,IAASljB,EAAI,EAAGA,EAAIke,EAAQgF,KAAK7gB,SAAUrC,EACvC,KAAK0iB,EAAM7W,UAAUqS,EAAQgF,KAAKljB,KAASke,EAAQgF,KAAKljB,IAAM0iB,EAAM7W,UAAUqS,EAAQgF,KAAKljB,GAAG2kB,MAAQjC,EAAM7W,UAAUqS,EAAQgF,KAAKljB,GAAG4kB,OAClI,MAAO,gCAEnB,GAAuB,MAAnB1G,EAAQiF,SAAmBjF,EAAQjc,eAAe,WAAY,CAC9D,IAAK8B,MAAM4M,QAAQuN,EAAQiF,SACvB,MAAO,0BACX,IAASnjB,EAAI,EAAGA,EAAIke,EAAQiF,QAAQ9gB,SAAUrC,EAC1C,KAAMke,EAAQiF,QAAQnjB,IAA2C,iBAA9Bke,EAAQiF,QAAQnjB,GAAGqC,QAAuBqgB,EAAMnD,SAASrB,EAAQiF,QAAQnjB,KACxG,MAAO,6BAEnB,GAAuB,MAAnBke,EAAQkF,SAAmBlF,EAAQjc,eAAe,WAAY,CAC9D,IAAK8B,MAAM4M,QAAQuN,EAAQkF,SACvB,MAAO,0BACX,IAASpjB,EAAI,EAAGA,EAAIke,EAAQkF,QAAQ/gB,SAAUrC,EAAG,CAE7C,GADIyV,EAAQkN,EAAMpb,KAAKC,YAAYkd,OAAOxG,EAAQkF,QAAQpjB,IAEtD,MAAO,WAAayV,GAGhC,GAAsB,MAAlByI,EAAQmF,QAAkBnF,EAAQjc,eAAe,UAAW,CAC5D,IAAK8B,MAAM4M,QAAQuN,EAAQmF,QACvB,MAAO,yBACX,IAASrjB,EAAI,EAAGA,EAAIke,EAAQmF,OAAOhhB,SAAUrC,EAAG,CAC5C,IAAIyV,EACJ,GADIA,EAAQkN,EAAMpb,KAAKyc,WAAWU,OAAOxG,EAAQmF,OAAOrjB,IAEpD,MAAO,UAAYyV,GAG/B,OAAO,MAWXuN,EAAe6B,WAAa,SAAoB/iB,GAC5C,GAAIA,aAAkB6gB,EAAMpb,KAAKyb,eAC7B,OAAOlhB,EACX,IAAIoc,EAAU,IAAIyE,EAAMpb,KAAKyb,eAO7B,OANmB,MAAflhB,EAAOnB,OACPud,EAAQvd,KAAO6e,OAAO1d,EAAOnB,OACP,MAAtBmB,EAAOwhB,cACPpF,EAAQoF,YAAc9D,OAAO1d,EAAOwhB,cAChB,MAApBxhB,EAAOyhB,YACPrF,EAAQqF,UAAY/D,OAAO1d,EAAOyhB,YAC9BzhB,EAAOoD,MACf,IAAK,YACL,KAAK,EACDgZ,EAAQhZ,KAAO,EACf,MACJ,IAAK,QACL,KAAK,EACDgZ,EAAQhZ,KAAO,EACf,MACJ,IAAK,MACL,KAAK,EACDgZ,EAAQhZ,KAAO,EACf,MACJ,IAAK,SACL,KAAK,EACDgZ,EAAQhZ,KAAO,EACf,MACJ,IAAK,SACL,KAAK,EACDgZ,EAAQhZ,KAAO,EACf,MACJ,IAAK,QACL,KAAK,EACDgZ,EAAQhZ,KAAO,EACf,MACJ,IAAK,SACL,KAAK,EACDgZ,EAAQhZ,KAAO,EACf,MACJ,IAAK,OACL,KAAK,EACDgZ,EAAQhZ,KAAO,EACf,MACJ,IAAK,UACL,KAAK,EACDgZ,EAAQhZ,KAAO,EACf,MACJ,IAAK,UACL,KAAK,EACDgZ,EAAQhZ,KAAO,EACf,MACJ,IAAK,SACL,KAAK,GACDgZ,EAAQhZ,KAAO,GAmBnB,GAhBgB,MAAZpD,EAAO0hB,IACPtF,EAAQsF,EAAI5X,OAAO9J,EAAO0hB,IACd,MAAZ1hB,EAAO9B,IACH0iB,EAAMvC,MACLjC,EAAQle,EAAI0iB,EAAMvC,KAAK2E,UAAUhjB,EAAO9B,IAAI6gB,UAAW,EAC/B,iBAAb/e,EAAO9B,EACnBke,EAAQle,EAAI+kB,SAASjjB,EAAO9B,EAAG,IACN,iBAAb8B,EAAO9B,EACnBke,EAAQle,EAAI8B,EAAO9B,EACM,iBAAb8B,EAAO9B,IACnBke,EAAQle,EAAI,IAAI0iB,EAAM9D,SAAS9c,EAAO9B,EAAE2kB,MAAQ,EAAG7iB,EAAO9B,EAAE4kB,OAAS,GAAGnc,aAChE,MAAZ3G,EAAOK,IACiB,iBAAbL,EAAOK,EACdugB,EAAMpE,OAAO6F,OAAOriB,EAAOK,EAAG+b,EAAQ/b,EAAIugB,EAAMzC,UAAUyC,EAAMpE,OAAOjc,OAAOP,EAAOK,IAAK,GACrFL,EAAOK,EAAEE,SACd6b,EAAQ/b,EAAIL,EAAOK,IACX,MAAZL,EAAOR,EAAW,CAClB,GAAwB,iBAAbQ,EAAOR,EACd,MAAMqK,UAAU,2CACpBuS,EAAQ5c,EAAIqhB,EAAMpb,KAAKC,YAAYqd,WAAW/iB,EAAOR,GAEzD,GAAgB,MAAZQ,EAAOqgB,EAAW,CAClB,GAAwB,iBAAbrgB,EAAOqgB,EACd,MAAMxW,UAAU,2CACpBuS,EAAQiE,EAAIQ,EAAMpb,KAAKyc,WAAWa,WAAW/iB,EAAOqgB,GAExD,GAAIrgB,EAAOmhB,OAAQ,CACf,IAAKlf,MAAM4M,QAAQ7O,EAAOmhB,QACtB,MAAMtX,UAAU,+CACpBuS,EAAQ+E,OAAS,GACjB,IAAK,IAAIjjB,EAAI,EAAGA,EAAI8B,EAAOmhB,OAAO5gB,SAAUrC,EACxCke,EAAQ+E,OAAOjjB,GAAK4L,OAAO9J,EAAOmhB,OAAOjjB,IAEjD,GAAI8B,EAAOohB,KAAM,CACb,IAAKnf,MAAM4M,QAAQ7O,EAAOohB,MACtB,MAAMvX,UAAU,6CACpBuS,EAAQgF,KAAO,GACf,IAASljB,EAAI,EAAGA,EAAI8B,EAAOohB,KAAK7gB,SAAUrC,EAClC0iB,EAAMvC,MACLjC,EAAQgF,KAAKljB,GAAK0iB,EAAMvC,KAAK2E,UAAUhjB,EAAOohB,KAAKljB,KAAK6gB,UAAW,EACrC,iBAAnB/e,EAAOohB,KAAKljB,GACxBke,EAAQgF,KAAKljB,GAAK+kB,SAASjjB,EAAOohB,KAAKljB,GAAI,IACZ,iBAAnB8B,EAAOohB,KAAKljB,GACxBke,EAAQgF,KAAKljB,GAAK8B,EAAOohB,KAAKljB,GACC,iBAAnB8B,EAAOohB,KAAKljB,KACxBke,EAAQgF,KAAKljB,GAAK,IAAI0iB,EAAM9D,SAAS9c,EAAOohB,KAAKljB,GAAG2kB,MAAQ,EAAG7iB,EAAOohB,KAAKljB,GAAG4kB,OAAS,GAAGnc,YAEtG,GAAI3G,EAAOqhB,QAAS,CAChB,IAAKpf,MAAM4M,QAAQ7O,EAAOqhB,SACtB,MAAMxX,UAAU,gDACpBuS,EAAQiF,QAAU,GAClB,IAASnjB,EAAI,EAAGA,EAAI8B,EAAOqhB,QAAQ9gB,SAAUrC,EACR,iBAAtB8B,EAAOqhB,QAAQnjB,GACtB0iB,EAAMpE,OAAO6F,OAAOriB,EAAOqhB,QAAQnjB,GAAIke,EAAQiF,QAAQnjB,GAAK0iB,EAAMzC,UAAUyC,EAAMpE,OAAOjc,OAAOP,EAAOqhB,QAAQnjB,KAAM,GAChH8B,EAAOqhB,QAAQnjB,GAAGqC,SACvB6b,EAAQiF,QAAQnjB,GAAK8B,EAAOqhB,QAAQnjB,IAEhD,GAAI8B,EAAOshB,QAAS,CAChB,IAAKrf,MAAM4M,QAAQ7O,EAAOshB,SACtB,MAAMzX,UAAU,gDACpBuS,EAAQkF,QAAU,GAClB,IAASpjB,EAAI,EAAGA,EAAI8B,EAAOshB,QAAQ/gB,SAAUrC,EAAG,CAC5C,GAAiC,iBAAtB8B,EAAOshB,QAAQpjB,GACtB,MAAM2L,UAAU,iDACpBuS,EAAQkF,QAAQpjB,GAAK2iB,EAAMpb,KAAKC,YAAYqd,WAAW/iB,EAAOshB,QAAQpjB,KAG9E,GAAI8B,EAAOuhB,OAAQ,CACf,IAAKtf,MAAM4M,QAAQ7O,EAAOuhB,QACtB,MAAM1X,UAAU,+CACpBuS,EAAQmF,OAAS,GACjB,IAASrjB,EAAI,EAAGA,EAAI8B,EAAOuhB,OAAOhhB,SAAUrC,EAAG,CAC3C,GAAgC,iBAArB8B,EAAOuhB,OAAOrjB,GACrB,MAAM2L,UAAU,gDACpBuS,EAAQmF,OAAOrjB,GAAK2iB,EAAMpb,KAAKyc,WAAWa,WAAW/iB,EAAOuhB,OAAOrjB,KAG3E,OAAOke,GAYX8E,EAAegC,SAAW,SAAkB9G,EAAS+G,GAC5CA,IACDA,EAAU,IACd,IAAInjB,EAAS,GAQb,IAPImjB,EAAQC,QAAUD,EAAQE,YAC1BrjB,EAAOmhB,OAAS,GAChBnhB,EAAOohB,KAAO,GACdphB,EAAOqhB,QAAU,GACjBrhB,EAAOshB,QAAU,GACjBthB,EAAOuhB,OAAS,IAEhB4B,EAAQE,SAAU,CAGlB,GAFArjB,EAAOnB,KAAO,GACdmB,EAAO0hB,EAAI,EACPd,EAAMvC,KAAM,CACZ,IAAIiF,EAAO,IAAI1C,EAAMvC,KAAK,EAAG,GAAG,GAChCre,EAAO9B,EAAIilB,EAAQrD,QAAUpC,OAAS4F,EAAKrT,WAAakT,EAAQrD,QAAUhW,OAASwZ,EAAK3c,WAAa2c,OAErGtjB,EAAO9B,EAAIilB,EAAQrD,QAAUpC,OAAS,IAAM,EAC5CyF,EAAQnD,QAAUtC,OAClB1d,EAAOK,EAAI,IAEXL,EAAOK,EAAI,GACP8iB,EAAQnD,QAAU/d,QAClBjC,EAAOK,EAAIugB,EAAMzC,UAAUne,EAAOK,KAE1CL,EAAOR,EAAI,KACXQ,EAAOqgB,EAAI,KACXrgB,EAAOyhB,UAAY,GACnBzhB,EAAOoD,KAAO+f,EAAQpD,QAAUrC,OAAS,YAAc,EACvD1d,EAAOwhB,YAAc,GAiBzB,GAfoB,MAAhBpF,EAAQvd,MAAgBud,EAAQjc,eAAe,UAC/CH,EAAOnB,KAAOud,EAAQvd,MACT,MAAbud,EAAQsF,GAAatF,EAAQjc,eAAe,OAC5CH,EAAO0hB,EAAIyB,EAAQlD,OAASzC,SAASpB,EAAQsF,GAAKhE,OAAOtB,EAAQsF,GAAKtF,EAAQsF,GACjE,MAAbtF,EAAQle,GAAake,EAAQjc,eAAe,OACnB,iBAAdic,EAAQle,EACf8B,EAAO9B,EAAIilB,EAAQrD,QAAUpC,OAASA,OAAOtB,EAAQle,GAAKke,EAAQle,EAElE8B,EAAO9B,EAAIilB,EAAQrD,QAAUpC,OAASkD,EAAMvC,KAAKne,UAAU+P,SAASxR,KAAK2d,EAAQle,GAAKilB,EAAQrD,QAAUhW,OAAS,IAAI8W,EAAM9D,SAASV,EAAQle,EAAE2kB,MAAQ,EAAGzG,EAAQle,EAAE4kB,OAAS,GAAGnc,WAAayV,EAAQle,GAC3L,MAAbke,EAAQ/b,GAAa+b,EAAQjc,eAAe,OAC5CH,EAAOK,EAAI8iB,EAAQnD,QAAUtC,OAASkD,EAAMpE,OAAOmF,OAAOvF,EAAQ/b,EAAG,EAAG+b,EAAQ/b,EAAEE,QAAU4iB,EAAQnD,QAAU/d,MAAQA,MAAM/B,UAAU6H,MAAMtJ,KAAK2d,EAAQ/b,GAAK+b,EAAQ/b,GACzJ,MAAb+b,EAAQ5c,GAAa4c,EAAQjc,eAAe,OAC5CH,EAAOR,EAAIqhB,EAAMpb,KAAKC,YAAYwd,SAAS9G,EAAQ5c,EAAG2jB,IACzC,MAAb/G,EAAQiE,GAAajE,EAAQjc,eAAe,OAC5CH,EAAOqgB,EAAIQ,EAAMpb,KAAKyc,WAAWgB,SAAS9G,EAAQiE,EAAG8C,IACrD/G,EAAQ+E,QAAU/E,EAAQ+E,OAAO5gB,OAAQ,CACzCP,EAAOmhB,OAAS,GAChB,IAAK,IAAIrd,EAAI,EAAGA,EAAIsY,EAAQ+E,OAAO5gB,SAAUuD,EACzC9D,EAAOmhB,OAAOrd,GAAKqf,EAAQlD,OAASzC,SAASpB,EAAQ+E,OAAOrd,IAAM4Z,OAAOtB,EAAQ+E,OAAOrd,IAAMsY,EAAQ+E,OAAOrd,GAErH,GAAIsY,EAAQgF,MAAQhF,EAAQgF,KAAK7gB,OAAQ,CACrCP,EAAOohB,KAAO,GACd,IAAStd,EAAI,EAAGA,EAAIsY,EAAQgF,KAAK7gB,SAAUuD,EACR,iBAApBsY,EAAQgF,KAAKtd,GACpB9D,EAAOohB,KAAKtd,GAAKqf,EAAQrD,QAAUpC,OAASA,OAAOtB,EAAQgF,KAAKtd,IAAMsY,EAAQgF,KAAKtd,GAEnF9D,EAAOohB,KAAKtd,GAAKqf,EAAQrD,QAAUpC,OAASkD,EAAMvC,KAAKne,UAAU+P,SAASxR,KAAK2d,EAAQgF,KAAKtd,IAAMqf,EAAQrD,QAAUhW,OAAS,IAAI8W,EAAM9D,SAASV,EAAQgF,KAAKtd,GAAG+e,MAAQ,EAAGzG,EAAQgF,KAAKtd,GAAGgf,OAAS,GAAGnc,WAAayV,EAAQgF,KAAKtd,GAE7O,GAAIsY,EAAQiF,SAAWjF,EAAQiF,QAAQ9gB,OAAQ,CAC3CP,EAAOqhB,QAAU,GACjB,IAASvd,EAAI,EAAGA,EAAIsY,EAAQiF,QAAQ9gB,SAAUuD,EAC1C9D,EAAOqhB,QAAQvd,GAAKqf,EAAQnD,QAAUtC,OAASkD,EAAMpE,OAAOmF,OAAOvF,EAAQiF,QAAQvd,GAAI,EAAGsY,EAAQiF,QAAQvd,GAAGvD,QAAU4iB,EAAQnD,QAAU/d,MAAQA,MAAM/B,UAAU6H,MAAMtJ,KAAK2d,EAAQiF,QAAQvd,IAAMsY,EAAQiF,QAAQvd,GAE1N,GAAIsY,EAAQkF,SAAWlF,EAAQkF,QAAQ/gB,OAAQ,CAC3CP,EAAOshB,QAAU,GACjB,IAASxd,EAAI,EAAGA,EAAIsY,EAAQkF,QAAQ/gB,SAAUuD,EAC1C9D,EAAOshB,QAAQxd,GAAK+c,EAAMpb,KAAKC,YAAYwd,SAAS9G,EAAQkF,QAAQxd,GAAIqf,GAEhF,GAAI/G,EAAQmF,QAAUnF,EAAQmF,OAAOhhB,OAAQ,CACzCP,EAAOuhB,OAAS,GAChB,IAASzd,EAAI,EAAGA,EAAIsY,EAAQmF,OAAOhhB,SAAUuD,EACzC9D,EAAOuhB,OAAOzd,GAAK+c,EAAMpb,KAAKyc,WAAWgB,SAAS9G,EAAQmF,OAAOzd,GAAIqf,GAQ7E,OANyB,MAArB/G,EAAQqF,WAAqBrF,EAAQjc,eAAe,eACpDH,EAAOyhB,UAAYrF,EAAQqF,WACX,MAAhBrF,EAAQhZ,MAAgBgZ,EAAQjc,eAAe,UAC/CH,EAAOoD,KAAO+f,EAAQpD,QAAUrC,OAASmD,EAAMpb,KAAKyb,eAAeqC,cAAcnH,EAAQhZ,MAAQgZ,EAAQhZ,MAClF,MAAvBgZ,EAAQoF,aAAuBpF,EAAQjc,eAAe,iBACtDH,EAAOwhB,YAAcpF,EAAQoF,aAC1BxhB,GAUXkhB,EAAehhB,UAAUsjB,OAAS,WAC9B,OAAO9U,KAAKI,YAAYoU,SAASxU,KAAM6R,EAAU3E,KAAKiE,gBAmB1DqB,EAAeqC,cAAgB,WAC3B,IAAIxC,EAAa,GAAIC,EAAShiB,OAAOY,OAAOmhB,GAY5C,OAXAC,EAAOD,EAAW,GAAK,aAAe,EACtCC,EAAOD,EAAW,GAAK,SAAW,EAClCC,EAAOD,EAAW,GAAK,OAAS,EAChCC,EAAOD,EAAW,GAAK,UAAY,EACnCC,EAAOD,EAAW,GAAK,UAAY,EACnCC,EAAOD,EAAW,GAAK,SAAW,EAClCC,EAAOD,EAAW,GAAK,UAAY,EACnCC,EAAOD,EAAW,GAAK,QAAU,EACjCC,EAAOD,EAAW,GAAK,WAAa,EACpCC,EAAOD,EAAW,GAAK,WAAa,EACpCC,EAAOD,EAAW,IAAM,UAAY,GAC7BC,EAboB,GAgBxBE,EA3sBW,GA8sBtBzb,EAAKge,eAAiB,WAmBlB,SAASA,EAAepH,GACpB,GAAIA,EACA,IAAK,IAAIJ,EAAOjd,OAAOid,KAAKI,GAAane,EAAI,EAAGA,EAAI+d,EAAK1b,SAAUrC,EACpC,MAAvBme,EAAWJ,EAAK/d,MAChBwQ,KAAKuN,EAAK/d,IAAMme,EAAWJ,EAAK/d,KAmNhD,OA1MAulB,EAAevjB,UAAUrB,KAAO,GAQhC4kB,EAAevjB,UAAUkD,KAAO,KAQhCqgB,EAAevjB,UAAUuhB,UAAY,GAUrCgC,EAAe7jB,OAAS,SAAgByc,GACpC,OAAO,IAAIoH,EAAepH,IAY9BoH,EAAe9B,OAAS,SAAgBvF,EAASwF,GAS7C,OARKA,IACDA,EAASlB,EAAQ9gB,UACD,MAAhBwc,EAAQvd,MAAgBud,EAAQjc,eAAe,SAC/CyhB,EAAOC,OAA8B,IAAIC,OAAO1F,EAAQvd,MACxC,MAAhBud,EAAQhZ,MAAgBgZ,EAAQjc,eAAe,SAC/C0gB,EAAMpb,KAAKie,UAAU/B,OAAOvF,EAAQhZ,KAAMwe,EAAOC,OAA8B,IAAIG,QAAQC,SACtE,MAArB7F,EAAQqF,WAAqBrF,EAAQjc,eAAe,cACpDyhB,EAAOC,OAA8B,IAAIC,OAAO1F,EAAQqF,WACrDG,GAYX6B,EAAerB,gBAAkB,SAAyBhG,EAASwF,GAC/D,OAAOlT,KAAKiT,OAAOvF,EAASwF,GAAQK,UAcxCwB,EAAepB,OAAS,SAAgBC,EAAQ/hB,GACtC+hB,aAAkB9B,IACpB8B,EAAS9B,EAAQ5gB,OAAO0iB,IAE5B,IADA,IAAI5a,OAAiBrG,IAAXd,EAAuB+hB,EAAOC,IAAMD,EAAO1V,IAAMrM,EAAQ6b,EAAU,IAAIyE,EAAMpb,KAAKge,eACrFnB,EAAO1V,IAAMlF,GAAK,CACrB,IAAI8a,EAAMF,EAAOT,SACjB,OAAQW,IAAQ,GAChB,KAAK,EACDpG,EAAQvd,KAAOyjB,EAAOR,SACtB,MACJ,KAAK,EACD1F,EAAQhZ,KAAOyd,EAAMpb,KAAKie,UAAUrB,OAAOC,EAAQA,EAAOT,UAC1D,MACJ,KAAK,EACDzF,EAAQqF,UAAYa,EAAOR,SAC3B,MACJ,QACIQ,EAAOI,SAAe,EAANF,IAIxB,OAAOpG,GAaXqH,EAAed,gBAAkB,SAAyBL,GAGtD,OAFMA,aAAkB9B,IACpB8B,EAAS,IAAI9B,EAAQ8B,IAClB5T,KAAK2T,OAAOC,EAAQA,EAAOT,WAWtC4B,EAAeb,OAAS,SAAgBxG,GACpC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAoB,MAAhBA,EAAQvd,MAAgBud,EAAQjc,eAAe,UAC1CygB,EAAMnD,SAASrB,EAAQvd,MACxB,MAAO,wBACf,GAAoB,MAAhBud,EAAQhZ,MAAgBgZ,EAAQjc,eAAe,QAAS,CACxD,IAAIwT,EAAQkN,EAAMpb,KAAKie,UAAUd,OAAOxG,EAAQhZ,MAChD,GAAIuQ,EACA,MAAO,QAAUA,EAEzB,OAAyB,MAArByI,EAAQqF,WAAqBrF,EAAQjc,eAAe,eAC/CygB,EAAMnD,SAASrB,EAAQqF,WACjB,6BACR,MAWXgC,EAAeV,WAAa,SAAoB/iB,GAC5C,GAAIA,aAAkB6gB,EAAMpb,KAAKge,eAC7B,OAAOzjB,EACX,IAAIoc,EAAU,IAAIyE,EAAMpb,KAAKge,eAG7B,GAFmB,MAAfzjB,EAAOnB,OACPud,EAAQvd,KAAO6e,OAAO1d,EAAOnB,OACd,MAAfmB,EAAOoD,KAAc,CACrB,GAA2B,iBAAhBpD,EAAOoD,KACd,MAAMyG,UAAU,8CACpBuS,EAAQhZ,KAAOyd,EAAMpb,KAAKie,UAAUX,WAAW/iB,EAAOoD,MAI1D,OAFwB,MAApBpD,EAAOyhB,YACPrF,EAAQqF,UAAY/D,OAAO1d,EAAOyhB,YAC/BrF,GAYXqH,EAAeP,SAAW,SAAkB9G,EAAS+G,GAC5CA,IACDA,EAAU,IACd,IAAInjB,EAAS,GAYb,OAXImjB,EAAQE,WACRrjB,EAAOnB,KAAO,GACdmB,EAAOoD,KAAO,KACdpD,EAAOyhB,UAAY,IAEH,MAAhBrF,EAAQvd,MAAgBud,EAAQjc,eAAe,UAC/CH,EAAOnB,KAAOud,EAAQvd,MACN,MAAhBud,EAAQhZ,MAAgBgZ,EAAQjc,eAAe,UAC/CH,EAAOoD,KAAOyd,EAAMpb,KAAKie,UAAUR,SAAS9G,EAAQhZ,KAAM+f,IACrC,MAArB/G,EAAQqF,WAAqBrF,EAAQjc,eAAe,eACpDH,EAAOyhB,UAAYrF,EAAQqF,WACxBzhB,GAUXyjB,EAAevjB,UAAUsjB,OAAS,WAC9B,OAAO9U,KAAKI,YAAYoU,SAASxU,KAAM6R,EAAU3E,KAAKiE,gBAGnD4D,EA1OW,GA6OtBhe,EAAKke,UAAY,WAuBb,SAASA,EAAUtH,GAIf,GAHA3N,KAAKhC,MAAQ,GACbgC,KAAKiE,OAAS,GACdjE,KAAK6D,UAAY,GACb8J,EACA,IAAK,IAAIJ,EAAOjd,OAAOid,KAAKI,GAAane,EAAI,EAAGA,EAAI+d,EAAK1b,SAAUrC,EACpC,MAAvBme,EAAWJ,EAAK/d,MAChBwQ,KAAKuN,EAAK/d,IAAMme,EAAWJ,EAAK/d,KAsVhD,OA7UAylB,EAAUzjB,UAAUwM,MAAQkU,EAAM3D,WAQlC0G,EAAUzjB,UAAUyS,OAASiO,EAAM3D,WAQnC0G,EAAUzjB,UAAUrB,KAAO,GAQ3B8kB,EAAUzjB,UAAU0jB,OAAS,GAQ7BD,EAAUzjB,UAAU2jB,OAAS,GAQ7BF,EAAUzjB,UAAUqS,UAAYqO,EAAM3D,WAQtC0G,EAAUzjB,UAAUuhB,UAAY,GAUhCkC,EAAU/jB,OAAS,SAAgByc,GAC/B,OAAO,IAAIsH,EAAUtH,IAYzBsH,EAAUhC,OAAS,SAAgBvF,EAASwF,GAGxC,GAFKA,IACDA,EAASlB,EAAQ9gB,UACA,MAAjBwc,EAAQ1P,OAAiB0P,EAAQ1P,MAAMnM,OACvC,IAAK,IAAIrC,EAAI,EAAGA,EAAIke,EAAQ1P,MAAMnM,SAAUrC,EACxC0jB,EAAOC,OAA8B,IAAIC,OAAO1F,EAAQ1P,MAAMxO,IACtE,GAAsB,MAAlBke,EAAQzJ,QAAkByJ,EAAQzJ,OAAOpS,OACzC,IAASrC,EAAI,EAAGA,EAAIke,EAAQzJ,OAAOpS,SAAUrC,EACzC0jB,EAAOC,OAA8B,IAAIC,OAAO1F,EAAQzJ,OAAOzU,IAKvE,GAJoB,MAAhBke,EAAQvd,MAAgBud,EAAQjc,eAAe,SAC/CyhB,EAAOC,OAA8B,IAAIC,OAAO1F,EAAQvd,MACtC,MAAlBud,EAAQwH,QAAkBxH,EAAQjc,eAAe,WACjDyhB,EAAOC,OAA8B,IAAIC,OAAO1F,EAAQwH,QACnC,MAArBxH,EAAQ7J,WAAqB6J,EAAQ7J,UAAUhS,OAC/C,IAASrC,EAAI,EAAGA,EAAIke,EAAQ7J,UAAUhS,SAAUrC,EAC5C2iB,EAAMpb,KAAKyb,eAAeS,OAAOvF,EAAQ7J,UAAUrU,GAAI0jB,EAAOC,OAA8B,IAAIG,QAAQC,SAKhH,OAJyB,MAArB7F,EAAQqF,WAAqBrF,EAAQjc,eAAe,cACpDyhB,EAAOC,OAA8B,IAAIC,OAAO1F,EAAQqF,WACtC,MAAlBrF,EAAQyH,QAAkBzH,EAAQjc,eAAe,WACjDyhB,EAAOC,OAA8B,IAAIC,OAAO1F,EAAQyH,QACrDjC,GAYX+B,EAAUvB,gBAAkB,SAAyBhG,EAASwF,GAC1D,OAAOlT,KAAKiT,OAAOvF,EAASwF,GAAQK,UAcxC0B,EAAUtB,OAAS,SAAgBC,EAAQ/hB,GACjC+hB,aAAkB9B,IACpB8B,EAAS9B,EAAQ5gB,OAAO0iB,IAE5B,IADA,IAAI5a,OAAiBrG,IAAXd,EAAuB+hB,EAAOC,IAAMD,EAAO1V,IAAMrM,EAAQ6b,EAAU,IAAIyE,EAAMpb,KAAKke,UACrFrB,EAAO1V,IAAMlF,GAAK,CACrB,IAAI8a,EAAMF,EAAOT,SACjB,OAAQW,IAAQ,GAChB,KAAK,EACKpG,EAAQ1P,OAAS0P,EAAQ1P,MAAMnM,SACjC6b,EAAQ1P,MAAQ,IACpB0P,EAAQ1P,MAAMjC,KAAK6X,EAAOR,UAC1B,MACJ,KAAK,EACK1F,EAAQzJ,QAAUyJ,EAAQzJ,OAAOpS,SACnC6b,EAAQzJ,OAAS,IACrByJ,EAAQzJ,OAAOlI,KAAK6X,EAAOR,UAC3B,MACJ,KAAK,EACD1F,EAAQvd,KAAOyjB,EAAOR,SACtB,MACJ,KAAK,EACD1F,EAAQwH,OAAStB,EAAOR,SACxB,MACJ,KAAK,EACD1F,EAAQyH,OAASvB,EAAOR,SACxB,MACJ,KAAK,EACK1F,EAAQ7J,WAAa6J,EAAQ7J,UAAUhS,SACzC6b,EAAQ7J,UAAY,IACxB6J,EAAQ7J,UAAU9H,KAAKoW,EAAMpb,KAAKyb,eAAemB,OAAOC,EAAQA,EAAOT,WACvE,MACJ,KAAK,EACDzF,EAAQqF,UAAYa,EAAOR,SAC3B,MACJ,QACIQ,EAAOI,SAAe,EAANF,IAIxB,OAAOpG,GAaXuH,EAAUhB,gBAAkB,SAAyBL,GAGjD,OAFMA,aAAkB9B,IACpB8B,EAAS,IAAI9B,EAAQ8B,IAClB5T,KAAK2T,OAAOC,EAAQA,EAAOT,WAWtC8B,EAAUf,OAAS,SAAgBxG,GAC/B,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAqB,MAAjBA,EAAQ1P,OAAiB0P,EAAQjc,eAAe,SAAU,CAC1D,IAAK8B,MAAM4M,QAAQuN,EAAQ1P,OACvB,MAAO,wBACX,IAAK,IAAIxO,EAAI,EAAGA,EAAIke,EAAQ1P,MAAMnM,SAAUrC,EACxC,IAAK0iB,EAAMnD,SAASrB,EAAQ1P,MAAMxO,IAC9B,MAAO,2BAEnB,GAAsB,MAAlBke,EAAQzJ,QAAkByJ,EAAQjc,eAAe,UAAW,CAC5D,IAAK8B,MAAM4M,QAAQuN,EAAQzJ,QACvB,MAAO,yBACX,IAASzU,EAAI,EAAGA,EAAIke,EAAQzJ,OAAOpS,SAAUrC,EACzC,IAAK0iB,EAAMnD,SAASrB,EAAQzJ,OAAOzU,IAC/B,MAAO,4BAEnB,GAAoB,MAAhBke,EAAQvd,MAAgBud,EAAQjc,eAAe,UAC1CygB,EAAMnD,SAASrB,EAAQvd,MACxB,MAAO,wBACf,GAAsB,MAAlBud,EAAQwH,QAAkBxH,EAAQjc,eAAe,YAC5CygB,EAAMnD,SAASrB,EAAQwH,QACxB,MAAO,0BACf,GAAsB,MAAlBxH,EAAQyH,QAAkBzH,EAAQjc,eAAe,YAC5CygB,EAAMnD,SAASrB,EAAQyH,QACxB,MAAO,0BACf,GAAyB,MAArBzH,EAAQ7J,WAAqB6J,EAAQjc,eAAe,aAAc,CAClE,IAAK8B,MAAM4M,QAAQuN,EAAQ7J,WACvB,MAAO,4BACX,IAASrU,EAAI,EAAGA,EAAIke,EAAQ7J,UAAUhS,SAAUrC,EAAG,CAC/C,IAAIyV,EAAQkN,EAAMpb,KAAKyb,eAAe0B,OAAOxG,EAAQ7J,UAAUrU,IAC/D,GAAIyV,EACA,MAAO,aAAeA,GAGlC,OAAyB,MAArByI,EAAQqF,WAAqBrF,EAAQjc,eAAe,eAC/CygB,EAAMnD,SAASrB,EAAQqF,WACjB,6BACR,MAWXkC,EAAUZ,WAAa,SAAoB/iB,GACvC,GAAIA,aAAkB6gB,EAAMpb,KAAKke,UAC7B,OAAO3jB,EACX,IAAIoc,EAAU,IAAIyE,EAAMpb,KAAKke,UAC7B,GAAI3jB,EAAO0M,MAAO,CACd,IAAKzK,MAAM4M,QAAQ7O,EAAO0M,OACtB,MAAM7C,UAAU,yCACpBuS,EAAQ1P,MAAQ,GAChB,IAAK,IAAIxO,EAAI,EAAGA,EAAI8B,EAAO0M,MAAMnM,SAAUrC,EACvCke,EAAQ1P,MAAMxO,GAAKwf,OAAO1d,EAAO0M,MAAMxO,IAE/C,GAAI8B,EAAO2S,OAAQ,CACf,IAAK1Q,MAAM4M,QAAQ7O,EAAO2S,QACtB,MAAM9I,UAAU,0CACpBuS,EAAQzJ,OAAS,GACjB,IAASzU,EAAI,EAAGA,EAAI8B,EAAO2S,OAAOpS,SAAUrC,EACxCke,EAAQzJ,OAAOzU,GAAKwf,OAAO1d,EAAO2S,OAAOzU,IAQjD,GANmB,MAAf8B,EAAOnB,OACPud,EAAQvd,KAAO6e,OAAO1d,EAAOnB,OACZ,MAAjBmB,EAAO4jB,SACPxH,EAAQwH,OAASlG,OAAO1d,EAAO4jB,SACd,MAAjB5jB,EAAO6jB,SACPzH,EAAQyH,OAASnG,OAAO1d,EAAO6jB,SAC/B7jB,EAAOuS,UAAW,CAClB,IAAKtQ,MAAM4M,QAAQ7O,EAAOuS,WACtB,MAAM1I,UAAU,6CACpBuS,EAAQ7J,UAAY,GACpB,IAASrU,EAAI,EAAGA,EAAI8B,EAAOuS,UAAUhS,SAAUrC,EAAG,CAC9C,GAAmC,iBAAxB8B,EAAOuS,UAAUrU,GACxB,MAAM2L,UAAU,8CACpBuS,EAAQ7J,UAAUrU,GAAK2iB,EAAMpb,KAAKyb,eAAe6B,WAAW/iB,EAAOuS,UAAUrU,KAKrF,OAFwB,MAApB8B,EAAOyhB,YACPrF,EAAQqF,UAAY/D,OAAO1d,EAAOyhB,YAC/BrF,GAYXuH,EAAUT,SAAW,SAAkB9G,EAAS+G,GACvCA,IACDA,EAAU,IACd,IAAInjB,EAAS,GAYb,IAXImjB,EAAQC,QAAUD,EAAQE,YAC1BrjB,EAAO0M,MAAQ,GACf1M,EAAO2S,OAAS,GAChB3S,EAAOuS,UAAY,IAEnB4Q,EAAQE,WACRrjB,EAAOnB,KAAO,GACdmB,EAAO4jB,OAAS,GAChB5jB,EAAOyhB,UAAY,GACnBzhB,EAAO6jB,OAAS,IAEhBzH,EAAQ1P,OAAS0P,EAAQ1P,MAAMnM,OAAQ,CACvCP,EAAO0M,MAAQ,GACf,IAAK,IAAI5I,EAAI,EAAGA,EAAIsY,EAAQ1P,MAAMnM,SAAUuD,EACxC9D,EAAO0M,MAAM5I,GAAKsY,EAAQ1P,MAAM5I,GAExC,GAAIsY,EAAQzJ,QAAUyJ,EAAQzJ,OAAOpS,OAAQ,CACzCP,EAAO2S,OAAS,GAChB,IAAS7O,EAAI,EAAGA,EAAIsY,EAAQzJ,OAAOpS,SAAUuD,EACzC9D,EAAO2S,OAAO7O,GAAKsY,EAAQzJ,OAAO7O,GAM1C,GAJoB,MAAhBsY,EAAQvd,MAAgBud,EAAQjc,eAAe,UAC/CH,EAAOnB,KAAOud,EAAQvd,MACJ,MAAlBud,EAAQwH,QAAkBxH,EAAQjc,eAAe,YACjDH,EAAO4jB,OAASxH,EAAQwH,QACxBxH,EAAQ7J,WAAa6J,EAAQ7J,UAAUhS,OAAQ,CAC/CP,EAAOuS,UAAY,GACnB,IAASzO,EAAI,EAAGA,EAAIsY,EAAQ7J,UAAUhS,SAAUuD,EAC5C9D,EAAOuS,UAAUzO,GAAK+c,EAAMpb,KAAKyb,eAAegC,SAAS9G,EAAQ7J,UAAUzO,GAAIqf,GAMvF,OAJyB,MAArB/G,EAAQqF,WAAqBrF,EAAQjc,eAAe,eACpDH,EAAOyhB,UAAYrF,EAAQqF,WACT,MAAlBrF,EAAQyH,QAAkBzH,EAAQjc,eAAe,YACjDH,EAAO6jB,OAASzH,EAAQyH,QACrB7jB,GAUX2jB,EAAUzjB,UAAUsjB,OAAS,WACzB,OAAO9U,KAAKI,YAAYoU,SAASxU,KAAM6R,EAAU3E,KAAKiE,gBAGnD8D,EApXM,GAuXjBle,EAAKqe,WAAa,WAyBd,SAASA,EAAWzH,GAGhB,GAFA3N,KAAKqV,YAAc,GACnBrV,KAAKsV,cAAgB,GACjB3H,EACA,IAAK,IAAIJ,EAAOjd,OAAOid,KAAKI,GAAane,EAAI,EAAGA,EAAI+d,EAAK1b,SAAUrC,EACpC,MAAvBme,EAAWJ,EAAK/d,MAChBwQ,KAAKuN,EAAK/d,IAAMme,EAAWJ,EAAK/d,KAuZhD,OA9YA4lB,EAAW5jB,UAAU+jB,UAAYrD,EAAMvC,KAAOuC,EAAMvC,KAAKlM,SAAS,EAAE,GAAE,GAAS,EAQ/E2R,EAAW5jB,UAAU6jB,YAAcnD,EAAM3D,WAQzC6G,EAAW5jB,UAAUgkB,aAAe,GAQpCJ,EAAW5jB,UAAUikB,gBAAkB,GAQvCL,EAAW5jB,UAAU2jB,OAAS,GAQ9BC,EAAW5jB,UAAUkkB,aAAexD,EAAMvC,KAAOuC,EAAMvC,KAAKlM,SAAS,EAAE,GAAE,GAAS,EAQlF2R,EAAW5jB,UAAUuhB,UAAY,GAQjCqC,EAAW5jB,UAAUmkB,MAAQ,KAQ7BP,EAAW5jB,UAAU8jB,cAAgBpD,EAAM3D,WAU3C6G,EAAWlkB,OAAS,SAAgByc,GAChC,OAAO,IAAIyH,EAAWzH,IAY1ByH,EAAWnC,OAAS,SAAgBvF,EAASwF,GAiBzC,GAhBKA,IACDA,EAASlB,EAAQ9gB,UACI,MAArBwc,EAAQ6H,WAAqB7H,EAAQjc,eAAe,cACpDyhB,EAAOC,OAA8B,GAAGE,MAAM3F,EAAQ6H,WAC9B,MAAxB7H,EAAQ8H,cAAwB9H,EAAQjc,eAAe,iBACvDyhB,EAAOC,OAA8B,IAAIC,OAAO1F,EAAQ8H,cAC7B,MAA3B9H,EAAQ+H,iBAA2B/H,EAAQjc,eAAe,oBAC1DyhB,EAAOC,OAA8B,IAAIC,OAAO1F,EAAQ+H,iBACtC,MAAlB/H,EAAQyH,QAAkBzH,EAAQjc,eAAe,WACjDyhB,EAAOC,OAA8B,IAAIC,OAAO1F,EAAQyH,QAChC,MAAxBzH,EAAQgI,cAAwBhI,EAAQjc,eAAe,iBACvDyhB,EAAOC,OAA8B,IAAIE,MAAM3F,EAAQgI,cAClC,MAArBhI,EAAQqF,WAAqBrF,EAAQjc,eAAe,cACpDyhB,EAAOC,OAA8B,IAAIC,OAAO1F,EAAQqF,WACvC,MAAjBrF,EAAQiI,OAAiBjI,EAAQjc,eAAe,UAChD0gB,EAAMpb,KAAKyc,WAAWP,OAAOvF,EAAQiI,MAAOzC,EAAOC,OAA8B,IAAIG,QAAQC,SACtE,MAAvB7F,EAAQ2H,aAAuB3H,EAAQ2H,YAAYxjB,OACnD,IAAK,IAAIrC,EAAI,EAAGA,EAAIke,EAAQ2H,YAAYxjB,SAAUrC,EAC9C2iB,EAAMpb,KAAK6e,mBAAmB3C,OAAOvF,EAAQ2H,YAAY7lB,GAAI0jB,EAAOC,OAA8B,IAAIG,QAAQC,SACtH,GAA6B,MAAzB7F,EAAQ4H,eAAyB5H,EAAQ4H,cAAczjB,OACvD,IAASrC,EAAI,EAAGA,EAAIke,EAAQ4H,cAAczjB,SAAUrC,EAChD2iB,EAAMpb,KAAK8e,uBAAuB5C,OAAOvF,EAAQ4H,cAAc9lB,GAAI0jB,EAAOC,OAA+B,KAAKG,QAAQC,SAC9H,OAAOL,GAYXkC,EAAW1B,gBAAkB,SAAyBhG,EAASwF,GAC3D,OAAOlT,KAAKiT,OAAOvF,EAASwF,GAAQK,UAcxC6B,EAAWzB,OAAS,SAAgBC,EAAQ/hB,GAClC+hB,aAAkB9B,IACpB8B,EAAS9B,EAAQ5gB,OAAO0iB,IAE5B,IADA,IAAI5a,OAAiBrG,IAAXd,EAAuB+hB,EAAOC,IAAMD,EAAO1V,IAAMrM,EAAQ6b,EAAU,IAAIyE,EAAMpb,KAAKqe,WACrFxB,EAAO1V,IAAMlF,GAAK,CACrB,IAAI8a,EAAMF,EAAOT,SACjB,OAAQW,IAAQ,GAChB,KAAK,EACDpG,EAAQ6H,UAAY3B,EAAOP,QAC3B,MACJ,KAAK,EACK3F,EAAQ2H,aAAe3H,EAAQ2H,YAAYxjB,SAC7C6b,EAAQ2H,YAAc,IAC1B3H,EAAQ2H,YAAYtZ,KAAKoW,EAAMpb,KAAK6e,mBAAmBjC,OAAOC,EAAQA,EAAOT,WAC7E,MACJ,KAAK,EACDzF,EAAQ8H,aAAe5B,EAAOR,SAC9B,MACJ,KAAK,EACD1F,EAAQ+H,gBAAkB7B,EAAOR,SACjC,MACJ,KAAK,EACD1F,EAAQyH,OAASvB,EAAOR,SACxB,MACJ,KAAK,EACD1F,EAAQgI,aAAe9B,EAAOP,QAC9B,MACJ,KAAK,EACD3F,EAAQqF,UAAYa,EAAOR,SAC3B,MACJ,KAAK,EACD1F,EAAQiI,MAAQxD,EAAMpb,KAAKyc,WAAWG,OAAOC,EAAQA,EAAOT,UAC5D,MACJ,KAAK,GACKzF,EAAQ4H,eAAiB5H,EAAQ4H,cAAczjB,SACjD6b,EAAQ4H,cAAgB,IAC5B5H,EAAQ4H,cAAcvZ,KAAKoW,EAAMpb,KAAK8e,uBAAuBlC,OAAOC,EAAQA,EAAOT,WACnF,MACJ,QACIS,EAAOI,SAAe,EAANF,IAIxB,OAAOpG,GAaX0H,EAAWnB,gBAAkB,SAAyBL,GAGlD,OAFMA,aAAkB9B,IACpB8B,EAAS,IAAI9B,EAAQ8B,IAClB5T,KAAK2T,OAAOC,EAAQA,EAAOT,WAWtCiC,EAAWlB,OAAS,SAAgBxG,GAChC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQ6H,WAAqB7H,EAAQjc,eAAe,gBAC/CygB,EAAM7W,UAAUqS,EAAQ6H,YAAgB7H,EAAQ6H,WAAarD,EAAM7W,UAAUqS,EAAQ6H,UAAUpB,MAAQjC,EAAM7W,UAAUqS,EAAQ6H,UAAUnB,OAC1I,MAAO,mCACf,GAA2B,MAAvB1G,EAAQ2H,aAAuB3H,EAAQjc,eAAe,eAAgB,CACtE,IAAK8B,MAAM4M,QAAQuN,EAAQ2H,aACvB,MAAO,8BACX,IAAK,IAAI7lB,EAAI,EAAGA,EAAIke,EAAQ2H,YAAYxjB,SAAUrC,EAAG,CAEjD,GADIyV,EAAQkN,EAAMpb,KAAK6e,mBAAmB1B,OAAOxG,EAAQ2H,YAAY7lB,IAEjE,MAAO,eAAiByV,GAGpC,GAA4B,MAAxByI,EAAQ8H,cAAwB9H,EAAQjc,eAAe,kBAClDygB,EAAMnD,SAASrB,EAAQ8H,cACxB,MAAO,gCACf,GAA+B,MAA3B9H,EAAQ+H,iBAA2B/H,EAAQjc,eAAe,qBACrDygB,EAAMnD,SAASrB,EAAQ+H,iBACxB,MAAO,mCACf,GAAsB,MAAlB/H,EAAQyH,QAAkBzH,EAAQjc,eAAe,YAC5CygB,EAAMnD,SAASrB,EAAQyH,QACxB,MAAO,0BACf,GAA4B,MAAxBzH,EAAQgI,cAAwBhI,EAAQjc,eAAe,mBAClDygB,EAAM7W,UAAUqS,EAAQgI,eAAmBhI,EAAQgI,cAAgBxD,EAAM7W,UAAUqS,EAAQgI,aAAavB,MAAQjC,EAAM7W,UAAUqS,EAAQgI,aAAatB,OACtJ,MAAO,sCACf,GAAyB,MAArB1G,EAAQqF,WAAqBrF,EAAQjc,eAAe,eAC/CygB,EAAMnD,SAASrB,EAAQqF,WACxB,MAAO,6BACf,GAAqB,MAAjBrF,EAAQiI,OAAiBjI,EAAQjc,eAAe,WAC5CwT,EAAQkN,EAAMpb,KAAKyc,WAAWU,OAAOxG,EAAQiI,QAE7C,MAAO,SAAW1Q,EAE1B,GAA6B,MAAzByI,EAAQ4H,eAAyB5H,EAAQjc,eAAe,iBAAkB,CAC1E,IAAK8B,MAAM4M,QAAQuN,EAAQ4H,eACvB,MAAO,gCACX,IAAS9lB,EAAI,EAAGA,EAAIke,EAAQ4H,cAAczjB,SAAUrC,EAAG,CACnD,IAAIyV,EACJ,GADIA,EAAQkN,EAAMpb,KAAK8e,uBAAuB3B,OAAOxG,EAAQ4H,cAAc9lB,IAEvE,MAAO,iBAAmByV,GAGtC,OAAO,MAWXmQ,EAAWf,WAAa,SAAoB/iB,GACxC,GAAIA,aAAkB6gB,EAAMpb,KAAKqe,WAC7B,OAAO9jB,EACX,IAAIoc,EAAU,IAAIyE,EAAMpb,KAAKqe,WAU7B,GATwB,MAApB9jB,EAAOikB,YACHrD,EAAMvC,MACLjC,EAAQ6H,UAAYrD,EAAMvC,KAAK2E,UAAUhjB,EAAOikB,YAAYlF,UAAW,EACvC,iBAArB/e,EAAOikB,UACnB7H,EAAQ6H,UAAYhB,SAASjjB,EAAOikB,UAAW,IACd,iBAArBjkB,EAAOikB,UACnB7H,EAAQ6H,UAAYjkB,EAAOikB,UACM,iBAArBjkB,EAAOikB,YACnB7H,EAAQ6H,UAAY,IAAIrD,EAAM9D,SAAS9c,EAAOikB,UAAUpB,MAAQ,EAAG7iB,EAAOikB,UAAUnB,OAAS,GAAGnc,aACpG3G,EAAO+jB,YAAa,CACpB,IAAK9hB,MAAM4M,QAAQ7O,EAAO+jB,aACtB,MAAMla,UAAU,gDACpBuS,EAAQ2H,YAAc,GACtB,IAAK,IAAI7lB,EAAI,EAAGA,EAAI8B,EAAO+jB,YAAYxjB,SAAUrC,EAAG,CAChD,GAAqC,iBAA1B8B,EAAO+jB,YAAY7lB,GAC1B,MAAM2L,UAAU,iDACpBuS,EAAQ2H,YAAY7lB,GAAK2iB,EAAMpb,KAAK6e,mBAAmBvB,WAAW/iB,EAAO+jB,YAAY7lB,KAoB7F,GAjB2B,MAAvB8B,EAAOkkB,eACP9H,EAAQ8H,aAAexG,OAAO1d,EAAOkkB,eACX,MAA1BlkB,EAAOmkB,kBACP/H,EAAQ+H,gBAAkBzG,OAAO1d,EAAOmkB,kBACvB,MAAjBnkB,EAAO6jB,SACPzH,EAAQyH,OAASnG,OAAO1d,EAAO6jB,SACR,MAAvB7jB,EAAOokB,eACHxD,EAAMvC,MACLjC,EAAQgI,aAAexD,EAAMvC,KAAK2E,UAAUhjB,EAAOokB,eAAerF,UAAW,EAC1C,iBAAxB/e,EAAOokB,aACnBhI,EAAQgI,aAAenB,SAASjjB,EAAOokB,aAAc,IACjB,iBAAxBpkB,EAAOokB,aACnBhI,EAAQgI,aAAepkB,EAAOokB,aACM,iBAAxBpkB,EAAOokB,eACnBhI,EAAQgI,aAAe,IAAIxD,EAAM9D,SAAS9c,EAAOokB,aAAavB,MAAQ,EAAG7iB,EAAOokB,aAAatB,OAAS,GAAGnc,aACzF,MAApB3G,EAAOyhB,YACPrF,EAAQqF,UAAY/D,OAAO1d,EAAOyhB,YAClB,MAAhBzhB,EAAOqkB,MAAe,CACtB,GAA4B,iBAAjBrkB,EAAOqkB,MACd,MAAMxa,UAAU,2CACpBuS,EAAQiI,MAAQxD,EAAMpb,KAAKyc,WAAWa,WAAW/iB,EAAOqkB,OAE5D,GAAIrkB,EAAOgkB,cAAe,CACtB,IAAK/hB,MAAM4M,QAAQ7O,EAAOgkB,eACtB,MAAMna,UAAU,kDACpBuS,EAAQ4H,cAAgB,GACxB,IAAS9lB,EAAI,EAAGA,EAAI8B,EAAOgkB,cAAczjB,SAAUrC,EAAG,CAClD,GAAuC,iBAA5B8B,EAAOgkB,cAAc9lB,GAC5B,MAAM2L,UAAU,mDACpBuS,EAAQ4H,cAAc9lB,GAAK2iB,EAAMpb,KAAK8e,uBAAuBxB,WAAW/iB,EAAOgkB,cAAc9lB,KAGrG,OAAOke,GAYX0H,EAAWZ,SAAW,SAAkB9G,EAAS+G,GACxCA,IACDA,EAAU,IACd,IAAInjB,EAAS,GAKb,IAJImjB,EAAQC,QAAUD,EAAQE,YAC1BrjB,EAAO+jB,YAAc,GACrB/jB,EAAOgkB,cAAgB,IAEvBb,EAAQE,SAAU,CAClB,GAAIzC,EAAMvC,KAAM,CACZ,IAAIiF,EAAO,IAAI1C,EAAMvC,KAAK,EAAG,GAAG,GAChCre,EAAOikB,UAAYd,EAAQrD,QAAUpC,OAAS4F,EAAKrT,WAAakT,EAAQrD,QAAUhW,OAASwZ,EAAK3c,WAAa2c,OAE7GtjB,EAAOikB,UAAYd,EAAQrD,QAAUpC,OAAS,IAAM,EAIxD,GAHA1d,EAAOkkB,aAAe,GACtBlkB,EAAOmkB,gBAAkB,GACzBnkB,EAAO6jB,OAAS,GACZjD,EAAMvC,KAAM,CACRiF,EAAO,IAAI1C,EAAMvC,KAAK,EAAG,GAAG,GAChCre,EAAOokB,aAAejB,EAAQrD,QAAUpC,OAAS4F,EAAKrT,WAAakT,EAAQrD,QAAUhW,OAASwZ,EAAK3c,WAAa2c,OAEhHtjB,EAAOokB,aAAejB,EAAQrD,QAAUpC,OAAS,IAAM,EAC3D1d,EAAOyhB,UAAY,GACnBzhB,EAAOqkB,MAAQ,KAsBnB,GApByB,MAArBjI,EAAQ6H,WAAqB7H,EAAQjc,eAAe,eACnB,iBAAtBic,EAAQ6H,UACfjkB,EAAOikB,UAAYd,EAAQrD,QAAUpC,OAASA,OAAOtB,EAAQ6H,WAAa7H,EAAQ6H,UAElFjkB,EAAOikB,UAAYd,EAAQrD,QAAUpC,OAASkD,EAAMvC,KAAKne,UAAU+P,SAASxR,KAAK2d,EAAQ6H,WAAad,EAAQrD,QAAUhW,OAAS,IAAI8W,EAAM9D,SAASV,EAAQ6H,UAAUpB,MAAQ,EAAGzG,EAAQ6H,UAAUnB,OAAS,GAAGnc,WAAayV,EAAQ6H,WAChN,MAAxB7H,EAAQ8H,cAAwB9H,EAAQjc,eAAe,kBACvDH,EAAOkkB,aAAe9H,EAAQ8H,cACH,MAA3B9H,EAAQ+H,iBAA2B/H,EAAQjc,eAAe,qBAC1DH,EAAOmkB,gBAAkB/H,EAAQ+H,iBACf,MAAlB/H,EAAQyH,QAAkBzH,EAAQjc,eAAe,YACjDH,EAAO6jB,OAASzH,EAAQyH,QACA,MAAxBzH,EAAQgI,cAAwBhI,EAAQjc,eAAe,kBACnB,iBAAzBic,EAAQgI,aACfpkB,EAAOokB,aAAejB,EAAQrD,QAAUpC,OAASA,OAAOtB,EAAQgI,cAAgBhI,EAAQgI,aAExFpkB,EAAOokB,aAAejB,EAAQrD,QAAUpC,OAASkD,EAAMvC,KAAKne,UAAU+P,SAASxR,KAAK2d,EAAQgI,cAAgBjB,EAAQrD,QAAUhW,OAAS,IAAI8W,EAAM9D,SAASV,EAAQgI,aAAavB,MAAQ,EAAGzG,EAAQgI,aAAatB,OAAS,GAAGnc,WAAayV,EAAQgI,cAC/N,MAArBhI,EAAQqF,WAAqBrF,EAAQjc,eAAe,eACpDH,EAAOyhB,UAAYrF,EAAQqF,WACV,MAAjBrF,EAAQiI,OAAiBjI,EAAQjc,eAAe,WAChDH,EAAOqkB,MAAQxD,EAAMpb,KAAKyc,WAAWgB,SAAS9G,EAAQiI,MAAOlB,IAC7D/G,EAAQ2H,aAAe3H,EAAQ2H,YAAYxjB,OAAQ,CACnDP,EAAO+jB,YAAc,GACrB,IAAK,IAAIjgB,EAAI,EAAGA,EAAIsY,EAAQ2H,YAAYxjB,SAAUuD,EAC9C9D,EAAO+jB,YAAYjgB,GAAK+c,EAAMpb,KAAK6e,mBAAmBpB,SAAS9G,EAAQ2H,YAAYjgB,GAAIqf,GAE/F,GAAI/G,EAAQ4H,eAAiB5H,EAAQ4H,cAAczjB,OAAQ,CACvDP,EAAOgkB,cAAgB,GACvB,IAASlgB,EAAI,EAAGA,EAAIsY,EAAQ4H,cAAczjB,SAAUuD,EAChD9D,EAAOgkB,cAAclgB,GAAK+c,EAAMpb,KAAK8e,uBAAuBrB,SAAS9G,EAAQ4H,cAAclgB,GAAIqf,GAEvG,OAAOnjB,GAUX8jB,EAAW5jB,UAAUsjB,OAAS,WAC1B,OAAO9U,KAAKI,YAAYoU,SAASxU,KAAM6R,EAAU3E,KAAKiE,gBAGnDiE,EAtbO,GAyblBre,EAAK8e,uBAAyB,WAkB1B,SAASA,EAAuBlI,GAC5B,GAAIA,EACA,IAAK,IAAIJ,EAAOjd,OAAOid,KAAKI,GAAane,EAAI,EAAGA,EAAI+d,EAAK1b,SAAUrC,EACpC,MAAvBme,EAAWJ,EAAK/d,MAChBwQ,KAAKuN,EAAK/d,IAAMme,EAAWJ,EAAK/d,KAyLhD,OAhLAqmB,EAAuBrkB,UAAUL,IAAM,GAQvC0kB,EAAuBrkB,UAAUX,MAAQ,GAUzCglB,EAAuB3kB,OAAS,SAAgByc,GAC5C,OAAO,IAAIkI,EAAuBlI,IAYtCkI,EAAuB5C,OAAS,SAAgBvF,EAASwF,GAOrD,OANKA,IACDA,EAASlB,EAAQ9gB,UACF,MAAfwc,EAAQvc,KAAeuc,EAAQjc,eAAe,QAC9CyhB,EAAOC,OAA8B,IAAIC,OAAO1F,EAAQvc,KACvC,MAAjBuc,EAAQ7c,OAAiB6c,EAAQjc,eAAe,UAChDyhB,EAAOC,OAA8B,IAAIC,OAAO1F,EAAQ7c,OACrDqiB,GAYX2C,EAAuBnC,gBAAkB,SAAyBhG,EAASwF,GACvE,OAAOlT,KAAKiT,OAAOvF,EAASwF,GAAQK,UAcxCsC,EAAuBlC,OAAS,SAAgBC,EAAQ/hB,GAC9C+hB,aAAkB9B,IACpB8B,EAAS9B,EAAQ5gB,OAAO0iB,IAE5B,IADA,IAAI5a,OAAiBrG,IAAXd,EAAuB+hB,EAAOC,IAAMD,EAAO1V,IAAMrM,EAAQ6b,EAAU,IAAIyE,EAAMpb,KAAK8e,uBACrFjC,EAAO1V,IAAMlF,GAAK,CACrB,IAAI8a,EAAMF,EAAOT,SACjB,OAAQW,IAAQ,GAChB,KAAK,EACDpG,EAAQvc,IAAMyiB,EAAOR,SACrB,MACJ,KAAK,EACD1F,EAAQ7c,MAAQ+iB,EAAOR,SACvB,MACJ,QACIQ,EAAOI,SAAe,EAANF,IAIxB,OAAOpG,GAaXmI,EAAuB5B,gBAAkB,SAAyBL,GAG9D,OAFMA,aAAkB9B,IACpB8B,EAAS,IAAI9B,EAAQ8B,IAClB5T,KAAK2T,OAAOC,EAAQA,EAAOT,WAWtC0C,EAAuB3B,OAAS,SAAgBxG,GAC5C,MAAuB,iBAAZA,GAAoC,OAAZA,EACxB,kBACQ,MAAfA,EAAQvc,KAAeuc,EAAQjc,eAAe,SACzCygB,EAAMnD,SAASrB,EAAQvc,KACjB,uBACM,MAAjBuc,EAAQ7c,OAAiB6c,EAAQjc,eAAe,WAC3CygB,EAAMnD,SAASrB,EAAQ7c,OACjB,yBACR,MAWXglB,EAAuBxB,WAAa,SAAoB/iB,GACpD,GAAIA,aAAkB6gB,EAAMpb,KAAK8e,uBAC7B,OAAOvkB,EACX,IAAIoc,EAAU,IAAIyE,EAAMpb,KAAK8e,uBAK7B,OAJkB,MAAdvkB,EAAOH,MACPuc,EAAQvc,IAAM6d,OAAO1d,EAAOH,MACZ,MAAhBG,EAAOT,QACP6c,EAAQ7c,MAAQme,OAAO1d,EAAOT,QAC3B6c,GAYXmI,EAAuBrB,SAAW,SAAkB9G,EAAS+G,GACpDA,IACDA,EAAU,IACd,IAAInjB,EAAS,GASb,OARImjB,EAAQE,WACRrjB,EAAOH,IAAM,GACbG,EAAOT,MAAQ,IAEA,MAAf6c,EAAQvc,KAAeuc,EAAQjc,eAAe,SAC9CH,EAAOH,IAAMuc,EAAQvc,KACJ,MAAjBuc,EAAQ7c,OAAiB6c,EAAQjc,eAAe,WAChDH,EAAOT,MAAQ6c,EAAQ7c,OACpBS,GAUXukB,EAAuBrkB,UAAUsjB,OAAS,WACtC,OAAO9U,KAAKI,YAAYoU,SAASxU,KAAM6R,EAAU3E,KAAKiE,gBAGnD0E,EA/MmB,GAkN9B9e,EAAK+e,iBAAmB,WAkBpB,SAASA,EAAiBnI,GAEtB,GADA3N,KAAK+V,0BAA4B,GAC7BpI,EACA,IAAK,IAAIJ,EAAOjd,OAAOid,KAAKI,GAAane,EAAI,EAAGA,EAAI+d,EAAK1b,SAAUrC,EACpC,MAAvBme,EAAWJ,EAAK/d,MAChBwQ,KAAKuN,EAAK/d,IAAMme,EAAWJ,EAAK/d,KA6MhD,OApMAsmB,EAAiBtkB,UAAUwkB,WAAa,GAQxCF,EAAiBtkB,UAAUukB,0BAA4B7D,EAAM3D,WAU7DuH,EAAiB5kB,OAAS,SAAgByc,GACtC,OAAO,IAAImI,EAAiBnI,IAYhCmI,EAAiB7C,OAAS,SAAgBvF,EAASwF,GAK/C,GAJKA,IACDA,EAASlB,EAAQ9gB,UACK,MAAtBwc,EAAQsI,YAAsBtI,EAAQjc,eAAe,eACrDyhB,EAAOC,OAA8B,IAAIC,OAAO1F,EAAQsI,YACnB,MAArCtI,EAAQqI,2BAAqCrI,EAAQqI,0BAA0BlkB,OAC/E,IAAK,IAAIrC,EAAI,EAAGA,EAAIke,EAAQqI,0BAA0BlkB,SAAUrC,EAC5D2iB,EAAMpb,KAAK8e,uBAAuB5C,OAAOvF,EAAQqI,0BAA0BvmB,GAAI0jB,EAAOC,OAA8B,IAAIG,QAAQC,SACxI,OAAOL,GAYX4C,EAAiBpC,gBAAkB,SAAyBhG,EAASwF,GACjE,OAAOlT,KAAKiT,OAAOvF,EAASwF,GAAQK,UAcxCuC,EAAiBnC,OAAS,SAAgBC,EAAQ/hB,GACxC+hB,aAAkB9B,IACpB8B,EAAS9B,EAAQ5gB,OAAO0iB,IAE5B,IADA,IAAI5a,OAAiBrG,IAAXd,EAAuB+hB,EAAOC,IAAMD,EAAO1V,IAAMrM,EAAQ6b,EAAU,IAAIyE,EAAMpb,KAAK+e,iBACrFlC,EAAO1V,IAAMlF,GAAK,CACrB,IAAI8a,EAAMF,EAAOT,SACjB,OAAQW,IAAQ,GAChB,KAAK,EACDpG,EAAQsI,WAAapC,EAAOR,SAC5B,MACJ,KAAK,EACK1F,EAAQqI,2BAA6BrI,EAAQqI,0BAA0BlkB,SACzE6b,EAAQqI,0BAA4B,IACxCrI,EAAQqI,0BAA0Bha,KAAKoW,EAAMpb,KAAK8e,uBAAuBlC,OAAOC,EAAQA,EAAOT,WAC/F,MACJ,QACIS,EAAOI,SAAe,EAANF,IAIxB,OAAOpG,GAaXoI,EAAiB7B,gBAAkB,SAAyBL,GAGxD,OAFMA,aAAkB9B,IACpB8B,EAAS,IAAI9B,EAAQ8B,IAClB5T,KAAK2T,OAAOC,EAAQA,EAAOT,WAWtC2C,EAAiB5B,OAAS,SAAgBxG,GACtC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAA0B,MAAtBA,EAAQsI,YAAsBtI,EAAQjc,eAAe,gBAChDygB,EAAMnD,SAASrB,EAAQsI,YACxB,MAAO,8BACf,GAAyC,MAArCtI,EAAQqI,2BAAqCrI,EAAQjc,eAAe,6BAA8B,CAClG,IAAK8B,MAAM4M,QAAQuN,EAAQqI,2BACvB,MAAO,4CACX,IAAK,IAAIvmB,EAAI,EAAGA,EAAIke,EAAQqI,0BAA0BlkB,SAAUrC,EAAG,CAC/D,IAAIyV,EAAQkN,EAAMpb,KAAK8e,uBAAuB3B,OAAOxG,EAAQqI,0BAA0BvmB,IACvF,GAAIyV,EACA,MAAO,6BAA+BA,GAGlD,OAAO,MAWX6Q,EAAiBzB,WAAa,SAAoB/iB,GAC9C,GAAIA,aAAkB6gB,EAAMpb,KAAK+e,iBAC7B,OAAOxkB,EACX,IAAIoc,EAAU,IAAIyE,EAAMpb,KAAK+e,iBAG7B,GAFyB,MAArBxkB,EAAO0kB,aACPtI,EAAQsI,WAAahH,OAAO1d,EAAO0kB,aACnC1kB,EAAOykB,0BAA2B,CAClC,IAAKxiB,MAAM4M,QAAQ7O,EAAOykB,2BACtB,MAAM5a,UAAU,oEACpBuS,EAAQqI,0BAA4B,GACpC,IAAK,IAAIvmB,EAAI,EAAGA,EAAI8B,EAAOykB,0BAA0BlkB,SAAUrC,EAAG,CAC9D,GAAmD,iBAAxC8B,EAAOykB,0BAA0BvmB,GACxC,MAAM2L,UAAU,qEACpBuS,EAAQqI,0BAA0BvmB,GAAK2iB,EAAMpb,KAAK8e,uBAAuBxB,WAAW/iB,EAAOykB,0BAA0BvmB,KAG7H,OAAOke,GAYXoI,EAAiBtB,SAAW,SAAkB9G,EAAS+G,GAC9CA,IACDA,EAAU,IACd,IAAInjB,EAAS,GAOb,IANImjB,EAAQC,QAAUD,EAAQE,YAC1BrjB,EAAOykB,0BAA4B,IACnCtB,EAAQE,WACRrjB,EAAO0kB,WAAa,IACE,MAAtBtI,EAAQsI,YAAsBtI,EAAQjc,eAAe,gBACrDH,EAAO0kB,WAAatI,EAAQsI,YAC5BtI,EAAQqI,2BAA6BrI,EAAQqI,0BAA0BlkB,OAAQ,CAC/EP,EAAOykB,0BAA4B,GACnC,IAAK,IAAI3gB,EAAI,EAAGA,EAAIsY,EAAQqI,0BAA0BlkB,SAAUuD,EAC5D9D,EAAOykB,0BAA0B3gB,GAAK+c,EAAMpb,KAAK8e,uBAAuBrB,SAAS9G,EAAQqI,0BAA0B3gB,GAAIqf,GAE/H,OAAOnjB,GAUXwkB,EAAiBtkB,UAAUsjB,OAAS,WAChC,OAAO9U,KAAKI,YAAYoU,SAASxU,KAAM6R,EAAU3E,KAAKiE,gBAGnD2E,EApOa,GAuOxB/e,EAAKyc,WAAa,WAwBd,SAASA,EAAW7F,GAOhB,GANA3N,KAAKmM,KAAO,GACZnM,KAAKiW,YAAc,GACnBjW,KAAKhC,MAAQ,GACbgC,KAAKiE,OAAS,GACdjE,KAAKkW,UAAY,GACjBlW,KAAKmW,uBAAyB,GAC1BxI,EACA,IAAK,IAAIJ,EAAOjd,OAAOid,KAAKI,GAAane,EAAI,EAAGA,EAAI+d,EAAK1b,SAAUrC,EACpC,MAAvBme,EAAWJ,EAAK/d,MAChBwQ,KAAKuN,EAAK/d,IAAMme,EAAWJ,EAAK/d,KAibhD,OAxaAgkB,EAAWhiB,UAAU2a,KAAO+F,EAAM3D,WAQlCiF,EAAWhiB,UAAUrB,KAAO,GAQ5BqjB,EAAWhiB,UAAUykB,YAAc/D,EAAM3D,WAQzCiF,EAAWhiB,UAAUuhB,UAAY,GAQjCS,EAAWhiB,UAAUwM,MAAQkU,EAAM3D,WAQnCiF,EAAWhiB,UAAUyS,OAASiO,EAAM3D,WAQpCiF,EAAWhiB,UAAU0kB,UAAYhE,EAAM3D,WAQvCiF,EAAWhiB,UAAU2kB,uBAAyBjE,EAAM3D,WAUpDiF,EAAWtiB,OAAS,SAAgByc,GAChC,OAAO,IAAI6F,EAAW7F,IAY1B6F,EAAWP,OAAS,SAAgBvF,EAASwF,GAGzC,GAFKA,IACDA,EAASlB,EAAQ9gB,UACD,MAAhBwc,EAAQvB,MAAgBuB,EAAQvB,KAAKta,OACrC,IAAK,IAAIrC,EAAI,EAAGA,EAAIke,EAAQvB,KAAKta,SAAUrC,EACvC2iB,EAAMpb,KAAKke,UAAUhC,OAAOvF,EAAQvB,KAAK3c,GAAI0jB,EAAOC,OAA8B,IAAIG,QAAQC,SAGtG,GAFoB,MAAhB7F,EAAQvd,MAAgBud,EAAQjc,eAAe,SAC/CyhB,EAAOC,OAA8B,IAAIC,OAAO1F,EAAQvd,MACjC,MAAvBud,EAAQuI,aAAuBvI,EAAQuI,YAAYpkB,OACnD,IAASrC,EAAI,EAAGA,EAAIke,EAAQuI,YAAYpkB,SAAUrC,EAC9C2iB,EAAMpb,KAAKC,YAAYic,OAAOvF,EAAQuI,YAAYzmB,GAAI0jB,EAAOC,OAA8B,IAAIG,QAAQC,SAG/G,GAFyB,MAArB7F,EAAQqF,WAAqBrF,EAAQjc,eAAe,cACpDyhB,EAAOC,OAA+B,IAAIC,OAAO1F,EAAQqF,WACxC,MAAjBrF,EAAQ1P,OAAiB0P,EAAQ1P,MAAMnM,OACvC,IAASrC,EAAI,EAAGA,EAAIke,EAAQ1P,MAAMnM,SAAUrC,EACxC2iB,EAAMpb,KAAKge,eAAe9B,OAAOvF,EAAQ1P,MAAMxO,GAAI0jB,EAAOC,OAA+B,IAAIG,QAAQC,SAC7G,GAAsB,MAAlB7F,EAAQzJ,QAAkByJ,EAAQzJ,OAAOpS,OACzC,IAASrC,EAAI,EAAGA,EAAIke,EAAQzJ,OAAOpS,SAAUrC,EACzC2iB,EAAMpb,KAAKge,eAAe9B,OAAOvF,EAAQzJ,OAAOzU,GAAI0jB,EAAOC,OAA+B,IAAIG,QAAQC,SAC9G,GAAyB,MAArB7F,EAAQwI,WAAqBxI,EAAQwI,UAAUrkB,OAC/C,IAASrC,EAAI,EAAGA,EAAIke,EAAQwI,UAAUrkB,SAAUrC,EAC5C2iB,EAAMpb,KAAKge,eAAe9B,OAAOvF,EAAQwI,UAAU1mB,GAAI0jB,EAAOC,OAA+B,KAAKG,QAAQC,SAClH,GAAsC,MAAlC7F,EAAQyI,wBAAkCzI,EAAQyI,uBAAuBtkB,OACzE,IAASrC,EAAI,EAAGA,EAAIke,EAAQyI,uBAAuBtkB,SAAUrC,EACzD2iB,EAAMpb,KAAK+e,iBAAiB7C,OAAOvF,EAAQyI,uBAAuB3mB,GAAI0jB,EAAOC,OAA+B,KAAKG,QAAQC,SACjI,OAAOL,GAYXM,EAAWE,gBAAkB,SAAyBhG,EAASwF,GAC3D,OAAOlT,KAAKiT,OAAOvF,EAASwF,GAAQK,UAcxCC,EAAWG,OAAS,SAAgBC,EAAQ/hB,GAClC+hB,aAAkB9B,IACpB8B,EAAS9B,EAAQ5gB,OAAO0iB,IAE5B,IADA,IAAI5a,OAAiBrG,IAAXd,EAAuB+hB,EAAOC,IAAMD,EAAO1V,IAAMrM,EAAQ6b,EAAU,IAAIyE,EAAMpb,KAAKyc,WACrFI,EAAO1V,IAAMlF,GAAK,CACrB,IAAI8a,EAAMF,EAAOT,SACjB,OAAQW,IAAQ,GAChB,KAAK,EACKpG,EAAQvB,MAAQuB,EAAQvB,KAAKta,SAC/B6b,EAAQvB,KAAO,IACnBuB,EAAQvB,KAAKpQ,KAAKoW,EAAMpb,KAAKke,UAAUtB,OAAOC,EAAQA,EAAOT,WAC7D,MACJ,KAAK,EACDzF,EAAQvd,KAAOyjB,EAAOR,SACtB,MACJ,KAAK,EACK1F,EAAQuI,aAAevI,EAAQuI,YAAYpkB,SAC7C6b,EAAQuI,YAAc,IAC1BvI,EAAQuI,YAAYla,KAAKoW,EAAMpb,KAAKC,YAAY2c,OAAOC,EAAQA,EAAOT,WACtE,MACJ,KAAK,GACDzF,EAAQqF,UAAYa,EAAOR,SAC3B,MACJ,KAAK,GACK1F,EAAQ1P,OAAS0P,EAAQ1P,MAAMnM,SACjC6b,EAAQ1P,MAAQ,IACpB0P,EAAQ1P,MAAMjC,KAAKoW,EAAMpb,KAAKge,eAAepB,OAAOC,EAAQA,EAAOT,WACnE,MACJ,KAAK,GACKzF,EAAQzJ,QAAUyJ,EAAQzJ,OAAOpS,SACnC6b,EAAQzJ,OAAS,IACrByJ,EAAQzJ,OAAOlI,KAAKoW,EAAMpb,KAAKge,eAAepB,OAAOC,EAAQA,EAAOT,WACpE,MACJ,KAAK,GACKzF,EAAQwI,WAAaxI,EAAQwI,UAAUrkB,SACzC6b,EAAQwI,UAAY,IACxBxI,EAAQwI,UAAUna,KAAKoW,EAAMpb,KAAKge,eAAepB,OAAOC,EAAQA,EAAOT,WACvE,MACJ,KAAK,GACKzF,EAAQyI,wBAA0BzI,EAAQyI,uBAAuBtkB,SACnE6b,EAAQyI,uBAAyB,IACrCzI,EAAQyI,uBAAuBpa,KAAKoW,EAAMpb,KAAK+e,iBAAiBnC,OAAOC,EAAQA,EAAOT,WACtF,MACJ,QACIS,EAAOI,SAAe,EAANF,IAIxB,OAAOpG,GAaX8F,EAAWS,gBAAkB,SAAyBL,GAGlD,OAFMA,aAAkB9B,IACpB8B,EAAS,IAAI9B,EAAQ8B,IAClB5T,KAAK2T,OAAOC,EAAQA,EAAOT,WAWtCK,EAAWU,OAAS,SAAgBxG,GAChC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAoB,MAAhBA,EAAQvB,MAAgBuB,EAAQjc,eAAe,QAAS,CACxD,IAAK8B,MAAM4M,QAAQuN,EAAQvB,MACvB,MAAO,uBACX,IAAK,IAAI3c,EAAI,EAAGA,EAAIke,EAAQvB,KAAKta,SAAUrC,EAAG,CAE1C,GADIyV,EAAQkN,EAAMpb,KAAKke,UAAUf,OAAOxG,EAAQvB,KAAK3c,IAEjD,MAAO,QAAUyV,GAG7B,GAAoB,MAAhByI,EAAQvd,MAAgBud,EAAQjc,eAAe,UAC1CygB,EAAMnD,SAASrB,EAAQvd,MACxB,MAAO,wBACf,GAA2B,MAAvBud,EAAQuI,aAAuBvI,EAAQjc,eAAe,eAAgB,CACtE,IAAK8B,MAAM4M,QAAQuN,EAAQuI,aACvB,MAAO,8BACX,IAASzmB,EAAI,EAAGA,EAAIke,EAAQuI,YAAYpkB,SAAUrC,EAAG,CAEjD,GADIyV,EAAQkN,EAAMpb,KAAKC,YAAYkd,OAAOxG,EAAQuI,YAAYzmB,IAE1D,MAAO,eAAiByV,GAGpC,GAAyB,MAArByI,EAAQqF,WAAqBrF,EAAQjc,eAAe,eAC/CygB,EAAMnD,SAASrB,EAAQqF,WACxB,MAAO,6BACf,GAAqB,MAAjBrF,EAAQ1P,OAAiB0P,EAAQjc,eAAe,SAAU,CAC1D,IAAK8B,MAAM4M,QAAQuN,EAAQ1P,OACvB,MAAO,wBACX,IAASxO,EAAI,EAAGA,EAAIke,EAAQ1P,MAAMnM,SAAUrC,EAAG,CAE3C,GADIyV,EAAQkN,EAAMpb,KAAKge,eAAeb,OAAOxG,EAAQ1P,MAAMxO,IAEvD,MAAO,SAAWyV,GAG9B,GAAsB,MAAlByI,EAAQzJ,QAAkByJ,EAAQjc,eAAe,UAAW,CAC5D,IAAK8B,MAAM4M,QAAQuN,EAAQzJ,QACvB,MAAO,yBACX,IAASzU,EAAI,EAAGA,EAAIke,EAAQzJ,OAAOpS,SAAUrC,EAAG,CAE5C,GADIyV,EAAQkN,EAAMpb,KAAKge,eAAeb,OAAOxG,EAAQzJ,OAAOzU,IAExD,MAAO,UAAYyV,GAG/B,GAAyB,MAArByI,EAAQwI,WAAqBxI,EAAQjc,eAAe,aAAc,CAClE,IAAK8B,MAAM4M,QAAQuN,EAAQwI,WACvB,MAAO,4BACX,IAAS1mB,EAAI,EAAGA,EAAIke,EAAQwI,UAAUrkB,SAAUrC,EAAG,CAE/C,GADIyV,EAAQkN,EAAMpb,KAAKge,eAAeb,OAAOxG,EAAQwI,UAAU1mB,IAE3D,MAAO,aAAeyV,GAGlC,GAAsC,MAAlCyI,EAAQyI,wBAAkCzI,EAAQjc,eAAe,0BAA2B,CAC5F,IAAK8B,MAAM4M,QAAQuN,EAAQyI,wBACvB,MAAO,yCACX,IAAS3mB,EAAI,EAAGA,EAAIke,EAAQyI,uBAAuBtkB,SAAUrC,EAAG,CAC5D,IAAIyV,EACJ,GADIA,EAAQkN,EAAMpb,KAAK+e,iBAAiB5B,OAAOxG,EAAQyI,uBAAuB3mB,IAE1E,MAAO,0BAA4ByV,GAG/C,OAAO,MAWXuO,EAAWa,WAAa,SAAoB/iB,GACxC,GAAIA,aAAkB6gB,EAAMpb,KAAKyc,WAC7B,OAAOliB,EACX,IAAIoc,EAAU,IAAIyE,EAAMpb,KAAKyc,WAC7B,GAAIliB,EAAO6a,KAAM,CACb,IAAK5Y,MAAM4M,QAAQ7O,EAAO6a,MACtB,MAAMhR,UAAU,yCACpBuS,EAAQvB,KAAO,GACf,IAAK,IAAI3c,EAAI,EAAGA,EAAI8B,EAAO6a,KAAKta,SAAUrC,EAAG,CACzC,GAA8B,iBAAnB8B,EAAO6a,KAAK3c,GACnB,MAAM2L,UAAU,0CACpBuS,EAAQvB,KAAK3c,GAAK2iB,EAAMpb,KAAKke,UAAUZ,WAAW/iB,EAAO6a,KAAK3c,KAKtE,GAFmB,MAAf8B,EAAOnB,OACPud,EAAQvd,KAAO6e,OAAO1d,EAAOnB,OAC7BmB,EAAO2kB,YAAa,CACpB,IAAK1iB,MAAM4M,QAAQ7O,EAAO2kB,aACtB,MAAM9a,UAAU,gDACpBuS,EAAQuI,YAAc,GACtB,IAASzmB,EAAI,EAAGA,EAAI8B,EAAO2kB,YAAYpkB,SAAUrC,EAAG,CAChD,GAAqC,iBAA1B8B,EAAO2kB,YAAYzmB,GAC1B,MAAM2L,UAAU,iDACpBuS,EAAQuI,YAAYzmB,GAAK2iB,EAAMpb,KAAKC,YAAYqd,WAAW/iB,EAAO2kB,YAAYzmB,KAKtF,GAFwB,MAApB8B,EAAOyhB,YACPrF,EAAQqF,UAAY/D,OAAO1d,EAAOyhB,YAClCzhB,EAAO0M,MAAO,CACd,IAAKzK,MAAM4M,QAAQ7O,EAAO0M,OACtB,MAAM7C,UAAU,0CACpBuS,EAAQ1P,MAAQ,GAChB,IAASxO,EAAI,EAAGA,EAAI8B,EAAO0M,MAAMnM,SAAUrC,EAAG,CAC1C,GAA+B,iBAApB8B,EAAO0M,MAAMxO,GACpB,MAAM2L,UAAU,2CACpBuS,EAAQ1P,MAAMxO,GAAK2iB,EAAMpb,KAAKge,eAAeV,WAAW/iB,EAAO0M,MAAMxO,KAG7E,GAAI8B,EAAO2S,OAAQ,CACf,IAAK1Q,MAAM4M,QAAQ7O,EAAO2S,QACtB,MAAM9I,UAAU,2CACpBuS,EAAQzJ,OAAS,GACjB,IAASzU,EAAI,EAAGA,EAAI8B,EAAO2S,OAAOpS,SAAUrC,EAAG,CAC3C,GAAgC,iBAArB8B,EAAO2S,OAAOzU,GACrB,MAAM2L,UAAU,4CACpBuS,EAAQzJ,OAAOzU,GAAK2iB,EAAMpb,KAAKge,eAAeV,WAAW/iB,EAAO2S,OAAOzU,KAG/E,GAAI8B,EAAO4kB,UAAW,CAClB,IAAK3iB,MAAM4M,QAAQ7O,EAAO4kB,WACtB,MAAM/a,UAAU,8CACpBuS,EAAQwI,UAAY,GACpB,IAAS1mB,EAAI,EAAGA,EAAI8B,EAAO4kB,UAAUrkB,SAAUrC,EAAG,CAC9C,GAAmC,iBAAxB8B,EAAO4kB,UAAU1mB,GACxB,MAAM2L,UAAU,+CACpBuS,EAAQwI,UAAU1mB,GAAK2iB,EAAMpb,KAAKge,eAAeV,WAAW/iB,EAAO4kB,UAAU1mB,KAGrF,GAAI8B,EAAO6kB,uBAAwB,CAC/B,IAAK5iB,MAAM4M,QAAQ7O,EAAO6kB,wBACtB,MAAMhb,UAAU,2DACpBuS,EAAQyI,uBAAyB,GACjC,IAAS3mB,EAAI,EAAGA,EAAI8B,EAAO6kB,uBAAuBtkB,SAAUrC,EAAG,CAC3D,GAAgD,iBAArC8B,EAAO6kB,uBAAuB3mB,GACrC,MAAM2L,UAAU,4DACpBuS,EAAQyI,uBAAuB3mB,GAAK2iB,EAAMpb,KAAK+e,iBAAiBzB,WAAW/iB,EAAO6kB,uBAAuB3mB,KAGjH,OAAOke,GAYX8F,EAAWgB,SAAW,SAAkB9G,EAAS+G,GACxCA,IACDA,EAAU,IACd,IAAInjB,EAAS,GAab,IAZImjB,EAAQC,QAAUD,EAAQE,YAC1BrjB,EAAO6a,KAAO,GACd7a,EAAO2kB,YAAc,GACrB3kB,EAAO0M,MAAQ,GACf1M,EAAO2S,OAAS,GAChB3S,EAAO4kB,UAAY,GACnB5kB,EAAO6kB,uBAAyB,IAEhC1B,EAAQE,WACRrjB,EAAOnB,KAAO,GACdmB,EAAOyhB,UAAY,IAEnBrF,EAAQvB,MAAQuB,EAAQvB,KAAKta,OAAQ,CACrCP,EAAO6a,KAAO,GACd,IAAK,IAAI/W,EAAI,EAAGA,EAAIsY,EAAQvB,KAAKta,SAAUuD,EACvC9D,EAAO6a,KAAK/W,GAAK+c,EAAMpb,KAAKke,UAAUT,SAAS9G,EAAQvB,KAAK/W,GAAIqf,GAIxE,GAFoB,MAAhB/G,EAAQvd,MAAgBud,EAAQjc,eAAe,UAC/CH,EAAOnB,KAAOud,EAAQvd,MACtBud,EAAQuI,aAAevI,EAAQuI,YAAYpkB,OAAQ,CACnDP,EAAO2kB,YAAc,GACrB,IAAS7gB,EAAI,EAAGA,EAAIsY,EAAQuI,YAAYpkB,SAAUuD,EAC9C9D,EAAO2kB,YAAY7gB,GAAK+c,EAAMpb,KAAKC,YAAYwd,SAAS9G,EAAQuI,YAAY7gB,GAAIqf,GAIxF,GAFyB,MAArB/G,EAAQqF,WAAqBrF,EAAQjc,eAAe,eACpDH,EAAOyhB,UAAYrF,EAAQqF,WAC3BrF,EAAQ1P,OAAS0P,EAAQ1P,MAAMnM,OAAQ,CACvCP,EAAO0M,MAAQ,GACf,IAAS5I,EAAI,EAAGA,EAAIsY,EAAQ1P,MAAMnM,SAAUuD,EACxC9D,EAAO0M,MAAM5I,GAAK+c,EAAMpb,KAAKge,eAAeP,SAAS9G,EAAQ1P,MAAM5I,GAAIqf,GAE/E,GAAI/G,EAAQzJ,QAAUyJ,EAAQzJ,OAAOpS,OAAQ,CACzCP,EAAO2S,OAAS,GAChB,IAAS7O,EAAI,EAAGA,EAAIsY,EAAQzJ,OAAOpS,SAAUuD,EACzC9D,EAAO2S,OAAO7O,GAAK+c,EAAMpb,KAAKge,eAAeP,SAAS9G,EAAQzJ,OAAO7O,GAAIqf,GAEjF,GAAI/G,EAAQwI,WAAaxI,EAAQwI,UAAUrkB,OAAQ,CAC/CP,EAAO4kB,UAAY,GACnB,IAAS9gB,EAAI,EAAGA,EAAIsY,EAAQwI,UAAUrkB,SAAUuD,EAC5C9D,EAAO4kB,UAAU9gB,GAAK+c,EAAMpb,KAAKge,eAAeP,SAAS9G,EAAQwI,UAAU9gB,GAAIqf,GAEvF,GAAI/G,EAAQyI,wBAA0BzI,EAAQyI,uBAAuBtkB,OAAQ,CACzEP,EAAO6kB,uBAAyB,GAChC,IAAS/gB,EAAI,EAAGA,EAAIsY,EAAQyI,uBAAuBtkB,SAAUuD,EACzD9D,EAAO6kB,uBAAuB/gB,GAAK+c,EAAMpb,KAAK+e,iBAAiBtB,SAAS9G,EAAQyI,uBAAuB/gB,GAAIqf,GAEnH,OAAOnjB,GAUXkiB,EAAWhiB,UAAUsjB,OAAS,WAC1B,OAAO9U,KAAKI,YAAYoU,SAASxU,KAAM6R,EAAU3E,KAAKiE,gBAGnDqC,EAndO,GAsdlBzc,EAAKC,YAAc,WA8Bf,SAASA,EAAY2W,GASjB,GARA3N,KAAKjO,KAAO,GACZiO,KAAKgC,UAAY,GACjBhC,KAAKiC,UAAY,GACjBjC,KAAKgB,WAAa,GAClBhB,KAAKkC,UAAY,GACjBlC,KAAKoW,aAAe,GACpBpW,KAAKmC,WAAa,GAClBnC,KAAKoC,WAAa,GACduL,EACA,IAAK,IAAIJ,EAAOjd,OAAOid,KAAKI,GAAane,EAAI,EAAGA,EAAI+d,EAAK1b,SAAUrC,EACpC,MAAvBme,EAAWJ,EAAK/d,MAChBwQ,KAAKuN,EAAK/d,IAAMme,EAAWJ,EAAK/d,KAw8BhD,OA/7BAwH,EAAYxF,UAAUO,KAAOmgB,EAAM3D,WAQnCvX,EAAYxF,UAAUuP,SAAW,EAQjC/J,EAAYxF,UAAU6kB,QAAU,KAQhCrf,EAAYxF,UAAUwQ,UAAYkQ,EAAM3D,WAQxCvX,EAAYxF,UAAUyQ,UAAYiQ,EAAM3D,WAQxCvX,EAAYxF,UAAUwP,WAAakR,EAAM3D,WAQzCvX,EAAYxF,UAAU0Q,UAAYgQ,EAAM3D,WAQxCvX,EAAYxF,UAAUrB,KAAO,GAQ7B6G,EAAYxF,UAAUuhB,UAAY,GAQlC/b,EAAYxF,UAAUgQ,QAAU0Q,EAAMzC,UAAU,IAQhDzY,EAAYxF,UAAU4kB,aAAelE,EAAM3D,WAQ3CvX,EAAYxF,UAAU8kB,aAAe,EAQrCtf,EAAYxF,UAAU2Q,WAAa+P,EAAM3D,WAQzCvX,EAAYxF,UAAU4Q,WAAa8P,EAAM3D,WAUzCvX,EAAY9F,OAAS,SAAgByc,GACjC,OAAO,IAAI3W,EAAY2W,IAY3B3W,EAAYic,OAAS,SAAgBvF,EAASwF,GAG1C,GAFKA,IACDA,EAASlB,EAAQ9gB,UACD,MAAhBwc,EAAQ3b,MAAgB2b,EAAQ3b,KAAKF,OAAQ,CAC7CqhB,EAAOC,OAA8B,IAAIG,OACzC,IAAK,IAAI9jB,EAAI,EAAGA,EAAIke,EAAQ3b,KAAKF,SAAUrC,EACvC0jB,EAAOG,MAAM3F,EAAQ3b,KAAKvC,IAC9B0jB,EAAOK,SAMX,GAJwB,MAApB7F,EAAQ3M,UAAoB2M,EAAQjc,eAAe,aACnDyhB,EAAOC,OAA8B,IAAIM,MAAM/F,EAAQ3M,UACpC,MAAnB2M,EAAQ2I,SAAmB3I,EAAQjc,eAAe,YAClD0gB,EAAMpb,KAAKC,YAAYuf,QAAQtD,OAAOvF,EAAQ2I,QAASnD,EAAOC,OAA8B,IAAIG,QAAQC,SACnF,MAArB7F,EAAQ1L,WAAqB0L,EAAQ1L,UAAUnQ,OAAQ,CACvDqhB,EAAOC,OAA8B,IAAIG,OACzC,IAAS9jB,EAAI,EAAGA,EAAIke,EAAQ1L,UAAUnQ,SAAUrC,EAC5C0jB,EAAOlF,MAAMN,EAAQ1L,UAAUxS,IACnC0jB,EAAOK,SAEX,GAAyB,MAArB7F,EAAQzL,WAAqByL,EAAQzL,UAAUpQ,OAAQ,CACvDqhB,EAAOC,OAA8B,IAAIG,OACzC,IAAS9jB,EAAI,EAAGA,EAAIke,EAAQzL,UAAUpQ,SAAUrC,EAC5C0jB,EAAOO,MAAM/F,EAAQzL,UAAUzS,IACnC0jB,EAAOK,SAEX,GAA0B,MAAtB7F,EAAQ1M,YAAsB0M,EAAQ1M,WAAWnP,OACjD,IAASrC,EAAI,EAAGA,EAAIke,EAAQ1M,WAAWnP,SAAUrC,EAC7C0jB,EAAOC,OAA8B,IAAI7B,MAAM5D,EAAQ1M,WAAWxR,IAC1E,GAAyB,MAArBke,EAAQxL,WAAqBwL,EAAQxL,UAAUrQ,OAAQ,CACvDqhB,EAAOC,OAA8B,IAAIG,OACzC,IAAS9jB,EAAI,EAAGA,EAAIke,EAAQxL,UAAUrQ,SAAUrC,EAC5C0jB,EAAOG,MAAM3F,EAAQxL,UAAU1S,IACnC0jB,EAAOK,SAMX,GAJoB,MAAhB7F,EAAQvd,MAAgBud,EAAQjc,eAAe,SAC/CyhB,EAAOC,OAA8B,IAAIC,OAAO1F,EAAQvd,MACrC,MAAnBud,EAAQlM,SAAmBkM,EAAQjc,eAAe,YAClDyhB,EAAOC,OAA8B,IAAI7B,MAAM5D,EAAQlM,SACjC,MAAtBkM,EAAQvL,YAAsBuL,EAAQvL,WAAWtQ,OAAQ,CACzDqhB,EAAOC,OAA+B,IAAIG,OAC1C,IAAS9jB,EAAI,EAAGA,EAAIke,EAAQvL,WAAWtQ,SAAUrC,EAC7C0jB,EAAOsD,OAAO9I,EAAQvL,WAAW3S,IACrC0jB,EAAOK,SAEX,GAA0B,MAAtB7F,EAAQtL,YAAsBsL,EAAQtL,WAAWvQ,OAAQ,CACzDqhB,EAAOC,OAA+B,IAAIG,OAC1C,IAAS9jB,EAAI,EAAGA,EAAIke,EAAQtL,WAAWvQ,SAAUrC,EAC7C0jB,EAAOuD,OAAO/I,EAAQtL,WAAW5S,IACrC0jB,EAAOK,SAIX,GAFyB,MAArB7F,EAAQqF,WAAqBrF,EAAQjc,eAAe,cACpDyhB,EAAOC,OAA+B,IAAIC,OAAO1F,EAAQqF,WACjC,MAAxBrF,EAAQ0I,cAAwB1I,EAAQ0I,aAAavkB,OACrD,IAASrC,EAAI,EAAGA,EAAIke,EAAQ0I,aAAavkB,SAAUrC,EAC/C2iB,EAAMpb,KAAK8e,uBAAuB5C,OAAOvF,EAAQ0I,aAAa5mB,GAAI0jB,EAAOC,OAA+B,KAAKG,QAAQC,SAG7H,OAF4B,MAAxB7F,EAAQ4I,cAAwB5I,EAAQjc,eAAe,iBACvDyhB,EAAOC,OAA+B,KAAKM,MAAM/F,EAAQ4I,cACtDpD,GAYXlc,EAAY0c,gBAAkB,SAAyBhG,EAASwF,GAC5D,OAAOlT,KAAKiT,OAAOvF,EAASwF,GAAQK,UAcxCvc,EAAY2c,OAAS,SAAgBC,EAAQ/hB,GACnC+hB,aAAkB9B,IACpB8B,EAAS9B,EAAQ5gB,OAAO0iB,IAE5B,IADA,IAAI5a,OAAiBrG,IAAXd,EAAuB+hB,EAAOC,IAAMD,EAAO1V,IAAMrM,EAAQ6b,EAAU,IAAIyE,EAAMpb,KAAKC,YACrF4c,EAAO1V,IAAMlF,GAAK,CACrB,IAAI8a,EAAMF,EAAOT,SACjB,OAAQW,IAAQ,GAChB,KAAK,EAGD,GAFMpG,EAAQ3b,MAAQ2b,EAAQ3b,KAAKF,SAC/B6b,EAAQ3b,KAAO,IACD,IAAP,EAAN+hB,GAED,IADA,IAAIC,EAAOH,EAAOT,SAAWS,EAAO1V,IAC7B0V,EAAO1V,IAAM6V,GAChBrG,EAAQ3b,KAAKgK,KAAK6X,EAAOP,cAE7B3F,EAAQ3b,KAAKgK,KAAK6X,EAAOP,SAC7B,MACJ,KAAK,EACD3F,EAAQ3M,SAAW6S,EAAOH,QAC1B,MACJ,KAAK,EACD/F,EAAQ2I,QAAUlE,EAAMpb,KAAKC,YAAYuf,QAAQ5C,OAAOC,EAAQA,EAAOT,UACvE,MACJ,KAAK,EAGD,GAFMzF,EAAQ1L,WAAa0L,EAAQ1L,UAAUnQ,SACzC6b,EAAQ1L,UAAY,IACN,IAAP,EAAN8R,GAED,IADIC,EAAOH,EAAOT,SAAWS,EAAO1V,IAC7B0V,EAAO1V,IAAM6V,GAChBrG,EAAQ1L,UAAUjG,KAAK6X,EAAO5F,cAElCN,EAAQ1L,UAAUjG,KAAK6X,EAAO5F,SAClC,MACJ,KAAK,EAGD,GAFMN,EAAQzL,WAAayL,EAAQzL,UAAUpQ,SACzC6b,EAAQzL,UAAY,IACN,IAAP,EAAN6R,GAED,IADIC,EAAOH,EAAOT,SAAWS,EAAO1V,IAC7B0V,EAAO1V,IAAM6V,GAChBrG,EAAQzL,UAAUlG,KAAK6X,EAAOH,cAElC/F,EAAQzL,UAAUlG,KAAK6X,EAAOH,SAClC,MACJ,KAAK,EACK/F,EAAQ1M,YAAc0M,EAAQ1M,WAAWnP,SAC3C6b,EAAQ1M,WAAa,IACzB0M,EAAQ1M,WAAWjF,KAAK6X,EAAOtC,SAC/B,MACJ,KAAK,EAGD,GAFM5D,EAAQxL,WAAawL,EAAQxL,UAAUrQ,SACzC6b,EAAQxL,UAAY,IACN,IAAP,EAAN4R,GAED,IADIC,EAAOH,EAAOT,SAAWS,EAAO1V,IAC7B0V,EAAO1V,IAAM6V,GAChBrG,EAAQxL,UAAUnG,KAAK6X,EAAOP,cAElC3F,EAAQxL,UAAUnG,KAAK6X,EAAOP,SAClC,MACJ,KAAK,EACD3F,EAAQvd,KAAOyjB,EAAOR,SACtB,MACJ,KAAK,GACD1F,EAAQqF,UAAYa,EAAOR,SAC3B,MACJ,KAAK,EACD1F,EAAQlM,QAAUoS,EAAOtC,QACzB,MACJ,KAAK,GACK5D,EAAQ0I,cAAgB1I,EAAQ0I,aAAavkB,SAC/C6b,EAAQ0I,aAAe,IAC3B1I,EAAQ0I,aAAara,KAAKoW,EAAMpb,KAAK8e,uBAAuBlC,OAAOC,EAAQA,EAAOT,WAClF,MACJ,KAAK,GACDzF,EAAQ4I,aAAe1C,EAAOH,QAC9B,MACJ,KAAK,GAGD,GAFM/F,EAAQvL,YAAcuL,EAAQvL,WAAWtQ,SAC3C6b,EAAQvL,WAAa,IACP,IAAP,EAAN2R,GAED,IADIC,EAAOH,EAAOT,SAAWS,EAAO1V,IAC7B0V,EAAO1V,IAAM6V,GAChBrG,EAAQvL,WAAWpG,KAAK6X,EAAO4C,eAEnC9I,EAAQvL,WAAWpG,KAAK6X,EAAO4C,UACnC,MACJ,KAAK,GAGD,GAFM9I,EAAQtL,YAAcsL,EAAQtL,WAAWvQ,SAC3C6b,EAAQtL,WAAa,IACP,IAAP,EAAN0R,GAED,IADIC,EAAOH,EAAOT,SAAWS,EAAO1V,IAC7B0V,EAAO1V,IAAM6V,GAChBrG,EAAQtL,WAAWrG,KAAK6X,EAAO6C,eAEnC/I,EAAQtL,WAAWrG,KAAK6X,EAAO6C,UACnC,MACJ,QACI7C,EAAOI,SAAe,EAANF,IAIxB,OAAOpG,GAaX1W,EAAYid,gBAAkB,SAAyBL,GAGnD,OAFMA,aAAkB9B,IACpB8B,EAAS,IAAI9B,EAAQ8B,IAClB5T,KAAK2T,OAAOC,EAAQA,EAAOT,WAWtCnc,EAAYkd,OAAS,SAAgBxG,GACjC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAoB,MAAhBA,EAAQ3b,MAAgB2b,EAAQjc,eAAe,QAAS,CACxD,IAAK8B,MAAM4M,QAAQuN,EAAQ3b,MACvB,MAAO,uBACX,IAAK,IAAIvC,EAAI,EAAGA,EAAIke,EAAQ3b,KAAKF,SAAUrC,EACvC,KAAK0iB,EAAM7W,UAAUqS,EAAQ3b,KAAKvC,KAASke,EAAQ3b,KAAKvC,IAAM0iB,EAAM7W,UAAUqS,EAAQ3b,KAAKvC,GAAG2kB,MAAQjC,EAAM7W,UAAUqS,EAAQ3b,KAAKvC,GAAG4kB,OAClI,MAAO,gCAEnB,GAAwB,MAApB1G,EAAQ3M,UAAoB2M,EAAQjc,eAAe,cAC9CygB,EAAM7W,UAAUqS,EAAQ3M,UACzB,MAAO,6BACf,GAAuB,MAAnB2M,EAAQ2I,SAAmB3I,EAAQjc,eAAe,aAC9CwT,EAAQkN,EAAMpb,KAAKC,YAAYuf,QAAQrC,OAAOxG,EAAQ2I,UAEtD,MAAO,WAAapR,EAE5B,GAAyB,MAArByI,EAAQ1L,WAAqB0L,EAAQjc,eAAe,aAAc,CAClE,IAAK8B,MAAM4M,QAAQuN,EAAQ1L,WACvB,MAAO,4BACX,IAASxS,EAAI,EAAGA,EAAIke,EAAQ1L,UAAUnQ,SAAUrC,EAC5C,GAAoC,iBAAzBke,EAAQ1L,UAAUxS,GACzB,MAAO,+BAEnB,GAAyB,MAArBke,EAAQzL,WAAqByL,EAAQjc,eAAe,aAAc,CAClE,IAAK8B,MAAM4M,QAAQuN,EAAQzL,WACvB,MAAO,4BACX,IAASzS,EAAI,EAAGA,EAAIke,EAAQzL,UAAUpQ,SAAUrC,EAC5C,IAAK0iB,EAAM7W,UAAUqS,EAAQzL,UAAUzS,IACnC,MAAO,gCAEnB,GAA0B,MAAtBke,EAAQ1M,YAAsB0M,EAAQjc,eAAe,cAAe,CACpE,IAAK8B,MAAM4M,QAAQuN,EAAQ1M,YACvB,MAAO,6BACX,IAASxR,EAAI,EAAGA,EAAIke,EAAQ1M,WAAWnP,SAAUrC,EAC7C,KAAMke,EAAQ1M,WAAWxR,IAA8C,iBAAjCke,EAAQ1M,WAAWxR,GAAGqC,QAAuBqgB,EAAMnD,SAASrB,EAAQ1M,WAAWxR,KACjH,MAAO,gCAEnB,GAAyB,MAArBke,EAAQxL,WAAqBwL,EAAQjc,eAAe,aAAc,CAClE,IAAK8B,MAAM4M,QAAQuN,EAAQxL,WACvB,MAAO,4BACX,IAAS1S,EAAI,EAAGA,EAAIke,EAAQxL,UAAUrQ,SAAUrC,EAC5C,KAAK0iB,EAAM7W,UAAUqS,EAAQxL,UAAU1S,KAASke,EAAQxL,UAAU1S,IAAM0iB,EAAM7W,UAAUqS,EAAQxL,UAAU1S,GAAG2kB,MAAQjC,EAAM7W,UAAUqS,EAAQxL,UAAU1S,GAAG4kB,OACtJ,MAAO,qCAEnB,GAAoB,MAAhB1G,EAAQvd,MAAgBud,EAAQjc,eAAe,UAC1CygB,EAAMnD,SAASrB,EAAQvd,MACxB,MAAO,wBACf,GAAyB,MAArBud,EAAQqF,WAAqBrF,EAAQjc,eAAe,eAC/CygB,EAAMnD,SAASrB,EAAQqF,WACxB,MAAO,6BACf,GAAuB,MAAnBrF,EAAQlM,SAAmBkM,EAAQjc,eAAe,cAC5Cic,EAAQlM,SAA6C,iBAA3BkM,EAAQlM,QAAQ3P,QAAuBqgB,EAAMnD,SAASrB,EAAQlM,UAC1F,MAAO,2BACf,GAA4B,MAAxBkM,EAAQ0I,cAAwB1I,EAAQjc,eAAe,gBAAiB,CACxE,IAAK8B,MAAM4M,QAAQuN,EAAQ0I,cACvB,MAAO,+BACX,IAAS5mB,EAAI,EAAGA,EAAIke,EAAQ0I,aAAavkB,SAAUrC,EAAG,CAClD,IAAIyV,EACJ,GADIA,EAAQkN,EAAMpb,KAAK8e,uBAAuB3B,OAAOxG,EAAQ0I,aAAa5mB,IAEtE,MAAO,gBAAkByV,GAGrC,GAA4B,MAAxByI,EAAQ4I,cAAwB5I,EAAQjc,eAAe,gBACvD,OAAQic,EAAQ4I,cAChB,QACI,MAAO,oCACX,KAAK,EACL,KAAK,GAGT,GAA0B,MAAtB5I,EAAQvL,YAAsBuL,EAAQjc,eAAe,cAAe,CACpE,IAAK8B,MAAM4M,QAAQuN,EAAQvL,YACvB,MAAO,6BACX,IAAS3S,EAAI,EAAGA,EAAIke,EAAQvL,WAAWtQ,SAAUrC,EAC7C,GAAqC,iBAA1Bke,EAAQvL,WAAW3S,GAC1B,MAAO,gCAEnB,GAA0B,MAAtBke,EAAQtL,YAAsBsL,EAAQjc,eAAe,cAAe,CACpE,IAAK8B,MAAM4M,QAAQuN,EAAQtL,YACvB,MAAO,6BACX,IAAS5S,EAAI,EAAGA,EAAIke,EAAQtL,WAAWvQ,SAAUrC,EAC7C,KAAK0iB,EAAM7W,UAAUqS,EAAQtL,WAAW5S,KAASke,EAAQtL,WAAW5S,IAAM0iB,EAAM7W,UAAUqS,EAAQtL,WAAW5S,GAAG2kB,MAAQjC,EAAM7W,UAAUqS,EAAQtL,WAAW5S,GAAG4kB,OAC1J,MAAO,sCAEnB,OAAO,MAWXpd,EAAYqd,WAAa,SAAoB/iB,GACzC,GAAIA,aAAkB6gB,EAAMpb,KAAKC,YAC7B,OAAO1F,EACX,IAAIoc,EAAU,IAAIyE,EAAMpb,KAAKC,YAC7B,GAAI1F,EAAOS,KAAM,CACb,IAAKwB,MAAM4M,QAAQ7O,EAAOS,MACtB,MAAMoJ,UAAU,0CACpBuS,EAAQ3b,KAAO,GACf,IAAK,IAAIvC,EAAI,EAAGA,EAAI8B,EAAOS,KAAKF,SAAUrC,EAClC0iB,EAAMvC,MACLjC,EAAQ3b,KAAKvC,GAAK0iB,EAAMvC,KAAK2E,UAAUhjB,EAAOS,KAAKvC,KAAK6gB,UAAW,EACrC,iBAAnB/e,EAAOS,KAAKvC,GACxBke,EAAQ3b,KAAKvC,GAAK+kB,SAASjjB,EAAOS,KAAKvC,GAAI,IACZ,iBAAnB8B,EAAOS,KAAKvC,GACxBke,EAAQ3b,KAAKvC,GAAK8B,EAAOS,KAAKvC,GACC,iBAAnB8B,EAAOS,KAAKvC,KACxBke,EAAQ3b,KAAKvC,GAAK,IAAI0iB,EAAM9D,SAAS9c,EAAOS,KAAKvC,GAAG2kB,MAAQ,EAAG7iB,EAAOS,KAAKvC,GAAG4kB,OAAS,GAAGnc,YAItG,GAFuB,MAAnB3G,EAAOyP,WACP2M,EAAQ3M,SAA6B,EAAlBzP,EAAOyP,UACR,MAAlBzP,EAAO+kB,QAAiB,CACxB,GAA8B,iBAAnB/kB,EAAO+kB,QACd,MAAMlb,UAAU,8CACpBuS,EAAQ2I,QAAUlE,EAAMpb,KAAKC,YAAYuf,QAAQlC,WAAW/iB,EAAO+kB,SAEvE,GAAI/kB,EAAO0Q,UAAW,CAClB,IAAKzO,MAAM4M,QAAQ7O,EAAO0Q,WACtB,MAAM7G,UAAU,+CACpBuS,EAAQ1L,UAAY,GACpB,IAASxS,EAAI,EAAGA,EAAI8B,EAAO0Q,UAAUnQ,SAAUrC,EAC3Cke,EAAQ1L,UAAUxS,GAAK4L,OAAO9J,EAAO0Q,UAAUxS,IAEvD,GAAI8B,EAAO2Q,UAAW,CAClB,IAAK1O,MAAM4M,QAAQ7O,EAAO2Q,WACtB,MAAM9G,UAAU,+CACpBuS,EAAQzL,UAAY,GACpB,IAASzS,EAAI,EAAGA,EAAI8B,EAAO2Q,UAAUpQ,SAAUrC,EAC3Cke,EAAQzL,UAAUzS,GAA2B,EAAtB8B,EAAO2Q,UAAUzS,GAEhD,GAAI8B,EAAO0P,WAAY,CACnB,IAAKzN,MAAM4M,QAAQ7O,EAAO0P,YACtB,MAAM7F,UAAU,gDACpBuS,EAAQ1M,WAAa,GACrB,IAASxR,EAAI,EAAGA,EAAI8B,EAAO0P,WAAWnP,SAAUrC,EACR,iBAAzB8B,EAAO0P,WAAWxR,GACzB0iB,EAAMpE,OAAO6F,OAAOriB,EAAO0P,WAAWxR,GAAIke,EAAQ1M,WAAWxR,GAAK0iB,EAAMzC,UAAUyC,EAAMpE,OAAOjc,OAAOP,EAAO0P,WAAWxR,KAAM,GACzH8B,EAAO0P,WAAWxR,GAAGqC,SAC1B6b,EAAQ1M,WAAWxR,GAAK8B,EAAO0P,WAAWxR,IAEtD,GAAI8B,EAAO4Q,UAAW,CAClB,IAAK3O,MAAM4M,QAAQ7O,EAAO4Q,WACtB,MAAM/G,UAAU,+CACpBuS,EAAQxL,UAAY,GACpB,IAAS1S,EAAI,EAAGA,EAAI8B,EAAO4Q,UAAUrQ,SAAUrC,EACvC0iB,EAAMvC,MACLjC,EAAQxL,UAAU1S,GAAK0iB,EAAMvC,KAAK2E,UAAUhjB,EAAO4Q,UAAU1S,KAAK6gB,UAAW,EAC1C,iBAAxB/e,EAAO4Q,UAAU1S,GAC7Bke,EAAQxL,UAAU1S,GAAK+kB,SAASjjB,EAAO4Q,UAAU1S,GAAI,IACjB,iBAAxB8B,EAAO4Q,UAAU1S,GAC7Bke,EAAQxL,UAAU1S,GAAK8B,EAAO4Q,UAAU1S,GACJ,iBAAxB8B,EAAO4Q,UAAU1S,KAC7Bke,EAAQxL,UAAU1S,GAAK,IAAI0iB,EAAM9D,SAAS9c,EAAO4Q,UAAU1S,GAAG2kB,MAAQ,EAAG7iB,EAAO4Q,UAAU1S,GAAG4kB,OAAS,GAAGnc,YAWrH,GATmB,MAAf3G,EAAOnB,OACPud,EAAQvd,KAAO6e,OAAO1d,EAAOnB,OACT,MAApBmB,EAAOyhB,YACPrF,EAAQqF,UAAY/D,OAAO1d,EAAOyhB,YAChB,MAAlBzhB,EAAOkQ,UACuB,iBAAnBlQ,EAAOkQ,QACd0Q,EAAMpE,OAAO6F,OAAOriB,EAAOkQ,QAASkM,EAAQlM,QAAU0Q,EAAMzC,UAAUyC,EAAMpE,OAAOjc,OAAOP,EAAOkQ,UAAW,GACvGlQ,EAAOkQ,QAAQ3P,SACpB6b,EAAQlM,QAAUlQ,EAAOkQ,UAC7BlQ,EAAO8kB,aAAc,CACrB,IAAK7iB,MAAM4M,QAAQ7O,EAAO8kB,cACtB,MAAMjb,UAAU,kDACpBuS,EAAQ0I,aAAe,GACvB,IAAS5mB,EAAI,EAAGA,EAAI8B,EAAO8kB,aAAavkB,SAAUrC,EAAG,CACjD,GAAsC,iBAA3B8B,EAAO8kB,aAAa5mB,GAC3B,MAAM2L,UAAU,mDACpBuS,EAAQ0I,aAAa5mB,GAAK2iB,EAAMpb,KAAK8e,uBAAuBxB,WAAW/iB,EAAO8kB,aAAa5mB,KAGnG,OAAQ8B,EAAOglB,cACf,IAAK,UACL,KAAK,EACD5I,EAAQ4I,aAAe,EACvB,MACJ,IAAK,WACL,KAAK,EACD5I,EAAQ4I,aAAe,EAG3B,GAAIhlB,EAAO6Q,WAAY,CACnB,IAAK5O,MAAM4M,QAAQ7O,EAAO6Q,YACtB,MAAMhH,UAAU,gDACpBuS,EAAQvL,WAAa,GACrB,IAAS3S,EAAI,EAAGA,EAAI8B,EAAO6Q,WAAWtQ,SAAUrC,EAC5Cke,EAAQvL,WAAW3S,GAAK4L,OAAO9J,EAAO6Q,WAAW3S,IAEzD,GAAI8B,EAAO8Q,WAAY,CACnB,IAAK7O,MAAM4M,QAAQ7O,EAAO8Q,YACtB,MAAMjH,UAAU,gDACpBuS,EAAQtL,WAAa,GACrB,IAAS5S,EAAI,EAAGA,EAAI8B,EAAO8Q,WAAWvQ,SAAUrC,EACxC0iB,EAAMvC,MACLjC,EAAQtL,WAAW5S,GAAK0iB,EAAMvC,KAAK2E,UAAUhjB,EAAO8Q,WAAW5S,KAAK6gB,UAAW,EAC3C,iBAAzB/e,EAAO8Q,WAAW5S,GAC9Bke,EAAQtL,WAAW5S,GAAK+kB,SAASjjB,EAAO8Q,WAAW5S,GAAI,IAClB,iBAAzB8B,EAAO8Q,WAAW5S,GAC9Bke,EAAQtL,WAAW5S,GAAK8B,EAAO8Q,WAAW5S,GACL,iBAAzB8B,EAAO8Q,WAAW5S,KAC9Bke,EAAQtL,WAAW5S,GAAK,IAAI0iB,EAAM9D,SAAS9c,EAAO8Q,WAAW5S,GAAG2kB,MAAQ,EAAG7iB,EAAO8Q,WAAW5S,GAAG4kB,OAAS,GAAGnc,UAAS,IAEjI,OAAOyV,GAYX1W,EAAYwd,SAAW,SAAkB9G,EAAS+G,GACzCA,IACDA,EAAU,IACd,IAAInjB,EAAS,GAyBb,IAxBImjB,EAAQC,QAAUD,EAAQE,YAC1BrjB,EAAOS,KAAO,GACdT,EAAO0Q,UAAY,GACnB1Q,EAAO2Q,UAAY,GACnB3Q,EAAO0P,WAAa,GACpB1P,EAAO4Q,UAAY,GACnB5Q,EAAO6Q,WAAa,GACpB7Q,EAAO8Q,WAAa,GACpB9Q,EAAO8kB,aAAe,IAEtB3B,EAAQE,WACRrjB,EAAOyP,SAAW,EAClBzP,EAAO+kB,QAAU,KACjB/kB,EAAOnB,KAAO,GACVskB,EAAQnD,QAAUtC,OAClB1d,EAAOkQ,QAAU,IAEjBlQ,EAAOkQ,QAAU,GACbiT,EAAQnD,QAAU/d,QAClBjC,EAAOkQ,QAAU0Q,EAAMzC,UAAUne,EAAOkQ,WAEhDlQ,EAAOyhB,UAAY,GACnBzhB,EAAOglB,aAAe7B,EAAQpD,QAAUrC,OAAS,UAAY,GAE7DtB,EAAQ3b,MAAQ2b,EAAQ3b,KAAKF,OAAQ,CACrCP,EAAOS,KAAO,GACd,IAAK,IAAIqD,EAAI,EAAGA,EAAIsY,EAAQ3b,KAAKF,SAAUuD,EACR,iBAApBsY,EAAQ3b,KAAKqD,GACpB9D,EAAOS,KAAKqD,GAAKqf,EAAQrD,QAAUpC,OAASA,OAAOtB,EAAQ3b,KAAKqD,IAAMsY,EAAQ3b,KAAKqD,GAEnF9D,EAAOS,KAAKqD,GAAKqf,EAAQrD,QAAUpC,OAASkD,EAAMvC,KAAKne,UAAU+P,SAASxR,KAAK2d,EAAQ3b,KAAKqD,IAAMqf,EAAQrD,QAAUhW,OAAS,IAAI8W,EAAM9D,SAASV,EAAQ3b,KAAKqD,GAAG+e,MAAQ,EAAGzG,EAAQ3b,KAAKqD,GAAGgf,OAAS,GAAGnc,WAAayV,EAAQ3b,KAAKqD,GAM7O,GAJwB,MAApBsY,EAAQ3M,UAAoB2M,EAAQjc,eAAe,cACnDH,EAAOyP,SAAW2M,EAAQ3M,UACP,MAAnB2M,EAAQ2I,SAAmB3I,EAAQjc,eAAe,aAClDH,EAAO+kB,QAAUlE,EAAMpb,KAAKC,YAAYuf,QAAQ/B,SAAS9G,EAAQ2I,QAAS5B,IAC1E/G,EAAQ1L,WAAa0L,EAAQ1L,UAAUnQ,OAAQ,CAC/CP,EAAO0Q,UAAY,GACnB,IAAS5M,EAAI,EAAGA,EAAIsY,EAAQ1L,UAAUnQ,SAAUuD,EAC5C9D,EAAO0Q,UAAU5M,GAAKqf,EAAQlD,OAASzC,SAASpB,EAAQ1L,UAAU5M,IAAM4Z,OAAOtB,EAAQ1L,UAAU5M,IAAMsY,EAAQ1L,UAAU5M,GAEjI,GAAIsY,EAAQzL,WAAayL,EAAQzL,UAAUpQ,OAAQ,CAC/CP,EAAO2Q,UAAY,GACnB,IAAS7M,EAAI,EAAGA,EAAIsY,EAAQzL,UAAUpQ,SAAUuD,EAC5C9D,EAAO2Q,UAAU7M,GAAKsY,EAAQzL,UAAU7M,GAEhD,GAAIsY,EAAQ1M,YAAc0M,EAAQ1M,WAAWnP,OAAQ,CACjDP,EAAO0P,WAAa,GACpB,IAAS5L,EAAI,EAAGA,EAAIsY,EAAQ1M,WAAWnP,SAAUuD,EAC7C9D,EAAO0P,WAAW5L,GAAKqf,EAAQnD,QAAUtC,OAASkD,EAAMpE,OAAOmF,OAAOvF,EAAQ1M,WAAW5L,GAAI,EAAGsY,EAAQ1M,WAAW5L,GAAGvD,QAAU4iB,EAAQnD,QAAU/d,MAAQA,MAAM/B,UAAU6H,MAAMtJ,KAAK2d,EAAQ1M,WAAW5L,IAAMsY,EAAQ1M,WAAW5L,GAEzO,GAAIsY,EAAQxL,WAAawL,EAAQxL,UAAUrQ,OAAQ,CAC/CP,EAAO4Q,UAAY,GACnB,IAAS9M,EAAI,EAAGA,EAAIsY,EAAQxL,UAAUrQ,SAAUuD,EACR,iBAAzBsY,EAAQxL,UAAU9M,GACzB9D,EAAO4Q,UAAU9M,GAAKqf,EAAQrD,QAAUpC,OAASA,OAAOtB,EAAQxL,UAAU9M,IAAMsY,EAAQxL,UAAU9M,GAElG9D,EAAO4Q,UAAU9M,GAAKqf,EAAQrD,QAAUpC,OAASkD,EAAMvC,KAAKne,UAAU+P,SAASxR,KAAK2d,EAAQxL,UAAU9M,IAAMqf,EAAQrD,QAAUhW,OAAS,IAAI8W,EAAM9D,SAASV,EAAQxL,UAAU9M,GAAG+e,MAAQ,EAAGzG,EAAQxL,UAAU9M,GAAGgf,OAAS,GAAGnc,WAAayV,EAAQxL,UAAU9M,GAMtQ,GAJoB,MAAhBsY,EAAQvd,MAAgBud,EAAQjc,eAAe,UAC/CH,EAAOnB,KAAOud,EAAQvd,MACH,MAAnBud,EAAQlM,SAAmBkM,EAAQjc,eAAe,aAClDH,EAAOkQ,QAAUiT,EAAQnD,QAAUtC,OAASkD,EAAMpE,OAAOmF,OAAOvF,EAAQlM,QAAS,EAAGkM,EAAQlM,QAAQ3P,QAAU4iB,EAAQnD,QAAU/d,MAAQA,MAAM/B,UAAU6H,MAAMtJ,KAAK2d,EAAQlM,SAAWkM,EAAQlM,SAC9LkM,EAAQvL,YAAcuL,EAAQvL,WAAWtQ,OAAQ,CACjDP,EAAO6Q,WAAa,GACpB,IAAS/M,EAAI,EAAGA,EAAIsY,EAAQvL,WAAWtQ,SAAUuD,EAC7C9D,EAAO6Q,WAAW/M,GAAKqf,EAAQlD,OAASzC,SAASpB,EAAQvL,WAAW/M,IAAM4Z,OAAOtB,EAAQvL,WAAW/M,IAAMsY,EAAQvL,WAAW/M,GAErI,GAAIsY,EAAQtL,YAAcsL,EAAQtL,WAAWvQ,OAAQ,CACjDP,EAAO8Q,WAAa,GACpB,IAAShN,EAAI,EAAGA,EAAIsY,EAAQtL,WAAWvQ,SAAUuD,EACR,iBAA1BsY,EAAQtL,WAAWhN,GAC1B9D,EAAO8Q,WAAWhN,GAAKqf,EAAQrD,QAAUpC,OAASA,OAAOtB,EAAQtL,WAAWhN,IAAMsY,EAAQtL,WAAWhN,GAErG9D,EAAO8Q,WAAWhN,GAAKqf,EAAQrD,QAAUpC,OAASkD,EAAMvC,KAAKne,UAAU+P,SAASxR,KAAK2d,EAAQtL,WAAWhN,IAAMqf,EAAQrD,QAAUhW,OAAS,IAAI8W,EAAM9D,SAASV,EAAQtL,WAAWhN,GAAG+e,MAAQ,EAAGzG,EAAQtL,WAAWhN,GAAGgf,OAAS,GAAGnc,UAAS,GAAQyV,EAAQtL,WAAWhN,GAI/Q,GAFyB,MAArBsY,EAAQqF,WAAqBrF,EAAQjc,eAAe,eACpDH,EAAOyhB,UAAYrF,EAAQqF,WAC3BrF,EAAQ0I,cAAgB1I,EAAQ0I,aAAavkB,OAAQ,CACrDP,EAAO8kB,aAAe,GACtB,IAAShhB,EAAI,EAAGA,EAAIsY,EAAQ0I,aAAavkB,SAAUuD,EAC/C9D,EAAO8kB,aAAahhB,GAAK+c,EAAMpb,KAAK8e,uBAAuBrB,SAAS9G,EAAQ0I,aAAahhB,GAAIqf,GAIrG,OAF4B,MAAxB/G,EAAQ4I,cAAwB5I,EAAQjc,eAAe,kBACvDH,EAAOglB,aAAe7B,EAAQpD,QAAUrC,OAASmD,EAAMpb,KAAKC,YAAY0f,aAAahJ,EAAQ4I,cAAgB5I,EAAQ4I,cAClHhlB,GAUX0F,EAAYxF,UAAUsjB,OAAS,WAC3B,OAAO9U,KAAKI,YAAYoU,SAASxU,KAAM6R,EAAU3E,KAAKiE,gBAyB1Dna,EAAYC,SAAW,WACnB,IAAIob,EAAa,GAAIC,EAAShiB,OAAOY,OAAOmhB,GAkB5C,OAjBAC,EAAOD,EAAW,GAAK,aAAe,EACtCC,EAAOD,EAAW,GAAK,SAAW,EAClCC,EAAOD,EAAW,GAAK,SAAW,EAClCC,EAAOD,EAAW,GAAK,QAAU,EACjCC,EAAOD,EAAW,GAAK,UAAY,EACnCC,EAAOD,EAAW,GAAK,SAAW,EAClCC,EAAOD,EAAW,GAAK,SAAW,EAClCC,EAAOD,EAAW,GAAK,SAAW,EAClCC,EAAOD,EAAW,GAAK,UAAY,EACnCC,EAAOD,EAAW,GAAK,QAAU,EACjCC,EAAOD,EAAW,IAAM,WAAa,GACrCC,EAAOD,EAAW,IAAM,UAAY,GACpCC,EAAOD,EAAW,IAAM,UAAY,GACpCC,EAAOD,EAAW,IAAM,UAAY,GACpCC,EAAOD,EAAW,IAAM,aAAe,GACvCC,EAAOD,EAAW,IAAM,cAAgB,GACxCC,EAAOD,EAAW,IAAM,YAAc,GAC/BC,EAnBY,GAsBvBtb,EAAYuf,QAAU,WAkBlB,SAASA,EAAQ5I,GACb,GAAIA,EACA,IAAK,IAAIJ,EAAOjd,OAAOid,KAAKI,GAAane,EAAI,EAAGA,EAAI+d,EAAK1b,SAAUrC,EACpC,MAAvBme,EAAWJ,EAAK/d,MAChBwQ,KAAKuN,EAAK/d,IAAMme,EAAWJ,EAAK/d,KAqNhD,OA5MA+mB,EAAQ/kB,UAAUiW,MAAQyK,EAAMvC,KAAOuC,EAAMvC,KAAKlM,SAAS,EAAE,GAAE,GAAS,EAQxE8S,EAAQ/kB,UAAUwH,IAAMkZ,EAAMvC,KAAOuC,EAAMvC,KAAKlM,SAAS,EAAE,GAAE,GAAS,EAUtE8S,EAAQrlB,OAAS,SAAgByc,GAC7B,OAAO,IAAI4I,EAAQ5I,IAYvB4I,EAAQtD,OAAS,SAAgBvF,EAASwF,GAOtC,OANKA,IACDA,EAASlB,EAAQ9gB,UACA,MAAjBwc,EAAQjG,OAAiBiG,EAAQjc,eAAe,UAChDyhB,EAAOC,OAA8B,GAAGE,MAAM3F,EAAQjG,OACvC,MAAfiG,EAAQ1U,KAAe0U,EAAQjc,eAAe,QAC9CyhB,EAAOC,OAA8B,IAAIE,MAAM3F,EAAQ1U,KACpDka,GAYXqD,EAAQ7C,gBAAkB,SAAyBhG,EAASwF,GACxD,OAAOlT,KAAKiT,OAAOvF,EAASwF,GAAQK,UAcxCgD,EAAQ5C,OAAS,SAAgBC,EAAQ/hB,GAC/B+hB,aAAkB9B,IACpB8B,EAAS9B,EAAQ5gB,OAAO0iB,IAE5B,IADA,IAAI5a,OAAiBrG,IAAXd,EAAuB+hB,EAAOC,IAAMD,EAAO1V,IAAMrM,EAAQ6b,EAAU,IAAIyE,EAAMpb,KAAKC,YAAYuf,QACjG3C,EAAO1V,IAAMlF,GAAK,CACrB,IAAI8a,EAAMF,EAAOT,SACjB,OAAQW,IAAQ,GAChB,KAAK,EACDpG,EAAQjG,MAAQmM,EAAOP,QACvB,MACJ,KAAK,EACD3F,EAAQ1U,IAAM4a,EAAOP,QACrB,MACJ,QACIO,EAAOI,SAAe,EAANF,IAIxB,OAAOpG,GAaX6I,EAAQtC,gBAAkB,SAAyBL,GAG/C,OAFMA,aAAkB9B,IACpB8B,EAAS,IAAI9B,EAAQ8B,IAClB5T,KAAK2T,OAAOC,EAAQA,EAAOT,WAWtCoD,EAAQrC,OAAS,SAAgBxG,GAC7B,MAAuB,iBAAZA,GAAoC,OAAZA,EACxB,kBACU,MAAjBA,EAAQjG,OAAiBiG,EAAQjc,eAAe,YAC3CygB,EAAM7W,UAAUqS,EAAQjG,QAAYiG,EAAQjG,OAASyK,EAAM7W,UAAUqS,EAAQjG,MAAM0M,MAAQjC,EAAM7W,UAAUqS,EAAQjG,MAAM2M,OACnH,+BACI,MAAf1G,EAAQ1U,KAAe0U,EAAQjc,eAAe,UACzCygB,EAAM7W,UAAUqS,EAAQ1U,MAAU0U,EAAQ1U,KAAOkZ,EAAM7W,UAAUqS,EAAQ1U,IAAImb,MAAQjC,EAAM7W,UAAUqS,EAAQ1U,IAAIob,OAC3G,6BACR,MAWXmC,EAAQlC,WAAa,SAAoB/iB,GACrC,GAAIA,aAAkB6gB,EAAMpb,KAAKC,YAAYuf,QACzC,OAAOjlB,EACX,IAAIoc,EAAU,IAAIyE,EAAMpb,KAAKC,YAAYuf,QAmBzC,OAlBoB,MAAhBjlB,EAAOmW,QACHyK,EAAMvC,MACLjC,EAAQjG,MAAQyK,EAAMvC,KAAK2E,UAAUhjB,EAAOmW,QAAQ4I,UAAW,EACnC,iBAAjB/e,EAAOmW,MACnBiG,EAAQjG,MAAQ8M,SAASjjB,EAAOmW,MAAO,IACV,iBAAjBnW,EAAOmW,MACnBiG,EAAQjG,MAAQnW,EAAOmW,MACM,iBAAjBnW,EAAOmW,QACnBiG,EAAQjG,MAAQ,IAAIyK,EAAM9D,SAAS9c,EAAOmW,MAAM0M,MAAQ,EAAG7iB,EAAOmW,MAAM2M,OAAS,GAAGnc,aAC1E,MAAd3G,EAAO0H,MACHkZ,EAAMvC,MACLjC,EAAQ1U,IAAMkZ,EAAMvC,KAAK2E,UAAUhjB,EAAO0H,MAAMqX,UAAW,EACjC,iBAAf/e,EAAO0H,IACnB0U,EAAQ1U,IAAMub,SAASjjB,EAAO0H,IAAK,IACR,iBAAf1H,EAAO0H,IACnB0U,EAAQ1U,IAAM1H,EAAO0H,IACM,iBAAf1H,EAAO0H,MACnB0U,EAAQ1U,IAAM,IAAIkZ,EAAM9D,SAAS9c,EAAO0H,IAAImb,MAAQ,EAAG7iB,EAAO0H,IAAIob,OAAS,GAAGnc,aAC/EyV,GAYX6I,EAAQ/B,SAAW,SAAkB9G,EAAS+G,GACrCA,IACDA,EAAU,IACd,IAAInjB,EAAS,GACb,GAAImjB,EAAQE,SAAU,CAClB,GAAIzC,EAAMvC,KAAM,CACZ,IAAIiF,EAAO,IAAI1C,EAAMvC,KAAK,EAAG,GAAG,GAChCre,EAAOmW,MAAQgN,EAAQrD,QAAUpC,OAAS4F,EAAKrT,WAAakT,EAAQrD,QAAUhW,OAASwZ,EAAK3c,WAAa2c,OAEzGtjB,EAAOmW,MAAQgN,EAAQrD,QAAUpC,OAAS,IAAM,EACpD,GAAIkD,EAAMvC,KAAM,CACRiF,EAAO,IAAI1C,EAAMvC,KAAK,EAAG,GAAG,GAChCre,EAAO0H,IAAMyb,EAAQrD,QAAUpC,OAAS4F,EAAKrT,WAAakT,EAAQrD,QAAUhW,OAASwZ,EAAK3c,WAAa2c,OAEvGtjB,EAAO0H,IAAMyb,EAAQrD,QAAUpC,OAAS,IAAM,EAYtD,OAVqB,MAAjBtB,EAAQjG,OAAiBiG,EAAQjc,eAAe,WACnB,iBAAlBic,EAAQjG,MACfnW,EAAOmW,MAAQgN,EAAQrD,QAAUpC,OAASA,OAAOtB,EAAQjG,OAASiG,EAAQjG,MAE1EnW,EAAOmW,MAAQgN,EAAQrD,QAAUpC,OAASkD,EAAMvC,KAAKne,UAAU+P,SAASxR,KAAK2d,EAAQjG,OAASgN,EAAQrD,QAAUhW,OAAS,IAAI8W,EAAM9D,SAASV,EAAQjG,MAAM0M,MAAQ,EAAGzG,EAAQjG,MAAM2M,OAAS,GAAGnc,WAAayV,EAAQjG,OACzM,MAAfiG,EAAQ1U,KAAe0U,EAAQjc,eAAe,SACnB,iBAAhBic,EAAQ1U,IACf1H,EAAO0H,IAAMyb,EAAQrD,QAAUpC,OAASA,OAAOtB,EAAQ1U,KAAO0U,EAAQ1U,IAEtE1H,EAAO0H,IAAMyb,EAAQrD,QAAUpC,OAASkD,EAAMvC,KAAKne,UAAU+P,SAASxR,KAAK2d,EAAQ1U,KAAOyb,EAAQrD,QAAUhW,OAAS,IAAI8W,EAAM9D,SAASV,EAAQ1U,IAAImb,MAAQ,EAAGzG,EAAQ1U,IAAIob,OAAS,GAAGnc,WAAayV,EAAQ1U,KAC7M1H,GAUXilB,EAAQ/kB,UAAUsjB,OAAS,WACvB,OAAO9U,KAAKI,YAAYoU,SAASxU,KAAM6R,EAAU3E,KAAKiE,gBAGnDoF,EA3OW,GAqPtBvf,EAAY0f,aAAe,WACvB,IAAIrE,EAAa,GAAIC,EAAShiB,OAAOY,OAAOmhB,GAG5C,OAFAC,EAAOD,EAAW,GAAK,WAAa,EACpCC,EAAOD,EAAW,GAAK,YAAc,EAC9BC,EAJgB,GAOpBtb,EAl/BQ,GAq/BnBD,EAAK4f,iBAAmB,WAiBpB,SAASA,EAAiBhJ,GAEtB,GADA3N,KAAKzH,IAAM,GACPoV,EACA,IAAK,IAAIJ,EAAOjd,OAAOid,KAAKI,GAAane,EAAI,EAAGA,EAAI+d,EAAK1b,SAAUrC,EACpC,MAAvBme,EAAWJ,EAAK/d,MAChBwQ,KAAKuN,EAAK/d,IAAMme,EAAWJ,EAAK/d,KAichD,OAxbAmnB,EAAiBnlB,UAAU+G,IAAM2Z,EAAM3D,WAUvCoI,EAAiBzlB,OAAS,SAAgByc,GACtC,OAAO,IAAIgJ,EAAiBhJ,IAYhCgJ,EAAiB1D,OAAS,SAAgBvF,EAASwF,GAG/C,GAFKA,IACDA,EAASlB,EAAQ9gB,UACF,MAAfwc,EAAQnV,KAAemV,EAAQnV,IAAI1G,OACnC,IAAK,IAAIrC,EAAI,EAAGA,EAAIke,EAAQnV,IAAI1G,SAAUrC,EACtC2iB,EAAMpb,KAAK4f,iBAAiBC,UAAU3D,OAAOvF,EAAQnV,IAAI/I,GAAI0jB,EAAOC,OAA8B,IAAIG,QAAQC,SACtH,OAAOL,GAYXyD,EAAiBjD,gBAAkB,SAAyBhG,EAASwF,GACjE,OAAOlT,KAAKiT,OAAOvF,EAASwF,GAAQK,UAcxCoD,EAAiBhD,OAAS,SAAgBC,EAAQ/hB,GACxC+hB,aAAkB9B,IACpB8B,EAAS9B,EAAQ5gB,OAAO0iB,IAE5B,IADA,IAAI5a,OAAiBrG,IAAXd,EAAuB+hB,EAAOC,IAAMD,EAAO1V,IAAMrM,EAAQ6b,EAAU,IAAIyE,EAAMpb,KAAK4f,iBACrF/C,EAAO1V,IAAMlF,GAAK,CACrB,IAAI8a,EAAMF,EAAOT,SACjB,OAAQW,IAAQ,GAChB,KAAK,EACKpG,EAAQnV,KAAOmV,EAAQnV,IAAI1G,SAC7B6b,EAAQnV,IAAM,IAClBmV,EAAQnV,IAAIwD,KAAKoW,EAAMpb,KAAK4f,iBAAiBC,UAAUjD,OAAOC,EAAQA,EAAOT,WAC7E,MACJ,QACIS,EAAOI,SAAe,EAANF,IAIxB,OAAOpG,GAaXiJ,EAAiB1C,gBAAkB,SAAyBL,GAGxD,OAFMA,aAAkB9B,IACpB8B,EAAS,IAAI9B,EAAQ8B,IAClB5T,KAAK2T,OAAOC,EAAQA,EAAOT,WAWtCwD,EAAiBzC,OAAS,SAAgBxG,GACtC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAmB,MAAfA,EAAQnV,KAAemV,EAAQjc,eAAe,OAAQ,CACtD,IAAK8B,MAAM4M,QAAQuN,EAAQnV,KACvB,MAAO,sBACX,IAAK,IAAI/I,EAAI,EAAGA,EAAIke,EAAQnV,IAAI1G,SAAUrC,EAAG,CACzC,IAAIyV,EAAQkN,EAAMpb,KAAK4f,iBAAiBC,UAAU1C,OAAOxG,EAAQnV,IAAI/I,IACrE,GAAIyV,EACA,MAAO,OAASA,GAG5B,OAAO,MAWX0R,EAAiBtC,WAAa,SAAoB/iB,GAC9C,GAAIA,aAAkB6gB,EAAMpb,KAAK4f,iBAC7B,OAAOrlB,EACX,IAAIoc,EAAU,IAAIyE,EAAMpb,KAAK4f,iBAC7B,GAAIrlB,EAAOiH,IAAK,CACZ,IAAKhF,MAAM4M,QAAQ7O,EAAOiH,KACtB,MAAM4C,UAAU,8CACpBuS,EAAQnV,IAAM,GACd,IAAK,IAAI/I,EAAI,EAAGA,EAAI8B,EAAOiH,IAAI1G,SAAUrC,EAAG,CACxC,GAA6B,iBAAlB8B,EAAOiH,IAAI/I,GAClB,MAAM2L,UAAU,+CACpBuS,EAAQnV,IAAI/I,GAAK2iB,EAAMpb,KAAK4f,iBAAiBC,UAAUvC,WAAW/iB,EAAOiH,IAAI/I,KAGrF,OAAOke,GAYXiJ,EAAiBnC,SAAW,SAAkB9G,EAAS+G,GAC9CA,IACDA,EAAU,IACd,IAAInjB,EAAS,GAGb,IAFImjB,EAAQC,QAAUD,EAAQE,YAC1BrjB,EAAOiH,IAAM,IACbmV,EAAQnV,KAAOmV,EAAQnV,IAAI1G,OAAQ,CACnCP,EAAOiH,IAAM,GACb,IAAK,IAAInD,EAAI,EAAGA,EAAIsY,EAAQnV,IAAI1G,SAAUuD,EACtC9D,EAAOiH,IAAInD,GAAK+c,EAAMpb,KAAK4f,iBAAiBC,UAAUpC,SAAS9G,EAAQnV,IAAInD,GAAIqf,GAEvF,OAAOnjB,GAUXqlB,EAAiBnlB,UAAUsjB,OAAS,WAChC,OAAO9U,KAAKI,YAAYoU,SAASxU,KAAM6R,EAAU3E,KAAKiE,gBAG1DwF,EAAiBC,UAAY,WAmBzB,SAASA,EAAUjJ,GACf,GAAIA,EACA,IAAK,IAAIJ,EAAOjd,OAAOid,KAAKI,GAAane,EAAI,EAAGA,EAAI+d,EAAK1b,SAAUrC,EACpC,MAAvBme,EAAWJ,EAAK/d,MAChBwQ,KAAKuN,EAAK/d,IAAMme,EAAWJ,EAAK/d,KA4BhD,IAAIqnB,EAoNJ,OAvOAD,EAAUplB,UAAUgH,SAAW0Z,EAAMvC,KAAOuC,EAAMvC,KAAKlM,SAAS,EAAE,GAAE,GAAS,EAQ7EmT,EAAUplB,UAAUslB,SAAW,GAQ/BF,EAAUplB,UAAUulB,WAAa,GAWjCzmB,OAAOC,eAAeqmB,EAAUplB,UAAW,QAAS,CAChDf,IAAKyhB,EAAMnB,YAAY8F,EAAe,CAAC,WAAY,aACnDliB,IAAKud,EAAMhB,YAAY2F,KAW3BD,EAAU1lB,OAAS,SAAgByc,GAC/B,OAAO,IAAIiJ,EAAUjJ,IAYzBiJ,EAAU3D,OAAS,SAAgBvF,EAASwF,GASxC,OARKA,IACDA,EAASlB,EAAQ9gB,UACG,MAApBwc,EAAQlV,UAAoBkV,EAAQjc,eAAe,aACnDyhB,EAAOC,OAA8B,GAAGE,MAAM3F,EAAQlV,UAClC,MAApBkV,EAAQoJ,UAAoBpJ,EAAQjc,eAAe,aACnDyhB,EAAOC,OAA8B,IAAIC,OAAO1F,EAAQoJ,UAClC,MAAtBpJ,EAAQqJ,YAAsBrJ,EAAQjc,eAAe,eACrDyhB,EAAOC,OAA8B,IAAIC,OAAO1F,EAAQqJ,YACrD7D,GAYX0D,EAAUlD,gBAAkB,SAAyBhG,EAASwF,GAC1D,OAAOlT,KAAKiT,OAAOvF,EAASwF,GAAQK,UAcxCqD,EAAUjD,OAAS,SAAgBC,EAAQ/hB,GACjC+hB,aAAkB9B,IACpB8B,EAAS9B,EAAQ5gB,OAAO0iB,IAE5B,IADA,IAAI5a,OAAiBrG,IAAXd,EAAuB+hB,EAAOC,IAAMD,EAAO1V,IAAMrM,EAAQ6b,EAAU,IAAIyE,EAAMpb,KAAK4f,iBAAiBC,UACtGhD,EAAO1V,IAAMlF,GAAK,CACrB,IAAI8a,EAAMF,EAAOT,SACjB,OAAQW,IAAQ,GAChB,KAAK,EACDpG,EAAQlV,SAAWob,EAAOP,QAC1B,MACJ,KAAK,EACD3F,EAAQoJ,SAAWlD,EAAOR,SAC1B,MACJ,KAAK,EACD1F,EAAQqJ,WAAanD,EAAOR,SAC5B,MACJ,QACIQ,EAAOI,SAAe,EAANF,IAIxB,OAAOpG,GAaXkJ,EAAU3C,gBAAkB,SAAyBL,GAGjD,OAFMA,aAAkB9B,IACpB8B,EAAS,IAAI9B,EAAQ8B,IAClB5T,KAAK2T,OAAOC,EAAQA,EAAOT,WAWtCyD,EAAU1C,OAAS,SAAgBxG,GAC/B,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,IAAIC,EAAa,GACjB,GAAwB,MAApBD,EAAQlV,UAAoBkV,EAAQjc,eAAe,cACnDkc,EAAW9c,MAAQ,IACdqhB,EAAM7W,UAAUqS,EAAQlV,WAAekV,EAAQlV,UAAY0Z,EAAM7W,UAAUqS,EAAQlV,SAAS2b,MAAQjC,EAAM7W,UAAUqS,EAAQlV,SAAS4b,QACtI,MAAO,kCAEf,GAAwB,MAApB1G,EAAQoJ,UAAoBpJ,EAAQjc,eAAe,YAAa,CAChE,GAAyB,IAArBkc,EAAW9c,MACX,MAAO,yBAEX,GADA8c,EAAW9c,MAAQ,GACdqhB,EAAMnD,SAASrB,EAAQoJ,UACxB,MAAO,4BAEf,OAA0B,MAAtBpJ,EAAQqJ,YAAsBrJ,EAAQjc,eAAe,gBAChDygB,EAAMnD,SAASrB,EAAQqJ,YACjB,8BACR,MAWXH,EAAUvC,WAAa,SAAoB/iB,GACvC,GAAIA,aAAkB6gB,EAAMpb,KAAK4f,iBAAiBC,UAC9C,OAAOtlB,EACX,IAAIoc,EAAU,IAAIyE,EAAMpb,KAAK4f,iBAAiBC,UAc9C,OAbuB,MAAnBtlB,EAAOkH,WACH0Z,EAAMvC,MACLjC,EAAQlV,SAAW0Z,EAAMvC,KAAK2E,UAAUhjB,EAAOkH,WAAW6X,UAAW,EACtC,iBAApB/e,EAAOkH,SACnBkV,EAAQlV,SAAW+b,SAASjjB,EAAOkH,SAAU,IACb,iBAApBlH,EAAOkH,SACnBkV,EAAQlV,SAAWlH,EAAOkH,SACM,iBAApBlH,EAAOkH,WACnBkV,EAAQlV,SAAW,IAAI0Z,EAAM9D,SAAS9c,EAAOkH,SAAS2b,MAAQ,EAAG7iB,EAAOkH,SAAS4b,OAAS,GAAGnc,aAC9E,MAAnB3G,EAAOwlB,WACPpJ,EAAQoJ,SAAW9H,OAAO1d,EAAOwlB,WACZ,MAArBxlB,EAAOylB,aACPrJ,EAAQqJ,WAAa/H,OAAO1d,EAAOylB,aAChCrJ,GAYXkJ,EAAUpC,SAAW,SAAkB9G,EAAS+G,GACvCA,IACDA,EAAU,IACd,IAAInjB,EAAS,GAkBb,OAjBImjB,EAAQE,WACRrjB,EAAOylB,WAAa,IACA,MAApBrJ,EAAQlV,UAAoBkV,EAAQjc,eAAe,cACnB,iBAArBic,EAAQlV,SACflH,EAAOkH,SAAWic,EAAQrD,QAAUpC,OAASA,OAAOtB,EAAQlV,UAAYkV,EAAQlV,SAEhFlH,EAAOkH,SAAWic,EAAQrD,QAAUpC,OAASkD,EAAMvC,KAAKne,UAAU+P,SAASxR,KAAK2d,EAAQlV,UAAYic,EAAQrD,QAAUhW,OAAS,IAAI8W,EAAM9D,SAASV,EAAQlV,SAAS2b,MAAQ,EAAGzG,EAAQlV,SAAS4b,OAAS,GAAGnc,WAAayV,EAAQlV,SAChOic,EAAQuC,SACR1lB,EAAOT,MAAQ,aAEC,MAApB6c,EAAQoJ,UAAoBpJ,EAAQjc,eAAe,cACnDH,EAAOwlB,SAAWpJ,EAAQoJ,SACtBrC,EAAQuC,SACR1lB,EAAOT,MAAQ,aAEG,MAAtB6c,EAAQqJ,YAAsBrJ,EAAQjc,eAAe,gBACrDH,EAAOylB,WAAarJ,EAAQqJ,YACzBzlB,GAUXslB,EAAUplB,UAAUsjB,OAAS,WACzB,OAAO9U,KAAKI,YAAYoU,SAASxU,KAAM6R,EAAU3E,KAAKiE,gBAGnDyF,EAvQkB,GA0QtBD,EAvda,GA0dxB5f,EAAKie,UAAY,WAkBb,SAASA,EAAUrH,GACf,GAAIA,EACA,IAAK,IAAIJ,EAAOjd,OAAOid,KAAKI,GAAane,EAAI,EAAGA,EAAI+d,EAAK1b,SAAUrC,EACpC,MAAvBme,EAAWJ,EAAK/d,MAChBwQ,KAAKuN,EAAK/d,IAAMme,EAAWJ,EAAK/d,KAoBhD,IAAIqnB,EAoZJ,OA/ZA7B,EAAUxjB,UAAU4G,WAAa,KAQjC4c,EAAUxjB,UAAUulB,WAAa,GAWjCzmB,OAAOC,eAAeykB,EAAUxjB,UAAW,QAAS,CAChDf,IAAKyhB,EAAMnB,YAAY8F,EAAe,CAAC,eACvCliB,IAAKud,EAAMhB,YAAY2F,KAW3B7B,EAAU9jB,OAAS,SAAgByc,GAC/B,OAAO,IAAIqH,EAAUrH,IAYzBqH,EAAU/B,OAAS,SAAgBvF,EAASwF,GAOxC,OANKA,IACDA,EAASlB,EAAQ9gB,UACK,MAAtBwc,EAAQtV,YAAsBsV,EAAQjc,eAAe,eACrD0gB,EAAMpb,KAAKie,UAAUvgB,OAAOwe,OAAOvF,EAAQtV,WAAY8a,EAAOC,OAA8B,IAAIG,QAAQC,SAClF,MAAtB7F,EAAQqJ,YAAsBrJ,EAAQjc,eAAe,eACrDyhB,EAAOC,OAA8B,IAAIC,OAAO1F,EAAQqJ,YACrD7D,GAYX8B,EAAUtB,gBAAkB,SAAyBhG,EAASwF,GAC1D,OAAOlT,KAAKiT,OAAOvF,EAASwF,GAAQK,UAcxCyB,EAAUrB,OAAS,SAAgBC,EAAQ/hB,GACjC+hB,aAAkB9B,IACpB8B,EAAS9B,EAAQ5gB,OAAO0iB,IAE5B,IADA,IAAI5a,OAAiBrG,IAAXd,EAAuB+hB,EAAOC,IAAMD,EAAO1V,IAAMrM,EAAQ6b,EAAU,IAAIyE,EAAMpb,KAAKie,UACrFpB,EAAO1V,IAAMlF,GAAK,CACrB,IAAI8a,EAAMF,EAAOT,SACjB,OAAQW,IAAQ,GAChB,KAAK,EACDpG,EAAQtV,WAAa+Z,EAAMpb,KAAKie,UAAUvgB,OAAOkf,OAAOC,EAAQA,EAAOT,UACvE,MACJ,KAAK,EACDzF,EAAQqJ,WAAanD,EAAOR,SAC5B,MACJ,QACIQ,EAAOI,SAAe,EAANF,IAIxB,OAAOpG,GAaXsH,EAAUf,gBAAkB,SAAyBL,GAGjD,OAFMA,aAAkB9B,IACpB8B,EAAS,IAAI9B,EAAQ8B,IAClB5T,KAAK2T,OAAOC,EAAQA,EAAOT,WAWtC6B,EAAUd,OAAS,SAAgBxG,GAC/B,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBAEX,GAA0B,MAAtBA,EAAQtV,YAAsBsV,EAAQjc,eAAe,cAAe,CAGhE,IAAIwT,EAAQkN,EAAMpb,KAAKie,UAAUvgB,OAAOyf,OAAOxG,EAAQtV,YACvD,GAAI6M,EACA,MAAO,cAAgBA,EAGnC,OAA0B,MAAtByI,EAAQqJ,YAAsBrJ,EAAQjc,eAAe,gBAChDygB,EAAMnD,SAASrB,EAAQqJ,YACjB,8BACR,MAWX/B,EAAUX,WAAa,SAAoB/iB,GACvC,GAAIA,aAAkB6gB,EAAMpb,KAAKie,UAC7B,OAAO1jB,EACX,IAAIoc,EAAU,IAAIyE,EAAMpb,KAAKie,UAC7B,GAAyB,MAArB1jB,EAAO8G,WAAoB,CAC3B,GAAiC,iBAAtB9G,EAAO8G,WACd,MAAM+C,UAAU,+CACpBuS,EAAQtV,WAAa+Z,EAAMpb,KAAKie,UAAUvgB,OAAO4f,WAAW/iB,EAAO8G,YAIvE,OAFyB,MAArB9G,EAAOylB,aACPrJ,EAAQqJ,WAAa/H,OAAO1d,EAAOylB,aAChCrJ,GAYXsH,EAAUR,SAAW,SAAkB9G,EAAS+G,GACvCA,IACDA,EAAU,IACd,IAAInjB,EAAS,GAUb,OATImjB,EAAQE,WACRrjB,EAAOylB,WAAa,IACE,MAAtBrJ,EAAQtV,YAAsBsV,EAAQjc,eAAe,gBACrDH,EAAO8G,WAAa+Z,EAAMpb,KAAKie,UAAUvgB,OAAO+f,SAAS9G,EAAQtV,WAAYqc,GACzEA,EAAQuC,SACR1lB,EAAOT,MAAQ,eAEG,MAAtB6c,EAAQqJ,YAAsBrJ,EAAQjc,eAAe,gBACrDH,EAAOylB,WAAarJ,EAAQqJ,YACzBzlB,GAUX0jB,EAAUxjB,UAAUsjB,OAAS,WACzB,OAAO9U,KAAKI,YAAYoU,SAASxU,KAAM6R,EAAU3E,KAAKiE,gBAG1D6D,EAAUvgB,OAAS,WAkBf,SAASA,EAAOkZ,GACZ,GAAIA,EACA,IAAK,IAAIJ,EAAOjd,OAAOid,KAAKI,GAAane,EAAI,EAAGA,EAAI+d,EAAK1b,SAAUrC,EACpC,MAAvBme,EAAWJ,EAAK/d,MAChBwQ,KAAKuN,EAAK/d,IAAMme,EAAWJ,EAAK/d,KA8LhD,OArLAiF,EAAOjD,UAAU8G,SAAW,EAQ5B7D,EAAOjD,UAAU+D,MAAQ,KAUzBd,EAAOvD,OAAS,SAAgByc,GAC5B,OAAO,IAAIlZ,EAAOkZ,IAYtBlZ,EAAOwe,OAAS,SAAgBvF,EAASwF,GAOrC,OANKA,IACDA,EAASlB,EAAQ9gB,UACG,MAApBwc,EAAQpV,UAAoBoV,EAAQjc,eAAe,aACnDyhB,EAAOC,OAA8B,GAAGM,MAAM/F,EAAQpV,UACrC,MAAjBoV,EAAQnY,OAAiBmY,EAAQjc,eAAe,UAChD0gB,EAAMpb,KAAK4f,iBAAiB1D,OAAOvF,EAAQnY,MAAO2d,EAAOC,OAA8B,IAAIG,QAAQC,SAChGL,GAYXze,EAAOif,gBAAkB,SAAyBhG,EAASwF,GACvD,OAAOlT,KAAKiT,OAAOvF,EAASwF,GAAQK,UAcxC9e,EAAOkf,OAAS,SAAgBC,EAAQ/hB,GAC9B+hB,aAAkB9B,IACpB8B,EAAS9B,EAAQ5gB,OAAO0iB,IAE5B,IADA,IAAI5a,OAAiBrG,IAAXd,EAAuB+hB,EAAOC,IAAMD,EAAO1V,IAAMrM,EAAQ6b,EAAU,IAAIyE,EAAMpb,KAAKie,UAAUvgB,OAC/Fmf,EAAO1V,IAAMlF,GAAK,CACrB,IAAI8a,EAAMF,EAAOT,SACjB,OAAQW,IAAQ,GAChB,KAAK,EACDpG,EAAQpV,SAAWsb,EAAOH,QAC1B,MACJ,KAAK,EACD/F,EAAQnY,MAAQ4c,EAAMpb,KAAK4f,iBAAiBhD,OAAOC,EAAQA,EAAOT,UAClE,MACJ,QACIS,EAAOI,SAAe,EAANF,IAIxB,OAAOpG,GAaXjZ,EAAOwf,gBAAkB,SAAyBL,GAG9C,OAFMA,aAAkB9B,IACpB8B,EAAS,IAAI9B,EAAQ8B,IAClB5T,KAAK2T,OAAOC,EAAQA,EAAOT,WAWtC1e,EAAOyf,OAAS,SAAgBxG,GAC5B,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAwB,MAApBA,EAAQpV,UAAoBoV,EAAQjc,eAAe,cAC9CygB,EAAM7W,UAAUqS,EAAQpV,UACzB,MAAO,6BACf,GAAqB,MAAjBoV,EAAQnY,OAAiBmY,EAAQjc,eAAe,SAAU,CAC1D,IAAIwT,EAAQkN,EAAMpb,KAAK4f,iBAAiBzC,OAAOxG,EAAQnY,OACvD,GAAI0P,EACA,MAAO,SAAWA,EAE1B,OAAO,MAWXxQ,EAAO4f,WAAa,SAAoB/iB,GACpC,GAAIA,aAAkB6gB,EAAMpb,KAAKie,UAAUvgB,OACvC,OAAOnD,EACX,IAAIoc,EAAU,IAAIyE,EAAMpb,KAAKie,UAAUvgB,OAGvC,GAFuB,MAAnBnD,EAAOgH,WACPoV,EAAQpV,SAA6B,EAAlBhH,EAAOgH,UACV,MAAhBhH,EAAOiE,MAAe,CACtB,GAA4B,iBAAjBjE,EAAOiE,MACd,MAAM4F,UAAU,iDACpBuS,EAAQnY,MAAQ4c,EAAMpb,KAAK4f,iBAAiBtC,WAAW/iB,EAAOiE,OAElE,OAAOmY,GAYXjZ,EAAO+f,SAAW,SAAkB9G,EAAS+G,GACpCA,IACDA,EAAU,IACd,IAAInjB,EAAS,GASb,OARImjB,EAAQE,WACRrjB,EAAOgH,SAAW,EAClBhH,EAAOiE,MAAQ,MAEK,MAApBmY,EAAQpV,UAAoBoV,EAAQjc,eAAe,cACnDH,EAAOgH,SAAWoV,EAAQpV,UACT,MAAjBoV,EAAQnY,OAAiBmY,EAAQjc,eAAe,WAChDH,EAAOiE,MAAQ4c,EAAMpb,KAAK4f,iBAAiBnC,SAAS9G,EAAQnY,MAAOkf,IAChEnjB,GAUXmD,EAAOjD,UAAUsjB,OAAS,WACtB,OAAO9U,KAAKI,YAAYoU,SAASxU,KAAM6R,EAAU3E,KAAKiE,gBAGnD1c,EApNQ,GAuNZugB,EA9bM,GAicjBje,EAAK6e,mBAAqB,WAkBtB,SAASA,EAAmBjI,GACxB,GAAIA,EACA,IAAK,IAAIJ,EAAOjd,OAAOid,KAAKI,GAAane,EAAI,EAAGA,EAAI+d,EAAK1b,SAAUrC,EACpC,MAAvBme,EAAWJ,EAAK/d,MAChBwQ,KAAKuN,EAAK/d,IAAMme,EAAWJ,EAAK/d,KAuMhD,OA9LAomB,EAAmBpkB,UAAU2jB,OAAS,GAQtCS,EAAmBpkB,UAAUoS,QAAUsO,EAAMvC,KAAOuC,EAAMvC,KAAKlM,SAAS,EAAE,GAAE,GAAS,EAUrFmS,EAAmB1kB,OAAS,SAAgByc,GACxC,OAAO,IAAIiI,EAAmBjI,IAYlCiI,EAAmB3C,OAAS,SAAgBvF,EAASwF,GAOjD,OANKA,IACDA,EAASlB,EAAQ9gB,UACC,MAAlBwc,EAAQyH,QAAkBzH,EAAQjc,eAAe,WACjDyhB,EAAOC,OAA8B,IAAIC,OAAO1F,EAAQyH,QACrC,MAAnBzH,EAAQ9J,SAAmB8J,EAAQjc,eAAe,YAClDyhB,EAAOC,OAA8B,IAAIE,MAAM3F,EAAQ9J,SACpDsP,GAYX0C,EAAmBlC,gBAAkB,SAAyBhG,EAASwF,GACnE,OAAOlT,KAAKiT,OAAOvF,EAASwF,GAAQK,UAcxCqC,EAAmBjC,OAAS,SAAgBC,EAAQ/hB,GAC1C+hB,aAAkB9B,IACpB8B,EAAS9B,EAAQ5gB,OAAO0iB,IAE5B,IADA,IAAI5a,OAAiBrG,IAAXd,EAAuB+hB,EAAOC,IAAMD,EAAO1V,IAAMrM,EAAQ6b,EAAU,IAAIyE,EAAMpb,KAAK6e,mBACrFhC,EAAO1V,IAAMlF,GAAK,CACrB,IAAI8a,EAAMF,EAAOT,SACjB,OAAQW,IAAQ,GAChB,KAAK,EACDpG,EAAQyH,OAASvB,EAAOR,SACxB,MACJ,KAAK,EACD1F,EAAQ9J,QAAUgQ,EAAOP,QACzB,MACJ,QACIO,EAAOI,SAAe,EAANF,IAIxB,OAAOpG,GAaXkI,EAAmB3B,gBAAkB,SAAyBL,GAG1D,OAFMA,aAAkB9B,IACpB8B,EAAS,IAAI9B,EAAQ8B,IAClB5T,KAAK2T,OAAOC,EAAQA,EAAOT,WAWtCyC,EAAmB1B,OAAS,SAAgBxG,GACxC,MAAuB,iBAAZA,GAAoC,OAAZA,EACxB,kBACW,MAAlBA,EAAQyH,QAAkBzH,EAAQjc,eAAe,YAC5CygB,EAAMnD,SAASrB,EAAQyH,QACjB,0BACQ,MAAnBzH,EAAQ9J,SAAmB8J,EAAQjc,eAAe,cAC7CygB,EAAM7W,UAAUqS,EAAQ9J,UAAc8J,EAAQ9J,SAAWsO,EAAM7W,UAAUqS,EAAQ9J,QAAQuQ,MAAQjC,EAAM7W,UAAUqS,EAAQ9J,QAAQwQ,OAC3H,iCACR,MAWXwB,EAAmBvB,WAAa,SAAoB/iB,GAChD,GAAIA,aAAkB6gB,EAAMpb,KAAK6e,mBAC7B,OAAOtkB,EACX,IAAIoc,EAAU,IAAIyE,EAAMpb,KAAK6e,mBAY7B,OAXqB,MAAjBtkB,EAAO6jB,SACPzH,EAAQyH,OAASnG,OAAO1d,EAAO6jB,SACb,MAAlB7jB,EAAOsS,UACHsO,EAAMvC,MACLjC,EAAQ9J,QAAUsO,EAAMvC,KAAK2E,UAAUhjB,EAAOsS,UAAUyM,UAAW,EACrC,iBAAnB/e,EAAOsS,QACnB8J,EAAQ9J,QAAU2Q,SAASjjB,EAAOsS,QAAS,IACZ,iBAAnBtS,EAAOsS,QACnB8J,EAAQ9J,QAAUtS,EAAOsS,QACM,iBAAnBtS,EAAOsS,UACnB8J,EAAQ9J,QAAU,IAAIsO,EAAM9D,SAAS9c,EAAOsS,QAAQuQ,MAAQ,EAAG7iB,EAAOsS,QAAQwQ,OAAS,GAAGnc,aAC3FyV,GAYXkI,EAAmBpB,SAAW,SAAkB9G,EAAS+G,GAChDA,IACDA,EAAU,IACd,IAAInjB,EAAS,GACb,GAAImjB,EAAQE,SAER,GADArjB,EAAO6jB,OAAS,GACZjD,EAAMvC,KAAM,CACZ,IAAIiF,EAAO,IAAI1C,EAAMvC,KAAK,EAAG,GAAG,GAChCre,EAAOsS,QAAU6Q,EAAQrD,QAAUpC,OAAS4F,EAAKrT,WAAakT,EAAQrD,QAAUhW,OAASwZ,EAAK3c,WAAa2c,OAE3GtjB,EAAOsS,QAAU6Q,EAAQrD,QAAUpC,OAAS,IAAM,EAS1D,OAPsB,MAAlBtB,EAAQyH,QAAkBzH,EAAQjc,eAAe,YACjDH,EAAO6jB,OAASzH,EAAQyH,QACL,MAAnBzH,EAAQ9J,SAAmB8J,EAAQjc,eAAe,aACnB,iBAApBic,EAAQ9J,QACftS,EAAOsS,QAAU6Q,EAAQrD,QAAUpC,OAASA,OAAOtB,EAAQ9J,SAAW8J,EAAQ9J,QAE9EtS,EAAOsS,QAAU6Q,EAAQrD,QAAUpC,OAASkD,EAAMvC,KAAKne,UAAU+P,SAASxR,KAAK2d,EAAQ9J,SAAW6Q,EAAQrD,QAAUhW,OAAS,IAAI8W,EAAM9D,SAASV,EAAQ9J,QAAQuQ,MAAQ,EAAGzG,EAAQ9J,QAAQwQ,OAAS,GAAGnc,WAAayV,EAAQ9J,SAC7NtS,GAUXskB,EAAmBpkB,UAAUsjB,OAAS,WAClC,OAAO9U,KAAKI,YAAYoU,SAASxU,KAAM6R,EAAU3E,KAAKiE,gBAGnDyE,EA7Ne,GAgOnB7e,EAzwJE,GA4wJb3H,EAAOD,QAAUgjB,G,8bCpxJjB,YAEA,OAGA,QAEA,2B,+CAMA,OANkC,OAChC,YAAA8E,IAAA,SAAIC,EAAyCtlB,GAC3C,IAAM0I,EAAe,EAAAhG,UAAU4F,sBAAsBtI,EAAO,GAAGG,KAAMH,EAAO,GAAGulB,aAE/E,MAAO,CADgBC,EAAQF,EAAkBtlB,EAAO,GAAI0I,KAGhE,EANA,CAAkC,EAAA+c,SAQlC,SAAgBD,EACZF,EAAyClZ,EAAe1D,GAC1D,IAAMgd,EAAUJ,EAAiBK,uBAAuBvZ,GACpDwZ,EAAcld,EACO,IAArBgd,EAAQG,WACVD,EAAc,EAAAE,eAAepd,IAE/B,IAAMqd,EAAkC,CACtCF,SAAUH,EAAQG,SAClBG,OAAQN,EAAQM,OAChBC,MAAOP,EAAQO,MAEftiB,MAA8B,IAAvBiiB,EAAY3lB,OAAe2lB,EAAc,CAAC,GACjDre,QAAS,EAAA7E,UAAU2E,eAAeue,GAClCM,cAAexd,GAIjB,OADuB4c,EAAiBa,wBAAwBJ,EAAkB3Z,EAAMtJ,KAAM4iB,EAAQU,QAAS,IACzFC,OA1BX,EAAAC,eAQb,a,kWCiCA,SAASC,EAAcvU,EAAiBwU,GACtC,GAAIA,EAASC,SAAS,KAAM,CAE1B,IAAMC,EAAald,OAAOmZ,SAAS6D,EAASvH,UAAU,EAAGuH,EAASvmB,OAAS,GAAI,IAC/E,OAAQ0mB,MAAMD,IAAeA,GAAc1U,EACtC,GAAmC,IAA/BwU,EAASzb,MAAM,KAAK9K,OAAc,CAE3C,IAAM2mB,EAAOJ,EAASzb,MAAM,KAEtB8b,GADAH,EAAald,OAAOmZ,SAASiE,EAAK,GAAI,IAC3Bpd,OAAOmZ,SAASiE,EAAK,GAAI,KAC1C,OAAQD,MAAMD,KAAgBC,MAAME,IAAaH,GAAc1U,GAAWA,GAAW6U,EAGrF,OAAOrd,OAAOmZ,SAAS6D,EAAU,MAAQxU,E,0EArC7C,2BACIuI,EAAkBuM,EAA8BC,G,gBAClD,IAAmB,QAAAA,GAAK,8BAAE,CAArB,IAAMC,EAAI,QACP1D,EAAS0D,EAAK,GACdzD,EAASyD,EAAK,GACdC,EAAkBD,EAAK,GACvBE,EAAgBF,EAAK,GAE3B,GAAIzM,EAAK+I,SAAWA,E,IAClB,IAAoB,kBAAAwD,IAAM,8BAAE,CAAvB,IAAMK,EAAK,QAEd,IAAIA,EAAM5D,SAAWA,GAA4B,YAAjB4D,EAAM5D,QAAmC,KAAXA,IACxDgD,EAAcY,EAAMnV,QAASiV,GAC/B,OAAOC,EAAc3M,I,oMAO/B,MAAM,IAAIhR,UAAU,4BAA4BgR,EAAK+I,OAAM,kBACvDwD,EAAO3gB,KAAI,SAAApD,GAAO,OAAGA,EAAIwgB,QAAU,WAAS,KAAKxgB,EAAIiP,WAAWoV,KAAK,S,8BChD3E;;;;;;;AAUA,IAAIlL,EAAS,EAAQ,IACjBmL,EAAU,EAAQ,IAClB9Y,EAAU,EAAQ,IAmDtB,SAAS+Y,IACP,OAAOhY,EAAOiY,oBACV,WACA,WAGN,SAASC,EAAcC,EAAMxnB,GAC3B,GAAIqnB,IAAernB,EACjB,MAAM,IAAIqO,WAAW,8BAcvB,OAZIgB,EAAOiY,qBAETE,EAAO,IAAI9W,WAAW1Q,IACjBynB,UAAYpY,EAAO1P,WAGX,OAAT6nB,IACFA,EAAO,IAAInY,EAAOrP,IAEpBwnB,EAAKxnB,OAASA,GAGTwnB,EAaT,SAASnY,EAAQqY,EAAKC,EAAkB3nB,GACtC,KAAKqP,EAAOiY,qBAAyBnZ,gBAAgBkB,GACnD,OAAO,IAAIA,EAAOqY,EAAKC,EAAkB3nB,GAI3C,GAAmB,iBAAR0nB,EAAkB,CAC3B,GAAgC,iBAArBC,EACT,MAAM,IAAIxjB,MACR,qEAGJ,OAAO0b,EAAY1R,KAAMuZ,GAE3B,OAAOpY,EAAKnB,KAAMuZ,EAAKC,EAAkB3nB,GAW3C,SAASsP,EAAMkY,EAAMxoB,EAAO2oB,EAAkB3nB,GAC5C,GAAqB,iBAAVhB,EACT,MAAM,IAAIsK,UAAU,yCAGtB,MAA2B,oBAAhBoF,aAA+B1P,aAAiB0P,YA6H7D,SAA0B8Y,EAAMtX,EAAOV,EAAYxP,GAGjD,GAFAkQ,EAAMT,WAEFD,EAAa,GAAKU,EAAMT,WAAaD,EACvC,MAAM,IAAInB,WAAW,6BAGvB,GAAI6B,EAAMT,WAAaD,GAAcxP,GAAU,GAC7C,MAAM,IAAIqO,WAAW,6BAIrB6B,OADiBpP,IAAf0O,QAAuC1O,IAAXd,EACtB,IAAI0Q,WAAWR,QACHpP,IAAXd,EACD,IAAI0Q,WAAWR,EAAOV,GAEtB,IAAIkB,WAAWR,EAAOV,EAAYxP,GAGxCqP,EAAOiY,qBAETE,EAAOtX,GACFuX,UAAYpY,EAAO1P,UAGxB6nB,EAAOI,EAAcJ,EAAMtX,GAE7B,OAAOsX,EAvJEK,CAAgBL,EAAMxoB,EAAO2oB,EAAkB3nB,GAGnC,iBAAVhB,EAwFb,SAAqBwoB,EAAMjG,EAAQ3B,GACT,iBAAbA,GAAsC,KAAbA,IAClCA,EAAW,QAGb,IAAKvQ,EAAOyY,WAAWlI,GACrB,MAAM,IAAItW,UAAU,8CAGtB,IAAItJ,EAAwC,EAA/ByP,EAAW8R,EAAQ3B,GAG5BmI,GAFJP,EAAOD,EAAaC,EAAMxnB,IAERgoB,MAAMzG,EAAQ3B,GAE5BmI,IAAW/nB,IAIbwnB,EAAOA,EAAKhgB,MAAM,EAAGugB,IAGvB,OAAOP,EA5GES,CAAWT,EAAMxoB,EAAO2oB,GAsJnC,SAAqBH,EAAMjK,GACzB,GAAIlO,EAAO6Y,SAAS3K,GAAM,CACxB,IAAIyE,EAA4B,EAAtBmG,EAAQ5K,EAAIvd,QAGtB,OAAoB,KAFpBwnB,EAAOD,EAAaC,EAAMxF,IAEjBhiB,QAITud,EAAI6K,KAAKZ,EAAM,EAAG,EAAGxF,GAHZwF,EAOX,GAAIjK,EAAK,CACP,GAA4B,oBAAhB7O,aACR6O,EAAIhO,kBAAkBb,aAAgB,WAAY6O,EACpD,MAA0B,iBAAfA,EAAIvd,SA+8CLqoB,EA/8CkC9K,EAAIvd,SAg9CrCqoB,EA/8CFd,EAAaC,EAAM,GAErBI,EAAcJ,EAAMjK,GAG7B,GAAiB,WAAbA,EAAI1a,MAAqByL,EAAQiP,EAAItR,MACvC,OAAO2b,EAAcJ,EAAMjK,EAAItR,MAw8CrC,IAAgBoc,EAp8Cd,MAAM,IAAI/e,UAAU,sFA9KbkZ,CAAWgF,EAAMxoB,GA4B1B,SAASspB,EAAY3lB,GACnB,GAAoB,iBAATA,EACT,MAAM,IAAI2G,UAAU,oCACf,GAAI3G,EAAO,EAChB,MAAM,IAAI0L,WAAW,wCA4BzB,SAASwR,EAAa2H,EAAM7kB,GAG1B,GAFA2lB,EAAW3lB,GACX6kB,EAAOD,EAAaC,EAAM7kB,EAAO,EAAI,EAAoB,EAAhBwlB,EAAQxlB,KAC5C0M,EAAOiY,oBACV,IAAK,IAAI3pB,EAAI,EAAGA,EAAIgF,IAAQhF,EAC1B6pB,EAAK7pB,GAAK,EAGd,OAAO6pB,EAwCT,SAASI,EAAeJ,EAAMtX,GAC5B,IAAIlQ,EAASkQ,EAAMlQ,OAAS,EAAI,EAA4B,EAAxBmoB,EAAQjY,EAAMlQ,QAClDwnB,EAAOD,EAAaC,EAAMxnB,GAC1B,IAAK,IAAIrC,EAAI,EAAGA,EAAIqC,EAAQrC,GAAK,EAC/B6pB,EAAK7pB,GAAgB,IAAXuS,EAAMvS,GAElB,OAAO6pB,EA+DT,SAASW,EAASnoB,GAGhB,GAAIA,GAAUqnB,IACZ,MAAM,IAAIhZ,WAAW,0DACagZ,IAAa3X,SAAS,IAAM,UAEhE,OAAgB,EAAT1P,EAsFT,SAASyP,EAAY8R,EAAQ3B,GAC3B,GAAIvQ,EAAO6Y,SAAS3G,GAClB,OAAOA,EAAOvhB,OAEhB,GAA2B,oBAAhB0O,aAA6D,mBAAvBA,YAAY6Z,SACxD7Z,YAAY6Z,OAAOhH,IAAWA,aAAkB7S,aACnD,OAAO6S,EAAO9R,WAEM,iBAAX8R,IACTA,EAAS,GAAKA,GAGhB,IAAIS,EAAMT,EAAOvhB,OACjB,GAAY,IAARgiB,EAAW,OAAO,EAItB,IADA,IAAIwG,GAAc,IAEhB,OAAQ5I,GACN,IAAK,QACL,IAAK,SACL,IAAK,SACH,OAAOoC,EACT,IAAK,OACL,IAAK,QACL,UAAKlhB,EACH,OAAO2nB,EAAYlH,GAAQvhB,OAC7B,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAa,EAANgiB,EACT,IAAK,MACH,OAAOA,IAAQ,EACjB,IAAK,SACH,OAAO0G,EAAcnH,GAAQvhB,OAC/B,QACE,GAAIwoB,EAAa,OAAOC,EAAYlH,GAAQvhB,OAC5C4f,GAAY,GAAKA,GAAUb,cAC3ByJ,GAAc,GAMtB,SAASG,EAAc/I,EAAU1Y,EAAOC,GACtC,IAAIqhB,GAAc,EAclB,SALc1nB,IAAVoG,GAAuBA,EAAQ,KACjCA,EAAQ,GAINA,EAAQiH,KAAKnO,OACf,MAAO,GAOT,SAJYc,IAARqG,GAAqBA,EAAMgH,KAAKnO,UAClCmH,EAAMgH,KAAKnO,QAGTmH,GAAO,EACT,MAAO,GAOT,IAHAA,KAAS,KACTD,KAAW,GAGT,MAAO,GAKT,IAFK0Y,IAAUA,EAAW,UAGxB,OAAQA,GACN,IAAK,MACH,OAAOgJ,EAASza,KAAMjH,EAAOC,GAE/B,IAAK,OACL,IAAK,QACH,OAAO0hB,EAAU1a,KAAMjH,EAAOC,GAEhC,IAAK,QACH,OAAO2hB,EAAW3a,KAAMjH,EAAOC,GAEjC,IAAK,SACL,IAAK,SACH,OAAO4hB,EAAY5a,KAAMjH,EAAOC,GAElC,IAAK,SACH,OAAO6hB,EAAY7a,KAAMjH,EAAOC,GAElC,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAO8hB,EAAa9a,KAAMjH,EAAOC,GAEnC,QACE,GAAIqhB,EAAa,MAAM,IAAIlf,UAAU,qBAAuBsW,GAC5DA,GAAYA,EAAW,IAAIb,cAC3ByJ,GAAc,GAStB,SAASU,EAAMroB,EAAGrB,EAAGrB,GACnB,IAAIR,EAAIkD,EAAErB,GACVqB,EAAErB,GAAKqB,EAAE1C,GACT0C,EAAE1C,GAAKR,EAmIT,SAASwrB,EAAsB5Z,EAAQ8Y,EAAK7Y,EAAYoQ,EAAUwJ,GAEhE,GAAsB,IAAlB7Z,EAAOvP,OAAc,OAAQ,EAmBjC,GAhB0B,iBAAfwP,GACToQ,EAAWpQ,EACXA,EAAa,GACJA,EAAa,WACtBA,EAAa,WACJA,GAAc,aACvBA,GAAc,YAEhBA,GAAcA,EACVkX,MAAMlX,KAERA,EAAa4Z,EAAM,EAAK7Z,EAAOvP,OAAS,GAItCwP,EAAa,IAAGA,EAAaD,EAAOvP,OAASwP,GAC7CA,GAAcD,EAAOvP,OAAQ,CAC/B,GAAIopB,EAAK,OAAQ,EACZ5Z,EAAaD,EAAOvP,OAAS,OAC7B,GAAIwP,EAAa,EAAG,CACzB,IAAI4Z,EACC,OAAQ,EADJ5Z,EAAa,EAUxB,GALmB,iBAAR6Y,IACTA,EAAMhZ,EAAOC,KAAK+Y,EAAKzI,IAIrBvQ,EAAO6Y,SAASG,GAElB,OAAmB,IAAfA,EAAIroB,QACE,EAEHqpB,EAAa9Z,EAAQ8Y,EAAK7Y,EAAYoQ,EAAUwJ,GAClD,GAAmB,iBAARf,EAEhB,OADAA,GAAY,IACRhZ,EAAOiY,qBACiC,mBAAjC5W,WAAW/Q,UAAUsK,QAC1Bmf,EACK1Y,WAAW/Q,UAAUsK,QAAQ/L,KAAKqR,EAAQ8Y,EAAK7Y,GAE/CkB,WAAW/Q,UAAU2pB,YAAYprB,KAAKqR,EAAQ8Y,EAAK7Y,GAGvD6Z,EAAa9Z,EAAQ,CAAE8Y,GAAO7Y,EAAYoQ,EAAUwJ,GAG7D,MAAM,IAAI9f,UAAU,wCAGtB,SAAS+f,EAAcE,EAAKlB,EAAK7Y,EAAYoQ,EAAUwJ,GACrD,IA0BIzrB,EA1BA6rB,EAAY,EACZC,EAAYF,EAAIvpB,OAChB0pB,EAAYrB,EAAIroB,OAEpB,QAAiBc,IAAb8e,IAEe,UADjBA,EAAWzC,OAAOyC,GAAUb,gBACY,UAAba,GACV,YAAbA,GAAuC,aAAbA,GAAyB,CACrD,GAAI2J,EAAIvpB,OAAS,GAAKqoB,EAAIroB,OAAS,EACjC,OAAQ,EAEVwpB,EAAY,EACZC,GAAa,EACbC,GAAa,EACbla,GAAc,EAIlB,SAASma,EAAMlb,EAAK9Q,GAClB,OAAkB,IAAd6rB,EACK/a,EAAI9Q,GAEJ8Q,EAAImb,aAAajsB,EAAI6rB,GAKhC,GAAIJ,EAAK,CACP,IAAIS,GAAc,EAClB,IAAKlsB,EAAI6R,EAAY7R,EAAI8rB,EAAW9rB,IAClC,GAAIgsB,EAAKJ,EAAK5rB,KAAOgsB,EAAKtB,GAAqB,IAAhBwB,EAAoB,EAAIlsB,EAAIksB,IAEzD,IADoB,IAAhBA,IAAmBA,EAAalsB,GAChCA,EAAIksB,EAAa,IAAMH,EAAW,OAAOG,EAAaL,OAEtC,IAAhBK,IAAmBlsB,GAAKA,EAAIksB,GAChCA,GAAc,OAKlB,IADIra,EAAaka,EAAYD,IAAWja,EAAaia,EAAYC,GAC5D/rB,EAAI6R,EAAY7R,GAAK,EAAGA,IAAK,CAEhC,IADA,IAAImsB,GAAQ,EACHvmB,EAAI,EAAGA,EAAImmB,EAAWnmB,IAC7B,GAAIomB,EAAKJ,EAAK5rB,EAAI4F,KAAOomB,EAAKtB,EAAK9kB,GAAI,CACrCumB,GAAQ,EACR,MAGJ,GAAIA,EAAO,OAAOnsB,EAItB,OAAQ,EAeV,SAASosB,EAAUtb,EAAK8S,EAAQnd,EAAQpE,GACtCoE,EAASmF,OAAOnF,IAAW,EAC3B,IAAI4lB,EAAYvb,EAAIzO,OAASoE,EACxBpE,GAGHA,EAASuJ,OAAOvJ,IACHgqB,IACXhqB,EAASgqB,GAJXhqB,EAASgqB,EASX,IAAIC,EAAS1I,EAAOvhB,OACpB,GAAIiqB,EAAS,GAAM,EAAG,MAAM,IAAI3gB,UAAU,sBAEtCtJ,EAASiqB,EAAS,IACpBjqB,EAASiqB,EAAS,GAEpB,IAAK,IAAItsB,EAAI,EAAGA,EAAIqC,IAAUrC,EAAG,CAC/B,IAAIusB,EAASxH,SAASnB,EAAO4I,OAAW,EAAJxsB,EAAO,GAAI,IAC/C,GAAI+oB,MAAMwD,GAAS,OAAOvsB,EAC1B8Q,EAAIrK,EAASzG,GAAKusB,EAEpB,OAAOvsB,EAGT,SAAS8f,EAAWhP,EAAK8S,EAAQnd,EAAQpE,GACvC,OAAOoqB,EAAW3B,EAAYlH,EAAQ9S,EAAIzO,OAASoE,GAASqK,EAAKrK,EAAQpE,GAG3E,SAASqqB,EAAY5b,EAAK8S,EAAQnd,EAAQpE,GACxC,OAAOoqB,EAq6BT,SAAuBhb,GAErB,IADA,IAAIkb,EAAY,GACP3sB,EAAI,EAAGA,EAAIyR,EAAIpP,SAAUrC,EAEhC2sB,EAAUpgB,KAAyB,IAApBkF,EAAImb,WAAW5sB,IAEhC,OAAO2sB,EA36BWE,CAAajJ,GAAS9S,EAAKrK,EAAQpE,GAGvD,SAASyqB,EAAahc,EAAK8S,EAAQnd,EAAQpE,GACzC,OAAOqqB,EAAW5b,EAAK8S,EAAQnd,EAAQpE,GAGzC,SAAS0qB,EAAajc,EAAK8S,EAAQnd,EAAQpE,GACzC,OAAOoqB,EAAW1B,EAAcnH,GAAS9S,EAAKrK,EAAQpE,GAGxD,SAAS2qB,EAAWlc,EAAK8S,EAAQnd,EAAQpE,GACvC,OAAOoqB,EAk6BT,SAAyBhb,EAAKwb,GAG5B,IAFA,IAAIxsB,EAAGwgB,EAAID,EACP2L,EAAY,GACP3sB,EAAI,EAAGA,EAAIyR,EAAIpP,WACjB4qB,GAAS,GAAK,KADajtB,EAGhCS,EAAIgR,EAAImb,WAAW5sB,GACnBihB,EAAKxgB,GAAK,EACVugB,EAAKvgB,EAAI,IACTksB,EAAUpgB,KAAKyU,GACf2L,EAAUpgB,KAAK0U,GAGjB,OAAO0L,EA/6BWO,CAAetJ,EAAQ9S,EAAIzO,OAASoE,GAASqK,EAAKrK,EAAQpE,GAkF9E,SAASgpB,EAAava,EAAKvH,EAAOC,GAChC,OAAc,IAAVD,GAAeC,IAAQsH,EAAIzO,OACtBic,EAAO6O,cAAcrc,GAErBwN,EAAO6O,cAAcrc,EAAIjH,MAAMN,EAAOC,IAIjD,SAAS0hB,EAAWpa,EAAKvH,EAAOC,GAC9BA,EAAM5F,KAAKwpB,IAAItc,EAAIzO,OAAQmH,GAI3B,IAHA,IAAImF,EAAM,GAEN3O,EAAIuJ,EACDvJ,EAAIwJ,GAAK,CACd,IAQM6jB,EAAYC,EAAWC,EAAYC,EARrCC,EAAY3c,EAAI9Q,GAChB0tB,EAAY,KACZC,EAAoBF,EAAY,IAAQ,EACvCA,EAAY,IAAQ,EACpBA,EAAY,IAAQ,EACrB,EAEJ,GAAIztB,EAAI2tB,GAAoBnkB,EAG1B,OAAQmkB,GACN,KAAK,EACCF,EAAY,MACdC,EAAYD,GAEd,MACF,KAAK,EAEyB,MAAV,KADlBJ,EAAavc,EAAI9Q,EAAI,OAEnBwtB,GAA6B,GAAZC,IAAqB,EAAoB,GAAbJ,GACzB,MAClBK,EAAYF,GAGhB,MACF,KAAK,EACHH,EAAavc,EAAI9Q,EAAI,GACrBstB,EAAYxc,EAAI9Q,EAAI,GACQ,MAAV,IAAbqtB,IAAsD,MAAV,IAAZC,KACnCE,GAA6B,GAAZC,IAAoB,IAAoB,GAAbJ,IAAsB,EAAmB,GAAZC,GACrD,OAAUE,EAAgB,OAAUA,EAAgB,SACtEE,EAAYF,GAGhB,MACF,KAAK,EACHH,EAAavc,EAAI9Q,EAAI,GACrBstB,EAAYxc,EAAI9Q,EAAI,GACpButB,EAAazc,EAAI9Q,EAAI,GACO,MAAV,IAAbqtB,IAAsD,MAAV,IAAZC,IAAsD,MAAV,IAAbC,KAClEC,GAA6B,GAAZC,IAAoB,IAAqB,GAAbJ,IAAsB,IAAmB,GAAZC,IAAqB,EAAoB,GAAbC,GAClF,OAAUC,EAAgB,UAC5CE,EAAYF,GAMJ,OAAdE,GAGFA,EAAY,MACZC,EAAmB,GACVD,EAAY,QAErBA,GAAa,MACb/e,EAAIpC,KAAKmhB,IAAc,GAAK,KAAQ,OACpCA,EAAY,MAAqB,KAAZA,GAGvB/e,EAAIpC,KAAKmhB,GACT1tB,GAAK2tB,EAGP,OAQF,SAAgCC,GAC9B,IAAIvJ,EAAMuJ,EAAWvrB,OACrB,GAAIgiB,GAJqB,KAKvB,OAAO7E,OAAOqO,aAAaC,MAAMtO,OAAQoO,GAI3C,IAAIjf,EAAM,GACN3O,EAAI,EACR,KAAOA,EAAIqkB,GACT1V,GAAO6Q,OAAOqO,aAAaC,MACzBtO,OACAoO,EAAW/jB,MAAM7J,EAAGA,GAdC,OAiBzB,OAAO2O,EAvBAof,CAAsBpf,GA98B/BhP,EAAQ+R,OAASA,EACjB/R,EAAQquB,WAoTR,SAAqB3rB,IACdA,GAAUA,IACbA,EAAS,GAEX,OAAOqP,EAAOuc,OAAO5rB,IAvTvB1C,EAAQuuB,kBAAoB,GA0B5Bxc,EAAOiY,yBAAqDxmB,IAA/B0b,EAAO8K,oBAChC9K,EAAO8K,oBAQX,WACE,IACE,IAAIiC,EAAM,IAAI7Y,WAAW,GAEzB,OADA6Y,EAAI9B,UAAY,CAACA,UAAW/W,WAAW/Q,UAAWmsB,IAAK,WAAc,OAAO,KACvD,KAAdvC,EAAIuC,OACiB,mBAAjBvC,EAAIwC,UACuB,IAAlCxC,EAAIwC,SAAS,EAAG,GAAGtc,WACvB,MAAO4G,GACP,OAAO,GAfP2V,GAKJ1uB,EAAQ+pB,WAAaA,IAkErBhY,EAAO4c,SAAW,KAGlB5c,EAAO6c,SAAW,SAAU3C,GAE1B,OADAA,EAAI9B,UAAYpY,EAAO1P,UAChB4pB,GA2BTla,EAAOC,KAAO,SAAUtQ,EAAO2oB,EAAkB3nB,GAC/C,OAAOsP,EAAK,KAAMtQ,EAAO2oB,EAAkB3nB,IAGzCqP,EAAOiY,sBACTjY,EAAO1P,UAAU8nB,UAAY/W,WAAW/Q,UACxC0P,EAAOoY,UAAY/W,WACG,oBAAX5R,QAA0BA,OAAOqtB,SACxC9c,EAAOvQ,OAAOqtB,WAAa9c,GAE7B5Q,OAAOC,eAAe2Q,EAAQvQ,OAAOqtB,QAAS,CAC5CntB,MAAO,KACPotB,cAAc,KAiCpB/c,EAAOuc,MAAQ,SAAUjpB,EAAMyH,EAAMwV,GACnC,OArBF,SAAgB4H,EAAM7kB,EAAMyH,EAAMwV,GAEhC,OADA0I,EAAW3lB,GACPA,GAAQ,EACH4kB,EAAaC,EAAM7kB,QAEf7B,IAATsJ,EAIyB,iBAAbwV,EACV2H,EAAaC,EAAM7kB,GAAMyH,KAAKA,EAAMwV,GACpC2H,EAAaC,EAAM7kB,GAAMyH,KAAKA,GAE7Bmd,EAAaC,EAAM7kB,GAQnBipB,CAAM,KAAMjpB,EAAMyH,EAAMwV,IAiBjCvQ,EAAOwQ,YAAc,SAAUld,GAC7B,OAAOkd,EAAY,KAAMld,IAK3B0M,EAAOgd,gBAAkB,SAAU1pB,GACjC,OAAOkd,EAAY,KAAMld,IAiH3B0M,EAAO6Y,SAAW,SAAmBrnB,GACnC,QAAe,MAALA,IAAaA,EAAEyrB,YAG3Bjd,EAAOkd,QAAU,SAAkB7uB,EAAGmD,GACpC,IAAKwO,EAAO6Y,SAASxqB,KAAO2R,EAAO6Y,SAASrnB,GAC1C,MAAM,IAAIyI,UAAU,6BAGtB,GAAI5L,IAAMmD,EAAG,OAAO,EAKpB,IAHA,IAAIoH,EAAIvK,EAAEsC,OACN4J,EAAI/I,EAAEb,OAEDrC,EAAI,EAAGqkB,EAAMzgB,KAAKwpB,IAAI9iB,EAAG2B,GAAIjM,EAAIqkB,IAAOrkB,EAC/C,GAAID,EAAEC,KAAOkD,EAAElD,GAAI,CACjBsK,EAAIvK,EAAEC,GACNiM,EAAI/I,EAAElD,GACN,MAIJ,OAAIsK,EAAI2B,GAAW,EACfA,EAAI3B,EAAU,EACX,GAGToH,EAAOyY,WAAa,SAAqBlI,GACvC,OAAQzC,OAAOyC,GAAUb,eACvB,IAAK,MACL,IAAK,OACL,IAAK,QACL,IAAK,QACL,IAAK,SACL,IAAK,SACL,IAAK,SACL,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAO,EACT,QACE,OAAO,IAIb1P,EAAOmd,OAAS,SAAiBC,EAAMzsB,GACrC,IAAKsO,EAAQme,GACX,MAAM,IAAInjB,UAAU,+CAGtB,GAAoB,IAAhBmjB,EAAKzsB,OACP,OAAOqP,EAAOuc,MAAM,GAGtB,IAAIjuB,EACJ,QAAemD,IAAXd,EAEF,IADAA,EAAS,EACJrC,EAAI,EAAGA,EAAI8uB,EAAKzsB,SAAUrC,EAC7BqC,GAAUysB,EAAK9uB,GAAGqC,OAItB,IAAIuP,EAASF,EAAOwQ,YAAY7f,GAC5BqM,EAAM,EACV,IAAK1O,EAAI,EAAGA,EAAI8uB,EAAKzsB,SAAUrC,EAAG,CAChC,IAAI8Q,EAAMge,EAAK9uB,GACf,IAAK0R,EAAO6Y,SAASzZ,GACnB,MAAM,IAAInF,UAAU,+CAEtBmF,EAAI2Z,KAAK7Y,EAAQlD,GACjBA,GAAOoC,EAAIzO,OAEb,OAAOuP,GA8CTF,EAAOI,WAAaA,EA0EpBJ,EAAO1P,UAAU2sB,WAAY,EAQ7Bjd,EAAO1P,UAAU+sB,OAAS,WACxB,IAAI1K,EAAM7T,KAAKnO,OACf,GAAIgiB,EAAM,GAAM,EACd,MAAM,IAAI3T,WAAW,6CAEvB,IAAK,IAAI1Q,EAAI,EAAGA,EAAIqkB,EAAKrkB,GAAK,EAC5BurB,EAAK/a,KAAMxQ,EAAGA,EAAI,GAEpB,OAAOwQ,MAGTkB,EAAO1P,UAAUgtB,OAAS,WACxB,IAAI3K,EAAM7T,KAAKnO,OACf,GAAIgiB,EAAM,GAAM,EACd,MAAM,IAAI3T,WAAW,6CAEvB,IAAK,IAAI1Q,EAAI,EAAGA,EAAIqkB,EAAKrkB,GAAK,EAC5BurB,EAAK/a,KAAMxQ,EAAGA,EAAI,GAClBurB,EAAK/a,KAAMxQ,EAAI,EAAGA,EAAI,GAExB,OAAOwQ,MAGTkB,EAAO1P,UAAUitB,OAAS,WACxB,IAAI5K,EAAM7T,KAAKnO,OACf,GAAIgiB,EAAM,GAAM,EACd,MAAM,IAAI3T,WAAW,6CAEvB,IAAK,IAAI1Q,EAAI,EAAGA,EAAIqkB,EAAKrkB,GAAK,EAC5BurB,EAAK/a,KAAMxQ,EAAGA,EAAI,GAClBurB,EAAK/a,KAAMxQ,EAAI,EAAGA,EAAI,GACtBurB,EAAK/a,KAAMxQ,EAAI,EAAGA,EAAI,GACtBurB,EAAK/a,KAAMxQ,EAAI,EAAGA,EAAI,GAExB,OAAOwQ,MAGTkB,EAAO1P,UAAU+P,SAAW,WAC1B,IAAI1P,EAAuB,EAAdmO,KAAKnO,OAClB,OAAe,IAAXA,EAAqB,GACA,IAArB6sB,UAAU7sB,OAAqB6oB,EAAU1a,KAAM,EAAGnO,GAC/C2oB,EAAa8C,MAAMtd,KAAM0e,YAGlCxd,EAAO1P,UAAUmtB,OAAS,SAAiBjsB,GACzC,IAAKwO,EAAO6Y,SAASrnB,GAAI,MAAM,IAAIyI,UAAU,6BAC7C,OAAI6E,OAAStN,GACsB,IAA5BwO,EAAOkd,QAAQpe,KAAMtN,IAG9BwO,EAAO1P,UAAUotB,QAAU,WACzB,IAAI3d,EAAM,GACN5N,EAAMlE,EAAQuuB,kBAKlB,OAJI1d,KAAKnO,OAAS,IAChBoP,EAAMjB,KAAKuB,SAAS,MAAO,EAAGlO,GAAKwrB,MAAM,SAAS7F,KAAK,KACnDhZ,KAAKnO,OAASwB,IAAK4N,GAAO,UAEzB,WAAaA,EAAM,KAG5BC,EAAO1P,UAAU4sB,QAAU,SAAkBzoB,EAAQoD,EAAOC,EAAK8lB,EAAWC,GAC1E,IAAK7d,EAAO6Y,SAASpkB,GACnB,MAAM,IAAIwF,UAAU,6BAgBtB,QAbcxI,IAAVoG,IACFA,EAAQ,QAEEpG,IAARqG,IACFA,EAAMrD,EAASA,EAAO9D,OAAS,QAEfc,IAAdmsB,IACFA,EAAY,QAEEnsB,IAAZosB,IACFA,EAAU/e,KAAKnO,QAGbkH,EAAQ,GAAKC,EAAMrD,EAAO9D,QAAUitB,EAAY,GAAKC,EAAU/e,KAAKnO,OACtE,MAAM,IAAIqO,WAAW,sBAGvB,GAAI4e,GAAaC,GAAWhmB,GAASC,EACnC,OAAO,EAET,GAAI8lB,GAAaC,EACf,OAAQ,EAEV,GAAIhmB,GAASC,EACX,OAAO,EAQT,GAAIgH,OAASrK,EAAQ,OAAO,EAS5B,IAPA,IAAImE,GAJJilB,KAAa,IADbD,KAAe,GAMXrjB,GAPJzC,KAAS,IADTD,KAAW,GASP8a,EAAMzgB,KAAKwpB,IAAI9iB,EAAG2B,GAElBujB,EAAWhf,KAAK3G,MAAMylB,EAAWC,GACjCE,EAAatpB,EAAO0D,MAAMN,EAAOC,GAE5BxJ,EAAI,EAAGA,EAAIqkB,IAAOrkB,EACzB,GAAIwvB,EAASxvB,KAAOyvB,EAAWzvB,GAAI,CACjCsK,EAAIklB,EAASxvB,GACbiM,EAAIwjB,EAAWzvB,GACf,MAIJ,OAAIsK,EAAI2B,GAAW,EACfA,EAAI3B,EAAU,EACX,GA6HToH,EAAO1P,UAAU0tB,SAAW,SAAmBhF,EAAK7Y,EAAYoQ,GAC9D,OAAoD,IAA7CzR,KAAKlE,QAAQoe,EAAK7Y,EAAYoQ,IAGvCvQ,EAAO1P,UAAUsK,QAAU,SAAkBoe,EAAK7Y,EAAYoQ,GAC5D,OAAOuJ,EAAqBhb,KAAMka,EAAK7Y,EAAYoQ,GAAU,IAG/DvQ,EAAO1P,UAAU2pB,YAAc,SAAsBjB,EAAK7Y,EAAYoQ,GACpE,OAAOuJ,EAAqBhb,KAAMka,EAAK7Y,EAAYoQ,GAAU,IAkD/DvQ,EAAO1P,UAAUqoB,MAAQ,SAAgBzG,EAAQnd,EAAQpE,EAAQ4f,GAE/D,QAAe9e,IAAXsD,EACFwb,EAAW,OACX5f,EAASmO,KAAKnO,OACdoE,EAAS,OAEJ,QAAetD,IAAXd,GAA0C,iBAAXoE,EACxCwb,EAAWxb,EACXpE,EAASmO,KAAKnO,OACdoE,EAAS,MAEJ,KAAI6Y,SAAS7Y,GAWlB,MAAM,IAAID,MACR,2EAXFC,GAAkB,EACd6Y,SAASjd,IACXA,GAAkB,OACDc,IAAb8e,IAAwBA,EAAW,UAEvCA,EAAW5f,EACXA,OAASc,GASb,IAAIkpB,EAAY7b,KAAKnO,OAASoE,EAG9B,SAFetD,IAAXd,GAAwBA,EAASgqB,KAAWhqB,EAASgqB,GAEpDzI,EAAOvhB,OAAS,IAAMA,EAAS,GAAKoE,EAAS,IAAOA,EAAS+J,KAAKnO,OACrE,MAAM,IAAIqO,WAAW,0CAGlBuR,IAAUA,EAAW,QAG1B,IADA,IAAI4I,GAAc,IAEhB,OAAQ5I,GACN,IAAK,MACH,OAAOmK,EAAS5b,KAAMoT,EAAQnd,EAAQpE,GAExC,IAAK,OACL,IAAK,QACH,OAAOyd,EAAUtP,KAAMoT,EAAQnd,EAAQpE,GAEzC,IAAK,QACH,OAAOqqB,EAAWlc,KAAMoT,EAAQnd,EAAQpE,GAE1C,IAAK,SACL,IAAK,SACH,OAAOyqB,EAAYtc,KAAMoT,EAAQnd,EAAQpE,GAE3C,IAAK,SAEH,OAAO0qB,EAAYvc,KAAMoT,EAAQnd,EAAQpE,GAE3C,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAO2qB,EAAUxc,KAAMoT,EAAQnd,EAAQpE,GAEzC,QACE,GAAIwoB,EAAa,MAAM,IAAIlf,UAAU,qBAAuBsW,GAC5DA,GAAY,GAAKA,GAAUb,cAC3ByJ,GAAc,IAKtBnZ,EAAO1P,UAAUsjB,OAAS,WACxB,MAAO,CACLpgB,KAAM,SACNoJ,KAAMvK,MAAM/B,UAAU6H,MAAMtJ,KAAKiQ,KAAKmf,MAAQnf,KAAM,KA4GxD,SAAS2a,EAAYra,EAAKvH,EAAOC,GAC/B,IAAIomB,EAAM,GACVpmB,EAAM5F,KAAKwpB,IAAItc,EAAIzO,OAAQmH,GAE3B,IAAK,IAAIxJ,EAAIuJ,EAAOvJ,EAAIwJ,IAAOxJ,EAC7B4vB,GAAOpQ,OAAOqO,aAAsB,IAAT/c,EAAI9Q,IAEjC,OAAO4vB,EAGT,SAASxE,EAAata,EAAKvH,EAAOC,GAChC,IAAIomB,EAAM,GACVpmB,EAAM5F,KAAKwpB,IAAItc,EAAIzO,OAAQmH,GAE3B,IAAK,IAAIxJ,EAAIuJ,EAAOvJ,EAAIwJ,IAAOxJ,EAC7B4vB,GAAOpQ,OAAOqO,aAAa/c,EAAI9Q,IAEjC,OAAO4vB,EAGT,SAAS3E,EAAUna,EAAKvH,EAAOC,GAC7B,IAAI6a,EAAMvT,EAAIzO,SAETkH,GAASA,EAAQ,KAAGA,EAAQ,KAC5BC,GAAOA,EAAM,GAAKA,EAAM6a,KAAK7a,EAAM6a,GAGxC,IADA,IAAIwL,EAAM,GACD7vB,EAAIuJ,EAAOvJ,EAAIwJ,IAAOxJ,EAC7B6vB,GAAOC,EAAMhf,EAAI9Q,IAEnB,OAAO6vB,EAGT,SAASvE,EAAcxa,EAAKvH,EAAOC,GAGjC,IAFA,IAAIsY,EAAQhR,EAAIjH,MAAMN,EAAOC,GACzBmF,EAAM,GACD3O,EAAI,EAAGA,EAAI8hB,EAAMzf,OAAQrC,GAAK,EACrC2O,GAAO6Q,OAAOqO,aAAa/L,EAAM9hB,GAAoB,IAAf8hB,EAAM9hB,EAAI,IAElD,OAAO2O,EA0CT,SAASohB,EAAatpB,EAAQupB,EAAK3tB,GACjC,GAAKoE,EAAS,GAAO,GAAKA,EAAS,EAAG,MAAM,IAAIiK,WAAW,sBAC3D,GAAIjK,EAASupB,EAAM3tB,EAAQ,MAAM,IAAIqO,WAAW,yCA+JlD,SAASuf,EAAUnf,EAAKzP,EAAOoF,EAAQupB,EAAKnsB,EAAKupB,GAC/C,IAAK1b,EAAO6Y,SAASzZ,GAAM,MAAM,IAAInF,UAAU,+CAC/C,GAAItK,EAAQwC,GAAOxC,EAAQ+rB,EAAK,MAAM,IAAI1c,WAAW,qCACrD,GAAIjK,EAASupB,EAAMlf,EAAIzO,OAAQ,MAAM,IAAIqO,WAAW,sBAkDtD,SAASwf,EAAmBpf,EAAKzP,EAAOoF,EAAQ0pB,GAC1C9uB,EAAQ,IAAGA,EAAQ,MAASA,EAAQ,GACxC,IAAK,IAAIrB,EAAI,EAAG4F,EAAIhC,KAAKwpB,IAAItc,EAAIzO,OAASoE,EAAQ,GAAIzG,EAAI4F,IAAK5F,EAC7D8Q,EAAIrK,EAASzG,IAAMqB,EAAS,KAAS,GAAK8uB,EAAenwB,EAAI,EAAIA,MAClC,GAA5BmwB,EAAenwB,EAAI,EAAIA,GA8B9B,SAASowB,EAAmBtf,EAAKzP,EAAOoF,EAAQ0pB,GAC1C9uB,EAAQ,IAAGA,EAAQ,WAAaA,EAAQ,GAC5C,IAAK,IAAIrB,EAAI,EAAG4F,EAAIhC,KAAKwpB,IAAItc,EAAIzO,OAASoE,EAAQ,GAAIzG,EAAI4F,IAAK5F,EAC7D8Q,EAAIrK,EAASzG,GAAMqB,IAAuC,GAA5B8uB,EAAenwB,EAAI,EAAIA,GAAU,IAmJnE,SAASqwB,EAAcvf,EAAKzP,EAAOoF,EAAQupB,EAAKnsB,EAAKupB,GACnD,GAAI3mB,EAASupB,EAAMlf,EAAIzO,OAAQ,MAAM,IAAIqO,WAAW,sBACpD,GAAIjK,EAAS,EAAG,MAAM,IAAIiK,WAAW,sBAGvC,SAAS4f,EAAYxf,EAAKzP,EAAOoF,EAAQ0pB,EAAcI,GAKrD,OAJKA,GACHF,EAAavf,EAAKzP,EAAOoF,EAAQ,GAEnCgjB,EAAQY,MAAMvZ,EAAKzP,EAAOoF,EAAQ0pB,EAAc,GAAI,GAC7C1pB,EAAS,EAWlB,SAAS+pB,EAAa1f,EAAKzP,EAAOoF,EAAQ0pB,EAAcI,GAKtD,OAJKA,GACHF,EAAavf,EAAKzP,EAAOoF,EAAQ,GAEnCgjB,EAAQY,MAAMvZ,EAAKzP,EAAOoF,EAAQ0pB,EAAc,GAAI,GAC7C1pB,EAAS,EA/clBiL,EAAO1P,UAAU6H,MAAQ,SAAgBN,EAAOC,GAC9C,IAoBIinB,EApBApM,EAAM7T,KAAKnO,OAqBf,IApBAkH,IAAUA,GAGE,GACVA,GAAS8a,GACG,IAAG9a,EAAQ,GACdA,EAAQ8a,IACjB9a,EAAQ8a,IANV7a,OAAcrG,IAARqG,EAAoB6a,IAAQ7a,GASxB,GACRA,GAAO6a,GACG,IAAG7a,EAAM,GACVA,EAAM6a,IACf7a,EAAM6a,GAGJ7a,EAAMD,IAAOC,EAAMD,GAGnBmI,EAAOiY,qBACT8G,EAASjgB,KAAK4d,SAAS7kB,EAAOC,IACvBsgB,UAAYpY,EAAO1P,cACrB,CACL,IAAI0uB,EAAWlnB,EAAMD,EACrBknB,EAAS,IAAI/e,EAAOgf,OAAUvtB,GAC9B,IAAK,IAAInD,EAAI,EAAGA,EAAI0wB,IAAY1wB,EAC9BywB,EAAOzwB,GAAKwQ,KAAKxQ,EAAIuJ,GAIzB,OAAOknB,GAWT/e,EAAO1P,UAAU2uB,WAAa,SAAqBlqB,EAAQqL,EAAYye,GACrE9pB,GAAkB,EAClBqL,GAA0B,EACrBye,GAAUR,EAAYtpB,EAAQqL,EAAYtB,KAAKnO,QAKpD,IAHA,IAAIqoB,EAAMla,KAAK/J,GACXuG,EAAM,EACNhN,EAAI,IACCA,EAAI8R,IAAe9E,GAAO,MACjC0d,GAAOla,KAAK/J,EAASzG,GAAKgN,EAG5B,OAAO0d,GAGThZ,EAAO1P,UAAU4uB,WAAa,SAAqBnqB,EAAQqL,EAAYye,GACrE9pB,GAAkB,EAClBqL,GAA0B,EACrBye,GACHR,EAAYtpB,EAAQqL,EAAYtB,KAAKnO,QAKvC,IAFA,IAAIqoB,EAAMla,KAAK/J,IAAWqL,GACtB9E,EAAM,EACH8E,EAAa,IAAM9E,GAAO,MAC/B0d,GAAOla,KAAK/J,IAAWqL,GAAc9E,EAGvC,OAAO0d,GAGThZ,EAAO1P,UAAU6uB,UAAY,SAAoBpqB,EAAQ8pB,GAEvD,OADKA,GAAUR,EAAYtpB,EAAQ,EAAG+J,KAAKnO,QACpCmO,KAAK/J,IAGdiL,EAAO1P,UAAU8uB,aAAe,SAAuBrqB,EAAQ8pB,GAE7D,OADKA,GAAUR,EAAYtpB,EAAQ,EAAG+J,KAAKnO,QACpCmO,KAAK/J,GAAW+J,KAAK/J,EAAS,IAAM,GAG7CiL,EAAO1P,UAAUiqB,aAAe,SAAuBxlB,EAAQ8pB,GAE7D,OADKA,GAAUR,EAAYtpB,EAAQ,EAAG+J,KAAKnO,QACnCmO,KAAK/J,IAAW,EAAK+J,KAAK/J,EAAS,IAG7CiL,EAAO1P,UAAU+uB,aAAe,SAAuBtqB,EAAQ8pB,GAG7D,OAFKA,GAAUR,EAAYtpB,EAAQ,EAAG+J,KAAKnO,SAElCmO,KAAK/J,GACT+J,KAAK/J,EAAS,IAAM,EACpB+J,KAAK/J,EAAS,IAAM,IACD,SAAnB+J,KAAK/J,EAAS,IAGrBiL,EAAO1P,UAAUgvB,aAAe,SAAuBvqB,EAAQ8pB,GAG7D,OAFKA,GAAUR,EAAYtpB,EAAQ,EAAG+J,KAAKnO,QAEpB,SAAfmO,KAAK/J,IACT+J,KAAK/J,EAAS,IAAM,GACrB+J,KAAK/J,EAAS,IAAM,EACrB+J,KAAK/J,EAAS,KAGlBiL,EAAO1P,UAAUivB,UAAY,SAAoBxqB,EAAQqL,EAAYye,GACnE9pB,GAAkB,EAClBqL,GAA0B,EACrBye,GAAUR,EAAYtpB,EAAQqL,EAAYtB,KAAKnO,QAKpD,IAHA,IAAIqoB,EAAMla,KAAK/J,GACXuG,EAAM,EACNhN,EAAI,IACCA,EAAI8R,IAAe9E,GAAO,MACjC0d,GAAOla,KAAK/J,EAASzG,GAAKgN,EAM5B,OAFI0d,IAFJ1d,GAAO,OAES0d,GAAO9mB,KAAKgJ,IAAI,EAAG,EAAIkF,IAEhC4Y,GAGThZ,EAAO1P,UAAUkvB,UAAY,SAAoBzqB,EAAQqL,EAAYye,GACnE9pB,GAAkB,EAClBqL,GAA0B,EACrBye,GAAUR,EAAYtpB,EAAQqL,EAAYtB,KAAKnO,QAKpD,IAHA,IAAIrC,EAAI8R,EACJ9E,EAAM,EACN0d,EAAMla,KAAK/J,IAAWzG,GACnBA,EAAI,IAAMgN,GAAO,MACtB0d,GAAOla,KAAK/J,IAAWzG,GAAKgN,EAM9B,OAFI0d,IAFJ1d,GAAO,OAES0d,GAAO9mB,KAAKgJ,IAAI,EAAG,EAAIkF,IAEhC4Y,GAGThZ,EAAO1P,UAAUmvB,SAAW,SAAmB1qB,EAAQ8pB,GAErD,OADKA,GAAUR,EAAYtpB,EAAQ,EAAG+J,KAAKnO,QACtB,IAAfmO,KAAK/J,IAC0B,GAA5B,IAAO+J,KAAK/J,GAAU,GADK+J,KAAK/J,IAI3CiL,EAAO1P,UAAUovB,YAAc,SAAsB3qB,EAAQ8pB,GACtDA,GAAUR,EAAYtpB,EAAQ,EAAG+J,KAAKnO,QAC3C,IAAIqoB,EAAMla,KAAK/J,GAAW+J,KAAK/J,EAAS,IAAM,EAC9C,OAAc,MAANikB,EAAsB,WAANA,EAAmBA,GAG7ChZ,EAAO1P,UAAUqvB,YAAc,SAAsB5qB,EAAQ8pB,GACtDA,GAAUR,EAAYtpB,EAAQ,EAAG+J,KAAKnO,QAC3C,IAAIqoB,EAAMla,KAAK/J,EAAS,GAAM+J,KAAK/J,IAAW,EAC9C,OAAc,MAANikB,EAAsB,WAANA,EAAmBA,GAG7ChZ,EAAO1P,UAAUsvB,YAAc,SAAsB7qB,EAAQ8pB,GAG3D,OAFKA,GAAUR,EAAYtpB,EAAQ,EAAG+J,KAAKnO,QAEnCmO,KAAK/J,GACV+J,KAAK/J,EAAS,IAAM,EACpB+J,KAAK/J,EAAS,IAAM,GACpB+J,KAAK/J,EAAS,IAAM,IAGzBiL,EAAO1P,UAAUuvB,YAAc,SAAsB9qB,EAAQ8pB,GAG3D,OAFKA,GAAUR,EAAYtpB,EAAQ,EAAG+J,KAAKnO,QAEnCmO,KAAK/J,IAAW,GACrB+J,KAAK/J,EAAS,IAAM,GACpB+J,KAAK/J,EAAS,IAAM,EACpB+J,KAAK/J,EAAS,IAGnBiL,EAAO1P,UAAUwvB,YAAc,SAAsB/qB,EAAQ8pB,GAE3D,OADKA,GAAUR,EAAYtpB,EAAQ,EAAG+J,KAAKnO,QACpConB,EAAQuC,KAAKxb,KAAM/J,GAAQ,EAAM,GAAI,IAG9CiL,EAAO1P,UAAUyvB,YAAc,SAAsBhrB,EAAQ8pB,GAE3D,OADKA,GAAUR,EAAYtpB,EAAQ,EAAG+J,KAAKnO,QACpConB,EAAQuC,KAAKxb,KAAM/J,GAAQ,EAAO,GAAI,IAG/CiL,EAAO1P,UAAU0vB,aAAe,SAAuBjrB,EAAQ8pB,GAE7D,OADKA,GAAUR,EAAYtpB,EAAQ,EAAG+J,KAAKnO,QACpConB,EAAQuC,KAAKxb,KAAM/J,GAAQ,EAAM,GAAI,IAG9CiL,EAAO1P,UAAU2vB,aAAe,SAAuBlrB,EAAQ8pB,GAE7D,OADKA,GAAUR,EAAYtpB,EAAQ,EAAG+J,KAAKnO,QACpConB,EAAQuC,KAAKxb,KAAM/J,GAAQ,EAAO,GAAI,IAS/CiL,EAAO1P,UAAU4vB,YAAc,SAAsBvwB,EAAOoF,EAAQqL,EAAYye,IAC9ElvB,GAASA,EACToF,GAAkB,EAClBqL,GAA0B,EACrBye,IAEHN,EAASzf,KAAMnP,EAAOoF,EAAQqL,EADflO,KAAKgJ,IAAI,EAAG,EAAIkF,GAAc,EACO,GAGtD,IAAI9E,EAAM,EACNhN,EAAI,EAER,IADAwQ,KAAK/J,GAAkB,IAARpF,IACNrB,EAAI8R,IAAe9E,GAAO,MACjCwD,KAAK/J,EAASzG,GAAMqB,EAAQ2L,EAAO,IAGrC,OAAOvG,EAASqL,GAGlBJ,EAAO1P,UAAU6vB,YAAc,SAAsBxwB,EAAOoF,EAAQqL,EAAYye,IAC9ElvB,GAASA,EACToF,GAAkB,EAClBqL,GAA0B,EACrBye,IAEHN,EAASzf,KAAMnP,EAAOoF,EAAQqL,EADflO,KAAKgJ,IAAI,EAAG,EAAIkF,GAAc,EACO,GAGtD,IAAI9R,EAAI8R,EAAa,EACjB9E,EAAM,EAEV,IADAwD,KAAK/J,EAASzG,GAAa,IAARqB,IACVrB,GAAK,IAAMgN,GAAO,MACzBwD,KAAK/J,EAASzG,GAAMqB,EAAQ2L,EAAO,IAGrC,OAAOvG,EAASqL,GAGlBJ,EAAO1P,UAAU8vB,WAAa,SAAqBzwB,EAAOoF,EAAQ8pB,GAMhE,OALAlvB,GAASA,EACToF,GAAkB,EACb8pB,GAAUN,EAASzf,KAAMnP,EAAOoF,EAAQ,EAAG,IAAM,GACjDiL,EAAOiY,sBAAqBtoB,EAAQuC,KAAKiC,MAAMxE,IACpDmP,KAAK/J,GAAmB,IAARpF,EACToF,EAAS,GAWlBiL,EAAO1P,UAAU+vB,cAAgB,SAAwB1wB,EAAOoF,EAAQ8pB,GAUtE,OATAlvB,GAASA,EACToF,GAAkB,EACb8pB,GAAUN,EAASzf,KAAMnP,EAAOoF,EAAQ,EAAG,MAAQ,GACpDiL,EAAOiY,qBACTnZ,KAAK/J,GAAmB,IAARpF,EAChBmP,KAAK/J,EAAS,GAAMpF,IAAU,GAE9B6uB,EAAkB1f,KAAMnP,EAAOoF,GAAQ,GAElCA,EAAS,GAGlBiL,EAAO1P,UAAUgwB,cAAgB,SAAwB3wB,EAAOoF,EAAQ8pB,GAUtE,OATAlvB,GAASA,EACToF,GAAkB,EACb8pB,GAAUN,EAASzf,KAAMnP,EAAOoF,EAAQ,EAAG,MAAQ,GACpDiL,EAAOiY,qBACTnZ,KAAK/J,GAAWpF,IAAU,EAC1BmP,KAAK/J,EAAS,GAAc,IAARpF,GAEpB6uB,EAAkB1f,KAAMnP,EAAOoF,GAAQ,GAElCA,EAAS,GAUlBiL,EAAO1P,UAAUiwB,cAAgB,SAAwB5wB,EAAOoF,EAAQ8pB,GAYtE,OAXAlvB,GAASA,EACToF,GAAkB,EACb8pB,GAAUN,EAASzf,KAAMnP,EAAOoF,EAAQ,EAAG,WAAY,GACxDiL,EAAOiY,qBACTnZ,KAAK/J,EAAS,GAAMpF,IAAU,GAC9BmP,KAAK/J,EAAS,GAAMpF,IAAU,GAC9BmP,KAAK/J,EAAS,GAAMpF,IAAU,EAC9BmP,KAAK/J,GAAmB,IAARpF,GAEhB+uB,EAAkB5f,KAAMnP,EAAOoF,GAAQ,GAElCA,EAAS,GAGlBiL,EAAO1P,UAAUkwB,cAAgB,SAAwB7wB,EAAOoF,EAAQ8pB,GAYtE,OAXAlvB,GAASA,EACToF,GAAkB,EACb8pB,GAAUN,EAASzf,KAAMnP,EAAOoF,EAAQ,EAAG,WAAY,GACxDiL,EAAOiY,qBACTnZ,KAAK/J,GAAWpF,IAAU,GAC1BmP,KAAK/J,EAAS,GAAMpF,IAAU,GAC9BmP,KAAK/J,EAAS,GAAMpF,IAAU,EAC9BmP,KAAK/J,EAAS,GAAc,IAARpF,GAEpB+uB,EAAkB5f,KAAMnP,EAAOoF,GAAQ,GAElCA,EAAS,GAGlBiL,EAAO1P,UAAUmwB,WAAa,SAAqB9wB,EAAOoF,EAAQqL,EAAYye,GAG5E,GAFAlvB,GAASA,EACToF,GAAkB,GACb8pB,EAAU,CACb,IAAI6B,EAAQxuB,KAAKgJ,IAAI,EAAG,EAAIkF,EAAa,GAEzCme,EAASzf,KAAMnP,EAAOoF,EAAQqL,EAAYsgB,EAAQ,GAAIA,GAGxD,IAAIpyB,EAAI,EACJgN,EAAM,EACNqlB,EAAM,EAEV,IADA7hB,KAAK/J,GAAkB,IAARpF,IACNrB,EAAI8R,IAAe9E,GAAO,MAC7B3L,EAAQ,GAAa,IAARgxB,GAAsC,IAAzB7hB,KAAK/J,EAASzG,EAAI,KAC9CqyB,EAAM,GAER7hB,KAAK/J,EAASzG,IAAOqB,EAAQ2L,GAAQ,GAAKqlB,EAAM,IAGlD,OAAO5rB,EAASqL,GAGlBJ,EAAO1P,UAAUswB,WAAa,SAAqBjxB,EAAOoF,EAAQqL,EAAYye,GAG5E,GAFAlvB,GAASA,EACToF,GAAkB,GACb8pB,EAAU,CACb,IAAI6B,EAAQxuB,KAAKgJ,IAAI,EAAG,EAAIkF,EAAa,GAEzCme,EAASzf,KAAMnP,EAAOoF,EAAQqL,EAAYsgB,EAAQ,GAAIA,GAGxD,IAAIpyB,EAAI8R,EAAa,EACjB9E,EAAM,EACNqlB,EAAM,EAEV,IADA7hB,KAAK/J,EAASzG,GAAa,IAARqB,IACVrB,GAAK,IAAMgN,GAAO,MACrB3L,EAAQ,GAAa,IAARgxB,GAAsC,IAAzB7hB,KAAK/J,EAASzG,EAAI,KAC9CqyB,EAAM,GAER7hB,KAAK/J,EAASzG,IAAOqB,EAAQ2L,GAAQ,GAAKqlB,EAAM,IAGlD,OAAO5rB,EAASqL,GAGlBJ,EAAO1P,UAAUuwB,UAAY,SAAoBlxB,EAAOoF,EAAQ8pB,GAO9D,OANAlvB,GAASA,EACToF,GAAkB,EACb8pB,GAAUN,EAASzf,KAAMnP,EAAOoF,EAAQ,EAAG,KAAO,KAClDiL,EAAOiY,sBAAqBtoB,EAAQuC,KAAKiC,MAAMxE,IAChDA,EAAQ,IAAGA,EAAQ,IAAOA,EAAQ,GACtCmP,KAAK/J,GAAmB,IAARpF,EACToF,EAAS,GAGlBiL,EAAO1P,UAAUwwB,aAAe,SAAuBnxB,EAAOoF,EAAQ8pB,GAUpE,OATAlvB,GAASA,EACToF,GAAkB,EACb8pB,GAAUN,EAASzf,KAAMnP,EAAOoF,EAAQ,EAAG,OAAS,OACrDiL,EAAOiY,qBACTnZ,KAAK/J,GAAmB,IAARpF,EAChBmP,KAAK/J,EAAS,GAAMpF,IAAU,GAE9B6uB,EAAkB1f,KAAMnP,EAAOoF,GAAQ,GAElCA,EAAS,GAGlBiL,EAAO1P,UAAUywB,aAAe,SAAuBpxB,EAAOoF,EAAQ8pB,GAUpE,OATAlvB,GAASA,EACToF,GAAkB,EACb8pB,GAAUN,EAASzf,KAAMnP,EAAOoF,EAAQ,EAAG,OAAS,OACrDiL,EAAOiY,qBACTnZ,KAAK/J,GAAWpF,IAAU,EAC1BmP,KAAK/J,EAAS,GAAc,IAARpF,GAEpB6uB,EAAkB1f,KAAMnP,EAAOoF,GAAQ,GAElCA,EAAS,GAGlBiL,EAAO1P,UAAU0wB,aAAe,SAAuBrxB,EAAOoF,EAAQ8pB,GAYpE,OAXAlvB,GAASA,EACToF,GAAkB,EACb8pB,GAAUN,EAASzf,KAAMnP,EAAOoF,EAAQ,EAAG,YAAa,YACzDiL,EAAOiY,qBACTnZ,KAAK/J,GAAmB,IAARpF,EAChBmP,KAAK/J,EAAS,GAAMpF,IAAU,EAC9BmP,KAAK/J,EAAS,GAAMpF,IAAU,GAC9BmP,KAAK/J,EAAS,GAAMpF,IAAU,IAE9B+uB,EAAkB5f,KAAMnP,EAAOoF,GAAQ,GAElCA,EAAS,GAGlBiL,EAAO1P,UAAU2wB,aAAe,SAAuBtxB,EAAOoF,EAAQ8pB,GAapE,OAZAlvB,GAASA,EACToF,GAAkB,EACb8pB,GAAUN,EAASzf,KAAMnP,EAAOoF,EAAQ,EAAG,YAAa,YACzDpF,EAAQ,IAAGA,EAAQ,WAAaA,EAAQ,GACxCqQ,EAAOiY,qBACTnZ,KAAK/J,GAAWpF,IAAU,GAC1BmP,KAAK/J,EAAS,GAAMpF,IAAU,GAC9BmP,KAAK/J,EAAS,GAAMpF,IAAU,EAC9BmP,KAAK/J,EAAS,GAAc,IAARpF,GAEpB+uB,EAAkB5f,KAAMnP,EAAOoF,GAAQ,GAElCA,EAAS,GAgBlBiL,EAAO1P,UAAU4wB,aAAe,SAAuBvxB,EAAOoF,EAAQ8pB,GACpE,OAAOD,EAAW9f,KAAMnP,EAAOoF,GAAQ,EAAM8pB,IAG/C7e,EAAO1P,UAAU6wB,aAAe,SAAuBxxB,EAAOoF,EAAQ8pB,GACpE,OAAOD,EAAW9f,KAAMnP,EAAOoF,GAAQ,EAAO8pB,IAWhD7e,EAAO1P,UAAU8wB,cAAgB,SAAwBzxB,EAAOoF,EAAQ8pB,GACtE,OAAOC,EAAYhgB,KAAMnP,EAAOoF,GAAQ,EAAM8pB,IAGhD7e,EAAO1P,UAAU+wB,cAAgB,SAAwB1xB,EAAOoF,EAAQ8pB,GACtE,OAAOC,EAAYhgB,KAAMnP,EAAOoF,GAAQ,EAAO8pB,IAIjD7e,EAAO1P,UAAUyoB,KAAO,SAAetkB,EAAQ6sB,EAAazpB,EAAOC,GAQjE,GAPKD,IAAOA,EAAQ,GACfC,GAAe,IAARA,IAAWA,EAAMgH,KAAKnO,QAC9B2wB,GAAe7sB,EAAO9D,SAAQ2wB,EAAc7sB,EAAO9D,QAClD2wB,IAAaA,EAAc,GAC5BxpB,EAAM,GAAKA,EAAMD,IAAOC,EAAMD,GAG9BC,IAAQD,EAAO,OAAO,EAC1B,GAAsB,IAAlBpD,EAAO9D,QAAgC,IAAhBmO,KAAKnO,OAAc,OAAO,EAGrD,GAAI2wB,EAAc,EAChB,MAAM,IAAItiB,WAAW,6BAEvB,GAAInH,EAAQ,GAAKA,GAASiH,KAAKnO,OAAQ,MAAM,IAAIqO,WAAW,6BAC5D,GAAIlH,EAAM,EAAG,MAAM,IAAIkH,WAAW,2BAG9BlH,EAAMgH,KAAKnO,SAAQmH,EAAMgH,KAAKnO,QAC9B8D,EAAO9D,OAAS2wB,EAAcxpB,EAAMD,IACtCC,EAAMrD,EAAO9D,OAAS2wB,EAAczpB,GAGtC,IACIvJ,EADAqkB,EAAM7a,EAAMD,EAGhB,GAAIiH,OAASrK,GAAUoD,EAAQypB,GAAeA,EAAcxpB,EAE1D,IAAKxJ,EAAIqkB,EAAM,EAAGrkB,GAAK,IAAKA,EAC1BmG,EAAOnG,EAAIgzB,GAAexiB,KAAKxQ,EAAIuJ,QAEhC,GAAI8a,EAAM,MAAS3S,EAAOiY,oBAE/B,IAAK3pB,EAAI,EAAGA,EAAIqkB,IAAOrkB,EACrBmG,EAAOnG,EAAIgzB,GAAexiB,KAAKxQ,EAAIuJ,QAGrCwJ,WAAW/Q,UAAUmD,IAAI5E,KACvB4F,EACAqK,KAAK4d,SAAS7kB,EAAOA,EAAQ8a,GAC7B2O,GAIJ,OAAO3O,GAOT3S,EAAO1P,UAAUyK,KAAO,SAAeie,EAAKnhB,EAAOC,EAAKyY,GAEtD,GAAmB,iBAARyI,EAAkB,CAS3B,GARqB,iBAAVnhB,GACT0Y,EAAW1Y,EACXA,EAAQ,EACRC,EAAMgH,KAAKnO,QACa,iBAARmH,IAChByY,EAAWzY,EACXA,EAAMgH,KAAKnO,QAEM,IAAfqoB,EAAIroB,OAAc,CACpB,IAAI4wB,EAAOvI,EAAIkC,WAAW,GACtBqG,EAAO,MACTvI,EAAMuI,GAGV,QAAiB9vB,IAAb8e,GAA8C,iBAAbA,EACnC,MAAM,IAAItW,UAAU,6BAEtB,GAAwB,iBAAbsW,IAA0BvQ,EAAOyY,WAAWlI,GACrD,MAAM,IAAItW,UAAU,qBAAuBsW,OAErB,iBAARyI,IAChBA,GAAY,KAId,GAAInhB,EAAQ,GAAKiH,KAAKnO,OAASkH,GAASiH,KAAKnO,OAASmH,EACpD,MAAM,IAAIkH,WAAW,sBAGvB,GAAIlH,GAAOD,EACT,OAAOiH,KAQT,IAAIxQ,EACJ,GANAuJ,KAAkB,EAClBC,OAAcrG,IAARqG,EAAoBgH,KAAKnO,OAASmH,IAAQ,EAE3CkhB,IAAKA,EAAM,GAGG,iBAARA,EACT,IAAK1qB,EAAIuJ,EAAOvJ,EAAIwJ,IAAOxJ,EACzBwQ,KAAKxQ,GAAK0qB,MAEP,CACL,IAAI5I,EAAQpQ,EAAO6Y,SAASG,GACxBA,EACAI,EAAY,IAAIpZ,EAAOgZ,EAAKzI,GAAUlQ,YACtCsS,EAAMvC,EAAMzf,OAChB,IAAKrC,EAAI,EAAGA,EAAIwJ,EAAMD,IAASvJ,EAC7BwQ,KAAKxQ,EAAIuJ,GAASuY,EAAM9hB,EAAIqkB,GAIhC,OAAO7T,MAMT,IAAI0iB,EAAoB,qBAmBxB,SAASpD,EAAOjuB,GACd,OAAIA,EAAI,GAAW,IAAMA,EAAEkQ,SAAS,IAC7BlQ,EAAEkQ,SAAS,IAGpB,SAAS+Y,EAAalH,EAAQqJ,GAE5B,IAAIS,EADJT,EAAQA,GAASkG,IAMjB,IAJA,IAAI9wB,EAASuhB,EAAOvhB,OAChB+wB,EAAgB,KAChBtR,EAAQ,GAEH9hB,EAAI,EAAGA,EAAIqC,IAAUrC,EAAG,CAI/B,IAHA0tB,EAAY9J,EAAOgJ,WAAW5sB,IAGd,OAAU0tB,EAAY,MAAQ,CAE5C,IAAK0F,EAAe,CAElB,GAAI1F,EAAY,MAAQ,EAEjBT,GAAS,IAAM,GAAGnL,EAAMvV,KAAK,IAAM,IAAM,KAC9C,SACK,GAAIvM,EAAI,IAAMqC,EAAQ,EAEtB4qB,GAAS,IAAM,GAAGnL,EAAMvV,KAAK,IAAM,IAAM,KAC9C,SAIF6mB,EAAgB1F,EAEhB,SAIF,GAAIA,EAAY,MAAQ,EACjBT,GAAS,IAAM,GAAGnL,EAAMvV,KAAK,IAAM,IAAM,KAC9C6mB,EAAgB1F,EAChB,SAIFA,EAAkE,OAArD0F,EAAgB,OAAU,GAAK1F,EAAY,YAC/C0F,IAEJnG,GAAS,IAAM,GAAGnL,EAAMvV,KAAK,IAAM,IAAM,KAMhD,GAHA6mB,EAAgB,KAGZ1F,EAAY,IAAM,CACpB,IAAKT,GAAS,GAAK,EAAG,MACtBnL,EAAMvV,KAAKmhB,QACN,GAAIA,EAAY,KAAO,CAC5B,IAAKT,GAAS,GAAK,EAAG,MACtBnL,EAAMvV,KACJmhB,GAAa,EAAM,IACP,GAAZA,EAAmB,UAEhB,GAAIA,EAAY,MAAS,CAC9B,IAAKT,GAAS,GAAK,EAAG,MACtBnL,EAAMvV,KACJmhB,GAAa,GAAM,IACnBA,GAAa,EAAM,GAAO,IACd,GAAZA,EAAmB,SAEhB,MAAIA,EAAY,SASrB,MAAM,IAAIlnB,MAAM,sBARhB,IAAKymB,GAAS,GAAK,EAAG,MACtBnL,EAAMvV,KACJmhB,GAAa,GAAO,IACpBA,GAAa,GAAM,GAAO,IAC1BA,GAAa,EAAM,GAAO,IACd,GAAZA,EAAmB,MAOzB,OAAO5L,EA4BT,SAASiJ,EAAetZ,GACtB,OAAO6M,EAAO+U,YAhIhB,SAAsB5hB,GAIpB,IAFAA,EAUF,SAAqBA,GACnB,OAAIA,EAAI6hB,KAAa7hB,EAAI6hB,OAClB7hB,EAAI8hB,QAAQ,aAAc,IAZ3BC,CAAW/hB,GAAK8hB,QAAQL,EAAmB,KAEzC7wB,OAAS,EAAG,MAAO,GAE3B,KAAOoP,EAAIpP,OAAS,GAAM,GACxBoP,GAAY,IAEd,OAAOA,EAuHmBgiB,CAAYhiB,IAGxC,SAASgb,EAAY5O,EAAKD,EAAKnX,EAAQpE,GACrC,IAAK,IAAIrC,EAAI,EAAGA,EAAIqC,KACbrC,EAAIyG,GAAUmX,EAAIvb,QAAYrC,GAAK6d,EAAIxb,UADhBrC,EAE5B4d,EAAI5d,EAAIyG,GAAUoX,EAAI7d,GAExB,OAAOA,K,+BCvvDTJ,EAAOD,QAAUwgB,EAKjB,IAAIuT,EAAO,KAEX,IACEA,EAAO,IAAIC,YAAYC,SAAS,IAAID,YAAYE,OAAO,IAAI9gB,WAAW,CACpE,EAAG,GAAI,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,MACvnC,IAAIpT,QACT,MAAO+Y,IAcT,SAASyH,EAAKwE,EAAKC,EAAM/D,GAMrBrQ,KAAKmU,IAAY,EAANA,EAMXnU,KAAKoU,KAAc,EAAPA,EAMZpU,KAAKqQ,WAAaA,EAoCtB,SAASrY,EAAOoX,GACZ,OAAsC,KAA9BA,GAAOA,EAAgB,YAXnCO,EAAKne,UAAU8xB,WAEfhzB,OAAOC,eAAeof,EAAKne,UAAW,aAAc,CAAEX,OAAO,IAkB7D8e,EAAK3X,OAASA,EAOd,IAAIurB,EAAY,GAOZC,EAAa,GAQjB,SAASC,EAAQ5yB,EAAOwf,GACpB,IAAIjB,EAAKsU,EAAW3jB,EACpB,OAAIsQ,GAEItQ,EAAS,IADblP,KAAW,IACgBA,EAAQ,OAC/B6yB,EAAYF,EAAW3yB,IAEZ6yB,GAEftU,EAAM3L,EAAS5S,GAAgB,EAARA,GAAa,GAAK,EAAI,GAAG,GAC5CkP,IACAyjB,EAAW3yB,GAASue,GACjBA,IAGHrP,GAAU,MADdlP,GAAS,IACqBA,EAAQ,OAClC6yB,EAAYH,EAAU1yB,IAEX6yB,GAEftU,EAAM3L,EAAS5S,EAAOA,EAAQ,GAAK,EAAI,GAAG,GACtCkP,IACAwjB,EAAU1yB,GAASue,GAChBA,GAmBf,SAASuU,EAAW9yB,EAAOwf,GACvB,GAAIkI,MAAM1nB,GACN,OAAOwf,EAAWuT,EAAQC,EAC9B,GAAIxT,EAAU,CACV,GAAIxf,EAAQ,EACR,OAAO+yB,EACX,GAAI/yB,GAASizB,EACT,OAAOC,MACR,CACH,GAAIlzB,IAAUmzB,EACV,OAAOC,EACX,GAAIpzB,EAAQ,GAAKmzB,EACb,OAAOE,EAEf,OAAIrzB,EAAQ,EACD8yB,GAAY9yB,EAAOwf,GAAU8T,MACjC1gB,EAAU5S,EAAQuzB,EAAkB,EAAIvzB,EAAQuzB,EAAkB,EAAG/T,GAmBhF,SAAS5M,EAAS4gB,EAASC,EAAUjU,GACjC,OAAO,IAAIV,EAAK0U,EAASC,EAAUjU,GA5CvCV,EAAK8T,QAAUA,EAkCf9T,EAAKgU,WAAaA,EAsBlBhU,EAAKlM,SAAWA,EAShB,IAAI8gB,EAAUnxB,KAAKgJ,IASnB,SAAS0d,EAAW7Y,EAAKoP,EAAUmU,GAC/B,GAAmB,IAAfvjB,EAAIpP,OACJ,MAAMmE,MAAM,gBAChB,GAAY,QAARiL,GAAyB,aAARA,GAA8B,cAARA,GAA+B,cAARA,EAC9D,OAAO4iB,EASX,GARwB,iBAAbxT,GAEPmU,EAAQnU,EACRA,GAAW,GAEXA,IAAcA,GAElBmU,EAAQA,GAAS,IACL,GAAK,GAAKA,EAClB,MAAMtkB,WAAW,SAErB,IAAIxO,EACJ,IAAKA,EAAIuP,EAAInF,QAAQ,MAAQ,EACzB,MAAM9F,MAAM,mBACX,GAAU,IAANtE,EACL,OAAOooB,EAAW7Y,EAAI4P,UAAU,GAAIR,EAAUmU,GAAOL,MAQzD,IAHA,IAAIM,EAAed,EAAWY,EAAQC,EAAO,IAEzC9X,EAASmX,EACJr0B,EAAI,EAAGA,EAAIyR,EAAIpP,OAAQrC,GAAK,EAAG,CACpC,IAAIgF,EAAOpB,KAAKwpB,IAAI,EAAG3b,EAAIpP,OAASrC,GAChCqB,EAAQ0jB,SAAStT,EAAI4P,UAAUrhB,EAAGA,EAAIgF,GAAOgwB,GACjD,GAAIhwB,EAAO,EAAG,CACV,IAAIkwB,EAAQf,EAAWY,EAAQC,EAAOhwB,IACtCkY,EAASA,EAAOlQ,IAAIkoB,GAAO3X,IAAI4W,EAAW9yB,SAG1C6b,GADAA,EAASA,EAAOlQ,IAAIioB,IACJ1X,IAAI4W,EAAW9yB,IAIvC,OADA6b,EAAO2D,SAAWA,EACX3D,EAoBX,SAAS4H,EAAU4F,EAAK7J,GACpB,MAAmB,iBAAR6J,EACAyJ,EAAWzJ,EAAK7J,GACR,iBAAR6J,EACAJ,EAAWI,EAAK7J,GAEpB5M,EAASyW,EAAI/F,IAAK+F,EAAI9F,KAA0B,kBAAb/D,EAAyBA,EAAW6J,EAAI7J,UAftFV,EAAKmK,WAAaA,EAyBlBnK,EAAK2E,UAAYA,EAUjB,IAcI8P,EAAiBO,WAOjBb,EAAiBM,EAAiBA,EAOlCJ,EAAiBF,EAAiB,EAOlCc,EAAanB,EA5BI,GAAK,IAkCtBI,EAAOJ,EAAQ,GAMnB9T,EAAKkU,KAAOA,EAMZ,IAAID,EAAQH,EAAQ,GAAG,GAMvB9T,EAAKiU,MAAQA,EAMb,IAAIiB,EAAMpB,EAAQ,GAMlB9T,EAAKkV,IAAMA,EAMX,IAAIC,EAAOrB,EAAQ,GAAG,GAMtB9T,EAAKmV,KAAOA,EAMZ,IAAIC,EAAUtB,GAAS,GAMvB9T,EAAKoV,QAAUA,EAMf,IAAIb,EAAYzgB,GAAS,EAAc,YAAc,GAMrDkM,EAAKuU,UAAYA,EAMjB,IAAIH,EAAqBtgB,GAAS,GAAc,GAAc,GAM9DkM,EAAKoU,mBAAqBA,EAM1B,IAAIE,EAAYxgB,EAAS,GAAG,YAAc,GAM1CkM,EAAKsU,UAAYA,EAMjB,IAAIe,EAAgBrV,EAAKne,UAMzBwzB,EAAcC,MAAQ,WAClB,OAAOjlB,KAAKqQ,SAAWrQ,KAAKmU,MAAQ,EAAInU,KAAKmU,KAOjD6Q,EAAc/sB,SAAW,WACrB,OAAI+H,KAAKqQ,UACIrQ,KAAKoU,OAAS,GAAKgQ,GAAmBpkB,KAAKmU,MAAQ,GACzDnU,KAAKoU,KAAOgQ,GAAkBpkB,KAAKmU,MAAQ,IAUtD6Q,EAAczjB,SAAW,SAAkBijB,GAEvC,IADAA,EAAQA,GAAS,IACL,GAAK,GAAKA,EAClB,MAAMtkB,WAAW,SACrB,GAAIF,KAAKklB,SACL,MAAO,IACX,GAAIllB,KAAKmlB,aAAc,CACnB,GAAInlB,KAAKolB,GAAGnB,GAAY,CAGpB,IAAIoB,EAAY1B,EAAWa,GACvBc,EAAMtlB,KAAKslB,IAAID,GACfE,EAAOD,EAAI9oB,IAAI6oB,GAAWxD,IAAI7hB,MAClC,OAAOslB,EAAI/jB,SAASijB,GAASe,EAAKN,QAAQ1jB,SAASijB,GAEnD,MAAO,IAAMxkB,KAAKmkB,MAAM5iB,SAASijB,GAQzC,IAHA,IAAIC,EAAed,EAAWY,EAAQC,EAAO,GAAIxkB,KAAKqQ,UAClDmV,EAAMxlB,KACN0M,EAAS,KACA,CACT,IAAI+Y,EAASD,EAAIF,IAAIb,GAEjBiB,GADSF,EAAI3D,IAAI4D,EAAOjpB,IAAIioB,IAAeQ,UAAY,GACvC1jB,SAASijB,GAE7B,IADAgB,EAAMC,GACEP,SACJ,OAAOQ,EAAShZ,EAEhB,KAAOgZ,EAAO7zB,OAAS,GACnB6zB,EAAS,IAAMA,EACnBhZ,EAAS,GAAKgZ,EAAShZ,IASnCsY,EAAcW,YAAc,WACxB,OAAO3lB,KAAKoU,MAOhB4Q,EAAcY,oBAAsB,WAChC,OAAO5lB,KAAKoU,OAAS,GAOzB4Q,EAAca,WAAa,WACvB,OAAO7lB,KAAKmU,KAOhB6Q,EAAcc,mBAAqB,WAC/B,OAAO9lB,KAAKmU,MAAQ,GAOxB6Q,EAAce,cAAgB,WAC1B,GAAI/lB,KAAKmlB,aACL,OAAOnlB,KAAKolB,GAAGnB,GAAa,GAAKjkB,KAAKmkB,MAAM4B,gBAEhD,IADA,IAAI7L,EAAmB,GAAbla,KAAKoU,KAAYpU,KAAKoU,KAAOpU,KAAKmU,IACnC6R,EAAM,GAAIA,EAAM,GACK,IAArB9L,EAAO,GAAK8L,GADOA,KAG5B,OAAoB,GAAbhmB,KAAKoU,KAAY4R,EAAM,GAAKA,EAAM,GAO7ChB,EAAcE,OAAS,WACnB,OAAqB,IAAdllB,KAAKoU,MAA2B,IAAbpU,KAAKmU,KAOnC6Q,EAAciB,IAAMjB,EAAcE,OAMlCF,EAAcG,WAAa,WACvB,OAAQnlB,KAAKqQ,UAAYrQ,KAAKoU,KAAO,GAOzC4Q,EAAckB,WAAa,WACvB,OAAOlmB,KAAKqQ,UAAYrQ,KAAKoU,MAAQ,GAOzC4Q,EAAcmB,MAAQ,WAClB,OAA0B,IAAP,EAAXnmB,KAAKmU,MAOjB6Q,EAAcoB,OAAS,WACnB,OAA0B,IAAP,EAAXpmB,KAAKmU,MAQjB6Q,EAAcrG,OAAS,SAAgB0H,GAGnC,OAFKruB,EAAOquB,KACRA,EAAQ/R,EAAU+R,KAClBrmB,KAAKqQ,WAAagW,EAAMhW,UAAarQ,KAAKoU,OAAS,IAAQ,GAAMiS,EAAMjS,OAAS,IAAQ,KAErFpU,KAAKoU,OAASiS,EAAMjS,MAAQpU,KAAKmU,MAAQkS,EAAMlS,MAS1D6Q,EAAcI,GAAKJ,EAAcrG,OAOjCqG,EAAcsB,UAAY,SAAmBD,GACzC,OAAQrmB,KAAKolB,GAAmBiB,IASpCrB,EAAcuB,IAAMvB,EAAcsB,UAQlCtB,EAAcwB,GAAKxB,EAAcsB,UAOjCtB,EAAchiB,SAAW,SAAkBqjB,GACvC,OAAOrmB,KAAKymB,KAAqBJ,GAAS,GAS9CrB,EAAc0B,GAAK1B,EAAchiB,SAOjCgiB,EAAc2B,gBAAkB,SAAyBN,GACrD,OAAOrmB,KAAKymB,KAAqBJ,IAAU,GAS/CrB,EAAc4B,IAAM5B,EAAc2B,gBAQlC3B,EAAc6B,GAAK7B,EAAc2B,gBAOjC3B,EAAc8B,YAAc,SAAqBT,GAC7C,OAAOrmB,KAAKymB,KAAqBJ,GAAS,GAS9CrB,EAAc+B,GAAK/B,EAAc8B,YAOjC9B,EAAcjiB,mBAAqB,SAA4BsjB,GAC3D,OAAOrmB,KAAKymB,KAAqBJ,IAAU,GAS/CrB,EAAcgC,IAAMhC,EAAcjiB,mBAQlCiiB,EAAciC,GAAKjC,EAAcjiB,mBAQjCiiB,EAAc5G,QAAU,SAAiBiI,GAGrC,GAFKruB,EAAOquB,KACRA,EAAQ/R,EAAU+R,IAClBrmB,KAAKolB,GAAGiB,GACR,OAAO,EACX,IAAIa,EAAUlnB,KAAKmlB,aACfgC,EAAWd,EAAMlB,aACrB,OAAI+B,IAAYC,GACJ,GACPD,GAAWC,EACL,EAENnnB,KAAKqQ,SAGFgW,EAAMjS,OAAS,EAAMpU,KAAKoU,OAAS,GAAOiS,EAAMjS,OAASpU,KAAKoU,MAASiS,EAAMlS,MAAQ,EAAMnU,KAAKmU,MAAQ,GAAO,EAAI,EAFhHnU,KAAK6hB,IAAIwE,GAAOlB,cAAgB,EAAI,GAYnDH,EAAcyB,KAAOzB,EAAc5G,QAMnC4G,EAAcoC,OAAS,WACnB,OAAKpnB,KAAKqQ,UAAYrQ,KAAKolB,GAAGnB,GACnBA,EACJjkB,KAAKqnB,MAAMta,IAAI8X,IAQ1BG,EAAcb,IAAMa,EAAcoC,OAOlCpC,EAAcjY,IAAM,SAAaua,GACxBtvB,EAAOsvB,KACRA,EAAShT,EAAUgT,IAIvB,IAAIC,EAAMvnB,KAAKoU,OAAS,GACpBoT,EAAkB,MAAZxnB,KAAKoU,KACXqT,EAAMznB,KAAKmU,MAAQ,GACnBuT,EAAiB,MAAX1nB,KAAKmU,IAEXwT,EAAML,EAAOlT,OAAS,GACtBwT,EAAoB,MAAdN,EAAOlT,KACbyT,EAAMP,EAAOnT,MAAQ,GAGrB2T,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAYrC,OAVAD,IADAC,GAAOP,GAHgB,MAAbJ,EAAOnT,QAIF,GAGf4T,IADAC,GAAOP,EAAMI,KACE,GAGfC,IADAC,GAAOP,EAAMI,KACE,GAEfE,GAAOP,EAAMI,EAENlkB,GANPukB,GAAO,QAMiB,IATxBC,GAAO,QAQPH,GAAO,QACoC,IAH3CC,GAAO,OAG+C/nB,KAAKqQ,WAQ/D2U,EAAckD,SAAW,SAAkBC,GAGvC,OAFKnwB,EAAOmwB,KACRA,EAAa7T,EAAU6T,IACpBnoB,KAAK+M,IAAIob,EAAWhE,QAS/Ba,EAAcnD,IAAMmD,EAAckD,SAOlClD,EAAcoD,SAAW,SAAkBC,GACvC,GAAIroB,KAAKklB,SACL,OAAOrB,EAKX,GAJK7rB,EAAOqwB,KACRA,EAAa/T,EAAU+T,IAGvBnF,EAKA,OAAOzf,EAJGyf,EAAK1mB,IAAIwD,KAAKmU,IACLnU,KAAKoU,KACLiU,EAAWlU,IACXkU,EAAWjU,MACT8O,EAAKoF,WAAYtoB,KAAKqQ,UAG/C,GAAIgY,EAAWnD,SACX,OAAOrB,EACX,GAAI7jB,KAAKolB,GAAGnB,GACR,OAAOoE,EAAWlC,QAAUlC,EAAYJ,EAC5C,GAAIwE,EAAWjD,GAAGnB,GACd,OAAOjkB,KAAKmmB,QAAUlC,EAAYJ,EAEtC,GAAI7jB,KAAKmlB,aACL,OAAIkD,EAAWlD,aACJnlB,KAAKmkB,MAAM3nB,IAAI6rB,EAAWlE,OAE1BnkB,KAAKmkB,MAAM3nB,IAAI6rB,GAAYlE,MACnC,GAAIkE,EAAWlD,aAClB,OAAOnlB,KAAKxD,IAAI6rB,EAAWlE,OAAOA,MAGtC,GAAInkB,KAAK0mB,GAAG9B,IAAeyD,EAAW3B,GAAG9B,GACrC,OAAOjB,EAAW3jB,KAAK/H,WAAaowB,EAAWpwB,WAAY+H,KAAKqQ,UAKpE,IAAIkX,EAAMvnB,KAAKoU,OAAS,GACpBoT,EAAkB,MAAZxnB,KAAKoU,KACXqT,EAAMznB,KAAKmU,MAAQ,GACnBuT,EAAiB,MAAX1nB,KAAKmU,IAEXwT,EAAMU,EAAWjU,OAAS,GAC1BwT,EAAwB,MAAlBS,EAAWjU,KACjByT,EAAMQ,EAAWlU,MAAQ,GACzBoU,EAAuB,MAAjBF,EAAWlU,IAEjB2T,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAqBrC,OAnBAD,IADAC,GAAOP,EAAMa,KACE,GAGfR,IADAC,GAAOP,EAAMc,KACE,GACfP,GAAO,MAEPD,IADAC,GAAON,EAAMG,KACE,GAGfC,IADAC,GAAOP,EAAMe,KACE,GACfR,GAAO,MAEPD,IADAC,GAAON,EAAMI,KACE,GACfE,GAAO,MAEPD,IADAC,GAAOL,EAAME,KACE,GAEfE,GAAOP,EAAMgB,EAAMf,EAAMK,EAAMJ,EAAMG,EAAMF,EAAMC,EAE1ClkB,GAZPukB,GAAO,QAYiB,IAlBxBC,GAAO,QAiBPH,GAAO,QACoC,IAH3CC,GAAO,OAG+C/nB,KAAKqQ,WAS/D2U,EAAcxoB,IAAMwoB,EAAcoD,SAQlCpD,EAAcwD,OAAS,SAAgBC,GAGnC,GAFKzwB,EAAOywB,KACRA,EAAUnU,EAAUmU,IACpBA,EAAQvD,SACR,MAAMlvB,MAAM,oBAaZ,IAWA0yB,EAAQlD,EAAKrnB,EArBjB,GAAI+kB,EAIA,OAAKljB,KAAKqQ,WACS,aAAfrQ,KAAKoU,OACY,IAAjBqU,EAAQtU,MAAgC,IAAlBsU,EAAQrU,KAU3B3Q,GANIzD,KAAKqQ,SAAW6S,EAAKyF,MAAQzF,EAAK0F,OACzC5oB,KAAKmU,IACLnU,KAAKoU,KACLqU,EAAQtU,IACRsU,EAAQrU,MAES8O,EAAKoF,WAAYtoB,KAAKqQ,UARhCrQ,KAWf,GAAIA,KAAKklB,SACL,OAAOllB,KAAKqQ,SAAWuT,EAAQC,EAEnC,GAAK7jB,KAAKqQ,SA6BH,CAKH,GAFKoY,EAAQpY,WACToY,EAAUA,EAAQI,cAClBJ,EAAQ1B,GAAG/mB,MACX,OAAO4jB,EACX,GAAI6E,EAAQ1B,GAAG/mB,KAAK8oB,KAAK,IACrB,OAAOhE,EACX3mB,EAAMylB,MAtCU,CAGhB,GAAI5jB,KAAKolB,GAAGnB,GACR,OAAIwE,EAAQrD,GAAGP,IAAQ4D,EAAQrD,GAAGL,GACvBd,EACFwE,EAAQrD,GAAGnB,GACTY,GAIP6D,EADe1oB,KAAK+oB,IAAI,GACNzD,IAAImD,GAASO,IAAI,IACxB5D,GAAGvB,GACH4E,EAAQtD,aAAeN,EAAME,GAEpCS,EAAMxlB,KAAK6hB,IAAI4G,EAAQjsB,IAAIksB,IAC3BvqB,EAAMuqB,EAAO3b,IAAIyY,EAAIF,IAAImD,KAI9B,GAAIA,EAAQrD,GAAGnB,GAClB,OAAOjkB,KAAKqQ,SAAWuT,EAAQC,EACnC,GAAI7jB,KAAKmlB,aACL,OAAIsD,EAAQtD,aACDnlB,KAAKmkB,MAAMmB,IAAImD,EAAQtE,OAC3BnkB,KAAKmkB,MAAMmB,IAAImD,GAAStE,MAC5B,GAAIsE,EAAQtD,aACf,OAAOnlB,KAAKslB,IAAImD,EAAQtE,OAAOA,MACnChmB,EAAM0lB,EAmBV,IADA2B,EAAMxlB,KACCwlB,EAAIwB,IAAIyB,IAAU,CAGrBC,EAASt1B,KAAKC,IAAI,EAAGD,KAAKiC,MAAMmwB,EAAIvtB,WAAawwB,EAAQxwB,aAWzD,IAPA,IAAIgxB,EAAO71B,KAAK81B,KAAK91B,KAAKmR,IAAImkB,GAAUt1B,KAAK+1B,KACzCC,EAASH,GAAQ,GAAM,EAAI1E,EAAQ,EAAG0E,EAAO,IAI7CI,EAAY1F,EAAW+E,GACvBY,EAAYD,EAAU7sB,IAAIisB,GACvBa,EAAUnE,cAAgBmE,EAAUvC,GAAGvB,IAG1C8D,GADAD,EAAY1F,EADZ+E,GAAUU,EACqBppB,KAAKqQ,WACd7T,IAAIisB,GAK1BY,EAAUnE,WACVmE,EAAYxE,GAEhB1mB,EAAMA,EAAI4O,IAAIsc,GACd7D,EAAMA,EAAI3D,IAAIyH,GAElB,OAAOnrB,GASX6mB,EAAcM,IAAMN,EAAcwD,OAOlCxD,EAAcuE,OAAS,SAAgBd,GAKnC,OAJKzwB,EAAOywB,KACRA,EAAUnU,EAAUmU,IAGpBvF,EAOOzf,GANIzD,KAAKqQ,SAAW6S,EAAKsG,MAAQtG,EAAKuG,OACzCzpB,KAAKmU,IACLnU,KAAKoU,KACLqU,EAAQtU,IACRsU,EAAQrU,MAES8O,EAAKoF,WAAYtoB,KAAKqQ,UAGxCrQ,KAAK6hB,IAAI7hB,KAAKslB,IAAImD,GAASjsB,IAAIisB,KAS1CzD,EAAc0E,IAAM1E,EAAcuE,OAQlCvE,EAAcQ,IAAMR,EAAcuE,OAMlCvE,EAAcqC,IAAM,WAChB,OAAO5jB,GAAUzD,KAAKmU,KAAMnU,KAAKoU,KAAMpU,KAAKqQ,WAQhD2U,EAAc2E,IAAM,SAAatD,GAG7B,OAFKruB,EAAOquB,KACRA,EAAQ/R,EAAU+R,IACf5iB,EAASzD,KAAKmU,IAAMkS,EAAMlS,IAAKnU,KAAKoU,KAAOiS,EAAMjS,KAAMpU,KAAKqQ,WAQvE2U,EAAc4E,GAAK,SAAYvD,GAG3B,OAFKruB,EAAOquB,KACRA,EAAQ/R,EAAU+R,IACf5iB,EAASzD,KAAKmU,IAAMkS,EAAMlS,IAAKnU,KAAKoU,KAAOiS,EAAMjS,KAAMpU,KAAKqQ,WAQvE2U,EAAc6E,IAAM,SAAaxD,GAG7B,OAFKruB,EAAOquB,KACRA,EAAQ/R,EAAU+R,IACf5iB,EAASzD,KAAKmU,IAAMkS,EAAMlS,IAAKnU,KAAKoU,KAAOiS,EAAMjS,KAAMpU,KAAKqQ,WAQvE2U,EAAc8E,UAAY,SAAmBC,GAGzC,OAFI/xB,EAAO+xB,KACPA,EAAUA,EAAQ9E,SACE,IAAnB8E,GAAW,IACL/pB,KACF+pB,EAAU,GACRtmB,EAASzD,KAAKmU,KAAO4V,EAAU/pB,KAAKoU,MAAQ2V,EAAY/pB,KAAKmU,MAAS,GAAK4V,EAAW/pB,KAAKqQ,UAE3F5M,EAAS,EAAGzD,KAAKmU,KAAQ4V,EAAU,GAAK/pB,KAAKqQ,WAS5D2U,EAAcgE,IAAMhE,EAAc8E,UAOlC9E,EAAcgF,WAAa,SAAoBD,GAG3C,OAFI/xB,EAAO+xB,KACPA,EAAUA,EAAQ9E,SACE,IAAnB8E,GAAW,IACL/pB,KACF+pB,EAAU,GACRtmB,EAAUzD,KAAKmU,MAAQ4V,EAAY/pB,KAAKoU,MAAS,GAAK2V,EAAW/pB,KAAKoU,MAAQ2V,EAAS/pB,KAAKqQ,UAE5F5M,EAASzD,KAAKoU,MAAS2V,EAAU,GAAK/pB,KAAKoU,MAAQ,EAAI,GAAK,EAAGpU,KAAKqQ,WASnF2U,EAAc+D,IAAM/D,EAAcgF,WAOlChF,EAAciF,mBAAqB,SAA4BF,GAI3D,GAHI/xB,EAAO+xB,KACPA,EAAUA,EAAQ9E,SAEN,KADhB8E,GAAW,IAEP,OAAO/pB,KAEP,IAAIoU,EAAOpU,KAAKoU,KAChB,OAAI2V,EAAU,GAEHtmB,EADGzD,KAAKmU,MACU4V,EAAY3V,GAAS,GAAK2V,EAAW3V,IAAS2V,EAAS/pB,KAAKqQ,UAE9E5M,EADY,KAAZsmB,EACS3V,EAEAA,IAAU2V,EAAU,GAFd,EAAG/pB,KAAKqQ,WAY1C2U,EAAc8D,KAAO9D,EAAciF,mBAQnCjF,EAAckF,MAAQlF,EAAciF,mBAMpCjF,EAAcmF,SAAW,WACrB,OAAKnqB,KAAKqQ,SAEH5M,EAASzD,KAAKmU,IAAKnU,KAAKoU,MAAM,GAD1BpU,MAQfglB,EAAc6D,WAAa,WACvB,OAAI7oB,KAAKqQ,SACErQ,KACJyD,EAASzD,KAAKmU,IAAKnU,KAAKoU,MAAM,IAQzC4Q,EAAcoF,QAAU,SAAiBvD,GACrC,OAAOA,EAAK7mB,KAAKqqB,YAAcrqB,KAAKsqB,aAOxCtF,EAAcqF,UAAY,WACtB,IAAI5Z,EAAKzQ,KAAKoU,KACV5D,EAAKxQ,KAAKmU,IACd,MAAO,CACS,IAAZ3D,EACAA,IAAQ,EAAI,IACZA,IAAO,GAAK,IACZA,IAAO,GACK,IAAZC,EACAA,IAAQ,EAAI,IACZA,IAAO,GAAK,IACZA,IAAO,KAQfuU,EAAcsF,UAAY,WACtB,IAAI7Z,EAAKzQ,KAAKoU,KACV5D,EAAKxQ,KAAKmU,IACd,MAAO,CACH1D,IAAO,GACPA,IAAO,GAAK,IACZA,IAAQ,EAAI,IACA,IAAZA,EACAD,IAAO,GACPA,IAAO,GAAK,IACZA,IAAQ,EAAI,IACA,IAAZA,IAWRb,EAAK4a,UAAY,SAAmBjZ,EAAOjB,EAAUwW,GACjD,OAAOA,EAAKlX,EAAK6a,YAAYlZ,EAAOjB,GAAYV,EAAK8a,YAAYnZ,EAAOjB,IAS5EV,EAAK6a,YAAc,SAAqBlZ,EAAOjB,GAC3C,OAAO,IAAIV,EACP2B,EAAM,GACNA,EAAM,IAAO,EACbA,EAAM,IAAM,GACZA,EAAM,IAAM,GACZA,EAAM,GACNA,EAAM,IAAO,EACbA,EAAM,IAAM,GACZA,EAAM,IAAM,GACZjB,IAURV,EAAK8a,YAAc,SAAqBnZ,EAAOjB,GAC3C,OAAO,IAAIV,EACP2B,EAAM,IAAM,GACZA,EAAM,IAAM,GACZA,EAAM,IAAO,EACbA,EAAM,GACNA,EAAM,IAAM,GACZA,EAAM,IAAM,GACZA,EAAM,IAAO,EACbA,EAAM,GACNjB,K,0GC7xCR,+BA6CA,OA1CE,YAAAqa,WAAA,SAAWC,GACT3qB,KAAK4qB,QAAUD,EAAWE,SAAS,UAAW,MAC9C7qB,KAAK8qB,SAAWH,EAAWE,SAAS,WAAY,IAChD7qB,KAAK+qB,QAAUJ,EAAWK,OAAO,UAAW,IAG9C,YAAAC,YAAA,SAAYr5B,GACV,SAAKA,GAA4B,IAAlBA,EAAOC,SAIfmO,KAAKkrB,gBAAgBt5B,IAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GACxB,IAAMu5B,EAAIv5B,EAAO,GACXw5B,EAAQx5B,EAAO,GACfy5B,EAAIz5B,EAAO,GACX05B,EAAO15B,EAAO,GACd25B,EAAO35B,EAAO,GAIpB,QAAIu5B,EAAEp5B,KAAKF,OAAS,GAA2B,IAAtBu5B,EAAMr5B,KAAKF,QAAkC,IAAlBw5B,EAAEt5B,KAAKF,QAAqC,IAArBy5B,EAAKv5B,KAAKF,QAC5D,IAArB05B,EAAKx5B,KAAKF,UAGVu5B,EAAMr5B,KAAK,KAAOo5B,EAAEp5B,KAAK,IAAMs5B,EAAEt5B,KAAK,KAAOo5B,EAAEp5B,KAAK,IAAMu5B,EAAKv5B,KAAK,KAAOo5B,EAAEp5B,KAAK,IAClFw5B,EAAKx5B,KAAK,KAAOo5B,EAAEp5B,KAAK,MAGZ,YAAXo5B,EAAEz2B,MAAiC,YAAXy2B,EAAEz2B,MAAuC,YAAf02B,EAAM12B,MAAqC,YAAf02B,EAAM12B,MACzE,YAAX22B,EAAE32B,MAAiC,YAAX22B,EAAE32B,MAAsC,YAAd42B,EAAK52B,MAAoC,YAAd42B,EAAK52B,MACpE,YAAd62B,EAAK72B,MAAoC,YAAd62B,EAAK72B,QASzC,EA7CA,GAAsB,EAAA82B,sB,gGCHtB,iBACE,WACcC,EAA0DvW,EAC1D7gB,GADA,KAAAo3B,iBAA0D,KAAAvW,SAC1D,KAAA7gB,aAuBhB,OAnBE,YAAAq2B,WAAA,SAAWC,KAEX,YAAAM,YAAA,SAAYr5B,GACV,SAAKA,GAA4B,IAAlBA,EAAOC,SAIfmO,KAAKkrB,gBAAgBt5B,IAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GACxB,OAAqD,IAAjDoO,KAAKyrB,eAAe3vB,QAAQlK,EAAO,GAAG8C,OAGtC9C,EAAO,GAAG8C,OAAS9C,EAAO,GAAG8C,MAKrC,EA1BA,GAAsB,EAAAg3B,Y,4FCAtB,+BAkFA,OA/EE,YAAAhB,WAAA,SAAWC,GAET3qB,KAAKlB,QAAU6rB,EAAWgB,UAAU,WAAY,UAChD3rB,KAAKnB,UAAY8rB,EAAWiB,QAAQ,YAAa,CAAC,EAAG,IACrD5rB,KAAK6rB,MAAQlB,EAAWK,OAAO,QAAS,GACxChrB,KAAKtB,YAAcisB,EAAWiB,QAAQ,eAAgB,IACtD5rB,KAAKrB,KAAOgsB,EAAWiB,QAAQ,OAAQ,CAAC,EAAG,EAAG,EAAG,IACjD5rB,KAAK7G,QAAUwxB,EAAWiB,QAAQ,UAAW,CAAC,EAAG,KAGnD,YAAAX,YAAA,SAAYr5B,GAGV,IAAKA,GAA6B,IAAlBA,EAAOC,QAAkC,IAAlBD,EAAOC,OAC5C,OAAO,EAKT,GAA8B,IAA1BD,EAAO,GAAGG,KAAKF,QAA0C,IAA1BD,EAAO,GAAGG,KAAKF,OAChD,OAAO,EAMT,GAFoBD,EAAO,GAAGG,KAAK,KACXH,EAAO,GAAGG,KAAK,GAAKiO,KAAK6rB,MAE/C,OAAO,EAIT,GAAsB,IAAlBj6B,EAAOC,SAA2C,IAA1BD,EAAO,GAAGG,KAAKF,QAAgBD,EAAO,GAAGG,KAAK,KAAOH,EAAO,GAAGG,KAAK,IAC9F,OAAO,EAGT,IAAM+5B,EAAcl6B,EAAO,GAAGG,KAAKF,OAAS,EAE5C,OAAImO,KAAKnB,UAAUhN,SAAWi6B,IAK1B9rB,KAAK7G,QAAQtH,SAAWi6B,IAKxB9rB,KAAKrB,KAAK9M,SAAyB,EAAdi6B,KAMO,IAA5B9rB,KAAKtB,YAAY7M,QAAgBmO,KAAKtB,YAAY7M,SAAWD,EAAO,GAAGG,KAAKF,OAAS,IAIlFmO,KAAKkrB,gBAAgBt5B,OAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GAExB,MAAuB,YAAnBA,EAAO,GAAG8C,MAAyC,YAAnB9C,EAAO,GAAG8C,OAIxB,IAAlB9C,EAAOC,QAAmC,YAAnBD,EAAO,GAAG8C,OAazC,EAlFA,GAAsB,EAAAq3B,Q,kvBCLtB,YACA,OACA,OAGA,2B,+CAKA,OAL+B,OAC7B,YAAA9U,IAAA,SAAIC,EAAuCtlB,GAEzC,MAAO,CADQo6B,EAAOp6B,EAAO,GAAIA,EAAO,MAG5C,EALA,CAA+B,EAAAq6B,QAO/B,SAAgBD,EAAOz8B,EAAWmD,GAC1B,QAAiB,EAAAE,WAAWZ,sBAAsBzC,EAAEwC,KAAMW,EAAEX,MAAK,GAAhEE,EAAK,KAAEC,EAAK,KACbg6B,EAAa,CAACj6B,EAAMA,EAAMJ,OAAS,GAAIK,EAAMA,EAAML,OAAS,IAC5D0D,EAAQ,EAAAxB,cAAclB,UAAUZ,EAAOC,GAAO,GACpD,IAAKqD,EAEH,MAAM,IAAIS,MAAM,iDAUlB,IARA,IACMm2B,EADO,EAAA73B,UAAUE,KAAKe,IACE22B,EAAW,GAAKA,EAAW,IAEnDzwB,EAAI,IAAI,EAAAhH,OAAOc,EAAkB,YAAXhG,EAAEmF,MAAiC,YAAXhC,EAAEgC,KAAqB,UAAY,WACnF03B,EAAU,EACR5yB,EAAU,IAAIjG,MAAcgC,EAAM1D,QAClCw6B,EAAW,IAAI94B,MAAchE,EAAEwC,KAAKF,QACpCy6B,EAAW,IAAI/4B,MAAcb,EAAEX,KAAKF,QACjCrC,EAAI,EAAGA,EAAI28B,EAAe38B,IAAK,CAEtCgK,EAAQjE,EAAM1D,OAAS,GAAK,EAC5B2H,EAAQjE,EAAM1D,OAAS,GAAK,EAE5B,IADA,IAAIsD,EAAO3F,EACF4F,EAAIG,EAAM1D,OAAS,EAAGuD,GAAK,EAAGA,IACrCoE,EAAQpE,GAAKD,EAAOI,EAAMH,GAC1BD,EAAO/B,KAAKiC,MAAMF,EAAOI,EAAMH,IAGjC,EAAArB,cAAcC,UAAUwF,EAASjK,EAAEwC,KAAMs6B,GACzC,EAAAt4B,cAAcC,UAAUwF,EAAS9G,EAAEX,KAAMu6B,GAEzC,IAAMC,EAAUF,EAASx6B,QAAU,EAAI,EAAI,EAAAyC,UAAUiF,gBAAgB8yB,EAAU98B,EAAE4J,QAAS5D,EAAM1D,OAAS,GACnG26B,EAAUF,EAASz6B,QAAU,EAAI,EAAI,EAAAyC,UAAUiF,gBAAgB+yB,EAAU55B,EAAEyG,QAAS5D,EAAM1D,OAAS,GAEzG46B,EACIl9B,EAAEyS,UAAU4b,SAAS2O,GAAU75B,EAAEsP,UAAU4b,SAAS4O,GAAU/wB,EAAEuG,UAAU4b,SAASwO,IAAU,GAAO,EAAO,EAAG,EAC9GF,EAAW,GAAIA,EAAW,GAAIj6B,EAAMA,EAAMJ,OAAS,IACvDu6B,GAAWF,EAAW,GAAKA,EAAW,GAExC,OAAOzwB,EAST,SAAgBgxB,EACZC,EAA8BrB,EAA8BsB,EAA8BC,EAC1FC,EAAiBvwB,EAAewwB,EAAct2B,EAAWE,EAAWD,GACtE,OAAIm2B,GAAUC,EAgFhB,SACIH,EAA8BrB,EAA8BsB,EAA8BrwB,EAC1FwwB,EAAct2B,EAAWE,EAAWD,GAEtC,IADA,IAAI81B,EAAU,EAAGC,EAAU,EAAGO,EAAU,EAC/BC,EAAK,EAAGA,EAAKx2B,EAAGw2B,IAAM,CAC7B,IAAK,IAAIC,EAAK,EAAGA,EAAKv2B,EAAGu2B,IAAM,CAE7B,IADA,IAAIC,EAAM,EACDC,EAAK,EAAGA,EAAK12B,EAAG02B,IACvBD,GAAOR,EAAEH,GAAWlB,EAAEmB,GACtBD,GAAW/1B,EACXg2B,GAAW,EAEbD,GAAW/1B,EAAIC,EACf+1B,GAAW/1B,EACXk2B,EAAEI,GAAWzwB,EAAQ4wB,EAAMJ,EAAOH,EAAEI,GACpCA,IACAP,GAAW/1B,EAEb+1B,GAAW91B,EAAID,EACf81B,KAlGOa,CAAcV,EAAGrB,EAAGsB,EAAGrwB,EAAOwwB,EAAMt2B,EAAGE,EAAGD,GACxCm2B,EAgCb,SACIF,EAA8BrB,EAA8BsB,EAA8BrwB,EAC1FwwB,EAAct2B,EAAWE,EAAWD,GAEtC,IADA,IAAI81B,EAAU,EAAGC,EAAU,EAAGO,EAAU,EAC/BC,EAAK,EAAGA,EAAKx2B,EAAGw2B,IAAM,CAC7B,IAAK,IAAIC,EAAK,EAAGA,EAAKv2B,EAAGu2B,IAAM,CAE7B,IADA,IAAIC,EAAM,EACDC,EAAK,EAAGA,EAAK12B,EAAG02B,IACvBD,GAAOR,EAAEH,GAAWlB,EAAEmB,GACtBD,GAAW/1B,EACXg2B,GAAW91B,EAEb61B,GAAW/1B,EAAIC,EACf+1B,GAAW91B,EAAID,EACfk2B,EAAEI,GAAWzwB,EAAQ4wB,EAAMJ,EAAOH,EAAEI,GACpCA,IACAP,IAEFA,GAAW91B,EACX61B,KAlDOc,CAAYX,EAAGrB,EAAGsB,EAAGrwB,EAAOwwB,EAAMt2B,EAAGE,EAAGD,GACtCo2B,EAqDb,SACIH,EAA8BrB,EAA8BsB,EAA8BrwB,EAC1FwwB,EAAct2B,EAAWE,EAAWD,GAEtC,IADA,IAAI81B,EAAU,EAAGC,EAAU,EAAGO,EAAU,EAC/BC,EAAK,EAAGA,EAAKx2B,EAAGw2B,IAAM,CAC7B,IAAK,IAAIC,EAAK,EAAGA,EAAKv2B,EAAGu2B,IAAM,CAE7B,IADA,IAAIC,EAAM,EACDC,EAAK,EAAGA,EAAK12B,EAAG02B,IACvBD,GAAOR,EAAEH,GAAWlB,EAAEmB,GACtBD,GAAW,EACXC,GAAW,EAEbD,GAAW91B,EACX+1B,GAAW/1B,EACXk2B,EAAEI,GAAWzwB,EAAQ4wB,EAAMJ,EAAOH,EAAEI,GACpCA,IACAP,GAAW/1B,EAEb+1B,GAAW91B,EAAID,EACf81B,GAAW91B,GAvEJ62B,CAAYZ,EAAGrB,EAAGsB,EAAGrwB,EAAOwwB,EAAMt2B,EAAGE,EAAGD,GAMnD,SACIi2B,EAA8BrB,EAA8BsB,EAA8BrwB,EAC1FwwB,EAAct2B,EAAWE,EAAWD,GAEtC,IADA,IAAI81B,EAAU,EAAGC,EAAU,EAAGO,EAAU,EAC/BC,EAAK,EAAGA,EAAKx2B,EAAGw2B,IAAM,CAC7B,IAAK,IAAIC,EAAK,EAAGA,EAAKv2B,EAAGu2B,IAAM,CAE7B,IADA,IAAIC,EAAM,EACDC,EAAK,EAAGA,EAAK12B,EAAG02B,IACvBD,GAAOR,EAAEH,GAAWlB,EAAEmB,GACtBD,GAAW,EACXC,GAAW91B,EAEb61B,GAAW91B,EACX+1B,GAAW91B,EAAID,EACfk2B,EAAEI,GAAWzwB,EAAQ4wB,EAAMJ,EAAOH,EAAEI,GACpCA,IACAP,IAEFA,GAAW91B,EACX61B,GAAW91B,GAvBJ82B,CAAUb,EAAGrB,EAAGsB,EAAGrwB,EAAOwwB,EAAMt2B,EAAGE,EAAGD,GA/DpC,EAAA+2B,YAOb,WA8CA,c,8FCrDA,+BAgCA,OA7BE,YAAA9C,WAAA,SAAWC,KAEX,YAAAM,YAAA,SAAYr5B,GACV,SAAKA,GAA4B,IAAlBA,EAAOC,UAIlBD,EAAO,GAAGG,KAAKH,EAAO,GAAGG,KAAKF,OAAS,KAAOD,EAAO,GAAGG,KAAKH,EAAO,GAAGG,KAAKF,OAAS,IAIlFmO,KAAKkrB,gBAAgBt5B,KAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GACxB,OAAuB,YAAnBA,EAAO,GAAG8C,MAAyC,YAAnB9C,EAAO,GAAG8C,SAIvB,YAAnB9C,EAAO,GAAG8C,MAAyC,YAAnB9C,EAAO,GAAG8C,OAI1C9C,EAAO,GAAG8C,OAAS9C,EAAO,GAAG8C,OAMrC,EAhCA,GAAsB,EAAAu3B,U,4FCAtB,iBACE,WAAYwB,GACVztB,KAAKytB,YAAcA,EAmDvB,OA9CE,YAAA/C,WAAA,SAAWC,GACT3qB,KAAK4sB,OAA4C,IAAnCjC,EAAWK,OAAO,SAAU,GAC1ChrB,KAAK6sB,OAA4C,IAAnClC,EAAWK,OAAO,SAAU,GAC1ChrB,KAAK1D,MAAQquB,EAAWE,SAAS,QAAS,GAC1C7qB,KAAK8sB,KAAOnC,EAAWE,SAAS,OAAQ,IAG1C,YAAAI,YAAA,SAAYr5B,GACV,QAAKA,MAGDoO,KAAKytB,eAAgB77B,EAAOC,OAAS,GAAKD,EAAOC,OAAS,SAGzDmO,KAAKytB,aAAiC,IAAlB77B,EAAOC,WAKV,IAAlBD,EAAOC,QAA0C,IAA1BD,EAAO,GAAGG,KAAKF,QAA0C,IAA1BD,EAAO,GAAGG,KAAKF,SAIlEmO,KAAKkrB,gBAAgBt5B,OAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GACxB,QAAwB,YAAnBA,EAAO,GAAG8C,MAAyC,YAAnB9C,EAAO,GAAG8C,MACvB,YAAnB9C,EAAO,GAAG8C,MAAyC,YAAnB9C,EAAO,GAAG8C,MACxB,IAAlB9C,EAAOC,QAAmC,YAAnBD,EAAO,GAAG8C,MAAyC,YAAnB9C,EAAO,GAAG8C,QAIjE9C,EAAO,GAAG8C,OAAS9C,EAAO,GAAG8C,OAA4B,IAAlB9C,EAAOC,QAAgBD,EAAO,GAAG8C,OAAS9C,EAAO,GAAG8C,QAapG,EArDA,GAAsB,EAAAg5B,Q,6GCAtB,+BAoCA,OAjCE,YAAAhD,WAAA,SAAWC,GACT3qB,KAAK4qB,QAAUD,EAAWE,SAAS,UAAW,OAGhD,YAAAI,YAAA,SAAYr5B,GACV,SAAKA,GAA4B,IAAlBA,EAAOC,SAIfmO,KAAKkrB,gBAAgBt5B,IAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GACxB,IAAMu5B,EAAIv5B,EAAO,GACXw5B,EAAQx5B,EAAO,GACfy5B,EAAIz5B,EAAO,GAIjB,QAAIu5B,EAAEp5B,KAAKF,OAAS,GAA2B,IAAtBu5B,EAAMr5B,KAAKF,QAAkC,IAAlBw5B,EAAEt5B,KAAKF,UAGvDu5B,EAAMr5B,KAAK,KAAOo5B,EAAEp5B,KAAK,IAAMs5B,EAAEt5B,KAAK,KAAOo5B,EAAEp5B,KAAK,MAGxC,YAAXo5B,EAAEz2B,MAAiC,YAAXy2B,EAAEz2B,MAAuC,YAAf02B,EAAM12B,MAAqC,YAAf02B,EAAM12B,MACzE,YAAX22B,EAAE32B,MAAiC,YAAX22B,EAAE32B,QAOnC,EApCA,GAAsB,EAAAi5B,yB,ieCAtB,+BAuBA,OAtBE,YAAA1C,YAAA,SAAYr5B,GACV,SAAKA,GAA4B,IAAlBA,EAAOC,SAIfmO,KAAKkrB,gBAAgBt5B,IAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GACxB,MAAuB,YAAnBA,EAAO,GAAG8C,MAAyC,YAAnB9C,EAAO,GAAG8C,MAalD,EAvBA,GAyBA,2B,+CAgBA,OAhB0C,OAGxC,YAAAg2B,WAAA,SAAWC,GAST,GARA3qB,KAAKlB,QAAU6rB,EAAWgB,UAAU,WAAY,UAChD3rB,KAAKtB,YAAcisB,EAAWiB,QAAQ,gBACtC5rB,KAAK7G,QAAUwxB,EAAWiB,QAAQ,UAAW,IAC7C5rB,KAAKrB,KAAOgsB,EAAWiB,QAAQ,OAAQ,IACvC5rB,KAAK4tB,gBAAiE,IAA9CjD,EAAWK,OAAO,oBAAqB,GAC/DhrB,KAAK6tB,SAAWlD,EAAWK,OAAO,YAAa,GAGzB,IAAlBhrB,KAAK6tB,SACP,MAAM,IAAI73B,MAAM,2EAGtB,EAhBA,CAA0C83B,GAApB,EAAAC,cAkBtB,+B,+CAMA,OANgD,OAG9C,YAAArD,WAAA,SAAWC,GACT3qB,KAAK4tB,gBAAiE,IAA9CjD,EAAWK,OAAO,oBAAqB,IAEnE,EANA,CAAgD8C,GAA1B,EAAAE,oBAQtB,+B,+CAqBA,OArBsC,OAGpC,YAAAtD,WAAA,SAAWC,GAST,GARA3qB,KAAKlB,QAAU6rB,EAAWgB,UAAU,WAAY,UAChD3rB,KAAKtB,YAAcisB,EAAWiB,QAAQ,gBACtC5rB,KAAK7G,QAAUwxB,EAAWiB,QAAQ,UAAW,IAC7C5rB,KAAKrB,KAAOgsB,EAAWiB,QAAQ,OAAQ,IACvC5rB,KAAK6tB,SAAWlD,EAAWK,OAAO,YAAa,GAC/ChrB,KAAKiuB,aAAetD,EAAWK,OAAO,gBAAiB,GAG7B,IAAtBhrB,KAAKiuB,aACP,MAAM,IAAIj4B,MAAM,+DAElB,GAAsB,IAAlBgK,KAAK6tB,SACP,MAAM,IAAI73B,MAAM,uEAKtB,EArBA,CAAsC83B,GAAhB,EAAAI,UAuBtB,+B,+CAIA,OAJ4C,OAG1C,YAAAxD,WAAA,SAAWC,KACb,EAJA,CAA4CmD,GAAtB,EAAAK,iB,+FC1EtB,+BAwBA,OArBE,YAAAzD,WAAA,SAAWC,GACT3qB,KAAKnH,KAAO8xB,EAAWK,OAAO,OAAQ,IAGxC,YAAAC,YAAA,SAAYr5B,GACV,SAAKA,GAA4B,IAAlBA,EAAOC,SAIfmO,KAAKkrB,gBAAgBt5B,IAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GACxB,MAAuB,YAAnBA,EAAO,GAAG8C,MAAyC,YAAnB9C,EAAO,GAAG8C,MAQlD,EAxBA,GAAsB,EAAA05B,W,2FCAtB,+BAsCA,OAnCE,YAAA1D,WAAA,SAAWC,KAEX,YAAAM,YAAA,SAAYr5B,GACV,IAAKA,GAA4B,IAAlBA,EAAOC,OACpB,OAAO,EAIT,IADA,IAAMA,EAASD,EAAO,GAAGG,KAAKF,OACrBrC,EAAI,EAAGA,EAAIoC,EAAOC,OAAQrC,IAAK,CACtC,GAAIqC,IAAWD,EAAOpC,GAAGuC,KAAKF,OAC5B,OAAO,EAGT,IAAK,IAAIuD,EAAI,EAAGA,EAAIvD,EAAQuD,IAC1B,GAAIxD,EAAO,GAAGG,KAAKqD,KAAOxD,EAAOpC,GAAGuC,KAAKqD,GACvC,OAAO,EAKb,OAAO4K,KAAKkrB,gBAAgBt5B,IAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GACxB,GAAuB,YAAnBA,EAAO,GAAG8C,MAAyC,YAAnB9C,EAAO,GAAG8C,KAC5C,OAAO,EAET,IAAK,IAAIlF,EAAI,EAAGA,EAAIoC,EAAOC,OAAQrC,IACjC,GAAIoC,EAAO,GAAG8C,OAAS9C,EAAOpC,GAAGkF,KAC/B,OAAO,EAIX,OAAO,GAEX,EAtCA,GAAsB,EAAA25B,O,cCPtB,IAOIC,EACAC,EARA3f,EAAUxf,EAAOD,QAAU,GAU/B,SAASq/B,IACL,MAAM,IAAIx4B,MAAM,mCAEpB,SAASy4B,IACL,MAAM,IAAIz4B,MAAM,qCAsBpB,SAAS04B,EAAWC,GAChB,GAAIL,IAAqB9kB,WAErB,OAAOA,WAAWmlB,EAAK,GAG3B,IAAKL,IAAqBE,IAAqBF,IAAqB9kB,WAEhE,OADA8kB,EAAmB9kB,WACZA,WAAWmlB,EAAK,GAE3B,IAEI,OAAOL,EAAiBK,EAAK,GAC/B,MAAMzmB,GACJ,IAEI,OAAOomB,EAAiBv+B,KAAK,KAAM4+B,EAAK,GAC1C,MAAMzmB,GAEJ,OAAOomB,EAAiBv+B,KAAKiQ,KAAM2uB,EAAK,MAvCnD,WACG,IAEQL,EADsB,mBAAf9kB,WACYA,WAEAglB,EAEzB,MAAOtmB,GACLomB,EAAmBE,EAEvB,IAEQD,EADwB,mBAAjBrlB,aACcA,aAEAulB,EAE3B,MAAOvmB,GACLqmB,EAAqBE,GAjB7B,GAwEA,IAEIG,EAFAC,EAAQ,GACRC,GAAW,EAEXC,GAAc,EAElB,SAASC,IACAF,GAAaF,IAGlBE,GAAW,EACPF,EAAa/8B,OACbg9B,EAAQD,EAAavQ,OAAOwQ,GAE5BE,GAAc,EAEdF,EAAMh9B,QACNo9B,KAIR,SAASA,IACL,IAAIH,EAAJ,CAGA,IAAII,EAAUR,EAAWM,GACzBF,GAAW,EAGX,IADA,IAAIjb,EAAMgb,EAAMh9B,OACVgiB,GAAK,CAGP,IAFA+a,EAAeC,EACfA,EAAQ,KACCE,EAAalb,GACd+a,GACAA,EAAaG,GAAY9X,MAGjC8X,GAAc,EACdlb,EAAMgb,EAAMh9B,OAEhB+8B,EAAe,KACfE,GAAW,EAnEf,SAAyBK,GACrB,GAAIZ,IAAuBrlB,aAEvB,OAAOA,aAAaimB,GAGxB,IAAKZ,IAAuBE,IAAwBF,IAAuBrlB,aAEvE,OADAqlB,EAAqBrlB,aACdA,aAAaimB,GAExB,IAEWZ,EAAmBY,GAC5B,MAAOjnB,GACL,IAEI,OAAOqmB,EAAmBx+B,KAAK,KAAMo/B,GACvC,MAAOjnB,GAGL,OAAOqmB,EAAmBx+B,KAAKiQ,KAAMmvB,KAgD7CC,CAAgBF,IAiBpB,SAASG,EAAKV,EAAK5sB,GACf/B,KAAK2uB,IAAMA,EACX3uB,KAAK+B,MAAQA,EAYjB,SAASutB,KA5BT1gB,EAAQ2gB,SAAW,SAAUZ,GACzB,IAAIa,EAAO,IAAIj8B,MAAMmrB,UAAU7sB,OAAS,GACxC,GAAI6sB,UAAU7sB,OAAS,EACnB,IAAK,IAAIrC,EAAI,EAAGA,EAAIkvB,UAAU7sB,OAAQrC,IAClCggC,EAAKhgC,EAAI,GAAKkvB,UAAUlvB,GAGhCq/B,EAAM9yB,KAAK,IAAIszB,EAAKV,EAAKa,IACJ,IAAjBX,EAAMh9B,QAAiBi9B,GACvBJ,EAAWO,IASnBI,EAAK79B,UAAUylB,IAAM,WACjBjX,KAAK2uB,IAAIrR,MAAM,KAAMtd,KAAK+B,QAE9B6M,EAAQ6gB,MAAQ,UAChB7gB,EAAQ8gB,SAAU,EAClB9gB,EAAQ+gB,IAAM,GACd/gB,EAAQghB,KAAO,GACfhhB,EAAQhL,QAAU,GAClBgL,EAAQC,SAAW,GAInBD,EAAQihB,GAAKP,EACb1gB,EAAQkhB,YAAcR,EACtB1gB,EAAQmhB,KAAOT,EACf1gB,EAAQohB,IAAMV,EACd1gB,EAAQqhB,eAAiBX,EACzB1gB,EAAQshB,mBAAqBZ,EAC7B1gB,EAAQuhB,KAAOb,EACf1gB,EAAQwhB,gBAAkBd,EAC1B1gB,EAAQyhB,oBAAsBf,EAE9B1gB,EAAQ0hB,UAAY,SAAUngC,GAAQ,MAAO,IAE7Cye,EAAQ2hB,QAAU,SAAUpgC,GACxB,MAAM,IAAI6F,MAAM,qCAGpB4Y,EAAQ4hB,IAAM,WAAc,MAAO,KACnC5hB,EAAQ6hB,MAAQ,SAAUxV,GACtB,MAAM,IAAIjlB,MAAM,mCAEpB4Y,EAAQ8hB,MAAQ,WAAa,OAAO,I,8mBCvLpC,eAEA,WASA,aACkB,KAAA35B,KAAOA,EACP,KAAA45B,QAAU55B,EAAK45B,QACf,KAAAC,SAAWA,EAEpB,KAAAC,OAAQ,GAGJ,EAAAlB,IAAW,IAAImB,G,6YCf5B,G,+KAAA,OAIM/5B,EAAag6B,GADoB,oBAAXthC,OAA0BA,OAAS4e,GAEpDtX,KAAOA,EAGlB,UAASg6B,I,gpBCTT,WAGA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,WACA,QACA,QACA,QACA,SACA,SACA,SACA,SACA,SACA,WACA,QACA,SACA,SAEa,EAAAC,qBAAyD,CACpE,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI,EAAAC,WAAW,EAAA3lB,aAAc4lB,EAASC,OAC9D,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI,EAAAF,WAAW,EAAAzlB,YAAa0lB,EAASE,QAC9D,CAAC,QAAS,GAAI,KAAM,WAAM,WAAI,EAAAH,WAAW,EAAAzlB,YAAa0lB,EAASG,SAC/D,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI,EAAAC,YAAY,EAAAhmB,cAAc,SAACimB,EAAIC,GAAO,OAACD,EAAKC,OACxE,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI,EAAAF,YAAY,CAAC,SAAS,SAACC,EAAIC,GAAO,OAACD,GAAMC,OACrE,CAAC,SAAU,GAAI,OAAQ,WAAM,WAAI,EAAAC,YACjC,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI,EAAAR,WAAW,EAAAzlB,YAAa0lB,EAASQ,QAC9D,CAAC,QAAS,GAAI,KAAM,WAAM,WAAI,EAAAT,WAAW,EAAAzlB,YAAa0lB,EAASS,SAC/D,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI,EAAAV,WAAW,EAAAzlB,YAAa0lB,EAASU,QAC9D,CAAC,QAAS,GAAI,KAAM,WAAM,WAAI,EAAAX,WAAW,EAAAzlB,YAAa0lB,EAASW,SAC/D,CAAC,cAAe,GAAI,OAAQ,WAAM,WAAI,EAAAC,iBACtC,CAAC,qBAAsB,GAAI,KAAM,WAAM,WAAI,EAAAC,wBAC3C,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI,EAAAC,UAC7B,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI,EAAAf,WAAW,EAAAzlB,YAAa0lB,EAAShI,QAC9D,CAAC,OAAQ,GAAI,OAAQ,WAAM,WAAI,EAAA+H,WAAW,EAAAzlB,YAAa0lB,EAASe,KAAMf,EAASgB,mBAC/E,CAAC,SAAU,GAAI,KAAM,WAAM,WAAI,EAAAC,YAC/B,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI,EAAAC,UAC7B,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI,EAAAnB,WAAW,EAAAzlB,YAAa0lB,EAASmB,OAC7D,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI,EAAApB,WAAW,EAAAzlB,YAAa0lB,EAASoB,QAC9D,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI,EAAAhB,YAAY,EAAAhmB,cAAc,SAACimB,EAAIC,GAAO,OAACD,EAAKC,OACxE,CAAC,UAAW,GAAI,KAAM,WAAM,WAAI,EAAAe,aAChC,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI,EAAAtB,WAAW,EAAAzlB,YAAa0lB,EAASsB,IAAKtB,EAASuB,kBAC3E,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI,EAAAxB,WAAW,EAAAzlB,YAAa0lB,EAASwB,OAC7D,CAAC,SAAU,GAAI,KAAM,WAAM,WAAI,EAAAC,YAC/B,CAAC,UAAW,GAAI,KAAM,WAAM,WAAI,EAAAC,aAChC,CAAC,QAAS,GAAI,KAAM,WAAM,WAAI,EAAA3B,WAAW,EAAAzlB,YAAa0lB,EAAS77B,SAC/D,CAAC,SAAU,GAAI,KAAM,WAAM,WAAI,EAAAw9B,YAC/B,CAAC,OAAQ,GAAI,OAAQ,WAAM,WAAI,EAAAC,SAAQ,KACvC,CAAC,OAAQ,GAAI,MAAO,WAAM,WAAI,EAAAA,SAAQ,KACtC,CAAC,oBAAqB,GAAI,KAAM,WAAM,WAAI,EAAAC,uBAC1C,CAAC,gBAAiB,GAAI,KAAM,WAAM,WAAI,EAAAC,mBACtC,CAAC,cAAe,GAAI,KAAM,WAAM,WAAI,EAAAC,iBACpC,CAAC,wBAAyB,GAAI,KAAM,WAAM,WAAI,EAAAC,2BAC9C,CAAC,QAAS,GAAI,KAAM,WAAM,WAAI,EAAAjC,WAAW,EAAAzlB,YAAa0lB,EAASiC,WAAOxgC,EAAW,UACjF,CAAC,YAAa,GAAI,KAAM,WAAM,WAAI,EAAAs+B,WAAW,EAAAzlB,YAAa0lB,EAASkC,UAAWlC,EAASmC,wBACvF,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI,EAAA/B,YAAY,EAAAhmB,cAAc,SAAC/b,EAAGmD,GAAM,OAAAnD,EAAImD,EAAI,EAAI,SAAGC,EAAW,UAC3F,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI,EAAAs+B,WAAW,EAAAzlB,YAAa0lB,EAAS3sB,OAC7D,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI,EAAA+uB,SAC5B,CAAC,SAAU,GAAI,KAAM,WAAM,WAAI,EAAA9F,YAC/B,CAAC,UAAW,GAAI,MAAO,WAAM,WAAI,EAAA+F,aACjC,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI,EAAAjC,YAAY,EAAAhmB,cAAc,SAACimB,EAAIC,GAAO,OAACD,EAAKC,OACxE,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI,EAAAP,WAAW,EAAA3lB,aAAc4lB,EAAS/M,OAC9D,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI,EAAA8M,WAAW,CAAC,QAASC,EAAS7J,SAAK10B,EAAW,UAC1E,CAAC,KAAM,GAAI,KAAM,WAAM,WAAI,EAAA2+B,YAAY,CAAC,SAAS,SAACC,EAAIC,GAAO,OAACD,GAAMC,OACpE,CAAC,QAAS,GAAI,KAAM,WAAM,WAAI,EAAAF,YAAY,EAAAhmB,cAAc,SAACimB,EAAIC,GAAO,OAACD,GAAM,EAAIA,EAAKA,EAAKC,OACzF,CAAC,MAAO,GAAI,OAAQ,WAAM,WAAI,EAAAgC,SAC9B,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI,EAAAlC,YAAY,EAAAhmB,cAAc,SAACimB,EAAIC,GAAO,OAAC,SAAAD,EAAMC,QACzE,CAAC,aAAc,GAAI,KAAM,WAAM,WAAI,EAAAP,WAAW,EAAAzlB,YAAa0lB,EAASuC,cACpE,CAAC,eAAgB,GAAI,KAAM,WAAM,WAAIC,EAAUC,kBAC/C,CAAC,YAAa,GAAI,KAAM,WAAM,WAAID,EAAUE,eAC5C,CAAC,aAAc,GAAI,KAAM,WAAM,WAAIF,EAAUG,gBAC7C,CAAC,YAAa,GAAI,KAAM,WAAM,WAAIH,EAAUI,eAC5C,CAAC,aAAc,GAAI,KAAM,WAAM,WAAIJ,EAAUK,gBAC7C,CAAC,YAAa,GAAI,KAAM,WAAM,WAAIL,EAAUM,eAC5C,CAAC,kBAAmB,GAAI,KAAM,WAAM,WAAIN,EAAUO,qBAClD,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI,EAAAhD,WAAW,EAAAzlB,YAAa0lB,EAASgD,QAC9D,CAAC,UAAW,GAAI,KAAM,WAAM,WAAI,EAAAC,aAChC,CAAC,QAAS,GAAI,KAAM,WAAM,WAAI,EAAAC,WAC9B,CAAC,UAAW,GAAI,KAAM,WAAM,WAAI,EAAAnD,WAAW,EAAAzlB,YAAa0lB,EAASmD,WACjE,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI,EAAApD,WAAW,EAAA3lB,aAAc4lB,EAASoD,QAC/D,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI,EAAArD,WAAW,EAAAzlB,YAAa0lB,EAASqD,OAC7D,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI,EAAAtD,WAAW,EAAAzlB,YAAa0lB,EAASsD,QAC9D,CAAC,QAAS,GAAI,MAAO,WAAM,WAAI,EAAAC,cAC/B,CAAC,QAAS,GAAI,MAAO,WAAM,WAAI,EAAAC,WAC/B,CAAC,UAAW,GAAI,KAAM,WAAM,WAAI,EAAAC,aAChC,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI,EAAA1D,WAAW,EAAAzlB,YAAa0lB,EAAS0D,QAC9D,CAAC,UAAW,GAAI,KAAM,WAAM,WAAI,EAAAC,aAChC,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI,EAAAvD,YAAY,EAAAhmB,cAAc,SAACimB,EAAIC,GAAO,OAACD,EAAKC,OACxE,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI,EAAAsD,SAC5B,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI,EAAA7D,WAAW,EAAAzlB,YAAa0lB,EAAS6D,OAC7D,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI,EAAA9D,WAAW,EAAAzlB,YAAa0lB,EAAS8D,QAC9D,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI,EAAAC,UAC7B,CAAC,YAAa,GAAI,KAAM,WAAM,WAAI,EAAAC,eAClC,CAAC,YAAa,GAAI,KAAM,WAAM,WAAI,EAAAC,eAClC,CAAC,WAAY,GAAI,MAAO,WAAM,WAAI,EAAAC,cAClC,CAAC,WAAY,GAAI,IAAK,WAAM,WAAI,EAAAC,gBAChC,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI,EAAA/D,YAAY,CAAC,SAAS,SAACC,EAAIC,GAAO,OAACD,EAAKC,S,6BCjHtEpiC,EAAOD,QAAU8iB,EAEjB,IAEIqjB,EAFApoB,EAAY,EAAQ,GAIpBkB,EAAYlB,EAAKkB,SACjBN,EAAYZ,EAAKY,OACjBI,EAAYhB,EAAKgB,KAWrB,SAASqnB,EAAGC,EAAI3hB,EAAKqG,GAMjBla,KAAKw1B,GAAKA,EAMVx1B,KAAK6T,IAAMA,EAMX7T,KAAKy1B,UAAO9iC,EAMZqN,KAAKka,IAAMA,EAIf,SAASoV,KAUT,SAASoG,EAAMxiB,GAMXlT,KAAK21B,KAAOziB,EAAOyiB,KAMnB31B,KAAK41B,KAAO1iB,EAAO0iB,KAMnB51B,KAAK6T,IAAMX,EAAOW,IAMlB7T,KAAKy1B,KAAOviB,EAAO2iB,OAQvB,SAAS5jB,IAMLjS,KAAK6T,IAAM,EAMX7T,KAAK21B,KAAO,IAAIJ,EAAGjG,EAAM,EAAG,GAM5BtvB,KAAK41B,KAAO51B,KAAK21B,KAMjB31B,KAAK61B,OAAS,KASlB,IAAI3kC,EAAS,WACT,OAAOgc,EAAKhM,OACN,WACE,OAAQ+Q,EAAO/gB,OAAS,WACpB,OAAO,IAAIokC,OAIjB,WACE,OAAO,IAAIrjB,IAuCvB,SAAS6jB,EAAU5b,EAAK5Z,EAAKpC,GACzBoC,EAAIpC,GAAa,IAANgc,EAoBf,SAAS6b,EAASliB,EAAKqG,GACnBla,KAAK6T,IAAMA,EACX7T,KAAKy1B,UAAO9iC,EACZqN,KAAKka,IAAMA,EA8Cf,SAAS8b,EAAc9b,EAAK5Z,EAAKpC,GAC7B,KAAOgc,EAAIzJ,IACPnQ,EAAIpC,KAAkB,IAATgc,EAAI1J,GAAW,IAC5B0J,EAAI1J,IAAM0J,EAAI1J,KAAO,EAAI0J,EAAIzJ,IAAM,MAAQ,EAC3CyJ,EAAIzJ,MAAQ,EAEhB,KAAOyJ,EAAI1J,GAAK,KACZlQ,EAAIpC,KAAkB,IAATgc,EAAI1J,GAAW,IAC5B0J,EAAI1J,GAAK0J,EAAI1J,KAAO,EAExBlQ,EAAIpC,KAASgc,EAAI1J,GA2CrB,SAASylB,EAAa/b,EAAK5Z,EAAKpC,GAC5BoC,EAAIpC,GAA0B,IAAdgc,EAChB5Z,EAAIpC,EAAM,GAAMgc,IAAQ,EAAM,IAC9B5Z,EAAIpC,EAAM,GAAMgc,IAAQ,GAAM,IAC9B5Z,EAAIpC,EAAM,GAAMgc,IAAQ,GA7J5BjI,EAAO/gB,OAASA,IAOhB+gB,EAAOwL,MAAQ,SAAejpB,GAC1B,OAAO,IAAI0Y,EAAK3Z,MAAMiB,IAKtB0Y,EAAK3Z,QAAUA,QACf0e,EAAOwL,MAAQvQ,EAAKiB,KAAK8D,EAAOwL,MAAOvQ,EAAK3Z,MAAM/B,UAAUosB,WAUhE3L,EAAOzgB,UAAU0kC,MAAQ,SAAcV,EAAI3hB,EAAKqG,GAG5C,OAFAla,KAAK41B,KAAO51B,KAAK41B,KAAKH,KAAO,IAAIF,EAAGC,EAAI3hB,EAAKqG,GAC7Cla,KAAK6T,KAAOA,EACL7T,MA8BX+1B,EAASvkC,UAAYlB,OAAOY,OAAOqkC,EAAG/jC,WACtCukC,EAASvkC,UAAUgkC,GAxBnB,SAAuBtb,EAAK5Z,EAAKpC,GAC7B,KAAOgc,EAAM,KACT5Z,EAAIpC,KAAe,IAANgc,EAAY,IACzBA,KAAS,EAEb5Z,EAAIpC,GAAOgc,GA0BfjI,EAAOzgB,UAAU2hB,OAAS,SAAsBtiB,GAW5C,OARAmP,KAAK6T,MAAQ7T,KAAK41B,KAAO51B,KAAK41B,KAAKH,KAAO,IAAIM,GACzCllC,KAAkB,GACT,IAAY,EACpBA,EAAQ,MAAY,EACpBA,EAAQ,QAAY,EACpBA,EAAQ,UAAY,EACA,EAC1BA,IAAQgjB,IACD7T,MASXiS,EAAOzgB,UAAUiiB,MAAQ,SAAqB5iB,GAC1C,OAAOA,EAAQ,EACTmP,KAAKk2B,MAAMF,EAAe,GAAI5nB,EAASuV,WAAW9yB,IAClDmP,KAAKmT,OAAOtiB,IAQtBohB,EAAOzgB,UAAU2kC,OAAS,SAAsBtlC,GAC5C,OAAOmP,KAAKmT,QAAQtiB,GAAS,EAAIA,GAAS,MAAQ,IAsBtDohB,EAAOzgB,UAAUilB,OAAS,SAAsB5lB,GAC5C,IAAIyf,EAAOlC,EAASjN,KAAKtQ,GACzB,OAAOmP,KAAKk2B,MAAMF,EAAe1lB,EAAKze,SAAUye,IAUpD2B,EAAOzgB,UAAU6hB,MAAQpB,EAAOzgB,UAAUilB,OAQ1CxE,EAAOzgB,UAAU4kC,OAAS,SAAsBvlC,GAC5C,IAAIyf,EAAOlC,EAASjN,KAAKtQ,GAAOwlC,WAChC,OAAOr2B,KAAKk2B,MAAMF,EAAe1lB,EAAKze,SAAUye,IAQpD2B,EAAOzgB,UAAU8kC,KAAO,SAAoBzlC,GACxC,OAAOmP,KAAKk2B,MAAMJ,EAAW,EAAGjlC,EAAQ,EAAI,IAehDohB,EAAOzgB,UAAU+kC,QAAU,SAAuB1lC,GAC9C,OAAOmP,KAAKk2B,MAAMD,EAAc,EAAGplC,IAAU,IASjDohB,EAAOzgB,UAAUglC,SAAWvkB,EAAOzgB,UAAU+kC,QAQ7CtkB,EAAOzgB,UAAUilC,QAAU,SAAuB5lC,GAC9C,IAAIyf,EAAOlC,EAASjN,KAAKtQ,GACzB,OAAOmP,KAAKk2B,MAAMD,EAAc,EAAG3lB,EAAKE,IAAI0lB,MAAMD,EAAc,EAAG3lB,EAAKG,KAU5EwB,EAAOzgB,UAAUklC,SAAWzkB,EAAOzgB,UAAUilC,QAQ7CxkB,EAAOzgB,UAAUwc,MAAQ,SAAqBnd,GAC1C,OAAOmP,KAAKk2B,MAAMhpB,EAAKc,MAAMoU,aAAc,EAAGvxB,IASlDohB,EAAOzgB,UAAUglB,OAAS,SAAsB3lB,GAC5C,OAAOmP,KAAKk2B,MAAMhpB,EAAKc,MAAMsU,cAAe,EAAGzxB,IAGnD,IAAI8lC,EAAazpB,EAAK3Z,MAAM/B,UAAUmD,IAChC,SAAwBulB,EAAK5Z,EAAKpC,GAChCoC,EAAI3L,IAAIulB,EAAKhc,IAGf,SAAwBgc,EAAK5Z,EAAKpC,GAChC,IAAK,IAAI1O,EAAI,EAAGA,EAAI0qB,EAAIroB,SAAUrC,EAC9B8Q,EAAIpC,EAAM1O,GAAK0qB,EAAI1qB,IAQ/ByiB,EAAOzgB,UAAU8f,MAAQ,SAAqBzgB,GAC1C,IAAIgjB,EAAMhjB,EAAMgB,SAAW,EAC3B,IAAKgiB,EACD,OAAO7T,KAAKk2B,MAAMJ,EAAW,EAAG,GACpC,GAAI5oB,EAAK6B,SAASle,GAAQ,CACtB,IAAIyP,EAAM2R,EAAOwL,MAAM5J,EAAM/F,EAAOjc,OAAOhB,IAC3Cid,EAAO6F,OAAO9iB,EAAOyP,EAAK,GAC1BzP,EAAQyP,EAEZ,OAAON,KAAKmT,OAAOU,GAAKqiB,MAAMS,EAAY9iB,EAAKhjB,IAQnDohB,EAAOzgB,UAAU4hB,OAAS,SAAsBviB,GAC5C,IAAIgjB,EAAM3F,EAAKrc,OAAOhB,GACtB,OAAOgjB,EACD7T,KAAKmT,OAAOU,GAAKqiB,MAAMhoB,EAAK2L,MAAOhG,EAAKhjB,GACxCmP,KAAKk2B,MAAMJ,EAAW,EAAG,IAQnC7jB,EAAOzgB,UAAU8hB,KAAO,WAIpB,OAHAtT,KAAK61B,OAAS,IAAIH,EAAM11B,MACxBA,KAAK21B,KAAO31B,KAAK41B,KAAO,IAAIL,EAAGjG,EAAM,EAAG,GACxCtvB,KAAK6T,IAAM,EACJ7T,MAOXiS,EAAOzgB,UAAU4U,MAAQ,WAUrB,OATIpG,KAAK61B,QACL71B,KAAK21B,KAAS31B,KAAK61B,OAAOF,KAC1B31B,KAAK41B,KAAS51B,KAAK61B,OAAOD,KAC1B51B,KAAK6T,IAAS7T,KAAK61B,OAAOhiB,IAC1B7T,KAAK61B,OAAS71B,KAAK61B,OAAOJ,OAE1Bz1B,KAAK21B,KAAO31B,KAAK41B,KAAO,IAAIL,EAAGjG,EAAM,EAAG,GACxCtvB,KAAK6T,IAAO,GAET7T,MAOXiS,EAAOzgB,UAAU+hB,OAAS,WACtB,IAAIoiB,EAAO31B,KAAK21B,KACZC,EAAO51B,KAAK41B,KACZ/hB,EAAO7T,KAAK6T,IAOhB,OANA7T,KAAKoG,QAAQ+M,OAAOU,GAChBA,IACA7T,KAAK41B,KAAKH,KAAOE,EAAKF,KACtBz1B,KAAK41B,KAAOA,EACZ51B,KAAK6T,KAAOA,GAET7T,MAOXiS,EAAOzgB,UAAUolC,OAAS,WAItB,IAHA,IAAIjB,EAAO31B,KAAK21B,KAAKF,KACjBn1B,EAAON,KAAKI,YAAYqd,MAAMzd,KAAK6T,KACnC3V,EAAO,EACJy3B,GACHA,EAAKH,GAAGG,EAAKzb,IAAK5Z,EAAKpC,GACvBA,GAAOy3B,EAAK9hB,IACZ8hB,EAAOA,EAAKF,KAGhB,OAAOn1B,GAGX2R,EAAOT,WAAa,SAASqlB,GACzBvB,EAAeuB,EACf5kB,EAAO/gB,OAASA,IAChBokC,EAAa9jB,e,6BC9cjBpiB,EAAOD,QAAU4iB,EAEjB,IAEI+kB,EAFA5pB,EAAY,EAAQ,GAIpBkB,EAAYlB,EAAKkB,SACjBF,EAAYhB,EAAKgB,KAGrB,SAAS6oB,EAAgBnjB,EAAQojB,GAC7B,OAAO92B,WAAW,uBAAyB0T,EAAO1V,IAAM,OAAS84B,GAAe,GAAK,MAAQpjB,EAAOC,KASxG,SAAS9B,EAAO3Q,GAMZpB,KAAKM,IAAMc,EAMXpB,KAAK9B,IAAM,EAMX8B,KAAK6T,IAAMzS,EAAOvP,OAGtB,IA4CQhB,EA5CJomC,EAAqC,oBAAf10B,WACpB,SAA4BnB,GAC1B,GAAIA,aAAkBmB,YAAchP,MAAM4M,QAAQiB,GAC9C,OAAO,IAAI2Q,EAAO3Q,GACtB,MAAMpL,MAAM,mBAGd,SAAsBoL,GACpB,GAAI7N,MAAM4M,QAAQiB,GACd,OAAO,IAAI2Q,EAAO3Q,GACtB,MAAMpL,MAAM,mBAGhB9E,EAAS,WACT,OAAOgc,EAAKhM,OACN,SAA6BE,GAC3B,OAAQ2Q,EAAO7gB,OAAS,SAAuBkQ,GAC3C,OAAO8L,EAAKhM,OAAO6Y,SAAS3Y,GACtB,IAAI01B,EAAa11B,GAEjB61B,EAAa71B,KACpBA,IAGL61B,GAwDV,SAASC,IAEL,IAAI5mB,EAAO,IAAIlC,EAAS,EAAG,GACvB5e,EAAI,EACR,KAAIwQ,KAAK6T,IAAM7T,KAAK9B,IAAM,GAanB,CACH,KAAO1O,EAAI,IAAKA,EAAG,CAEf,GAAIwQ,KAAK9B,KAAO8B,KAAK6T,IACjB,MAAMkjB,EAAgB/2B,MAG1B,GADAsQ,EAAKE,IAAMF,EAAKE,IAA2B,IAArBxQ,KAAKM,IAAIN,KAAK9B,OAAmB,EAAJ1O,KAAW,EAC1DwQ,KAAKM,IAAIN,KAAK9B,OAAS,IACvB,OAAOoS,EAIf,OADAA,EAAKE,IAAMF,EAAKE,IAA6B,IAAvBxQ,KAAKM,IAAIN,KAAK9B,SAAqB,EAAJ1O,KAAW,EACzD8gB,EAxBP,KAAO9gB,EAAI,IAAKA,EAGZ,GADA8gB,EAAKE,IAAMF,EAAKE,IAA2B,IAArBxQ,KAAKM,IAAIN,KAAK9B,OAAmB,EAAJ1O,KAAW,EAC1DwQ,KAAKM,IAAIN,KAAK9B,OAAS,IACvB,OAAOoS,EAKf,GAFAA,EAAKE,IAAMF,EAAKE,IAA2B,IAArBxQ,KAAKM,IAAIN,KAAK9B,OAAe,MAAQ,EAC3DoS,EAAKG,IAAMH,EAAKG,IAA2B,IAArBzQ,KAAKM,IAAIN,KAAK9B,OAAgB,KAAO,EACvD8B,KAAKM,IAAIN,KAAK9B,OAAS,IACvB,OAAOoS,EAgBf,GAfI9gB,EAAI,EAeJwQ,KAAK6T,IAAM7T,KAAK9B,IAAM,GACtB,KAAO1O,EAAI,IAAKA,EAGZ,GADA8gB,EAAKG,IAAMH,EAAKG,IAA2B,IAArBzQ,KAAKM,IAAIN,KAAK9B,OAAmB,EAAJ1O,EAAQ,KAAO,EAC9DwQ,KAAKM,IAAIN,KAAK9B,OAAS,IACvB,OAAOoS,OAGf,KAAO9gB,EAAI,IAAKA,EAAG,CAEf,GAAIwQ,KAAK9B,KAAO8B,KAAK6T,IACjB,MAAMkjB,EAAgB/2B,MAG1B,GADAsQ,EAAKG,IAAMH,EAAKG,IAA2B,IAArBzQ,KAAKM,IAAIN,KAAK9B,OAAmB,EAAJ1O,EAAQ,KAAO,EAC9DwQ,KAAKM,IAAIN,KAAK9B,OAAS,IACvB,OAAOoS,EAInB,MAAMta,MAAM,2BAkChB,SAASmhC,EAAgB72B,EAAKtH,GAC1B,OAAQsH,EAAItH,EAAM,GACVsH,EAAItH,EAAM,IAAM,EAChBsH,EAAItH,EAAM,IAAM,GAChBsH,EAAItH,EAAM,IAAM,MAAQ,EA+BpC,SAASo+B,IAGL,GAAIp3B,KAAK9B,IAAM,EAAI8B,KAAK6T,IACpB,MAAMkjB,EAAgB/2B,KAAM,GAEhC,OAAO,IAAIoO,EAAS+oB,EAAgBn3B,KAAKM,IAAKN,KAAK9B,KAAO,GAAIi5B,EAAgBn3B,KAAKM,IAAKN,KAAK9B,KAAO,IA3KxG6T,EAAO7gB,OAASA,IAEhB6gB,EAAOvgB,UAAU6lC,OAASnqB,EAAK3Z,MAAM/B,UAAUosB,UAAuC1Q,EAAK3Z,MAAM/B,UAAU6H,MAO3G0Y,EAAOvgB,UAAU2hB,QACTtiB,EAAQ,WACL,WACuD,GAA1DA,GAAuC,IAArBmP,KAAKM,IAAIN,KAAK9B,QAAuB,EAAO8B,KAAKM,IAAIN,KAAK9B,OAAS,IAAK,OAAOrN,EACvC,GAA1DA,GAASA,GAA8B,IAArBmP,KAAKM,IAAIN,KAAK9B,OAAgB,KAAO,EAAO8B,KAAKM,IAAIN,KAAK9B,OAAS,IAAK,OAAOrN,EACvC,GAA1DA,GAASA,GAA8B,IAArBmP,KAAKM,IAAIN,KAAK9B,OAAe,MAAQ,EAAO8B,KAAKM,IAAIN,KAAK9B,OAAS,IAAK,OAAOrN,EACvC,GAA1DA,GAASA,GAA8B,IAArBmP,KAAKM,IAAIN,KAAK9B,OAAe,MAAQ,EAAO8B,KAAKM,IAAIN,KAAK9B,OAAS,IAAK,OAAOrN,EACvC,GAA1DA,GAASA,GAA+B,GAAtBmP,KAAKM,IAAIN,KAAK9B,OAAe,MAAQ,EAAO8B,KAAKM,IAAIN,KAAK9B,OAAS,IAAK,OAAOrN,EAGjG,IAAKmP,KAAK9B,KAAO,GAAK8B,KAAK6T,IAEvB,MADA7T,KAAK9B,IAAM8B,KAAK6T,IACVkjB,EAAgB/2B,KAAM,IAEhC,OAAOnP,IAQfkhB,EAAOvgB,UAAUiiB,MAAQ,WACrB,OAAuB,EAAhBzT,KAAKmT,UAOhBpB,EAAOvgB,UAAU2kC,OAAS,WACtB,IAAItlC,EAAQmP,KAAKmT,SACjB,OAAOtiB,IAAU,IAAc,EAARA,GAAa,GAqFxCkhB,EAAOvgB,UAAU8kC,KAAO,WACpB,OAAyB,IAAlBt2B,KAAKmT,UAchBpB,EAAOvgB,UAAU+kC,QAAU,WAGvB,GAAIv2B,KAAK9B,IAAM,EAAI8B,KAAK6T,IACpB,MAAMkjB,EAAgB/2B,KAAM,GAEhC,OAAOm3B,EAAgBn3B,KAAKM,IAAKN,KAAK9B,KAAO,IAOjD6T,EAAOvgB,UAAUglC,SAAW,WAGxB,GAAIx2B,KAAK9B,IAAM,EAAI8B,KAAK6T,IACpB,MAAMkjB,EAAgB/2B,KAAM,GAEhC,OAAkD,EAA3Cm3B,EAAgBn3B,KAAKM,IAAKN,KAAK9B,KAAO,IAmCjD6T,EAAOvgB,UAAUwc,MAAQ,WAGrB,GAAIhO,KAAK9B,IAAM,EAAI8B,KAAK6T,IACpB,MAAMkjB,EAAgB/2B,KAAM,GAEhC,IAAInP,EAAQqc,EAAKc,MAAMgT,YAAYhhB,KAAKM,IAAKN,KAAK9B,KAElD,OADA8B,KAAK9B,KAAO,EACLrN,GAQXkhB,EAAOvgB,UAAUglB,OAAS,WAGtB,GAAIxW,KAAK9B,IAAM,EAAI8B,KAAK6T,IACpB,MAAMkjB,EAAgB/2B,KAAM,GAEhC,IAAInP,EAAQqc,EAAKc,MAAMkT,aAAalhB,KAAKM,IAAKN,KAAK9B,KAEnD,OADA8B,KAAK9B,KAAO,EACLrN,GAOXkhB,EAAOvgB,UAAU8f,MAAQ,WACrB,IAAIzf,EAASmO,KAAKmT,SACdpa,EAASiH,KAAK9B,IACdlF,EAASgH,KAAK9B,IAAMrM,EAGxB,GAAImH,EAAMgH,KAAK6T,IACX,MAAMkjB,EAAgB/2B,KAAMnO,GAGhC,OADAmO,KAAK9B,KAAOrM,EACR0B,MAAM4M,QAAQH,KAAKM,KACZN,KAAKM,IAAIjH,MAAMN,EAAOC,GAC1BD,IAAUC,EACX,IAAIgH,KAAKM,IAAIF,YAAY,GACzBJ,KAAKq3B,OAAOtnC,KAAKiQ,KAAKM,IAAKvH,EAAOC,IAO5C+Y,EAAOvgB,UAAU4hB,OAAS,WACtB,IAAI9B,EAAQtR,KAAKsR,QACjB,OAAOpD,EAAKsN,KAAKlK,EAAO,EAAGA,EAAMzf,SAQrCkgB,EAAOvgB,UAAU8lC,KAAO,SAAczlC,GAClC,GAAsB,iBAAXA,EAAqB,CAE5B,GAAImO,KAAK9B,IAAMrM,EAASmO,KAAK6T,IACzB,MAAMkjB,EAAgB/2B,KAAMnO,GAChCmO,KAAK9B,KAAOrM,OAEZ,GAEI,GAAImO,KAAK9B,KAAO8B,KAAK6T,IACjB,MAAMkjB,EAAgB/2B,YACE,IAAvBA,KAAKM,IAAIN,KAAK9B,QAE3B,OAAO8B,MAQX+R,EAAOvgB,UAAUwiB,SAAW,SAASujB,GACjC,OAAQA,GACJ,KAAK,EACDv3B,KAAKs3B,OACL,MACJ,KAAK,EACDt3B,KAAKs3B,KAAK,GACV,MACJ,KAAK,EACDt3B,KAAKs3B,KAAKt3B,KAAKmT,UACf,MACJ,KAAK,EACD,KAA0C,IAAlCokB,EAA2B,EAAhBv3B,KAAKmT,WACpBnT,KAAKgU,SAASujB,GAElB,MACJ,KAAK,EACDv3B,KAAKs3B,KAAK,GACV,MAGJ,QACI,MAAMthC,MAAM,qBAAuBuhC,EAAW,cAAgBv3B,KAAK9B,KAE3E,OAAO8B,MAGX+R,EAAOP,WAAa,SAASgmB,GACzBV,EAAeU,EACfzlB,EAAO7gB,OAASA,IAChB4lC,EAAatlB,aAEb,IAAIgkB,EAAKtoB,EAAKyC,KAAO,SAAsC,WAC3DzC,EAAKC,MAAM4E,EAAOvgB,UAAW,CAEzB6hB,MAAO,WACH,OAAO6jB,EAAennC,KAAKiQ,MAAMw1B,IAAI,IAGzC/e,OAAQ,WACJ,OAAOygB,EAAennC,KAAKiQ,MAAMw1B,IAAI,IAGzCY,OAAQ,WACJ,OAAOc,EAAennC,KAAKiQ,MAAMy3B,WAAWjC,IAAI,IAGpDiB,QAAS,WACL,OAAOW,EAAYrnC,KAAKiQ,MAAMw1B,IAAI,IAGtCkB,SAAU,WACN,OAAOU,EAAYrnC,KAAKiQ,MAAMw1B,IAAI,Q,maC9Y9C,+BAwCA,OArCE,YAAA9K,WAAA,SAAWC,GACT3qB,KAAKnH,KAAO8xB,EAAWK,OAAO,SAGhC,YAAAC,YAAA,SAAYr5B,GACV,SAAKA,GAAUA,EAAOC,OAAS,IAIxBmO,KAAKkrB,gBAAgBt5B,IAGpB,YAAAs5B,gBAAV,SAA0Bt5B,G,QAClB8lC,EAAY9lC,EAAO,GAAG8C,KACtBijC,EAAsB/lC,EAAO,GAAGG,KAAKF,OAG3C,GAAkB,WAAd6lC,EACF,OAAO,E,IAGT,IAAoB,QAAA9lC,GAAM,8BAAE,CAAvB,IAAMoM,EAAK,QAEd,GAAIA,EAAMtJ,OAASgjC,EACjB,OAAO,EAIT,GAAI15B,EAAMjM,KAAKF,SAAW8lC,EACxB,OAAO,G,iGAIX,OAAO,GAIX,EAxCA,GAAsB,EAAAC,U,+FCDtB,+BA0BA,OAvBE,YAAAlN,WAAA,SAAWC,GACT3qB,KAAK63B,MAAQlN,EAAWE,SAAS,QAAS,IAC1C7qB,KAAK83B,UAAW,GAGlB,YAAA7M,YAAA,SAAYr5B,GACV,SAAKA,GAA4B,IAAlBA,EAAOC,SAIfmO,KAAKkrB,gBAAgBt5B,IAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GACxB,MAAuB,YAAnBA,EAAO,GAAG8C,MAAyC,YAAnB9C,EAAO,GAAG8C,MASlD,EA1BA,GAAsB,EAAAqjC,W,+FCCtB,+BAkCA,OA/BE,YAAArN,WAAA,SAAWC,GACT3qB,KAAKnH,KAAO8xB,EAAWK,OAAO,OAAQ,IAGxC,YAAAC,YAAA,SAAYr5B,GACV,IAAKA,GAA4B,IAAlBA,EAAOC,OACpB,OAAO,EAGT,IAAMnB,EAAIkB,EAAO,GAAGG,KAAKF,OACzB,OAAU,IAANnB,MAIAsP,KAAKnH,MAAQnI,GAAKsP,KAAKnH,KAAOnI,IAI3BsP,KAAKkrB,gBAAgBt5B,KAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GAExB,MAAuB,WAAnBA,EAAO,GAAG8C,MAQlB,EAlCA,GAAsB,EAAAsjC,W,8FCHtB,WAGA,2BAiCA,OA9BE,YAAAtN,WAAA,SAAWC,GACT3qB,KAAKnH,KAAO8xB,EAAWK,OAAO,OAAQ,IAGxC,YAAAC,YAAA,SAAYr5B,GACV,IAAKA,GAA4B,IAAlBA,EAAOC,OACpB,OAAO,EAET,IAAM8H,EAAa/H,EAAO,GAAGG,KAAKF,OAClC,QAAI8H,EAAa,OAGbqG,KAAKnH,MAAQc,GAAcqG,KAAKnH,KAAOc,EAAa,IAIjDqG,KAAKkrB,gBAAgBt5B,KAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GACxB,OAA8C,IAA1C,EAAA0Z,aAAaxP,QAAQlK,EAAO,GAAG8C,QAGZ,UAAnB9C,EAAO,GAAG8C,MAAuC,UAAnB9C,EAAO,GAAG8C,OAOhD,EAjCA,GAAsB,EAAAujC,U,mGCAtB,+BA8BA,OA3BE,YAAAvN,WAAA,SAAWC,GACT3qB,KAAKorB,MAAQT,EAAWE,SAAS,SACjC7qB,KAAKk4B,KAAOvN,EAAWwN,UAAU,SAGnC,YAAAlN,YAAA,SAAYr5B,GACV,SAAKA,GAA4B,IAAlBA,EAAOC,UAIQ,IAA1BD,EAAO,GAAGG,KAAKF,QAIZmO,KAAKkrB,gBAAgBt5B,KAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GACxB,MAAuB,YAAnBA,EAAO,GAAG8C,MAAyC,YAAnB9C,EAAO,GAAG8C,MASlD,EA9BA,GAAsB,EAAA0jC,e,2FCAtB,+BA4BA,OAzBE,YAAA1N,WAAA,SAAWC,GACT3qB,KAAKjP,KAAO45B,EAAWgB,UAAU,OAAQ,YACzC3rB,KAAKnP,MAAQ85B,EAAWE,SAAS,QAAS,GAC1C7qB,KAAKrB,KAAOgsB,EAAWiB,QAAQ,SAGjC,YAAAX,YAAA,SAAYr5B,GACV,SAAKA,GAA4B,IAAlBA,EAAOC,SAIfmO,KAAKkrB,gBAAgBt5B,IAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GACxB,MAAuB,YAAnBA,EAAO,GAAG8C,MAAyC,YAAnB9C,EAAO,GAAG8C,MAUlD,EA5BA,GAAsB,EAAA2jC,O,kGCHtB,WAGA,2BA0BA,OAvBE,YAAA3N,WAAA,SAAWC,GACT3qB,KAAKnG,KAAO8wB,EAAWiB,QAAQ,OAAQ,IACvC5rB,KAAK3B,SAAgD,IAArCssB,EAAWK,OAAO,WAAY,IAGhD,YAAAC,YAAA,SAAYr5B,GACV,SAAKA,GAA4B,IAAlBA,EAAOC,SAIfmO,KAAKkrB,gBAAgBt5B,IAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GACxB,OAA8C,IAA1C,EAAA0Z,aAAaxP,QAAQlK,EAAO,GAAG8C,OASvC,EA1BA,GAAsB,EAAA4jC,c,+FCHtB,WAGA,2BAwBA,OArBE,YAAA5N,WAAA,SAAWC,KAEX,YAAAM,YAAA,SAAYr5B,GACV,SAAKA,GAA4B,IAAlBA,EAAOC,QAA0C,IAA1BD,EAAO,GAAGG,KAAKF,SAI9CmO,KAAKkrB,gBAAgBt5B,IAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GACxB,OAA8C,IAA1C,EAAA0Z,aAAaxP,QAAQlK,EAAO,GAAG8C,OAIZ,UAAnB9C,EAAO,GAAG8C,MAMlB,EAxBA,GAAsB,EAAA2iB,W,wGCHtB,WAGA,2BA0BA,OAvBE,YAAAqT,WAAA,SAAWC,GACT3qB,KAAKu4B,OAAS5N,EAAWiB,QAAQ,UACjC5rB,KAAKw4B,KAAO7N,EAAWiB,QAAQ,QAC/B5rB,KAAKnG,KAAO8wB,EAAWiB,QAAQ,OAAQ,KAGzC,YAAAX,YAAA,SAAYr5B,GACV,SAAKA,GAA4B,IAAlBA,EAAOC,SAGfmO,KAAKkrB,gBAAgBt5B,IAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GACxB,OAA8C,IAA1C,EAAA0Z,aAAaxP,QAAQlK,EAAO,GAAG8C,OASvC,EA1BA,GAAsB,EAAA+jC,QA4BtB,+BA4BA,OAzBE,YAAA/N,WAAA,SAAWC,KAEX,YAAAM,YAAA,SAAYr5B,GACV,SAAKA,GAAUA,EAAOC,OAAS,GAAKD,EAAOC,OAAS,IAG7CmO,KAAKkrB,gBAAgBt5B,IAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GACxB,MAAuB,UAAnBA,EAAO,GAAG8C,MAA8C,IAA1B9C,EAAO,GAAGG,KAAKF,SAG1B,UAAnBD,EAAO,GAAG8C,MAA8C,IAA1B9C,EAAO,GAAGG,KAAKF,YAG7CD,EAAOC,QAAU,IAAyB,UAAnBD,EAAO,GAAG8C,MAA8C,IAA1B9C,EAAO,GAAGG,KAAKF,YAGpED,EAAOC,QAAU,IAAyB,UAAnBD,EAAO,GAAG8C,MAA8C,IAA1B9C,EAAO,GAAGG,KAAKF,WAM5E,EA5BA,GAAsB,EAAA6mC,Y,+FC5BtB,+BAyBA,OAtBE,YAAAhO,WAAA,SAAWC,GACT3qB,KAAKnG,KAAO8wB,EAAWiB,QAAQ,SAGjC,YAAAX,YAAA,SAAYr5B,GACV,SAAKA,GAA4B,IAAlBA,EAAOC,SAIfmO,KAAKkrB,gBAAgBt5B,IAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GAExB,MAAuB,WAAnBA,EAAO,GAAG8C,MAQlB,EAzBA,GAAsB,EAAAikC,W,4FCHtB,WAGA,2BA4BA,OAzBE,YAAAjO,WAAA,SAAWC,KAEX,YAAAM,YAAA,SAAYr5B,GACV,SAAKA,GAA4B,IAAlBA,EAAOC,UAGQ,IAA1BD,EAAO,GAAGG,KAAKF,SAGfD,EAAO,GAAGG,KAAK,KAAOH,EAAO,GAAGG,KAAKF,QAIlCmO,KAAKkrB,gBAAgBt5B,MAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GACxB,OAA8C,IAA1C,EAAA0Z,aAAaxP,QAAQlK,EAAO,GAAG8C,QAGZ,UAAnB9C,EAAO,GAAG8C,MAAuC,UAAnB9C,EAAO,GAAG8C,OAKhD,EA5BA,GAAsB,EAAAkkC,Q,iGCAtB,+BAwBA,OArBE,YAAAlO,WAAA,SAAWC,GACT3qB,KAAKrF,KAAOgwB,EAAWiB,QAAQ,OAAQ,KAGzC,YAAAX,YAAA,SAAYr5B,GACV,SAAKA,GAA4B,IAAlBA,EAAOC,SAIfmO,KAAKkrB,gBAAgBt5B,IAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GACxB,MAAuB,YAAnBA,EAAO,GAAG8C,MAAyC,YAAnB9C,EAAO,GAAG8C,MAQlD,EAxBA,GAAsB,EAAAmkC,a,osBCJtB,YACA,OAKA,cAGE,WACIpN,EAAwDjkB,EAChDsxB,EAAsDzkC,GAFlE,MAGE,YAAMo3B,EAAgBp3B,IAAW,K,OAFyB,EAAAmT,OAChD,EAAAsxB,wB,EAiBd,OAtB6C,OAS3C,YAAApO,WAAA,SAAWC,GACL3qB,KAAK84B,wBACP94B,KAAK2qB,WAAa3qB,KAAK84B,sBAAsBnO,KAIjD,YAAA1T,IAAA,SAAIC,EAAuCtlB,GAKzC,MAAO,CADQmnC,EAAQnnC,EAAO,GAAIoO,KAAKwH,KAAMxH,KAAK2qB,WAAY3qB,KAAK3L,cAGvE,EAtBA,CAA6C,EAAA2kC,SAwB7C,SAAgBD,EACZj/B,EAAW0N,EAA8BmjB,EAAet2B,GAC1D,IAAM4P,EAAS,IAAI,EAAAxP,OAAOqF,EAAE/H,KAAMsC,GAA0ByF,EAAEpF,MAI9D,OADA8S,EAFwB1N,EAAEgE,KACDmG,EAAOnG,KACQ6sB,GACjC1mB,EA9BI,EAAAgtB,aAwBb,YAcA,eAAoBjzB,EAA0BiG,GAC5C,IAAK,IAAIzU,EAAI,EAAGA,EAAIwO,EAAMnM,OAAQrC,IAChCyU,EAAOzU,GAAK4D,KAAK+9B,IAAInzB,EAAMxO,KAI/B,gBAAqBwO,EAA0BiG,GAC7C,IAAK,IAAIzU,EAAI,EAAGA,EAAIwO,EAAMnM,OAAQrC,IAChCyU,EAAOzU,GAAK4D,KAAKg+B,KAAKpzB,EAAMxO,KAIhC,iBAAsBwO,EAA0BiG,GAC9C,IAAK,IAAIzU,EAAI,EAAGA,EAAIwO,EAAMnM,OAAQrC,IAChCyU,EAAOzU,GAAK4D,KAAKi+B,MAAMrzB,EAAMxO,KAIjC,gBAAqBwO,EAA0BiG,GAC7C,IAAK,IAAIzU,EAAI,EAAGA,EAAIwO,EAAMnM,OAAQrC,IAChCyU,EAAOzU,GAAK4D,KAAKs+B,KAAK1zB,EAAMxO,KAIhC,iBAAsBwO,EAA0BiG,GAC9C,IAAK,IAAIzU,EAAI,EAAGA,EAAIwO,EAAMnM,OAAQrC,IAChCyU,EAAOzU,GAAK4D,KAAKu+B,MAAM3zB,EAAMxO,KAIjC,gBAAqBwO,EAA0BiG,GAC7C,IAAK,IAAIzU,EAAI,EAAGA,EAAIwO,EAAMnM,OAAQrC,IAChCyU,EAAOzU,GAAK4D,KAAKw+B,KAAK5zB,EAAMxO,KAIhC,iBAAsBwO,EAA0BiG,GAC9C,IAAK,IAAIzU,EAAI,EAAGA,EAAIwO,EAAMnM,OAAQrC,IAChCyU,EAAOzU,GAAK4D,KAAKy+B,MAAM7zB,EAAMxO,KAIjC,gBAAqBwO,EAA0BiG,GAC7C,IAAK,IAAIzU,EAAI,EAAGA,EAAIwO,EAAMnM,OAAQrC,IAChCyU,EAAOzU,GAAK4D,KAAK81B,KAAKlrB,EAAMxO,KAIhC,2BAAgCm7B,GAC9B,MAAO,CACL/N,IAAK+N,EAAWE,SAAS,OAAQ,sBACjCx3B,IAAKs3B,EAAWE,SAAS,MAAO,wBAIpC,gBAAqB7sB,EAA0BiG,EAA2B0mB,GAGxE,IAFA,IAAM/N,EAAM+N,EAAW/N,IACjBvpB,EAAMs3B,EAAWt3B,IACd7D,EAAI,EAAGA,EAAIwO,EAAMnM,OAAQrC,IAAK,CACrC,IAAMqB,EAAQmN,EAAMxO,GACpByU,EAAOzU,GAAMqB,EAAQ+rB,EAAOA,EAAO/rB,EAAQwC,EAAOA,EAAMxC,IAI5D,eAAoBmN,EAA0BiG,GAC5C,IAAK,IAAIzU,EAAI,EAAGA,EAAIwO,EAAMnM,OAAQrC,IAChCyU,EAAOzU,GAAK4D,KAAKi/B,IAAIr0B,EAAMxO,KAI/B,gBAAqBwO,EAA0BiG,GAC7C,IAAK,IAAIzU,EAAI,EAAGA,EAAIwO,EAAMnM,OAAQrC,IAChCyU,EAAOzU,GAAK4D,KAAKk/B,KAAKt0B,EAAMxO,KAIhC,0BAA+Bm7B,GAC7B,OAAOA,EAAWE,SAAS,QAAS,IAGtC,eAAoB7sB,EAA0BiG,EAA2B0mB,GAEvE,IADA,IAAMruB,EAAQquB,EACLn7B,EAAI,EAAGA,EAAIwO,EAAMnM,OAAQrC,IAAK,CACrC,IAAMqB,EAAQmN,EAAMxO,GACpByU,EAAOzU,GAAKqB,GAAS,EAAIA,EAAQyL,GAASlJ,KAAKs/B,IAAI7hC,GAAS,KAIhE,EAAA6hC,IAAA,SAAoB10B,EAA0BiG,GAC5C,IAAK,IAAIzU,EAAI,EAAGA,EAAIwO,EAAMnM,OAAQrC,IAChCyU,EAAOzU,GAAK4D,KAAKs/B,IAAI10B,EAAMxO,KAI/B,iBAAsBwO,EAA0BiG,GAC9C,IAAK,IAAIzU,EAAI,EAAGA,EAAIwO,EAAMnM,OAAQrC,IAChCyU,EAAOzU,GAAK4D,KAAKiC,MAAM2I,EAAMxO,KAIjC,iBAAsBwO,EAA0BiG,GAC9C,IAAK,IAAIzU,EAAI,EAAGA,EAAIwO,EAAMnM,OAAQrC,IAChCyU,EAAOzU,GAAK4L,OAAOmd,MAAMva,EAAMxO,IAAM,EAAI,GAI7C,gCAAqCm7B,GACnC,OAAOA,EAAWE,SAAS,QAAS,MAGtC,qBAA0B7sB,EAA0BiG,EAA2B0mB,GAE7E,IADA,IAAMruB,EAAQquB,EACLn7B,EAAI,EAAGA,EAAIwO,EAAMnM,OAAQrC,IAAK,CACrC,IAAMqB,EAAQmN,EAAMxO,GACpByU,EAAOzU,GAAKqB,GAAS,EAAIA,EAAQyL,EAAQzL,IAI7C,eAAoBmN,EAA0BiG,GAC5C,IAAK,IAAIzU,EAAI,EAAGA,EAAIwO,EAAMnM,OAAQrC,IAChCyU,EAAOzU,GAAK4D,KAAKmR,IAAIvG,EAAMxO,KAI/B,eAAoBwO,EAA0BiG,GAC5C,IAAK,IAAIzU,EAAI,EAAGA,EAAIwO,EAAMnM,OAAQrC,IAChCyU,EAAOzU,IAAMwO,EAAMxO,IAIvB,eAAoBwO,EAA2BiG,GAC7C,IAAK,IAAIzU,EAAI,EAAGA,EAAIwO,EAAMnM,OAAQrC,IAChCyU,EAAOzU,GAAKwO,EAAMxO,GAAK,EAAI,GAI/B,sBAA2BwO,EAA0BiG,GACnD,IAAK,IAAIzU,EAAI,EAAGA,EAAIwO,EAAMnM,OAAQrC,IAChCyU,EAAOzU,GAAK,EAAMwO,EAAMxO,IAI5B,gBAAqBwO,EAA0BiG,GAC7C,IAAK,IAAIzU,EAAI,EAAGA,EAAIwO,EAAMnM,OAAQrC,IAChCyU,EAAOzU,GAAK4D,KAAKC,IAAI,EAAG2K,EAAMxO,KAIlC,mBAAwBwO,EAA0BiG,GAChD,IAAK,IAAIzU,EAAI,EAAGA,EAAIwO,EAAMnM,OAAQrC,IAChCyU,EAAOzU,GAAM,GAAK,EAAI4D,KAAKs/B,KAAK10B,EAAMxO,MAI1C,gBAAqBwO,EAA0BiG,GAC7C,IAAK,IAAIzU,EAAI,EAAGA,EAAIwO,EAAMnM,OAAQrC,IAChCyU,EAAOzU,GAAKwO,EAAMxO,GAAK,EAAI,EAAIwO,EAAMxO,GAAK,GAAK,EAAI,GAIvD,eAAoBwO,EAA0BiG,GAC5C,IAAK,IAAIzU,EAAI,EAAGA,EAAIwO,EAAMnM,OAAQrC,IAChCyU,EAAOzU,GAAK4D,KAAKmhC,IAAIv2B,EAAMxO,KAI/B,gBAAqBwO,EAA0BiG,GAC7C,IAAK,IAAIzU,EAAI,EAAGA,EAAIwO,EAAMnM,OAAQrC,IAChCyU,EAAOzU,GAAK4D,KAAKohC,KAAKx2B,EAAMxO,KAIhC,gBAAqBwO,EAA0BiG,GAC7C,IAAK,IAAIzU,EAAI,EAAGA,EAAIwO,EAAMnM,OAAQrC,IAChCyU,EAAOzU,GAAK4D,KAAKwhC,KAAK52B,EAAMxO,KAIhC,eAAoBwO,EAA0BiG,GAC5C,IAAK,IAAIzU,EAAI,EAAGA,EAAIwO,EAAMnM,OAAQrC,IAChCyU,EAAOzU,GAAK4D,KAAK2hC,IAAI/2B,EAAMxO,KAI/B,gBAAqBwO,EAA0BiG,GAC7C,IAAK,IAAIzU,EAAI,EAAGA,EAAIwO,EAAMnM,OAAQrC,IAChCyU,EAAOzU,GAAK4D,KAAK4hC,KAAKh3B,EAAMxO,M,+FClOhC,iBACE,WAAsBi8B,EAA0Dp3B,GAA1D,KAAAo3B,iBAA0D,KAAAp3B,aAqBlF,OAjBE,YAAAq2B,WAAA,SAAWC,KAEX,YAAAM,YAAA,SAAYr5B,GACV,SAAKA,GAA4B,IAAlBA,EAAOC,SAIfmO,KAAKkrB,gBAAgBt5B,IAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GACxB,OAAqD,IAAjDoO,KAAKyrB,eAAe3vB,QAAQlK,EAAO,GAAG8C,OAM9C,EAtBA,GAAsB,EAAAskC,W,iGCAtB,+BAyBA,OAtBE,YAAAtO,WAAA,SAAWC,GACT3qB,KAAKnG,KAAO8wB,EAAWiB,QAAQ,SAGjC,YAAAX,YAAA,SAAYr5B,GACV,SAAKA,GAA4B,IAAlBA,EAAOC,SAIfmO,KAAKkrB,gBAAgBt5B,IAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GAExB,MAAuB,WAAnBA,EAAO,GAAG8C,MAQlB,EAzBA,GAAsB,EAAAukC,a,6GCAtB,+BAyCA,OAtCE,YAAAvO,WAAA,SAAWC,GAIT,GAHA3qB,KAAKjP,KAAO45B,EAAWgB,UAAU,OAAQ,WACzC3rB,KAAKk5B,OAASvO,EAAWwN,UAAU,UAEjB,YAAdn4B,KAAKjP,MAAoC,WAAdiP,KAAKjP,KAClC,MAAM,IAAIiF,MAAM,sBAAsBgK,KAAKjP,MAG7C,GAAkB,WAAdiP,KAAKjP,MAA4C,IAAvBiP,KAAKk5B,OAAOrnC,QAAuC,IAAvBmO,KAAKk5B,OAAOrnC,OACpE,MAAM,IAAImE,MAAM,sDAGlBgK,KAAKm5B,IAAM,IAAI5lC,MAAmC,EAArByM,KAAKk5B,OAAOrnC,QAAYoK,KAAK,IAG5D,YAAAgvB,YAAA,SAAYr5B,GACV,SAAKA,GAA4B,IAAlBA,EAAOC,UAIlBD,EAAO,GAAGG,KAAKF,SAAWmO,KAAKk5B,OAAOrnC,QAInCmO,KAAKkrB,gBAAgBt5B,KAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GACxB,MAAuB,WAAnBA,EAAO,GAAG8C,MAUlB,EAzCA,GAAsB,EAAA0kC,WA2CtB,+BA4BA,OAzBE,YAAA1O,WAAA,SAAWC,GAGT,GAFA3qB,KAAKjP,KAAO45B,EAAWgB,UAAU,OAAQ,WAEvB,YAAd3rB,KAAKjP,MAAoC,WAAdiP,KAAKjP,KAClC,MAAM,IAAIiF,MAAM,sBAAsBgK,KAAKjP,OAI/C,YAAAk6B,YAAA,SAAYr5B,GACV,SAAKA,GAA4B,IAAlBA,EAAOC,SAIfmO,KAAKkrB,gBAAgBt5B,IAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GACxB,MAAuB,WAAnBA,EAAO,GAAG8C,MAQlB,EA5BA,GAAsB,EAAA2kC,c,iBCnDtB;;;;;;IAME,WACA,aAGA,IAAIC,EAAc,CAChB,UAAY,EACZ,QAAU,GAIRrqC,EAAQqqC,SAAmB7pC,SAAWA,QAAWuQ,KAMjDu5B,EAAcD,SAAmBnqC,IAAYA,EAG7CqqC,EAAaF,SAAmBlqC,IAAWA,IAAWA,EAAOqqC,UAAYrqC,EAGzEsqC,EAAaH,GAAeC,GAA+B,iBAAVnrB,GAAsBA,GACvEqrB,GAAeA,EAAWrrB,SAAWqrB,GAAcA,EAAWjqC,SAAWiqC,GAAcA,EAAWprB,OAASorB,IAC7GzqC,EAAOyqC,GAQT,IAAIC,EAAiBvmC,KAAKgJ,IAAI,EAAG,IAAM,EAGnCw9B,EAAU,UAMVC,EAAcvpC,OAAOkB,UAGrBC,EAAiBooC,EAAYpoC,eAG7B8P,EAAWs4B,EAAYt4B,SAW3B,SAASu4B,EAAW1mB,GAElB,OADAA,EAASpE,OAAOoE,IACFzC,OAAO,GAAGopB,cAAgB3mB,EAAO/Z,MAAM,GAuFvD,SAAS2gC,EAAO5mB,GAEd,OADAA,EAAS0P,EAAK1P,GACP,uBAAuB6mB,KAAK7mB,GAC/BA,EACA0mB,EAAW1mB,GAUjB,SAAS8mB,EAAO5oC,EAAQ6oC,GACtB,IAAK,IAAIhpC,KAAOG,EACVG,EAAe1B,KAAKuB,EAAQH,IAC9BgpC,EAAS7oC,EAAOH,GAAMA,EAAKG,GAYjC,SAAS8oC,EAAWvpC,GAClB,OAAgB,MAATA,EACHipC,EAAWjpC,GACX0Q,EAASxR,KAAKc,GAAOwI,MAAM,GAAI,GA0BrC,SAASghC,EAAQjnB,GACf,OAAOpE,OAAOoE,GAAQ2P,QAAQ,eAAgB,OAWhD,SAASvnB,EAAOuG,EAAOo4B,GACrB,IAAIG,EAAc,KAIlB,OA/FF,SAAchpC,EAAQ6oC,GACpB,IAAIxmC,GAAS,EACT9B,EAASP,EAASA,EAAOO,OAAS,EAEtC,GAAqB,iBAAVA,GAAsBA,GAAU,GAAKA,GAAU8nC,EACxD,OAAShmC,EAAQ9B,GACfsoC,EAAS7oC,EAAOqC,GAAQA,EAAOrC,QAGjC4oC,EAAO5oC,EAAQ6oC,GAmFjBI,CAAKx4B,GAAO,SAASlR,EAAO8C,GAC1B2mC,EAAcH,EAASG,EAAazpC,EAAO8C,EAAOoO,MAE7Cu4B,EAUT,SAASxX,EAAK1P,GACZ,OAAOpE,OAAOoE,GAAQ2P,QAAQ,WAAY,IAm+B5C,IAAI6N,EAt9BJ,SAAS4J,EAAMC,GAGb,IAAI5uB,EAAU5c,EAGVyrC,EAAkBD,GAAmB,iBAANA,GAAoC,UAAlBL,EAAWK,GAG5DC,IACF7uB,EAAU4uB,EACVA,EAAK,MAIP,IAAIE,EAAM9uB,EAAQ+uB,WAAa,GAG3BC,EAAYF,EAAIE,WAAa,GAEjCJ,IAAOA,EAAKI,GAGZ,IA4CI/8B,EAkBAg9B,EA3IcxpC,EAAQC,EACtBmD,EA+EAqmC,EAAaL,IACXC,EAAII,WACN,aAAad,KAAKQ,KAAQ,eAAeR,KAAK14B,EAASA,YAIvDy5B,EAAkBN,EADJ,SACoC,4BAClDO,EAAcP,EAFA,SAEgC,cAC9CQ,EAAaR,GAAmB7uB,EAAQsvB,KAAQ,cAAgBf,EAAWvuB,EAAQsvB,MACnFC,EAAeV,EAJD,SAIiC,gBAG/CS,EAAO,SAASlB,KAAKiB,IAAcrvB,EAAQsvB,KAG3CE,EAAQF,GAAQf,EAAWvuB,EAAQyvB,cAAgBL,EAGnD3+B,EAAQ6+B,EAAO,IAAM,IAGrBrO,EAAOqO,EAAO,IAAM,IAGpBI,EAAM1vB,EAAQ2vB,UAAY,GAO1BC,EAAQ5vB,EAAQ6vB,WAAa7vB,EAAQ4vB,MAGrCE,EAAa/B,EAAQK,KAAK0B,EAAcjB,GAAmBe,EAASA,EAAM,aAAerB,EAAWqB,IACpGE,EACCF,EAAQ,KAQTG,EAAOnB,EAGPoB,EAAc,GAGdC,EAAa,KAGbC,EAActB,GAAMI,EAGpBj3B,EAAUm4B,GAAeN,GAAiC,mBAAjBA,EAAM73B,SAAyB63B,EAAM73B,UAM9Eo4B,EA2KKxgC,EA3Kc,CACrB,CAAE,MAAS,WAAY,QAAW,QAClC,UACA,CAAE,MAAS,SAAU,QAAW,eAChC,OACA,SACA,WACA,SACA,QACA,UAkKuB,SAASkR,EAAQuvB,GACtC,OAAOvvB,GAAUwvB,OAAO,OACtBD,EAAME,SAAW9B,EAAQ4B,IACvB,MAAO,KAAKG,KAAK3B,KAAQwB,EAAMI,OAASJ,MAjK5C9rC,EA8LJ,SAAiBmsC,GACf,OAAO9gC,EAAO8gC,GAAS,SAAS5vB,EAAQuvB,GACtC,OAAOvvB,GAAUwvB,OAAO,OACtBD,EAAME,SAAW9B,EAAQ4B,IACvB,MAAO,KAAKG,KAAK3B,KAAQwB,EAAMI,OAASJ,MAlMrCM,CAAQ,CACjB,YACA,QACA,gBACA,SACA,SACA,WACA,WACA,SACA,QACA,SACA,eACA,OACA,YACA,WACA,YACA,YACA,UACA,CAAE,MAAS,iBAAkB,QAAW,4BACxC,SACA,eACA,WACA,YACA,QACA,SACA,WACA,CAAE,MAAS,mBAAoB,QAAW,kBAC1C,YACA,CAAE,MAAS,OAAQ,QAAW,+BAC9B,WACA,cACA,CAAE,MAAS,cAAe,QAAW,QACrC,UACA,WACA,UACA,WACA,cACA,CAAE,MAAS,iBAAkB,QAAW,aACxC,CAAE,MAAS,aAAc,QAAW,aACpC,aACA,CAAE,MAAS,aAAc,QAAW,SACpC,QACA,CAAE,MAAS,QAAS,QAAW,OAC/B,WACA,SACA,CAAE,MAAS,SAAU,QAAW,sBAChC,CAAE,MAAS,gBAAiB,QAAW,kBACvC,CAAE,MAAS,UAAW,QAAW,yBACjC,CAAE,MAAS,kBAAmB,QAAW,SACzC,CAAE,MAAS,KAAM,QAAW,YAC5B,CAAE,MAAS,KAAM,QAAW,QAC5B,WAIEC,EAAUC,EAAW,CACvB,CAAE,MAAS,aAAc,QAAW,QACpC,aACA,CAAE,MAAS,WAAY,QAAW,YAClC,CAAE,MAAS,YAAa,QAAW,YACnC,CAAE,MAAS,YAAa,QAAW,YACnC,CAAE,MAAS,YAAa,QAAW,YACnC,CAAE,MAAS,YAAa,QAAW,WACnC,CAAE,MAAS,YAAa,QAAW,WACnC,CAAE,MAAS,iBAAkB,QAAW,WACxC,CAAE,MAAS,YAAa,QAAW,WACnC,CAAE,MAAS,iBAAkB,QAAW,WACxC,YACA,QACA,OACA,OACA,SACA,SACA,CAAE,MAAS,cAAe,QAAW,+BACrC,QACA,OACA,WACA,mBACA,cACA,WACA,cACA,CAAE,MAAS,QAAS,QAAW,QAC/B,MACA,WACA,CAAE,MAAS,WAAY,QAAW,QAClC,SAIEC,EAmFJ,SAAyBJ,GACvB,OAAO9gC,EAAO8gC,GAAS,SAAS5vB,EAAQ7b,EAAOM,GAE7C,OAAOub,IACL7b,EAAM2rC,IACN3rC,EAAM,0BAA0BurC,KAAKI,KACrCN,OAAO,MAAQ7B,EAAQlpC,GAAO,kBAAmB,KAAKirC,KAAK3B,KACxDtpC,KA1FUwrC,CAAgB,CACjC,MAAS,CAAE,KAAQ,EAAG,OAAU,EAAG,KAAQ,GAC3C,QAAW,GACX,OAAU,GACV,OAAU,CAAE,OAAU,EAAG,cAAe,GACxC,KAAQ,CAAE,YAAe,GACzB,iBAAkB,CAAE,KAAQ,GAC5B,WAAc,CAAE,SAAY,GAC5B,OAAU,CAAE,YAAa,EAAG,MAAS,GACrC,GAAM,CAAE,SAAY,GACpB,IAAO,GACP,OAAU,GACV,OAAU,GACV,GAAM,GACN,UAAa,CAAE,KAAQ,EAAG,WAAY,GACtC,SAAY,CAAE,KAAQ,GACtB,SAAY,CAAE,QAAS,EAAI,IAAO,GAClC,MAAS,CAAE,MAAS,GACpB,KAAQ,GACR,QAAW,CAAE,WAAY,EAAG,YAAa,EAAG,YAAa,EAAG,YAAa,GACzE,KAAQ,CAAE,YAAe,EAAG,mBAAoB,GAChD,OAAU,CAAE,GAAM,EAAG,MAAS,KAI5BC,EA2FJ,SAAeN,GACb,OAAO9gC,EAAO8gC,GAAS,SAAS5vB,EAAQuvB,GACtC,IAAIE,EAAUF,EAAME,SAAW9B,EAAQ4B,GAMvC,OALKvvB,IAAWA,EACVwvB,OAAO,MAAQC,EAAU,wBAAyB,KAAKC,KAAK3B,MAEhE/tB,EAveR,SAAmBkwB,EAAIT,EAASE,GAI9B,IAAIv+B,EAAO,CACT,OAAQ,KACR,IAAQ,uBACR,IAAQ,MACR,IAAQ,IACR,IAAQ,qBACR,MAAQ,sBACR,IAAQ,0BACR,IAAQ,KACR,KAAQ,WACR,MAAQ,OACR,MAAQ,KACR,OAAQ,MA8BV,OA3BIq+B,GAAWE,GAAS,QAAQpC,KAAK2C,KAAQ,mBAAmB3C,KAAK2C,KAChE9+B,EAAOA,EAAK,UAAUs+B,KAAKQ,OAC9BA,EAAK,WAAa9+B,GAGpB8+B,EAAK5tB,OAAO4tB,GAERT,GAAWE,IACbO,EAAKA,EAAG7Z,QAAQmZ,OAAOC,EAAS,KAAME,IAGxCO,EAAK5C,EACH4C,EAAG7Z,QAAQ,QAAS,OACjBA,QAAQ,SAAU,OAClBA,QAAQ,gBAAiB,UACzBA,QAAQ,cAAe,OACvBA,QAAQ,oBAAqB,MAC7BA,QAAQ,iBAAkB,MAC1BA,QAAQ,SAAU,OAClBA,QAAQ,KAAM,KACdA,QAAQ,6BAA8B,IACtCA,QAAQ,gBAAiB,UACzBA,QAAQ,yBAA0B,MAClCA,QAAQ,6BAA8B,MACtCpmB,MAAM,QAAQ,IA4bJkgC,CAAUnwB,EAAQyvB,EAASF,EAAMI,OAASJ,IAE9CvvB,KAnGFowB,CAAM,CACb,gBACA,QACA,UACA,SACA,CAAE,MAAS,YAAa,QAAW,QACnC,SACA,CAAE,MAAS,gBAAiB,QAAW,aACvC,SACA,UACA,SACA,QACA,UACA,aACA,UACA,UACA,OACA,SACA,UACA,SACA,aACA,QACA,SACA,QACA,YACA,QACA,QACA,WACA,YACA,MACA,cACA,aA+EF,SAASL,EAAWH,GAClB,OAAO9gC,EAAO8gC,GAAS,SAAS5vB,EAAQuvB,GACtC,IAAIE,EAAUF,EAAME,SAAW9B,EAAQ4B,GAiBvC,OAhBKvvB,IAAWA,EACVwvB,OAAO,MAAQC,EAAU,iBAAkB,KAAKC,KAAK3B,IACrDyB,OAAO,MAAQC,EAAU,gBAAiB,KAAKC,KAAK3B,IACpDyB,OAAO,MAAQC,EAAU,6CAA8C,KAAKC,KAAK3B,OAGhF/tB,EAASsC,OAAQitB,EAAMI,QAAUH,OAAOC,EAAS,KAAKlC,KAAKgC,EAAMI,OAAUJ,EAAMI,MAAQ3vB,GAAQ/P,MAAM,MAAM,KAAO,SAASs9B,KAAKvtB,EAAO,MAC5IA,EAAO,IAAM,IAAMA,EAAO,IAG5BuvB,EAAQA,EAAMI,OAASJ,EACvBvvB,EAASstB,EAAOttB,EAAO,GACpBqW,QAAQmZ,OAAOC,EAAS,KAAMF,GAC9BlZ,QAAQmZ,OAAO,SAAWD,EAAQ,SAAU,KAAM,KAClDlZ,QAAQmZ,OAAO,IAAMD,EAAQ,eAAgB,KAAM,WAEjDvvB,KAWX,SAASqwB,EAAWC,GAClB,OAAOxhC,EAAOwhC,GAAU,SAAStwB,EAAQyvB,GACvC,OAAOzvB,IAAWwvB,OAAOC,EACvB,2DAA4D,KAAKC,KAAK3B,IAAO,GAAG,IAAM,QA8J5F,GA5IAuB,IAAWA,EAAS,CAACA,IAQjB,cAAc/B,KAAK2C,KAAQJ,IAC1B1+B,EAAO,kDAAkDs+B,KAAK3B,MACjE+B,EAAU1Z,EAAKhlB,EAAK,IAEjBilB,QAAQ,0BAA2B,KACjC,MAGH2Z,IAAiBF,EACnBA,EAAUC,EAAW,CAACC,IACbA,GAAgBF,IACzBA,EAAUA,EACPzZ,QAAQmZ,OAAO,KAAO7B,EAAQqC,GAAgB,YAAa,KAAMA,EAAe,KAChF3Z,QAAQmZ,OAAO,KAAO7B,EAAQqC,GAAgB,eAAgB,KAAMA,EAAe,SAGnF5+B,EAAO,gBAAgBs+B,KAAKI,MAC/BA,EAAU1+B,EAAK,IAGb,iBAAiBm8B,KAAKQ,KACxB+B,GAAWA,EAAUA,EAAU,IAAM,IAAM,aAGjC,cAARrsC,GAAwB,YAAY8pC,KAAKQ,IAC3CoB,EAAY9/B,KAAK,sCAGP,MAAR5L,GAAgB,qBAAqB8pC,KAAKQ,IAE5CiC,GADA5+B,EAAO08B,EAAMC,EAAG1X,QAAQ,iBAAkB,MACtB2Z,aACpBF,EAAU1+B,EAAK0+B,SAGR,MAAMvC,KAAKuC,IAClBrsC,IAASA,EAAO,UAChBysC,EAAK,QAAU9+B,EAAO,gBAAgBs+B,KAAK3B,IACvC,IAAM38B,EAAK,GAAGilB,QAAQ,KAAM,KAC5B,KAGW,aAAR5yB,GAAuB,YAAY8pC,KAAK2C,GAC/CA,EAAK,UAGGF,GAAgC,UAAhBA,IACpB,SAASzC,KAAK9pC,KAAU,qBAAqB8pC,KAAKQ,IAAQ,WAAWR,KAAKuC,KAC3E,cAAcvC,KAAK2C,IAAO,UAAU3C,KAAK9pC,IAAS,eAAe8pC,KAAKQ,IACzEtqC,EAAO,kBACPysC,EAAK,cAAc3C,KAAK2C,GAAMA,EAAK,WAGpB,QAARzsC,GACF,UAAU8pC,KAAKQ,KAClBmC,EAAK,UACLf,EAAYoB,QAAQ,iBAElB,wBAAwBhD,KAAKQ,IAC/BoB,EAAYoB,QAAQ,gBAIP,cAAR9sC,GAAwB,YAAY8pC,KAAKQ,GAChDoB,EAAY9/B,KAAK,cAGF,YAAR5L,IAAuB2N,EAAO,wBAAwBs+B,KAAK3B,IAClEoB,EAAY9/B,KAAK,0BAA4B+B,EAAK,IAGnC,WAAR3N,IAAsB2N,EAAO,0BAA0Bs+B,KAAK3B,KACnEmC,IAAOA,EAAK,cACZJ,IAAYA,EAAU1+B,EAAK,MAGnB3N,IAAS2N,GAAQ,iBAAiBm8B,KAAKQ,IAAO,yBAAyB2B,KAAKjsC,KAEhFA,IAASqsC,GAAW,kBAAkBvC,KAAKQ,EAAGphC,MAAMohC,EAAG3+B,QAAQgC,EAAO,KAAO,MAE/E3N,EAAO,OAGJ2N,EAAO0+B,GAAWE,GAAgBE,KAClCJ,GAAWE,GAAgB,6CAA6CzC,KAAK2C,MAChFzsC,EAAO,mBAAmBisC,KAAK,cAAcnC,KAAK2C,GAAMA,EAAK9+B,GAAQ,aAIxD,YAAR3N,IAAuB2N,GAAQ,uBAAuBs+B,KAAK3B,IAAO,GAAG,KAC5EoB,EAAY9/B,KAAK,YAAc+B,GAG5B8F,IACHA,EAAUm5B,EAAW,CACnB,iKACA,UACA1C,EAAQlqC,GACR,qCAIC2N,GACW,QAAVk+B,GAAoBkB,WAAWt5B,GAAW,EAAK,SAC/C,YAAYq2B,KAAK9pC,KAAU,UAAU8pC,KAAKQ,GAAM,QAAU,YAC1D,8BAA8BR,KAAKQ,KAAQ,yBAAyBR,KAAK+B,IAAW,WACnFA,GAAU,YAAY/B,KAAKQ,KAAc,UAANmC,EAAiB,SAAW,YACtD,UAAVZ,GAAsB,8BAA8B/B,KAAK9pC,IAAS,cAEtE6rC,EAAS,CAACl+B,IAGA,MAAR3N,IAAiB2N,GAAQ,4BAA4Bs+B,KAAK3B,IAAO,GAAG,KACtEtqC,GAAQ,UACRysC,EAAK,kBAAoB,MAAM3C,KAAKn8B,GAAQA,EAAOA,EAAO,MAC1D+9B,EAAYoB,QAAQ,iBAGb,iBAAiBhD,KAAKQ,IAC7BtqC,EAAO,YACPysC,EAAK,oBACLf,EAAYoB,QAAQ,gBACpBr5B,IAAYA,GAAW,gBAAgBw4B,KAAK3B,IAAO,GAAG,KAGvC,MAARtqC,GAA0B,WAAV6rC,IAAwBl+B,EAAO,gBAAgBs+B,KAAK3B,MACvEtqC,GACF0rC,EAAY9/B,KAAK,kBAAoB5L,GAAQyT,EAAU,IAAMA,EAAU,KAEzEzT,EAAO,KACPyT,EAAU9F,EAAK,IAGbi+B,EAAa,CAGf,GA7jBwBxqC,EA6jBA,SA5jBtBmD,EAAiB,OADHpD,EA6jBDua,UA5jBkBva,EAAOC,GAAY,SAC9C,wCAAwC0oC,KAAKvlC,IAC1C,UAARA,IAAqBpD,EAAOC,GAumBpB6oC,EAAYt8B,EAAO+N,EAAQsxB,UAAanC,GAC/C7qC,EAAO,YACPysC,EAAK9+B,EAAKs/B,MAAMC,OAAOC,aAAaV,IAG7BxC,EAAYt8B,EAAO+N,EAAQ0xB,UAAanC,GAC/CjrC,EAAO,YACPyT,GAAW9F,EAAOA,EAAK8F,SAAW,OAAU9F,EAAK0/B,MAAQ,IAAM1/B,EAAK2/B,MAAQ,IAAM3/B,EAAK4/B,OAGrD,iBAApBnC,EAAIoC,eAA6B7/B,EAAO,oBAAoBs+B,KAAK3B,KAG/E72B,EAAU,CAACA,EAAS23B,EAAIoC,eACnB7/B,GAAQA,EAAK,GAAK,IAAM8F,EAAQ,KACnCi4B,EAAY9/B,KAAK,MAAQ6H,EAAQ,GAAK,SACtCo4B,IAAWA,EAAO,GAAK,IACvBp4B,EAAQ,GAAK9F,GAEf8F,EAAkB,MAARzT,EAAe6e,OAAOpL,EAAQ,GAAGwE,QAAQ,IAAMxE,EAAQ,IAG/B,iBAApB23B,EAAIoC,cAA4B,wBAAwB1D,KAAK9pC,KAC3E0rC,EAAY9/B,KAAK,cAAgB5L,EAAO,IAAMyT,GAC9CzT,EAAO,KACPyT,EAAU,OACVo4B,EAAS,CAAC,WACVY,EAAK,gBAlEL,GALIzB,IAEFS,GADA99B,EAAOq9B,EAAKyC,KAAKC,QACLC,YAAY,WACxBlB,EAAKA,GAAM9+B,EAAKggC,YAAY,WAAa,IAAMhgC,EAAKggC,YAAY,eAE9DzC,EAAO,CACT,IACEz3B,EAAUiI,EAAQkyB,QAAQ,gBAAgBn6B,QAAQoV,KAAK,KACvD7oB,EAAO,UACP,MAAM+X,IACDpK,EAAO+N,EAAQwxB,SAAWv/B,EAAKuQ,OAAOgvB,QAAUxxB,EAAQwxB,SAC3DltC,EAAO,UACPysC,IAAOA,EAAK9+B,EAAK,GAAG8+B,IAAM,OAGzBzsC,IACHA,EAAO,aAIiB,iBAAnB0b,EAAQ+C,UAAwB/C,EAAQ+C,QAAQ8gB,UACtD5xB,EAAO+N,EAAQ+C,WAEY,iBAAjB9Q,EAAK+Q,WACuB,iBAA1B/Q,EAAK+Q,SAASmvB,UACvBnC,EAAY9/B,KAAK,QAAU+B,EAAK+Q,SAAS1C,MACzChc,EAAO,WACPyT,EAAU9F,EAAK+Q,SAASmvB,UACY,iBAApBlgC,EAAK+Q,SAASovB,KAC9BpC,EAAY9/B,KAAK,YAAc6H,EAAS,QAAU9F,EAAK+Q,SAAS1C,MAChEhc,EAAO,QACPyT,EAAU9F,EAAK+Q,SAASovB,KAGvB9tC,IACHA,EAAO,UACPyrC,EAAO99B,EAAK89B,KACZgB,EAAK9+B,EAAK8yB,SAEVhtB,GADAA,EAAU,SAASw4B,KAAKt+B,EAAK8F,UACTA,EAAQ,GAAK,OAkCvCg5B,EAAKA,GAAM5C,EAAO4C,GAapB,GAVIh5B,IAAY9F,EACV,0CAA0Cs+B,KAAKx4B,IAC/C,2BAA2Bw4B,KAAK3B,EAAK,KAAOsB,GAAepB,EAAIuD,mBAC/D,iBAAiBjE,KAAKQ,IAAO,OAEjCqB,EAAa,KAAK7B,KAAKn8B,GAAQ,OAAS,QACxC8F,EAAUA,EAAQmf,QAAQmZ,OAAOp+B,EAAO,SAAU,KACjC,QAAdg+B,EAAuBhP,EAAOxwB,IAAU,SAAS8/B,KAAKt+B,IAAS,KAGxD,UAAR3N,GAA4B,WAARA,GAAqB,mCAAmC8pC,KAAK2C,GACnFzsC,EAAO,sBAGJ,GAAY,WAARA,GAAqByT,EAC5BA,EAAUA,EAAQmf,QAAQ,WAAY,WAGnC,GAAI,YAAYkX,KAAKuC,GACT,YAAXA,IACFI,EAAK,MAEQ,YAAXJ,GAAyB,eAAevC,KAAKQ,IAC/CoB,EAAYoB,QAAQ,oBAInB,IAAK,wBAAwBhD,KAAK9pC,MAASA,GAASqsC,GAAY,eAAevC,KAAK9pC,KAC9E,cAANysC,IAAsB,QAAQ3C,KAAKQ,GAInC,GAAY,MAARtqC,GAAgB4rC,EACvB,IAC2B,OAArBlwB,EAAQsyB,UACVtC,EAAYoB,QAAQ,oBAEtB,MAAM/0B,GACN2zB,EAAYoB,QAAQ,iBAKd,iBAAiBhD,KAAKuC,IAAY,WAAWvC,KAAKQ,MAAS38B,GAC9Do+B,OAAOM,EAAQzZ,QAAQ,MAAO,MAAQ,aAAc,KAAKqZ,KAAK3B,IAAO,GAAG,IACzE72B,IAGJg5B,IADA9+B,EAAO,CAACA,EAAM,OAAOm8B,KAAKQ,KACf,IAAM+B,EAAU,KAAME,EAAe,cAAgB,mBAAqB,IAAM5+B,EAAK,GAChG8F,EAAU,MAIH5D,MAAQk6B,GAAqB,OAAXsC,IACpBT,GAAeN,GACf,QAAQxB,KAAK9pC,IAAS,wBAAwB8pC,KAAKQ,IAC3C,WAARtqC,GAAqB,uBAAuB8pC,KAAK2C,IACzC,MAARzsC,IACEysC,IAAO,OAAO3C,KAAK2C,IAAOh5B,EAAU,KACrC,iBAAiBq2B,KAAK2C,IAAOh5B,EAAU,GAC5B,GAAXA,IAAiB,cAAcq2B,KAAKQ,OAElCb,EAAQK,KAAMn8B,EAAO08B,EAAMzqC,KAAKmqC,EAAQO,EAAG1X,QAAQ6W,EAAS,IAAM,OAAU97B,EAAK3N,OAEzF2N,EAAO,UAAYA,EAAK3N,OAAS2N,EAAOA,EAAK8F,SAAW,IAAM9F,EAAO,IACjE87B,EAAQK,KAAK9pC,IACX,SAAS8pC,KAAKn8B,IAAe,UAAN8+B,IACzBA,EAAK,MAEP9+B,EAAO,WAAaA,IAIpBA,EAAO,OAASA,EAEd3N,EADEwrC,EACK3B,EAAO2B,EAAW5Y,QAAQ,kBAAmB,UAE7C,QAEL,SAASkX,KAAKn8B,KAChB8+B,EAAK,MAEFb,IACHn4B,EAAU,OAGdo4B,EAAS,CAAC,UACVH,EAAY9/B,KAAK+B,SA1DjB3N,GAAQ,WA6DL2N,GAAQ,8BAA8Bs+B,KAAK3B,IAAO,GAAG,MAGxD38B,EAAO,CAACo/B,WAAWp/B,EAAKilB,QAAQ,UAAW,SAAUjlB,GAEzC,UAAR3N,GAAyC,KAArB2N,EAAK,GAAGzE,OAAO,IACrClJ,EAAO,iBACP2rC,EAAa,QACbl4B,EAAU9F,EAAK,GAAGzE,MAAM,GAAI,IAGrBuK,GAAW9F,EAAK,IACrB8F,IAAY9F,EAAK,IAAM,yBAAyBs+B,KAAK3B,IAAO,GAAG,MACjE72B,EAAU,MAGZ9F,EAAK,IAAM,mCAAmCs+B,KAAK3B,IAAO,GAAG,GAE9C,QAAX38B,EAAK,IAA2B,QAAXA,EAAK,IAAgBo/B,WAAWp/B,EAAK,KAAO,IAAgB,UAAVk+B,IACzEA,EAAS,CAAC,UAIPD,IAAiBhB,GAAej9B,EAAK,KAIxCk+B,IAAWA,EAAO,GAAK,eACvBl+B,EAAOA,EAAK,MAAOA,EAAOA,EAAK,IAAW,IAAM,EAAIA,EAAO,IAAM,EAAIA,EAAO,OAAS,EAAIA,EAAO,IAAM,EAAIA,EAAO,OAAS,EAAIA,EAAO,OAAS,EAAIA,EAAO,MAAS,EAAIA,EAAO,OAAS,EAAIA,EAAO,OAAS,EAAIA,EAAO,OAAS,GAAKA,EAAO,MAAS,GAAKA,EAAO,OAAS,GAAKA,EAAO,OAAS,MAAQA,EAAO,OAAS,GAAKA,EAAO,OAAS,GAAKA,EAAO,OAAS,GAAKA,EAAO,OAAS,GAAKA,EAAO,MAAS,GAAKA,EAAO,OAAS,GAAKA,EAAO,OAAS,MAAQA,EAAO,OAAS,GAAKA,EAAO,OAAS,GAAKA,EAAO,OAAS,GAAKA,EAAO,OAAS,GAAe,SAAVk+B,EAAoB,KAAO,QAJ1iBA,IAAWA,EAAO,GAAK,eACvBl+B,GAAQA,EAAOA,EAAK,IAAW,IAAM,EAAIA,EAAO,IAAM,EAAIA,EAAO,IAAM,EAAIA,EAAO,IAAM,EAAIA,EAAO,IAAM,KAAOA,EAAO,IAAM,EAAIA,EAAO,IAAM,EAAIA,EAAO,IAAM,EAAIA,EAAO,IAAM,EAAIA,EAAO,IAAM,EAAIA,EAAO,IAAM,GAAKA,EAAO,IAAM,GAAKA,EAAO,IAAM,GAAK,MAM7Pk+B,IAAWA,EAAO,IAAM,KAAOl+B,GAAuB,iBAARA,EAAmB,KAAO,OAAOm8B,KAAKn8B,GAAQ,GAAK,MAErF,UAAR3N,KAAsByT,GAAW2Q,SAAS3Q,GAAW,IACvDA,EAAU9F,EACO,UAAR3N,GAAoB,oBAAoB8pC,KAAKQ,IACtDoB,EAAYoB,QAAQ,aAIZ,SAAR9sC,IAAqB2N,EAAO,eAAes+B,KAAKQ,KAClDzsC,GAAQ,IACR0rC,EAAYoB,QAAQ,gBACR,QAARn/B,GACF3N,GAAQ,OACRyT,EAAU,MAEVzT,GAAQ,SAEVysC,EAAKA,EAAG7Z,QAAQmZ,OAAO,KAAOp+B,EAAO,KAAM,KAG5B,UAAR3N,GAAoB,aAAaisC,KAAKJ,GAAUA,EAAO,KAC9DH,EAAYoB,QAAQ,gBACpB9sC,EAAO,gBACPyT,EAAU,KAEN,WAAWq2B,KAAK2C,IAClBF,EAAe,QACfE,EAAK,YAELA,EAAK,MAIA,kBAAkB3C,KAAK9pC,KAAUyT,IACxCA,EAAUm5B,EAAW,WAGnBn5B,GAA2D,GAAhDA,EAAQ9H,QAASgC,EAAO,UAAUs+B,KAAKQ,KAClDnC,EAAG3+B,QAAQ,IAAMgC,EAAO,MAAQ,IAClC8+B,EAAK9Z,EAAK8Z,EAAG7Z,QAAQjlB,EAAM,MAGzB8+B,IAA2B,GAArBA,EAAG9gC,QAAQ3L,KAAgB+rC,OAAO/rC,EAAO,OAAO8pC,KAAK2C,KAC7DA,EAAKA,EAAG7Z,QAAQmZ,OAAO,KAAO7B,EAAQlqC,GAAQ,MAAO,KAGnD6rC,IAAW,qBAAqB/B,KAAK9pC,KACrC,4BAA4B8pC,KAAK9pC,IACzB,UAARA,GAAoB,OAAO8pC,KAAK2C,IAAO,aAAa3C,KAAK+B,EAAO,KAChE,6GAA6G/B,KAAK9pC,IAAS6rC,EAAO,MAEnIl+B,EAAOk+B,EAAOA,EAAOnqC,OAAS,KAAOgqC,EAAY9/B,KAAK+B,GAGrD+9B,EAAYhqC,SACdgqC,EAAc,CAAC,IAAMA,EAAY7iB,KAAK,MAAQ,MAG5C0jB,GAAgBF,GAAWA,EAAQ1gC,QAAQ4gC,GAAgB,GAC7Db,EAAY9/B,KAAK,MAAQ2gC,GAGvBF,GACFX,EAAY9/B,MAAM,OAAOk+B,KAAK4B,EAAYA,EAAYhqC,OAAS,IAAM,GAAK,OAAS2qC,GAGjFI,IACF9+B,EAAO,cAAcs+B,KAAKQ,GAC1B9B,EAAmBh9B,GAAqD,KAA7C8+B,EAAGjsB,OAAOisB,EAAG/qC,OAASiM,EAAK,GAAGjM,OAAS,GAClE+qC,EAAK,CACH,aAAgB,GAChB,OAAW9+B,IAASg9B,EAAoB8B,EAAG7Z,QAAQjlB,EAAK,GAAI,IAAM8+B,EAClE,QAAW9+B,EAAOA,EAAK,GAAK,KAC5B,SAAY,WACV,IAAI8F,EAAU5D,KAAK4D,QACnB,OAAO5D,KAAKo+B,QAAWx6B,IAAYk3B,EAAoB,IAAMl3B,EAAU,KAA4B,IAArB5D,KAAKq+B,aAAqB,UAAY,QAKrHvgC,EAAO,mCAAmCs+B,KAAKR,MAAW,YAAY3B,KAAK2B,IAC1EgB,IACFA,EAAGyB,aAAe,GAClBzB,EAAGwB,OAASxB,EAAGwB,OAAOrb,QAAQmZ,OAAO,KAAOp+B,GAAO,KAGjD3N,IAAS,aAAa8pC,KAAKQ,IAC1BsB,GAAe,eAAe9B,KAAKU,EAAI2D,UAAY3D,EAAI/J,YAAc,kBAAkBqJ,KAAKQ,KAE/FoB,EAAYoB,QAAQ,WAKpBL,GAAM,QAAQ3C,KAAK2C,EAAGwB,SACd,UAARjuC,GAAoB+sC,WAAWt5B,IAAY,KAE7Cg5B,EAAGyB,aAAe,IAGpB5D,IAAOA,EAAK,MAUZ,IAAI7J,EAAW,GAoJf,OA5IAA,EAASiL,YAAcpB,EAWvB7J,EAASoL,OAASA,GAAUA,EAAO,GAanCpL,EAAS8L,aAAeA,EAgBxB9L,EAASzgC,KAAOA,EAQhBygC,EAASkL,WAAaA,EAatBlL,EAAS4L,QAAUA,EAQnB5L,EAAS6J,GAAKA,EAQd7J,EAAShtB,QAAUzT,GAAQyT,EAQ3BgtB,EAASgM,GAAKA,GAAM,CAQlB,aAAgB,KAahB,OAAU,KAQV,QAAW,KAQX,SAAY,WAAa,MAAO,SAGlChM,EAAS4J,MAAQA,EACjB5J,EAASrvB,SAjlBT,WACE,OAAOvB,KAAK67B,aAAe,IAklBzBjL,EAAShtB,SACXi4B,EAAYoB,QAAQr5B,GAElBgtB,EAASzgC,MACX0rC,EAAYoB,QAAQ9sC,GAElBysC,GAAMzsC,IAAUysC,GAAM5tB,OAAO4tB,GAAIjgC,MAAM,KAAK,IAAOigC,GAAMzsC,EAAKwM,MAAM,KAAK,KAAM6/B,IACjFX,EAAY9/B,KAAKygC,EAAU,IAAMI,EAAK,IAAM,MAAQA,GAElDf,EAAYhqC,SACd++B,EAASiL,YAAcA,EAAY7iB,KAAK,MAEnC4X,EAMM4J,GAObvrC,EAAK2hC,SAAWA,OAKf,KAFD,aACE,OAAOA,GACR,gCAaH7gC,KAAKiQ,Q,4CC3uCP,YA4BA,SAASu+B,EAAeC,EAAOC,GAG7B,IADA,IAAIC,EAAK,EACAlvC,EAAIgvC,EAAM3sC,OAAS,EAAGrC,GAAK,EAAGA,IAAK,CAC1C,IAAImvC,EAAOH,EAAMhvC,GACJ,MAATmvC,EACFH,EAAMjsC,OAAO/C,EAAG,GACE,OAATmvC,GACTH,EAAMjsC,OAAO/C,EAAG,GAChBkvC,KACSA,IACTF,EAAMjsC,OAAO/C,EAAG,GAChBkvC,KAKJ,GAAID,EACF,KAAOC,IAAMA,EACXF,EAAMvB,QAAQ,MAIlB,OAAOuB,EA0OT,SAASlgC,EAAQsgC,EAAI5rB,GACjB,GAAI4rB,EAAGtgC,OAAQ,OAAOsgC,EAAGtgC,OAAO0U,GAEhC,IADA,IAAI7U,EAAM,GACD3O,EAAI,EAAGA,EAAIovC,EAAG/sC,OAAQrC,IACvBwjB,EAAE4rB,EAAGpvC,GAAIA,EAAGovC,IAAKzgC,EAAIpC,KAAK6iC,EAAGpvC,IAErC,OAAO2O,EA3OXhP,EAAQ0Y,QAAU,WAIhB,IAHA,IAAIg3B,EAAe,GACfC,GAAmB,EAEdtvC,EAAIkvB,UAAU7sB,OAAS,EAAGrC,IAAM,IAAMsvC,EAAkBtvC,IAAK,CACpE,IAAIuvC,EAAQvvC,GAAK,EAAKkvB,UAAUlvB,GAAKof,EAAQ4hB,MAG7C,GAAoB,iBAATuO,EACT,MAAM,IAAI5jC,UAAU,6CACV4jC,IAIZF,EAAeE,EAAO,IAAMF,EAC5BC,EAAsC,MAAnBC,EAAKpuB,OAAO,IAWjC,OAASmuB,EAAmB,IAAM,KAJlCD,EAAeN,EAAejgC,EAAOugC,EAAaliC,MAAM,MAAM,SAASjL,GACrE,QAASA,MACNotC,GAAkB9lB,KAAK,OAE6B,KAK3D7pB,EAAQ6vC,UAAY,SAASD,GAC3B,IAAIE,EAAa9vC,EAAQ8vC,WAAWF,GAChCG,EAAqC,MAArBljB,EAAO+iB,GAAO,GAclC,OAXAA,EAAOR,EAAejgC,EAAOygC,EAAKpiC,MAAM,MAAM,SAASjL,GACrD,QAASA,MACNutC,GAAYjmB,KAAK,OAERimB,IACZF,EAAO,KAELA,GAAQG,IACVH,GAAQ,MAGFE,EAAa,IAAM,IAAMF,GAInC5vC,EAAQ8vC,WAAa,SAASF,GAC5B,MAA0B,MAAnBA,EAAKpuB,OAAO,IAIrBxhB,EAAQ6pB,KAAO,WACb,IAAImmB,EAAQ5rC,MAAM/B,UAAU6H,MAAMtJ,KAAK2uB,UAAW,GAClD,OAAOvvB,EAAQ6vC,UAAU1gC,EAAO6gC,GAAO,SAASztC,EAAGiC,GACjD,GAAiB,iBAANjC,EACT,MAAM,IAAIyJ,UAAU,0CAEtB,OAAOzJ,KACNsnB,KAAK,OAMV7pB,EAAQiwC,SAAW,SAASj+B,EAAMk+B,GAIhC,SAASvc,EAAK1H,GAEZ,IADA,IAAIriB,EAAQ,EACLA,EAAQqiB,EAAIvpB,QACE,KAAfupB,EAAIriB,GADiBA,KAK3B,IADA,IAAIC,EAAMoiB,EAAIvpB,OAAS,EAChBmH,GAAO,GACK,KAAboiB,EAAIpiB,GADOA,KAIjB,OAAID,EAAQC,EAAY,GACjBoiB,EAAI/hB,MAAMN,EAAOC,EAAMD,EAAQ,GAfxCoI,EAAOhS,EAAQ0Y,QAAQ1G,GAAM6a,OAAO,GACpCqjB,EAAKlwC,EAAQ0Y,QAAQw3B,GAAIrjB,OAAO,GAsBhC,IALA,IAAIsjB,EAAYxc,EAAK3hB,EAAKxE,MAAM,MAC5B4iC,EAAUzc,EAAKuc,EAAG1iC,MAAM,MAExB9K,EAASuB,KAAKwpB,IAAI0iB,EAAUztC,OAAQ0tC,EAAQ1tC,QAC5C2tC,EAAkB3tC,EACbrC,EAAI,EAAGA,EAAIqC,EAAQrC,IAC1B,GAAI8vC,EAAU9vC,KAAO+vC,EAAQ/vC,GAAI,CAC/BgwC,EAAkBhwC,EAClB,MAIJ,IAAIiwC,EAAc,GAClB,IAASjwC,EAAIgwC,EAAiBhwC,EAAI8vC,EAAUztC,OAAQrC,IAClDiwC,EAAY1jC,KAAK,MAKnB,OAFA0jC,EAAcA,EAAYphB,OAAOkhB,EAAQlmC,MAAMmmC,KAE5BxmB,KAAK,MAG1B7pB,EAAQuwC,IAAM,IACdvwC,EAAQwwC,UAAY,IAEpBxwC,EAAQywC,QAAU,SAAUb,GAE1B,GADoB,iBAATA,IAAmBA,GAAc,IACxB,IAAhBA,EAAKltC,OAAc,MAAO,IAK9B,IAJA,IAAI4wB,EAAOsc,EAAK3iB,WAAW,GACvByjB,EAAmB,KAATpd,EACVzpB,GAAO,EACP8mC,GAAe,EACVtwC,EAAIuvC,EAAKltC,OAAS,EAAGrC,GAAK,IAAKA,EAEtC,GAAa,MADbizB,EAAOsc,EAAK3iB,WAAW5sB,KAEnB,IAAKswC,EAAc,CACjB9mC,EAAMxJ,EACN,YAIJswC,GAAe,EAInB,OAAa,IAAT9mC,EAAmB6mC,EAAU,IAAM,IACnCA,GAAmB,IAAR7mC,EAGN,IAEF+lC,EAAK1lC,MAAM,EAAGL,IAiCvB7J,EAAQ4wC,SAAW,SAAUhB,EAAMvf,GACjC,IAAIxM,EA/BN,SAAkB+rB,GACI,iBAATA,IAAmBA,GAAc,IAE5C,IAGIvvC,EAHAuJ,EAAQ,EACRC,GAAO,EACP8mC,GAAe,EAGnB,IAAKtwC,EAAIuvC,EAAKltC,OAAS,EAAGrC,GAAK,IAAKA,EAClC,GAA2B,KAAvBuvC,EAAK3iB,WAAW5sB,IAGhB,IAAKswC,EAAc,CACjB/mC,EAAQvJ,EAAI,EACZ,YAEgB,IAATwJ,IAGX8mC,GAAe,EACf9mC,EAAMxJ,EAAI,GAId,OAAa,IAATwJ,EAAmB,GAChB+lC,EAAK1lC,MAAMN,EAAOC,GAMjB+mC,CAAShB,GAIjB,OAHIvf,GAAOxM,EAAEgJ,QAAQ,EAAIwD,EAAI3tB,UAAY2tB,IACvCxM,EAAIA,EAAEgJ,OAAO,EAAGhJ,EAAEnhB,OAAS2tB,EAAI3tB,SAE1BmhB,GAGT7jB,EAAQ6wC,QAAU,SAAUjB,GACN,iBAATA,IAAmBA,GAAc,IAQ5C,IAPA,IAAIkB,GAAY,EACZC,EAAY,EACZlnC,GAAO,EACP8mC,GAAe,EAGfK,EAAc,EACT3wC,EAAIuvC,EAAKltC,OAAS,EAAGrC,GAAK,IAAKA,EAAG,CACzC,IAAIizB,EAAOsc,EAAK3iB,WAAW5sB,GAC3B,GAAa,KAATizB,GASS,IAATzpB,IAGF8mC,GAAe,EACf9mC,EAAMxJ,EAAI,GAEC,KAATizB,GAEkB,IAAdwd,EACFA,EAAWzwC,EACY,IAAhB2wC,IACPA,EAAc,IACK,IAAdF,IAGTE,GAAe,QArBb,IAAKL,EAAc,CACjBI,EAAY1wC,EAAI,EAChB,OAuBR,OAAkB,IAAdywC,IAA4B,IAATjnC,GAEH,IAAhBmnC,GAEgB,IAAhBA,GAAqBF,IAAajnC,EAAM,GAAKinC,IAAaC,EAAY,EACjE,GAEFnB,EAAK1lC,MAAM4mC,EAAUjnC,IAa9B,IAAIgjB,EAA6B,MAApB,KAAKA,QAAQ,GACpB,SAAU/a,EAAKlI,EAAO8a,GAAO,OAAO5S,EAAI+a,OAAOjjB,EAAO8a,IACtD,SAAU5S,EAAKlI,EAAO8a,GAEpB,OADI9a,EAAQ,IAAGA,EAAQkI,EAAIpP,OAASkH,GAC7BkI,EAAI+a,OAAOjjB,EAAO8a,M,8HCnSjC,+BA0BA,OAvBE,YAAA6W,WAAA,SAAWC,GACT3qB,KAAK4c,IAAM+N,EAAWE,SAAS,OAAQ,sBACvC7qB,KAAK3M,IAAMs3B,EAAWE,SAAS,MAAO,uBAGxC,YAAAI,YAAA,SAAYr5B,GACV,SAAKA,GAA4B,IAAlBA,EAAOC,SAIfmO,KAAKkrB,gBAAgBt5B,IAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GACxB,MAAuB,YAAnBA,EAAO,GAAG8C,MAAyC,YAAnB9C,EAAO,GAAG8C,MASlD,EA1BA,GAAsB,EAAA0rC,Q,sGCCtB,0BAA+BtoB,GAC7B,IAAMjE,EAAMiE,EAAcjmB,OAC1B,OAAOimB,EAAcze,MAAM,EAAGwa,EAAM,GAAGwK,OAAOvG,EAAcjE,EAAM,GAAK,K,8gCCNzE,WAGA,WAMA,aAEE,WAAY/V,EAAmCpJ,EAAY3C,GACzD,IAAMsuC,EAAetuC,GAAc,CAAC+L,EAAKjM,QAErC0B,MAAM4M,QAAQrC,IAAkB,WAATpJ,EACZ,YAATA,EAEFsL,KAAKlC,KAAO+E,aAAa1B,KAAKrD,GACZ,SAATpJ,EAITsL,KAAKlC,KAAO,IAAIyE,WAAWzE,GACT,UAATpJ,IAETsL,KAAKlC,KAAO6E,WAAWxB,KAAKrD,IAG9BkC,KAAKlC,KAAOA,EAGdkC,KAAKjO,KAAOsuC,EACZrgC,KAAKtL,KAAOA,EACZsL,KAAKsgC,eAAiB,IAAI,SAAetgC,KAAKjO,KAAMiO,KAAKtL,UAAM/B,OAAWA,EAAWqN,KAAKlC,MAC1FkC,KAAKxL,KAAOwL,KAAKsgC,eAAe9rC,KAiEpC,OAxDE,YAAA/D,IAAA,SAAI+I,G,IAAJ,WAA4C,oDAC1C,IAAI+mC,EAAoC,GACxC,GAAuB,iBAAZ/mC,EACT+mC,EAAa,EAAH,CAAI/mC,GAAYrE,OACrB,KAAIqE,EAGT,MAAM,IAAIxD,MAAM,oCAFhBuqC,EAAa/mC,EAMf,GADAgnC,EAAMC,gBAAgBF,GAClBA,EAAW1uC,SAAWmO,KAAKjO,KAAKF,OAClC,MAAM,IAAIqO,WAAW,uDAGvBqgC,EAAWjjC,SAAQ,SAAC/E,EAAamoC,GAC/B,GAAInoC,GAAO,EAAKxG,KAAK2uC,GACnB,MAAM,IAAIxgC,WAAW,0DAGzB,IAAMrP,EAAQmP,KAAKsgC,eAAe7vC,IAAI8vC,GACtC,MAAkB,SAAdvgC,KAAKtL,KACU,IAAV7D,EAEFA,GAIT,YAAA8D,IAAA,SAAI9D,EAAoB2I,G,IAAxB,WAAgE,oDAC9DgnC,EAAMG,iBAAiB3gC,KAAKtL,KAAM7D,GAClC,IAAI0vC,EAAoC,GACxC,GAAuB,iBAAZ/mC,EACT+mC,EAAa,EAAH,CAAI/mC,GAAYrE,OACrB,KAAIqE,EAGT,MAAM,IAAIxD,MAAM,mCAFhBuqC,EAAa/mC,EAMf,GADAgnC,EAAMC,gBAAgBF,GAClBA,EAAW1uC,SAAWmO,KAAKjO,KAAKF,OAClC,MAAM,IAAIqO,WAAW,uDAGvBqgC,EAAWjjC,SAAQ,SAAC/E,EAAamoC,GAC/B,GAAInoC,GAAO,EAAKxG,KAAK2uC,GACnB,MAAM,IAAIxgC,WAAW,0DAIJ,kBAAVrP,EACTmP,KAAKsgC,eAAe3rC,IAAI4rC,EAAY1vC,EAAQ,EAAI,GAEhDmP,KAAKsgC,eAAe3rC,IAAI4rC,EAAY1vC,IAG1C,EA1FA,GAAa,EAAA4D,U,ueCXb,WAEA,QAEA,8BAAmC6rC,GACjC,OAAQA,EAAe5rC,MACrB,IAAK,OACH,OAAO,IAAI,SAAU,IAAI6N,WAAW+9B,EAAenpB,aAAc,OAAQmpB,EAAevuC,MAC1F,IAAK,UACH,OAAO,IAAI,SAAUuuC,EAAet+B,UAA2B,UAAWs+B,EAAevuC,MAC3F,IAAK,UACH,OAAO,IAAI,SAAU,IAAI8Q,aAAay9B,EAAet+B,WAAY,UAAWs+B,EAAevuC,MAC7F,IAAK,SACH,OAAO,IAAI,SAAUuuC,EAAet/B,WAAY,SAAUs/B,EAAevuC,MAC3E,IAAK,OACL,IAAK,QACL,IAAK,QACL,IAAK,SACL,IAAK,SACH,OAAO,IAAI,SAAU,IAAI4Q,WAAW29B,EAAenpB,aAAc,QAASmpB,EAAevuC,MAC3F,IAAK,QACH,OAAO,IAAI,SAAUuuC,EAAenpB,YAA2B,QAASmpB,EAAevuC,MACzF,QACE,MAAM,IAAIoJ,UAAU,oCAI1B,4BAAiC8c,GAC/B,OAAO,IAAI,SAAeA,EAAOlmB,KAAMkmB,EAAOvjB,UAAM/B,OAAWA,EAAWslB,EAAOna,OAGnF,4BAAiCpJ,EAA4B2N,GAC3D,cAAeA,GACb,IAAK,SACH,GAAa,WAAT3N,EACF,MAAM,IAAIyG,UAAU,4DAEtB,MACF,IAAK,SACH,GAAa,YAATzG,GAA+B,UAATA,EACxB,MAAM,IAAIyG,UAAU,4DAEtB,GAAa,YAATzG,GAAsB0G,OAAOC,UAAUgH,GACzC,MAAM,IAAIlH,UAAU,4DAEtB,GAAa,UAATzG,IAAqB0G,OAAOC,UAAUgH,GACxC,MAAM,IAAIlH,UAAU,4DAEtB,MACF,IAAK,UACH,GAAa,SAATzG,EACF,MAAM,IAAIyG,UAAU,4DAEtB,MACF,QACE,MAAM,IAAIA,UAAU,4CAI1B,2BAAgC3B,G,QAC9B,GAAIA,EAAQ3H,OAAS,EACnB,MAAM,IAAIqO,WAAW,mD,IAEvB,IAAgB,QAAA1G,GAAO,8BAAE,CAApB,IAAMnI,EAAC,QACV,IAAK+J,OAAOC,UAAUhK,GACpB,MAAM,IAAI8J,UAAU,kBAAkB9J,EAAC,sBAEzC,GAAIA,EAAI,GAAKA,EAAI,WACf,MAAM,IAAI8J,UAAU,yBAAyB9J,EAAC,oB,4fCpEpD,YACA,SACA,SAGA,SAGA,YACA,YACA,YACA,YAEa,EAAAs/B,QAAmB,CAC9BiQ,IAAK,IAAI,EAAAC,WACT3d,KAAM,IAAI,EAAA4d,YACVC,MAAO,IAAI,EAAAC,cAGA,EAAAC,IAAmB,EAAAC,S,kGCfhC,YAIA,2BAUA,OAPE,YAAAxW,WAAA,WACE,OAAO,GAET,YAAAyW,qBAAA,SAAqBt1B,GACnB,OAAO,IAAI,EAAAu1B,kBAAkBphC,KAAM6L,IAErC,YAAAw1B,QAAA,aACF,EAVA,GAAa,EAAAR,c,yGCLb,YAGA,QACA,QAEA,aACE,WAAqBlQ,EAA2B9kB,GAA3B,KAAA8kB,UAA2B,KAAA9kB,UAalD,OAXE,YAAAy1B,uBAAA,WACE,OAAO,IAAI,EAAAC,oBAAoBvhC,KAAMA,KAAK6L,QAAQ21B,WAGpD,YAAAH,QAAA,aAEA,YAAAx5B,QAAA,SAAQsE,EAAkBuM,EAA8B/C,GACtD,IAAMxhB,EAAK,EAAAstC,gBAAgBt1B,EAAMuM,EAAQ,EAAAsY,sBAEzC,OADA78B,EAAGu2B,WAAWve,EAAKwe,WAAYxe,EAAMwJ,GAC9BxhB,GAEX,EAdA,GAAa,EAAAitC,qB,2GCJb,iBACE,WAA4BM,EAA4CF,GAA5C,KAAAE,UAA4C,KAAAF,WAG1E,OADE,YAAAH,QAAA,aACF,EAJA,GAAa,EAAAE,uB,0bCRb,YACA,OACA,OAGA,2B,+CAKA,OAL+B,OAC7B,YAAAtqB,IAAA,SAAIC,EAAuCtlB,GAEzC,MAAO,CADQ+vC,EAAO/vC,EAAO,GAAIoO,KAAKnH,KAAMmH,KAAK3B,YAGrD,EALA,CAA+B,EAAAujC,QAO/B,SAAgBD,EAAO7nC,EAAWjB,EAAcsE,GAC9C,IAAMjE,EAAOY,EAAE/H,KAAO+H,EAAE/H,KAAKF,OAAS,EACtCgH,EAAO,EAAAvE,UAAUoF,cAAcb,EAAMK,GAQrC,IAPA,IAAM0C,EAAa,EAAA4B,WAAWC,gBAAgB3D,EAAE/H,KAAM,CAAC8G,IAAO,GACxDsyB,EAAIrxB,EAAEgE,KACN+jC,EAAI,IAAIl/B,WAAW,EAAArO,UAAUE,KAAKoH,IAClC7F,EAAY,EAAAzB,UAAUsE,kBAAkBkB,EAAE/H,KAAM8G,EAAO,GACvDM,EAAU,EAAA7E,UAAU2E,eAAe2C,GACnC8B,EAAe,EAAApJ,UAAU2E,eAAea,EAAE/H,MAC1C4L,EAAW,IAAIpK,MAAMuG,EAAE/H,KAAKF,QACzBrC,EAAI,EAAGA,EAAIqyC,EAAEhwC,OAAQrC,IAAK,CACjC,IAAMgK,EAAU,EAAAlF,UAAUmF,gBAAgBjK,EAAG2J,GAE7C,EAAApF,cAAcC,UAAUwF,EAASM,EAAE/H,KAAM4L,GAIzC,IAHA,IAAM1H,EAAS,EAAA3B,UAAUiF,gBAAgBoE,EAAUD,GAC/CrK,EAAMyG,EAAEgE,KAAK7H,GACbtC,EAAQ,EACHyB,EAAI,EAAGA,EAAI0E,EAAE/H,KAAK8G,KAASzD,EAAG,CACrC,IAAMvE,EAAQs6B,EAAEl1B,EAASb,EAAIW,GACzBlF,EAAQwC,IACVA,EAAMxC,EACN8C,EAAQyB,GAGZysC,EAAEryC,GAAKmE,EAGT,OAAO,IAAI,EAAAc,OACP0I,EAAWvB,EAAa,EAAA4B,WAAWC,gBAAgB3D,EAAE/H,KAAM,CAAC8G,GAAOsE,GAAW,aAASxK,OAAWA,EAAWkvC,GAnCtG,EAAApQ,YAOb,Y,8FCPA,WAGA,2BA0BA,OAvBE,YAAA/G,WAAA,SAAWC,GACT3qB,KAAKnH,KAAO8xB,EAAWK,OAAO,OAAQ,GACtChrB,KAAK3B,SAAgD,IAArCssB,EAAWK,OAAO,WAAY,IAGhD,YAAAC,YAAA,SAAYr5B,GACV,SAAKA,GAA4B,IAAlBA,EAAOC,SAIfmO,KAAKkrB,gBAAgBt5B,IAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GACxB,OAA8C,IAA1C,EAAA0Z,aAAaxP,QAAQlK,EAAO,GAAG8C,OASvC,EA1BA,GAAsB,EAAAktC,U,6BCNtBzyC,EAAQmS,WAuCR,SAAqBwgC,GACnB,IAAIC,EAAOC,EAAQF,GACfG,EAAWF,EAAK,GAChBG,EAAkBH,EAAK,GAC3B,OAAuC,GAA9BE,EAAWC,GAAuB,EAAKA,GA1ClD/yC,EAAQ0zB,YAiDR,SAAsBif,GACpB,IAAIK,EAcA3yC,EAbAuyC,EAAOC,EAAQF,GACfG,EAAWF,EAAK,GAChBG,EAAkBH,EAAK,GAEvB3mB,EAAM,IAAIgnB,EAVhB,SAAsBN,EAAKG,EAAUC,GACnC,OAAuC,GAA9BD,EAAWC,GAAuB,EAAKA,EAS9BG,CAAYP,EAAKG,EAAUC,IAEzCI,EAAU,EAGVzuB,EAAMquB,EAAkB,EACxBD,EAAW,EACXA,EAGJ,IAAKzyC,EAAI,EAAGA,EAAIqkB,EAAKrkB,GAAK,EACxB2yC,EACGI,EAAUT,EAAI1lB,WAAW5sB,KAAO,GAChC+yC,EAAUT,EAAI1lB,WAAW5sB,EAAI,KAAO,GACpC+yC,EAAUT,EAAI1lB,WAAW5sB,EAAI,KAAO,EACrC+yC,EAAUT,EAAI1lB,WAAW5sB,EAAI,IAC/B4rB,EAAIknB,KAAcH,GAAO,GAAM,IAC/B/mB,EAAIknB,KAAcH,GAAO,EAAK,IAC9B/mB,EAAIknB,KAAmB,IAANH,EAGK,IAApBD,IACFC,EACGI,EAAUT,EAAI1lB,WAAW5sB,KAAO,EAChC+yC,EAAUT,EAAI1lB,WAAW5sB,EAAI,KAAO,EACvC4rB,EAAIknB,KAAmB,IAANH,GAGK,IAApBD,IACFC,EACGI,EAAUT,EAAI1lB,WAAW5sB,KAAO,GAChC+yC,EAAUT,EAAI1lB,WAAW5sB,EAAI,KAAO,EACpC+yC,EAAUT,EAAI1lB,WAAW5sB,EAAI,KAAO,EACvC4rB,EAAIknB,KAAcH,GAAO,EAAK,IAC9B/mB,EAAIknB,KAAmB,IAANH,GAGnB,OAAO/mB,GA3FTjsB,EAAQwtB,cAkHR,SAAwB6lB,GAQtB,IAPA,IAAIL,EACAtuB,EAAM2uB,EAAM3wC,OACZ4wC,EAAa5uB,EAAM,EACnB2qB,EAAQ,GAIHhvC,EAAI,EAAGkzC,EAAO7uB,EAAM4uB,EAAYjzC,EAAIkzC,EAAMlzC,GAH9B,MAInBgvC,EAAMziC,KAAK4mC,EACTH,EAAOhzC,EAAIA,EALM,MAKgBkzC,EAAOA,EAAQlzC,EAL/B,QAUF,IAAfizC,GACFN,EAAMK,EAAM3uB,EAAM,GAClB2qB,EAAMziC,KACJ6mC,EAAOT,GAAO,GACdS,EAAQT,GAAO,EAAK,IACpB,OAEsB,IAAfM,IACTN,GAAOK,EAAM3uB,EAAM,IAAM,GAAK2uB,EAAM3uB,EAAM,GAC1C2qB,EAAMziC,KACJ6mC,EAAOT,GAAO,IACdS,EAAQT,GAAO,EAAK,IACpBS,EAAQT,GAAO,EAAK,IACpB,MAIJ,OAAO3D,EAAMxlB,KAAK,KA3IpB,IALA,IAAI4pB,EAAS,GACTL,EAAY,GACZH,EAA4B,oBAAf7/B,WAA6BA,WAAahP,MAEvDkvB,EAAO,mEACFjzB,EAAI,EAAGqkB,EAAM4O,EAAK5wB,OAAQrC,EAAIqkB,IAAOrkB,EAC5CozC,EAAOpzC,GAAKizB,EAAKjzB,GACjB+yC,EAAU9f,EAAKrG,WAAW5sB,IAAMA,EAQlC,SAASwyC,EAASF,GAChB,IAAIjuB,EAAMiuB,EAAIjwC,OAEd,GAAIgiB,EAAM,EAAI,EACZ,MAAM,IAAI7d,MAAM,kDAKlB,IAAIisC,EAAWH,EAAIhmC,QAAQ,KAO3B,OANkB,IAAdmmC,IAAiBA,EAAWpuB,GAMzB,CAACouB,EAJcA,IAAapuB,EAC/B,EACA,EAAKouB,EAAW,GAsEtB,SAASU,EAAaH,EAAOzpC,EAAOC,GAGlC,IAFA,IAAImpC,EARoBU,EASpB5+B,EAAS,GACJzU,EAAIuJ,EAAOvJ,EAAIwJ,EAAKxJ,GAAK,EAChC2yC,GACIK,EAAMhzC,IAAM,GAAM,WAClBgzC,EAAMhzC,EAAI,IAAM,EAAK,QACP,IAAfgzC,EAAMhzC,EAAI,IACbyU,EAAOlI,KAdF6mC,GADiBC,EAeMV,IAdT,GAAK,IACxBS,EAAOC,GAAO,GAAK,IACnBD,EAAOC,GAAO,EAAI,IAClBD,EAAa,GAANC,IAaT,OAAO5+B,EAAO+U,KAAK,IAjGrBupB,EAAU,IAAInmB,WAAW,IAAM,GAC/BmmB,EAAU,IAAInmB,WAAW,IAAM,I,cCnB/BjtB,EAAQqsB,KAAO,SAAUpa,EAAQnL,EAAQ6sC,EAAMC,EAAMC,GACnD,IAAI96B,EAAGlY,EACHizC,EAAiB,EAATD,EAAcD,EAAO,EAC7BG,GAAQ,GAAKD,GAAQ,EACrBE,EAAQD,GAAQ,EAChBE,GAAS,EACT5zC,EAAIszC,EAAQE,EAAS,EAAK,EAC1B9yC,EAAI4yC,GAAQ,EAAI,EAChBnxC,EAAIyP,EAAOnL,EAASzG,GAOxB,IALAA,GAAKU,EAELgY,EAAIvW,GAAM,IAAOyxC,GAAU,EAC3BzxC,KAAQyxC,EACRA,GAASH,EACFG,EAAQ,EAAGl7B,EAAS,IAAJA,EAAW9G,EAAOnL,EAASzG,GAAIA,GAAKU,EAAGkzC,GAAS,GAKvE,IAHApzC,EAAIkY,GAAM,IAAOk7B,GAAU,EAC3Bl7B,KAAQk7B,EACRA,GAASL,EACFK,EAAQ,EAAGpzC,EAAS,IAAJA,EAAWoR,EAAOnL,EAASzG,GAAIA,GAAKU,EAAGkzC,GAAS,GAEvE,GAAU,IAANl7B,EACFA,EAAI,EAAIi7B,MACH,IAAIj7B,IAAMg7B,EACf,OAAOlzC,EAAIqzC,IAAsB1gB,KAAdhxB,GAAK,EAAI,GAE5B3B,GAAQoD,KAAKgJ,IAAI,EAAG2mC,GACpB76B,GAAQi7B,EAEV,OAAQxxC,GAAK,EAAI,GAAK3B,EAAIoD,KAAKgJ,IAAI,EAAG8L,EAAI66B,IAG5C5zC,EAAQ0qB,MAAQ,SAAUzY,EAAQvQ,EAAOoF,EAAQ6sC,EAAMC,EAAMC,GAC3D,IAAI96B,EAAGlY,EAAGC,EACNgzC,EAAiB,EAATD,EAAcD,EAAO,EAC7BG,GAAQ,GAAKD,GAAQ,EACrBE,EAAQD,GAAQ,EAChBI,EAAe,KAATP,EAAc3vC,KAAKgJ,IAAI,GAAI,IAAMhJ,KAAKgJ,IAAI,GAAI,IAAM,EAC1D5M,EAAIszC,EAAO,EAAKE,EAAS,EACzB9yC,EAAI4yC,EAAO,GAAK,EAChBnxC,EAAId,EAAQ,GAAgB,IAAVA,GAAe,EAAIA,EAAQ,EAAK,EAAI,EAmC1D,IAjCAA,EAAQuC,KAAK+9B,IAAItgC,GAEb0nB,MAAM1nB,IAAUA,IAAU8xB,KAC5B3yB,EAAIuoB,MAAM1nB,GAAS,EAAI,EACvBqX,EAAIg7B,IAEJh7B,EAAI9U,KAAKiC,MAAMjC,KAAKmR,IAAI1T,GAASuC,KAAK+1B,KAClCt4B,GAASZ,EAAImD,KAAKgJ,IAAI,GAAI8L,IAAM,IAClCA,IACAjY,GAAK,IAGLY,GADEqX,EAAIi7B,GAAS,EACNG,EAAKrzC,EAELqzC,EAAKlwC,KAAKgJ,IAAI,EAAG,EAAI+mC,IAEpBlzC,GAAK,IACfiY,IACAjY,GAAK,GAGHiY,EAAIi7B,GAASD,GACflzC,EAAI,EACJkY,EAAIg7B,GACKh7B,EAAIi7B,GAAS,GACtBnzC,GAAMa,EAAQZ,EAAK,GAAKmD,KAAKgJ,IAAI,EAAG2mC,GACpC76B,GAAQi7B,IAERnzC,EAAIa,EAAQuC,KAAKgJ,IAAI,EAAG+mC,EAAQ,GAAK/vC,KAAKgJ,IAAI,EAAG2mC,GACjD76B,EAAI,IAID66B,GAAQ,EAAG3hC,EAAOnL,EAASzG,GAAS,IAAJQ,EAAUR,GAAKU,EAAGF,GAAK,IAAK+yC,GAAQ,GAI3E,IAFA76B,EAAKA,GAAK66B,EAAQ/yC,EAClBizC,GAAQF,EACDE,EAAO,EAAG7hC,EAAOnL,EAASzG,GAAS,IAAJ0Y,EAAU1Y,GAAKU,EAAGgY,GAAK,IAAK+6B,GAAQ,GAE1E7hC,EAAOnL,EAASzG,EAAIU,IAAU,IAAJyB,I,cClF5B,IAAI4P,EAAW,GAAGA,SAElBnS,EAAOD,QAAUoE,MAAM4M,SAAW,SAAUib,GAC1C,MAA6B,kBAAtB7Z,EAASxR,KAAKqrB,K,6BCAvBhsB,EAAOD,QAAU,EAAQ,K,6BCFzB,IAAIo0C,EAAWp0C,EA2Bf,SAASq0C,IACLD,EAASr2B,KAAKsE,aACd+xB,EAAStxB,OAAOT,WAAW+xB,EAASjO,cACpCiO,EAASxxB,OAAOP,WAAW+xB,EAASzM,cAtBxCyM,EAASE,MAAQ,UAGjBF,EAAStxB,OAAe,EAAQ,IAChCsxB,EAASjO,aAAe,EAAQ,IAChCiO,EAASxxB,OAAe,EAAQ,IAChCwxB,EAASzM,aAAe,EAAQ,IAGhCyM,EAASr2B,KAAe,EAAQ,GAChCq2B,EAASG,IAAe,EAAQ,IAChCH,EAASnxB,MAAe,EAAQ,IAChCmxB,EAASC,UAAeA,EAcxBA,K,6BClCAp0C,EAAOD,QAmBP,SAAmBqmC,EAAImO,GACnB,IAAI54B,EAAU,IAAIxX,MAAMmrB,UAAU7sB,OAAS,GACvCoE,EAAU,EACVtC,EAAU,EACViwC,GAAU,EACd,KAAOjwC,EAAQ+qB,UAAU7sB,QACrBkZ,EAAO9U,KAAYyoB,UAAU/qB,KACjC,OAAO,IAAIiU,SAAQ,SAAkBC,EAASC,GAC1CiD,EAAO9U,GAAU,SAAkBuU,GAC/B,GAAIo5B,EAEA,GADAA,GAAU,EACNp5B,EACA1C,EAAO0C,OACN,CAGD,IAFA,IAAIO,EAAS,IAAIxX,MAAMmrB,UAAU7sB,OAAS,GACtCoE,EAAS,EACNA,EAAS8U,EAAOlZ,QACnBkZ,EAAO9U,KAAYyoB,UAAUzoB,GACjC4R,EAAQyV,MAAM,KAAMvS,KAIhC,IACIyqB,EAAGlY,MAAMqmB,GAAO,KAAM54B,GACxB,MAAOP,GACDo5B,IACAA,GAAU,EACV97B,EAAO0C,U,6BCxCvB,IAAIsD,EAAS3e,EAOb2e,EAAOjc,OAAS,SAAgBuhB,GAC5B,IAAI1hB,EAAI0hB,EAAOvhB,OACf,IAAKH,EACD,OAAO,EAEX,IADA,IAAIL,EAAI,IACCK,EAAI,EAAI,GAA0B,MAArB0hB,EAAOzC,OAAOjf,MAC9BL,EACN,OAAO+B,KAAK81B,KAAqB,EAAhB9V,EAAOvhB,QAAc,EAAIR,GAU9C,IANA,IAAIywC,EAAM,IAAIvuC,MAAM,IAGhBswC,EAAM,IAAItwC,MAAM,KAGX/D,EAAI,EAAGA,EAAI,IAChBq0C,EAAI/B,EAAItyC,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,EAAIA,EAAI,GAAK,IAAMA,IASrFse,EAAOmF,OAAS,SAAgB7R,EAAQrI,EAAOC,GAM3C,IALA,IAIIlI,EAJA0tC,EAAQ,KACRsF,EAAQ,GACRt0C,EAAI,EACJ4F,EAAI,EAED2D,EAAQC,GAAK,CAChB,IAAItG,EAAI0O,EAAOrI,KACf,OAAQ3D,GACJ,KAAK,EACD0uC,EAAMt0C,KAAOsyC,EAAIpvC,GAAK,GACtB5B,GAAS,EAAJ4B,IAAU,EACf0C,EAAI,EACJ,MACJ,KAAK,EACD0uC,EAAMt0C,KAAOsyC,EAAIhxC,EAAI4B,GAAK,GAC1B5B,GAAS,GAAJ4B,IAAW,EAChB0C,EAAI,EACJ,MACJ,KAAK,EACD0uC,EAAMt0C,KAAOsyC,EAAIhxC,EAAI4B,GAAK,GAC1BoxC,EAAMt0C,KAAOsyC,EAAQ,GAAJpvC,GACjB0C,EAAI,EAGR5F,EAAI,QACHgvC,IAAUA,EAAQ,KAAKziC,KAAKiT,OAAOqO,aAAaC,MAAMtO,OAAQ80B,IAC/Dt0C,EAAI,GASZ,OANI4F,IACA0uC,EAAMt0C,KAAOsyC,EAAIhxC,GACjBgzC,EAAMt0C,KAAO,GACH,IAAN4F,IACA0uC,EAAMt0C,KAAO,KAEjBgvC,GACIhvC,GACAgvC,EAAMziC,KAAKiT,OAAOqO,aAAaC,MAAMtO,OAAQ80B,EAAMzqC,MAAM,EAAG7J,KACzDgvC,EAAMxlB,KAAK,KAEfhK,OAAOqO,aAAaC,MAAMtO,OAAQ80B,EAAMzqC,MAAM,EAAG7J,KAa5Dse,EAAO6F,OAAS,SAAgBP,EAAQhS,EAAQnL,GAI5C,IAHA,IAEInF,EAFAiI,EAAQ9C,EACRb,EAAI,EAEC5F,EAAI,EAAGA,EAAI4jB,EAAOvhB,QAAS,CAChC,IAAI5B,EAAImjB,EAAOgJ,WAAW5sB,KAC1B,GAAU,KAANS,GAAYmF,EAAI,EAChB,MACJ,QAAqBzC,KAAhB1C,EAAI4zC,EAAI5zC,IACT,MAAM+F,MAnBI,oBAoBd,OAAQZ,GACJ,KAAK,EACDtE,EAAIb,EACJmF,EAAI,EACJ,MACJ,KAAK,EACDgM,EAAOnL,KAAYnF,GAAK,GAAS,GAAJb,IAAW,EACxCa,EAAIb,EACJmF,EAAI,EACJ,MACJ,KAAK,EACDgM,EAAOnL,MAAiB,GAAJnF,IAAW,GAAS,GAAJb,IAAW,EAC/Ca,EAAIb,EACJmF,EAAI,EACJ,MACJ,KAAK,EACDgM,EAAOnL,MAAiB,EAAJnF,IAAU,EAAIb,EAClCmF,EAAI,GAIhB,GAAU,IAANA,EACA,MAAMY,MA1CQ,oBA2ClB,OAAOC,EAAS8C,GAQpB+U,EAAOmsB,KAAO,SAAc7mB,GACxB,MAAO,mEAAmE6mB,KAAK7mB,K,6BChInF,SAASrF,IAOL/N,KAAK+jC,WAAa,GAftB30C,EAAOD,QAAU4e,EAyBjBA,EAAavc,UAAUq+B,GAAK,SAAYmU,EAAKxO,EAAImO,GAK7C,OAJC3jC,KAAK+jC,WAAWC,KAAShkC,KAAK+jC,WAAWC,GAAO,KAAKjoC,KAAK,CACvDy5B,GAAMA,EACNmO,IAAMA,GAAO3jC,OAEVA,MASX+N,EAAavc,UAAUw+B,IAAM,SAAagU,EAAKxO,GAC3C,QAAY7iC,IAARqxC,EACAhkC,KAAK+jC,WAAa,QAElB,QAAWpxC,IAAP6iC,EACAx1B,KAAK+jC,WAAWC,GAAO,QAGvB,IADA,IAAI1T,EAAYtwB,KAAK+jC,WAAWC,GACvBx0C,EAAI,EAAGA,EAAI8gC,EAAUz+B,QACtBy+B,EAAU9gC,GAAGgmC,KAAOA,EACpBlF,EAAU/9B,OAAO/C,EAAG,KAElBA,EAGlB,OAAOwQ,MASX+N,EAAavc,UAAU2+B,KAAO,SAAc6T,GACxC,IAAI1T,EAAYtwB,KAAK+jC,WAAWC,GAChC,GAAI1T,EAAW,CAGX,IAFA,IAAId,EAAO,GACPhgC,EAAI,EACDA,EAAIkvB,UAAU7sB,QACjB29B,EAAKzzB,KAAK2iB,UAAUlvB,MACxB,IAAKA,EAAI,EAAGA,EAAI8gC,EAAUz+B,QACtBy+B,EAAU9gC,GAAGgmC,GAAGlY,MAAMgT,EAAU9gC,KAAKm0C,IAAKnU,GAElD,OAAOxvB,O,6BCaX,SAAS9Q,EAAQC,GAwNb,MArN4B,oBAAjB0T,aAA8B,WAErC,IAAIohC,EAAM,IAAIphC,aAAa,EAAG,IAC1BqhC,EAAM,IAAI3hC,WAAW0hC,EAAI7iC,QACzBylB,EAAiB,MAAXqd,EAAI,GAEd,SAASC,EAAmBjqB,EAAK5Z,EAAKpC,GAClC+lC,EAAI,GAAK/pB,EACT5Z,EAAIpC,GAAWgmC,EAAI,GACnB5jC,EAAIpC,EAAM,GAAKgmC,EAAI,GACnB5jC,EAAIpC,EAAM,GAAKgmC,EAAI,GACnB5jC,EAAIpC,EAAM,GAAKgmC,EAAI,GAGvB,SAASE,EAAmBlqB,EAAK5Z,EAAKpC,GAClC+lC,EAAI,GAAK/pB,EACT5Z,EAAIpC,GAAWgmC,EAAI,GACnB5jC,EAAIpC,EAAM,GAAKgmC,EAAI,GACnB5jC,EAAIpC,EAAM,GAAKgmC,EAAI,GACnB5jC,EAAIpC,EAAM,GAAKgmC,EAAI,GAQvB,SAASG,EAAkB/jC,EAAKpC,GAK5B,OAJAgmC,EAAI,GAAK5jC,EAAIpC,GACbgmC,EAAI,GAAK5jC,EAAIpC,EAAM,GACnBgmC,EAAI,GAAK5jC,EAAIpC,EAAM,GACnBgmC,EAAI,GAAK5jC,EAAIpC,EAAM,GACZ+lC,EAAI,GAGf,SAASK,EAAkBhkC,EAAKpC,GAK5B,OAJAgmC,EAAI,GAAK5jC,EAAIpC,GACbgmC,EAAI,GAAK5jC,EAAIpC,EAAM,GACnBgmC,EAAI,GAAK5jC,EAAIpC,EAAM,GACnBgmC,EAAI,GAAK5jC,EAAIpC,EAAM,GACZ+lC,EAAI,GAjBf90C,EAAQizB,aAAeyE,EAAKsd,EAAqBC,EAEjDj1C,EAAQkzB,aAAewE,EAAKud,EAAqBD,EAmBjDh1C,EAAQ6xB,YAAc6F,EAAKwd,EAAoBC,EAE/Cn1C,EAAQ8xB,YAAc4F,EAAKyd,EAAoBD,EA9CV,GAiD9B,WAEP,SAASE,EAAmBC,EAAWtqB,EAAK5Z,EAAKpC,GAC7C,IAAIo2B,EAAOpa,EAAM,EAAI,EAAI,EAGzB,GAFIoa,IACApa,GAAOA,GACC,IAARA,EACAsqB,EAAU,EAAItqB,EAAM,EAAmB,EAAqB,WAAY5Z,EAAKpC,QAC5E,GAAIqa,MAAM2B,GACXsqB,EAAU,WAAYlkC,EAAKpC,QAC1B,GAAIgc,EAAM,qBACXsqB,GAAWlQ,GAAQ,GAAK,cAAgB,EAAGh0B,EAAKpC,QAC/C,GAAIgc,EAAM,sBACXsqB,GAAWlQ,GAAQ,GAAKlhC,KAAKqxC,MAAMvqB,EAAM,yBAA4B,EAAG5Z,EAAKpC,OAC5E,CACD,IAAIwmC,EAAWtxC,KAAKiC,MAAMjC,KAAKmR,IAAI2V,GAAO9mB,KAAK+1B,KAE/Cqb,GAAWlQ,GAAQ,GAAKoQ,EAAW,KAAO,GAD0B,QAArDtxC,KAAKqxC,MAAMvqB,EAAM9mB,KAAKgJ,IAAI,GAAIsoC,GAAY,YACI,EAAGpkC,EAAKpC,IAO7E,SAASymC,EAAkBC,EAAUtkC,EAAKpC,GACtC,IAAI2mC,EAAOD,EAAStkC,EAAKpC,GACrBo2B,EAAsB,GAAduQ,GAAQ,IAAU,EAC1BH,EAAWG,IAAS,GAAK,IACzBC,EAAkB,QAAPD,EACf,OAAoB,MAAbH,EACDI,EACAzB,IACA/O,GAAO3R,KACM,IAAb+hB,EACO,qBAAPpQ,EAA+BwQ,EAC/BxQ,EAAOlhC,KAAKgJ,IAAI,EAAGsoC,EAAW,MAAQI,EAAW,SAd3D31C,EAAQizB,aAAemiB,EAAmBnzC,KAAK,KAAM2zC,GACrD51C,EAAQkzB,aAAekiB,EAAmBnzC,KAAK,KAAM4zC,GAgBrD71C,EAAQ6xB,YAAc2jB,EAAkBvzC,KAAK,KAAM6zC,GACnD91C,EAAQ8xB,YAAc0jB,EAAkBvzC,KAAK,KAAM8zC,GAvC5C,GA4CiB,oBAAjBpiC,aAA8B,WAErC,IAAIqiC,EAAM,IAAIriC,aAAa,EAAE,IACzBohC,EAAM,IAAI3hC,WAAW4iC,EAAI/jC,QACzBylB,EAAiB,MAAXqd,EAAI,GAEd,SAASkB,EAAoBlrB,EAAK5Z,EAAKpC,GACnCinC,EAAI,GAAKjrB,EACT5Z,EAAIpC,GAAWgmC,EAAI,GACnB5jC,EAAIpC,EAAM,GAAKgmC,EAAI,GACnB5jC,EAAIpC,EAAM,GAAKgmC,EAAI,GACnB5jC,EAAIpC,EAAM,GAAKgmC,EAAI,GACnB5jC,EAAIpC,EAAM,GAAKgmC,EAAI,GACnB5jC,EAAIpC,EAAM,GAAKgmC,EAAI,GACnB5jC,EAAIpC,EAAM,GAAKgmC,EAAI,GACnB5jC,EAAIpC,EAAM,GAAKgmC,EAAI,GAGvB,SAASmB,EAAoBnrB,EAAK5Z,EAAKpC,GACnCinC,EAAI,GAAKjrB,EACT5Z,EAAIpC,GAAWgmC,EAAI,GACnB5jC,EAAIpC,EAAM,GAAKgmC,EAAI,GACnB5jC,EAAIpC,EAAM,GAAKgmC,EAAI,GACnB5jC,EAAIpC,EAAM,GAAKgmC,EAAI,GACnB5jC,EAAIpC,EAAM,GAAKgmC,EAAI,GACnB5jC,EAAIpC,EAAM,GAAKgmC,EAAI,GACnB5jC,EAAIpC,EAAM,GAAKgmC,EAAI,GACnB5jC,EAAIpC,EAAM,GAAKgmC,EAAI,GAQvB,SAASoB,EAAmBhlC,EAAKpC,GAS7B,OARAgmC,EAAI,GAAK5jC,EAAIpC,GACbgmC,EAAI,GAAK5jC,EAAIpC,EAAM,GACnBgmC,EAAI,GAAK5jC,EAAIpC,EAAM,GACnBgmC,EAAI,GAAK5jC,EAAIpC,EAAM,GACnBgmC,EAAI,GAAK5jC,EAAIpC,EAAM,GACnBgmC,EAAI,GAAK5jC,EAAIpC,EAAM,GACnBgmC,EAAI,GAAK5jC,EAAIpC,EAAM,GACnBgmC,EAAI,GAAK5jC,EAAIpC,EAAM,GACZinC,EAAI,GAGf,SAASI,EAAmBjlC,EAAKpC,GAS7B,OARAgmC,EAAI,GAAK5jC,EAAIpC,GACbgmC,EAAI,GAAK5jC,EAAIpC,EAAM,GACnBgmC,EAAI,GAAK5jC,EAAIpC,EAAM,GACnBgmC,EAAI,GAAK5jC,EAAIpC,EAAM,GACnBgmC,EAAI,GAAK5jC,EAAIpC,EAAM,GACnBgmC,EAAI,GAAK5jC,EAAIpC,EAAM,GACnBgmC,EAAI,GAAK5jC,EAAIpC,EAAM,GACnBgmC,EAAI,GAAK5jC,EAAIpC,EAAM,GACZinC,EAAI,GAzBfh2C,EAAQmzB,cAAgBuE,EAAKue,EAAsBC,EAEnDl2C,EAAQozB,cAAgBsE,EAAKwe,EAAsBD,EA2BnDj2C,EAAQ+xB,aAAe2F,EAAKye,EAAqBC,EAEjDp2C,EAAQgyB,aAAe0F,EAAK0e,EAAqBD,EA9DZ,GAiE9B,WAEP,SAASE,EAAoBhB,EAAWiB,EAAMC,EAAMxrB,EAAK5Z,EAAKpC,GAC1D,IAAIo2B,EAAOpa,EAAM,EAAI,EAAI,EAGzB,GAFIoa,IACApa,GAAOA,GACC,IAARA,EACAsqB,EAAU,EAAGlkC,EAAKpC,EAAMunC,GACxBjB,EAAU,EAAItqB,EAAM,EAAmB,EAAqB,WAAY5Z,EAAKpC,EAAMwnC,QAChF,GAAIntB,MAAM2B,GACbsqB,EAAU,EAAGlkC,EAAKpC,EAAMunC,GACxBjB,EAAU,WAAYlkC,EAAKpC,EAAMwnC,QAC9B,GAAIxrB,EAAM,sBACbsqB,EAAU,EAAGlkC,EAAKpC,EAAMunC,GACxBjB,GAAWlQ,GAAQ,GAAK,cAAgB,EAAGh0B,EAAKpC,EAAMwnC,OACnD,CACH,IAAIZ,EACJ,GAAI5qB,EAAM,uBAENsqB,GADAM,EAAW5qB,EAAM,UACM,EAAG5Z,EAAKpC,EAAMunC,GACrCjB,GAAWlQ,GAAQ,GAAKwQ,EAAW,cAAgB,EAAGxkC,EAAKpC,EAAMwnC,OAC9D,CACH,IAAIhB,EAAWtxC,KAAKiC,MAAMjC,KAAKmR,IAAI2V,GAAO9mB,KAAK+1B,KAC9B,OAAbub,IACAA,EAAW,MAEfF,EAAqB,kBADrBM,EAAW5qB,EAAM9mB,KAAKgJ,IAAI,GAAIsoC,MACY,EAAGpkC,EAAKpC,EAAMunC,GACxDjB,GAAWlQ,GAAQ,GAAKoQ,EAAW,MAAQ,GAAgB,QAAXI,EAAqB,WAAa,EAAGxkC,EAAKpC,EAAMwnC,KAQ5G,SAASC,EAAmBf,EAAUa,EAAMC,EAAMplC,EAAKpC,GACnD,IAAIsS,EAAKo0B,EAAStkC,EAAKpC,EAAMunC,GACzBh1B,EAAKm0B,EAAStkC,EAAKpC,EAAMwnC,GACzBpR,EAAoB,GAAZ7jB,GAAM,IAAU,EACxBi0B,EAAWj0B,IAAO,GAAK,KACvBq0B,EAAW,YAAmB,QAALr0B,GAAgBD,EAC7C,OAAoB,OAAbk0B,EACDI,EACAzB,IACA/O,GAAO3R,KACM,IAAb+hB,EACO,OAAPpQ,EAAgBwQ,EAChBxQ,EAAOlhC,KAAKgJ,IAAI,EAAGsoC,EAAW,OAASI,EAAW,kBAf5D31C,EAAQmzB,cAAgBkjB,EAAoBp0C,KAAK,KAAM2zC,EAAa,EAAG,GACvE51C,EAAQozB,cAAgBijB,EAAoBp0C,KAAK,KAAM4zC,EAAa,EAAG,GAiBvE71C,EAAQ+xB,aAAeykB,EAAmBv0C,KAAK,KAAM6zC,EAAY,EAAG,GACpE91C,EAAQgyB,aAAewkB,EAAmBv0C,KAAK,KAAM8zC,EAAY,EAAG,GAnD7D,GAuDJ/1C,EAKX,SAAS41C,EAAY7qB,EAAK5Z,EAAKpC,GAC3BoC,EAAIpC,GAAyB,IAAbgc,EAChB5Z,EAAIpC,EAAM,GAAMgc,IAAQ,EAAK,IAC7B5Z,EAAIpC,EAAM,GAAMgc,IAAQ,GAAK,IAC7B5Z,EAAIpC,EAAM,GAAMgc,IAAQ,GAG5B,SAAS8qB,EAAY9qB,EAAK5Z,EAAKpC,GAC3BoC,EAAIpC,GAAYgc,IAAQ,GACxB5Z,EAAIpC,EAAM,GAAMgc,IAAQ,GAAK,IAC7B5Z,EAAIpC,EAAM,GAAMgc,IAAQ,EAAK,IAC7B5Z,EAAIpC,EAAM,GAAmB,IAAbgc,EAGpB,SAAS+qB,EAAW3kC,EAAKpC,GACrB,OAAQoC,EAAIpC,GACJoC,EAAIpC,EAAM,IAAM,EAChBoC,EAAIpC,EAAM,IAAM,GAChBoC,EAAIpC,EAAM,IAAM,MAAQ,EAGpC,SAASgnC,EAAW5kC,EAAKpC,GACrB,OAAQoC,EAAIpC,IAAY,GAChBoC,EAAIpC,EAAM,IAAM,GAChBoC,EAAIpC,EAAM,IAAM,EAChBoC,EAAIpC,EAAM,MAAQ,EA3U9B9O,EAAOD,QAAUD,EAAQA,I,0DCOzB,SAAS+e,QAAQ23B,YACb,IACI,IAAIlc,IAAMmc,KAAK,QAAQ9iB,QAAQ,IAAI,MAAzB8iB,CAAgCD,YAC1C,GAAIlc,MAAQA,IAAI73B,QAAUvB,OAAOid,KAAKmc,KAAK73B,QACvC,OAAO63B,IACb,MAAOxhB,IACT,OAAO,KAdX9Y,OAAOD,QAAU8e,S,6BCMjB,IAAIC,EAAO/e,EAOX+e,EAAKrc,OAAS,SAAqBuhB,GAG/B,IAFA,IAAIS,EAAM,EACN5jB,EAAI,EACCT,EAAI,EAAGA,EAAI4jB,EAAOvhB,SAAUrC,GACjCS,EAAImjB,EAAOgJ,WAAW5sB,IACd,IACJqkB,GAAO,EACF5jB,EAAI,KACT4jB,GAAO,EACe,QAAZ,MAAJ5jB,IAAkE,QAAZ,MAA3BmjB,EAAOgJ,WAAW5sB,EAAI,OACrDA,EACFqkB,GAAO,GAEPA,GAAO,EAEf,OAAOA,GAUX3F,EAAKsN,KAAO,SAAmBpa,EAAQrI,EAAOC,GAE1C,GADUA,EAAMD,EACN,EACN,MAAO,GAKX,IAJA,IAGIjI,EAHA0tC,EAAQ,KACRsF,EAAQ,GACRt0C,EAAI,EAEDuJ,EAAQC,IACXlI,EAAIsQ,EAAOrI,MACH,IACJ+qC,EAAMt0C,KAAOsB,EACRA,EAAI,KAAOA,EAAI,IACpBgzC,EAAMt0C,MAAY,GAAJsB,IAAW,EAAsB,GAAlBsQ,EAAOrI,KAC/BjI,EAAI,KAAOA,EAAI,KACpBA,IAAU,EAAJA,IAAU,IAAwB,GAAlBsQ,EAAOrI,OAAkB,IAAwB,GAAlBqI,EAAOrI,OAAkB,EAAsB,GAAlBqI,EAAOrI,MAAiB,MAC1G+qC,EAAMt0C,KAAO,OAAUsB,GAAK,IAC5BgzC,EAAMt0C,KAAO,OAAc,KAAJsB,IAEvBgzC,EAAMt0C,MAAY,GAAJsB,IAAW,IAAwB,GAAlBsQ,EAAOrI,OAAkB,EAAsB,GAAlBqI,EAAOrI,KACnEvJ,EAAI,QACHgvC,IAAUA,EAAQ,KAAKziC,KAAKiT,OAAOqO,aAAaC,MAAMtO,OAAQ80B,IAC/Dt0C,EAAI,GAGZ,OAAIgvC,GACIhvC,GACAgvC,EAAMziC,KAAKiT,OAAOqO,aAAaC,MAAMtO,OAAQ80B,EAAMzqC,MAAM,EAAG7J,KACzDgvC,EAAMxlB,KAAK,KAEfhK,OAAOqO,aAAaC,MAAMtO,OAAQ80B,EAAMzqC,MAAM,EAAG7J,KAU5D0e,EAAK2L,MAAQ,SAAoBzG,EAAQhS,EAAQnL,GAI7C,IAHA,IACI6vC,EACAC,EAFAhtC,EAAQ9C,EAGHzG,EAAI,EAAGA,EAAI4jB,EAAOvhB,SAAUrC,GACjCs2C,EAAK1yB,EAAOgJ,WAAW5sB,IACd,IACL4R,EAAOnL,KAAY6vC,EACZA,EAAK,MACZ1kC,EAAOnL,KAAY6vC,GAAM,EAAU,IACnC1kC,EAAOnL,KAAuB,GAAX6vC,EAAgB,KACV,QAAZ,MAALA,IAA0E,QAAZ,OAAjCC,EAAK3yB,EAAOgJ,WAAW5sB,EAAI,MAChEs2C,EAAK,QAAiB,KAALA,IAAgB,KAAY,KAALC,KACtCv2C,EACF4R,EAAOnL,KAAY6vC,GAAM,GAAU,IACnC1kC,EAAOnL,KAAY6vC,GAAM,GAAK,GAAK,IACnC1kC,EAAOnL,KAAY6vC,GAAM,EAAK,GAAK,IACnC1kC,EAAOnL,KAAuB,GAAX6vC,EAAgB,MAEnC1kC,EAAOnL,KAAY6vC,GAAM,GAAU,IACnC1kC,EAAOnL,KAAY6vC,GAAM,EAAK,GAAK,IACnC1kC,EAAOnL,KAAuB,GAAX6vC,EAAgB,KAG3C,OAAO7vC,EAAS8C,I,6BCtGpB3J,EAAOD,QA6BP,SAAcsuB,EAAOpkB,EAAO7E,GACxB,IAAIwxC,EAASxxC,GAAQ,KACjByxC,EAASD,IAAS,EAClBE,EAAS,KACTjwC,EAAS+vC,EACb,OAAO,SAAoBxxC,GACvB,GAAIA,EAAO,GAAKA,EAAOyxC,EACnB,OAAOxoB,EAAMjpB,GACbyB,EAASzB,EAAOwxC,IAChBE,EAAOzoB,EAAMuoB,GACb/vC,EAAS,GAEb,IAAIqK,EAAMjH,EAAMtJ,KAAKm2C,EAAMjwC,EAAQA,GAAUzB,GAG7C,OAFa,EAATyB,IACAA,EAAwB,GAAL,EAATA,IACPqK,K,6BC5CflR,EAAOD,QAAUif,EAEjB,IAAIlB,EAAO,EAAQ,GAUnB,SAASkB,EAASoC,EAAIC,GASlBzQ,KAAKwQ,GAAKA,IAAO,EAMjBxQ,KAAKyQ,GAAKA,IAAO,EAQrB,IAAI01B,EAAO/3B,EAAS+3B,KAAO,IAAI/3B,EAAS,EAAG,GAE3C+3B,EAAKluC,SAAW,WAAa,OAAO,GACpCkuC,EAAK9P,SAAW8P,EAAK1O,SAAW,WAAa,OAAOz3B,MACpDmmC,EAAKt0C,OAAS,WAAa,OAAO,GAOlC,IAAIqe,EAAW9B,EAAS8B,SAAW,mBAOnC9B,EAASuV,WAAa,SAAoB9yB,GACtC,GAAc,IAAVA,EACA,OAAOs1C,EACX,IAAI7R,EAAOzjC,EAAQ,EACfyjC,IACAzjC,GAASA,GACb,IAAI2f,EAAK3f,IAAU,EACf4f,GAAM5f,EAAQ2f,GAAM,aAAe,EAUvC,OATI8jB,IACA7jB,GAAMA,IAAO,EACbD,GAAMA,IAAO,IACPA,EAAK,aACPA,EAAK,IACCC,EAAK,aACPA,EAAK,KAGV,IAAIrC,EAASoC,EAAIC,IAQ5BrC,EAASjN,KAAO,SAActQ,GAC1B,GAAqB,iBAAVA,EACP,OAAOud,EAASuV,WAAW9yB,GAC/B,GAAIqc,EAAK6B,SAASle,GAAQ,CAEtB,IAAIqc,EAAKyC,KAGL,OAAOvB,EAASuV,WAAWpP,SAAS1jB,EAAO,KAF3CA,EAAQqc,EAAKyC,KAAKmK,WAAWjpB,GAIrC,OAAOA,EAAMsjB,KAAOtjB,EAAMujB,KAAO,IAAIhG,EAASvd,EAAMsjB,MAAQ,EAAGtjB,EAAMujB,OAAS,GAAK+xB,GAQvF/3B,EAAS5c,UAAUyG,SAAW,SAAkBoY,GAC5C,IAAKA,GAAYrQ,KAAKyQ,KAAO,GAAI,CAC7B,IAAID,EAAgB,GAAVxQ,KAAKwQ,KAAW,EACtBC,GAAMzQ,KAAKyQ,KAAW,EAG1B,OAFKD,IACDC,EAAKA,EAAK,IAAM,KACXD,EAAU,WAALC,GAElB,OAAOzQ,KAAKwQ,GAAe,WAAVxQ,KAAKyQ,IAQ1BrC,EAAS5c,UAAU40C,OAAS,SAAgB/1B,GACxC,OAAOnD,EAAKyC,KACN,IAAIzC,EAAKyC,KAAe,EAAV3P,KAAKwQ,GAAkB,EAAVxQ,KAAKyQ,GAAQ9B,QAAQ0B,IAEhD,CAAE8D,IAAe,EAAVnU,KAAKwQ,GAAQ4D,KAAgB,EAAVpU,KAAKyQ,GAAQJ,SAAU1B,QAAQ0B,KAGnE,IAAI+L,EAAapN,OAAOxd,UAAU4qB,WAOlChO,EAASmC,SAAW,SAAkBH,GAClC,OAAIA,IAASF,EACFi2B,EACJ,IAAI/3B,GACLgO,EAAWrsB,KAAKqgB,EAAM,GACtBgM,EAAWrsB,KAAKqgB,EAAM,IAAM,EAC5BgM,EAAWrsB,KAAKqgB,EAAM,IAAM,GAC5BgM,EAAWrsB,KAAKqgB,EAAM,IAAM,MAAQ,GAEpCgM,EAAWrsB,KAAKqgB,EAAM,GACtBgM,EAAWrsB,KAAKqgB,EAAM,IAAM,EAC5BgM,EAAWrsB,KAAKqgB,EAAM,IAAM,GAC5BgM,EAAWrsB,KAAKqgB,EAAM,IAAM,MAAQ,IAQ9ChC,EAAS5c,UAAUye,OAAS,WACxB,OAAOjB,OAAOqO,aACO,IAAjBrd,KAAKwQ,GACLxQ,KAAKwQ,KAAO,EAAK,IACjBxQ,KAAKwQ,KAAO,GAAK,IACjBxQ,KAAKwQ,KAAO,GACK,IAAjBxQ,KAAKyQ,GACLzQ,KAAKyQ,KAAO,EAAK,IACjBzQ,KAAKyQ,KAAO,GAAK,IACjBzQ,KAAKyQ,KAAO,KAQpBrC,EAAS5c,UAAU6kC,SAAW,WAC1B,IAAIgQ,EAASrmC,KAAKyQ,IAAM,GAGxB,OAFAzQ,KAAKyQ,KAAQzQ,KAAKyQ,IAAM,EAAIzQ,KAAKwQ,KAAO,IAAM61B,KAAU,EACxDrmC,KAAKwQ,IAAQxQ,KAAKwQ,IAAM,EAAsB61B,KAAU,EACjDrmC,MAOXoO,EAAS5c,UAAUimC,SAAW,WAC1B,IAAI4O,IAAmB,EAAVrmC,KAAKwQ,IAGlB,OAFAxQ,KAAKwQ,KAAQxQ,KAAKwQ,KAAO,EAAIxQ,KAAKyQ,IAAM,IAAM41B,KAAU,EACxDrmC,KAAKyQ,IAAQzQ,KAAKyQ,KAAO,EAAqB41B,KAAU,EACjDrmC,MAOXoO,EAAS5c,UAAUK,OAAS,WACxB,IAAIy0C,EAAStmC,KAAKwQ,GACd+1B,GAASvmC,KAAKwQ,KAAO,GAAKxQ,KAAKyQ,IAAM,KAAO,EAC5C+1B,EAASxmC,KAAKyQ,KAAO,GACzB,OAAiB,IAAV+1B,EACU,IAAVD,EACED,EAAQ,MACNA,EAAQ,IAAM,EAAI,EAClBA,EAAQ,QAAU,EAAI,EACxBC,EAAQ,MACNA,EAAQ,IAAM,EAAI,EAClBA,EAAQ,QAAU,EAAI,EAC1BC,EAAQ,IAAM,EAAI,K,6BCrM7Bp3C,EAAOD,QAAUmmC,EAGjB,IAAIrjB,EAAS,EAAQ,KACpBqjB,EAAa9jC,UAAYlB,OAAOY,OAAO+gB,EAAOzgB,YAAY4O,YAAck1B,EAEzE,IAAIpoB,EAAO,EAAQ,GAQnB,SAASooB,IACLrjB,EAAOliB,KAAKiQ,MAwChB,SAASymC,EAAkBvsB,EAAK5Z,EAAKpC,GAC7Bgc,EAAIroB,OAAS,GACbqb,EAAKgB,KAAK2L,MAAMK,EAAK5Z,EAAKpC,GACrBoC,EAAIgP,UACThP,EAAIgP,UAAU4K,EAAKhc,GAEnBoC,EAAIuZ,MAAMK,EAAKhc,GA3CvBo3B,EAAa9jB,WAAa,WAOtB8jB,EAAa7X,MAAQvQ,EAAKsC,oBAE1B8lB,EAAaoR,iBAAmBx5B,EAAKhM,QAAUgM,EAAKhM,OAAO1P,qBAAqB+Q,YAAiD,QAAnC2K,EAAKhM,OAAO1P,UAAUmD,IAAIxE,KAClH,SAA8B+pB,EAAK5Z,EAAKpC,GACxCoC,EAAI3L,IAAIulB,EAAKhc,IAIb,SAA+Bgc,EAAK5Z,EAAKpC,GACzC,GAAIgc,EAAID,KACNC,EAAID,KAAK3Z,EAAKpC,EAAK,EAAGgc,EAAIroB,aACvB,IAAK,IAAIrC,EAAI,EAAGA,EAAI0qB,EAAIroB,QAC3ByO,EAAIpC,KAASgc,EAAI1qB,OAQ7B8lC,EAAa9jC,UAAU8f,MAAQ,SAA4BzgB,GACnDqc,EAAK6B,SAASle,KACdA,EAAQqc,EAAKqC,aAAa1e,EAAO,WACrC,IAAIgjB,EAAMhjB,EAAMgB,SAAW,EAI3B,OAHAmO,KAAKmT,OAAOU,GACRA,GACA7T,KAAKk2B,MAAMZ,EAAaoR,iBAAkB7yB,EAAKhjB,GAC5CmP,MAeXs1B,EAAa9jC,UAAU4hB,OAAS,SAA6BviB,GACzD,IAAIgjB,EAAM3G,EAAKhM,OAAOI,WAAWzQ,GAIjC,OAHAmP,KAAKmT,OAAOU,GACRA,GACA7T,KAAKk2B,MAAMuQ,EAAmB5yB,EAAKhjB,GAChCmP,MAWXs1B,EAAa9jB,c,6BCnFbpiB,EAAOD,QAAU2nC,EAGjB,IAAI/kB,EAAS,EAAQ,KACpB+kB,EAAatlC,UAAYlB,OAAOY,OAAO6gB,EAAOvgB,YAAY4O,YAAc02B,EAEzE,IAAI5pB,EAAO,EAAQ,GASnB,SAAS4pB,EAAa11B,GAClB2Q,EAAOhiB,KAAKiQ,KAAMoB,GAStB01B,EAAatlB,WAAa,WAElBtE,EAAKhM,SACL41B,EAAatlC,UAAU6lC,OAASnqB,EAAKhM,OAAO1P,UAAU6H,QAO9Dy9B,EAAatlC,UAAU4hB,OAAS,WAC5B,IAAIS,EAAM7T,KAAKmT,SACf,OAAOnT,KAAKM,IAAIoa,UACV1a,KAAKM,IAAIoa,UAAU1a,KAAK9B,IAAK8B,KAAK9B,IAAM9K,KAAKwpB,IAAI5c,KAAK9B,IAAM2V,EAAK7T,KAAK6T,MACtE7T,KAAKM,IAAIiB,SAAS,QAASvB,KAAK9B,IAAK8B,KAAK9B,IAAM9K,KAAKwpB,IAAI5c,KAAK9B,IAAM2V,EAAK7T,KAAK6T,OAUxFijB,EAAatlB,c,6BC5CHriB,EA6BNw3C,QAAU,EAAQ,K,6BClCtBv3C,EAAOD,QAAUw3C,EAEjB,IAAIz5B,EAAO,EAAQ,GAsCnB,SAASy5B,EAAQC,EAASC,EAAkBC,GAExC,GAAuB,mBAAZF,EACP,MAAMzrC,UAAU,8BAEpB+R,EAAKa,aAAahe,KAAKiQ,MAMvBA,KAAK4mC,QAAUA,EAMf5mC,KAAK6mC,iBAAmBl4B,QAAQk4B,GAMhC7mC,KAAK8mC,kBAAoBn4B,QAAQm4B,IA1DpCH,EAAQn1C,UAAYlB,OAAOY,OAAOgc,EAAKa,aAAavc,YAAY4O,YAAcumC,EAwE/EA,EAAQn1C,UAAUu1C,QAAU,SAASA,EAAQC,EAAQC,EAAaC,EAAcC,EAAShN,GAErF,IAAKgN,EACD,MAAMhsC,UAAU,6BAEpB,IAAImT,EAAOtO,KACX,IAAKm6B,EACD,OAAOjtB,EAAKW,UAAUk5B,EAASz4B,EAAM04B,EAAQC,EAAaC,EAAcC,GAE5E,GAAK74B,EAAKs4B,QAKV,IACI,OAAOt4B,EAAKs4B,QACRI,EACAC,EAAY34B,EAAKu4B,iBAAmB,kBAAoB,UAAUM,GAASvQ,UAC3E,SAAqBpsB,EAAK48B,GAEtB,GAAI58B,EAEA,OADA8D,EAAK6hB,KAAK,QAAS3lB,EAAKw8B,GACjB7M,EAAS3vB,GAGpB,GAAiB,OAAb48B,EAAJ,CAKA,KAAMA,aAAoBF,GACtB,IACIE,EAAWF,EAAa54B,EAAKw4B,kBAAoB,kBAAoB,UAAUM,GACjF,MAAO58B,GAEL,OADA8D,EAAK6hB,KAAK,QAAS3lB,EAAKw8B,GACjB7M,EAAS3vB,GAKxB,OADA8D,EAAK6hB,KAAK,OAAQiX,EAAUJ,GACrB7M,EAAS,KAAMiN,GAdlB94B,EAAKtV,KAAqB,MAiBxC,MAAOwR,GAGL,OAFA8D,EAAK6hB,KAAK,QAAS3lB,EAAKw8B,QACxBx9B,YAAW,WAAa2wB,EAAS3vB,KAAS,QAnC1ChB,YAAW,WAAa2wB,EAASnkC,MAAM,oBAAsB,IA6CrE2wC,EAAQn1C,UAAUwH,IAAM,SAAaquC,GAOjC,OANIrnC,KAAK4mC,UACAS,GACDrnC,KAAK4mC,QAAQ,KAAM,KAAM,MAC7B5mC,KAAK4mC,QAAU,KACf5mC,KAAKmwB,KAAK,OAAOH,OAEdhwB,O,6BC3IX5Q,EAAOD,QAAU,I,kdCEjB,YACA,OAGA,2B,+CAMA,OAN2C,OACzC,YAAA8nB,IAAA,SAAIC,EAAuCtlB,GAGzC,MAAO,CAFQ01C,EACX11C,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIoO,KAAK4qB,QAAS5qB,KAAK8qB,SAAU9qB,KAAK+qB,WAGjG,EANA,CAA2C,EAAAS,oBAQ3C,SAAgB8b,EACZxtC,EAAWsxB,EAAe14B,EAAW44B,EAAcic,EAAkB3c,EAAiBE,EACtFC,GAOF,IANA,IAAMyc,EAAkB1tC,EAAE/H,KACpB2E,EAAI8wC,EAAgB,GACpB7a,EAAI6a,EAAgB,GAGtBC,EAAc,EACTj4C,EAAI,EAAGA,EAAIg4C,EAAgB31C,OAAQrC,IAC1Ci4C,GAAeD,EAAgBh4C,GAYjC,IATA,IAAMyU,EAAS,IAAI,EAAAxP,OAAOqF,EAAE/H,KAAM+H,EAAEpF,MAE9By2B,EAAIrxB,EAAEkI,UACN6/B,EAAI59B,EAAOjC,UACX0lC,EAAYtc,EAAMvtB,WAClB8pC,EAAQj1C,EAAEmL,WACV+pC,EAAWtc,EAAKztB,WAChBgqC,EAAeN,EAAS1pC,WAErBiqC,EAAK,EAAGA,EAAKpxC,EAAIi2B,EAAGmb,IAC3B,KAAM7xC,EAAS6xC,EAAKL,EACpB,IAASj4C,EAAI,EAAGA,EAAIi4C,EAAaj4C,IAC/BqyC,EAAE5rC,EAASzG,GACPk4C,EAAUI,EAAKnb,KAAOxB,EAAEl1B,EAASzG,GAAKo4C,EAASE,EAAKnb,IAAMv5B,KAAKwhC,KAAKiT,EAAaC,EAAKnb,GAAK/B,IAC3F+c,EAAMG,EAAKnb,GAGnB,OAAO1oB,EAtCI,EAAA8tB,wBAQb,wB,mbCXA,YAEA,OAGA,cACE,WACItG,EAAwDsc,EACxD7yB,EAAiB7gB,GAFrB,MAGE,YAAMo3B,EAAgBvW,EAAQ7gB,IAAW,K,OAFiB,EAAA0zC,W,EAwB9D,OA1BiC,OAQ/B,YAAArd,WAAA,SAAWC,GACT,IAAK3qB,KAAKkV,SAAWlV,KAAK+nC,SACxB,MAAM,IAAI/xC,MAAM,8DAIlB,IAAKgK,KAAK+nC,SAGJ,MAFI/nC,KAAKkV,OAEH,IAAIlf,MAAM,2DAKxB,YAAAihB,IAAA,SAAIC,EAAuCtlB,GAEzC,MAAO,CAIX,SACIkI,EAAW2B,EAAWssC,EAA8C3zC,EACpEC,GACF,IAAMqY,EAAS,EAAA3Y,cAAcG,KAAK4F,EAAG2B,EAAGssC,EAAU3zC,EAASC,GAC3D,IAAKqY,EACH,MAAM,IAAI1W,MAAM,qBAElB,OAAO0W,EAZUs7B,CAASp2C,EAAO,GAAIA,EAAO,GAAIoO,KAAK+nC,UAAW,EAAO/nC,KAAK3L,cAG9E,EA1BA,CAAiC,EAAAq3B,UAApB,EAAA4F,e,m1BCNb,YACA,OAKA,2B,+CAIA,OAJ6B,OAC3B,YAAAra,IAAA,SAAIC,EAAuCtlB,GACzC,MAAO,CAACq2C,EAAKr2C,EAAO,GAAIoO,KAAKq/B,MAEjC,EAJA,CAA6B,EAAA6I,MAM7B,SAAgBD,EAAKnuC,EAAWulC,GAK9B,IAJA,IAAMp7B,EAAS,IAAI,EAAAxP,OAAO,EAAIqF,EAAE/H,MAAOstC,GACjC8I,EAAYruC,EAAEgE,KACdsqC,EAAankC,EAAOnG,KAEjBtO,EAAI,EAAGA,EAAI44C,EAAWv2C,SAAUrC,EACvC44C,EAAW54C,GAAK24C,EAAU34C,GAG5B,OAAOyU,EAfI,EAAA+tB,UAMb,U,4FCRA,WAEA,2BAuBA,OAlBE,YAAAtH,WAAA,SAAWC,GACT3qB,KAAKq/B,GAAK,EAAAhnC,UAAUxB,wBAAwB8zB,EAAWK,OAAO,QAGhE,YAAAC,YAAA,SAAYr5B,GACV,SAAKA,GAA4B,IAAlBA,EAAOC,SAIfmO,KAAKkrB,gBAAgBt5B,IAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GACxB,MAAuB,WAAnBA,EAAO,GAAG8C,MAKlB,EAvBA,GAAsB,EAAAwzC,Q,y8BCNtB,YACA,OACA,UAGA,2B,+CAKA,OAL+B,OAC7B,YAAAjxB,IAAA,SAAIC,EAAuCtlB,GAEzC,MAAO,CADQysB,EAAOzsB,EAAQoO,KAAKnH,QAGvC,EALA,CAA+B,EAAA++B,QAO/B,SAAgBvZ,EAAOvkB,EAAajB,GAClC,IAAMwvC,EAASvuC,EAAE,GACXwuC,EAAaD,EAAOt2C,KAE1B,GAAI8G,GAAQyvC,EAAWz2C,QAAUgH,GAAS,EAAIyvC,EAAWz2C,OACvD,MAAM,IAAImE,MAAM,gEAGd6C,EAAO,IACTA,EAAOyvC,EAAWz2C,OAASgH,GAQ7B,IAHA,IAAI0vC,EAAiBD,EAAWzvC,GAC1BzG,EAAck2C,EAAWjvC,MAAM,GAE5B7J,EAAI,EAAGA,EAAIsK,EAAEjI,OAAQrC,IAI5B,IAHA,IACMg5C,GADAC,EAAQ3uC,EAAEtK,IACSuC,KAEhB22C,EAAY,EAAGA,EAAYJ,EAAWz2C,OAAQ62C,IAAa,CAElE,GAAIA,IAAc7vC,EAChB0vC,GAAkBC,EAAWE,QAI1B,GAAIJ,EAAWI,KAAeF,EAAWE,GAC5C,MAAM,IAAI1yC,MAAM,oCAIlB5D,EAAYs2C,GAAaF,EAAWE,GAKxCt2C,EAAYyG,GAAQ0vC,EAGpB,IAAMtkC,EAAS,IAAI,EAAAxP,OAAOrC,EAAai2C,EAAO3zC,MACxCmtC,EAAI59B,EAAOpG,WAIb8qC,EAAY,EAChB,IAASn5C,EAAI4C,EAAYP,OAAS,EAAGrC,GAAKqJ,EAAMrJ,IAC9Cm5C,GAAav2C,EAAY5C,GAI3B,IADA,IAAIo5C,EAAa,EACRC,EAAa,EAAGA,EAAa/uC,EAAEjI,OAAQg3C,IAAc,CAC5D,IAAMJ,EAIFK,EAAiB,EACrB,IAASt5C,GALHi5C,EAAQ3uC,EAAE+uC,IAKG92C,KAAKF,OAAS,EAAGrC,GAAKqJ,EAAMrJ,IAC7Cs5C,GAAkBL,EAAM12C,KAAKvC,GAY/B,IATA,IAAM24C,EAAYM,EAAM5qC,WAClBkrC,EAAYC,EAAK10C,UAAUE,KAAKi0C,EAAM12C,MAMxCk3C,EAAeL,EAEHxzC,GAAP5F,EAAI,EAAO,GAAGA,EAAIu5C,EAAWv5C,IACpCqyC,EAAEoH,EAAez5C,GAAK24C,EAAU34C,KAC1B4F,IAAM0zC,IAEVG,GAAiBN,EAAYG,EAC7B1zC,EAAI,GAGRwzC,GAAcE,EAGhB,OAAO7kC,EAzFI,EAAAkuB,YAOb,Y,wbCZA,YACA,OACA,OAGA,QAEA,2B,+CAsBA,OAtB6B,OAC3B,YAAAlb,IAAA,SAAIC,EAAuCtlB,GACzC,IAAMkI,EAAIlI,EAAO,GACXs3C,EAAIt3C,EAAO,GACXc,EAAsB,IAAlBd,EAAOC,OAAeD,EAAO,QAAKe,EAG5C,GAAgC,IAA5BqN,KAAKtB,YAAY7M,OAEnB,IADA,IAAMs3C,EAAQv3C,EAAO,GAAGG,KACfvC,EAAI,EAAGA,EAAI25C,EAAMt3C,SAAUrC,EAClCwQ,KAAKtB,YAAY3C,KAAKotC,EAAM35C,IAKhC,IAAMoM,EAAa,EAAAmD,aAAaI,uBAC5BrF,EAAE/H,KAAMm3C,EAAEn3C,KAAMiO,KAAK7G,QAAS6G,KAAKnB,UAAWmB,KAAKtB,YAAasB,KAAKrB,KAAMqB,KAAKlB,SAC9ErD,EAAI,IAAI,EAAAhH,OAAOmH,EAAY9B,EAAEpF,MAGnC,OADA00C,EAAO3tC,EAAG3B,EAAGovC,EAAGx2C,EAAGsN,KAAKnB,UAAWmB,KAAK6rB,MAAO7rB,KAAKrB,KAAMqB,KAAK7G,SACxD,CAACsC,IAEZ,EAtBA,CAA6B,EAAAswB,MAyB7B,SAAgBqd,EACZvH,EAAW1W,EAAWke,EAAWhe,EAAqBxsB,EAAkCgtB,EACxFltB,EAA6BxF,GA8B/B,IA7BA,IAAMmwC,EAAYne,EAAEp5B,KAAK,GACnBw3C,EAAiBpe,EAAEp5B,KAAK,GACxBy3C,EAAere,EAAEp5B,KAAK,GACtB03C,EAActe,EAAEp5B,KAAK,GAErB23C,EAAaL,EAAEt3C,KAAK,GACpB43C,EAAkBN,EAAEt3C,KAAK,GACzB63C,EAAgBP,EAAEt3C,KAAK,GACvB83C,EAAeR,EAAEt3C,KAAK,GACtB+3C,EAAcJ,EAAaC,EAAkBC,EAAgBC,EAC7DE,EAAe,CAACH,EAAeC,GAE/BG,EAAanI,EAAE9vC,KAAK,GACpBk4C,EAAkBpI,EAAE9vC,KAAK,GACzBm4C,EAAgBrI,EAAE9vC,KAAK,GACvBo4C,EAAetI,EAAE9vC,KAAK,GAItBq4C,EAAoBF,EAAgBC,EAEpCE,EAAWd,EAAiB1d,GAHT2d,EAAeC,GAIlCa,EANcN,EAAaC,EAAkBC,EAAgBC,EAMpCH,EAAane,EACtC0e,EAAWT,EAAcje,EACzB2e,EAAajB,EAAiB1d,GAJhBke,EAAa,GAAKA,EAAa,IAO7CU,EAAkB,IAAI5nC,aAFJ2nC,EAAaJ,GAI5BM,EAAW,EAAGA,EAAWpB,IAAaoB,EAAU,CAGvD,IAFA,IAAIC,EAAiB,EACjBC,EAAiB,EACZC,EAAW,EAAGA,EAAWhf,IAASgf,EACzCC,EACI3f,EAAEnpB,UAAU4b,SAAS+sB,EAAiBE,EAAWR,GAAWI,EAAiBlB,EAAiB1d,EAC9F2d,EAAcC,EAAaM,EAAa,GAAIA,EAAa,GAAIlrC,EAAU,GAAIA,EAAU,GAAIF,EAAK,GAAIA,EAAK,GACvGA,EAAK,GAAIA,EAAK,GAAIxF,EAAQ,GAAIA,EAAQ,IAE1C,EAAAszB,SACI4c,EAAErnC,UAAU4b,SAASitB,EAAWN,GAAWE,EAC3C5I,EAAE7/B,UAAU4b,SAASgtB,EAAiBC,EAAWP,IAAW,GAAO,EAAO,EAAG,EAAGZ,EAAa7d,EAC7Fue,EAAmBI,GAGzBG,GAAkBN,EAAWxe,EAC7B+e,GAAkBN,EAAWze,EAI/B,GAAIR,EAOF,IANA,IAAM0f,EAAW1f,EAAErpB,UACbomC,EAAavG,EAAE7/B,UACfgpC,EAAYnJ,EAAE9vC,KAAK,GACnBk5C,EAAiBpJ,EAAE9vC,KAAK,GACxB01C,EAAc5F,EAAE9vC,KAAK,GAAK8vC,EAAE9vC,KAAK,GACjCm5C,EAAWD,EAAiBxD,EACzB0D,EAAQ,EAAGA,EAAQH,IAAaG,EACvC,IAAK,IAAIC,EAAU,EAAGA,EAAUH,IAAkBG,EAEhD,IADA,IAAMn1C,EAASk1C,EAAQD,EAAWE,EAAU3D,EACnC9zC,EAAQ,EAAGA,EAAQ8zC,IAAe9zC,EACzCy0C,EAAWnyC,EAAStC,IAAUo3C,EAASK,GAOjD,SAASN,EACLO,EAAoCC,EAAqC7zB,EAAkBG,EAC3FC,EAAe0zB,EAAkBC,EAAkBC,EAAoBC,EAAoBC,EAC3FC,EAAeC,EAAeC,EAAeC,EAAkBC,GACjE,IAAMC,EAAyF,MAA1Er0B,EAASi0B,EAAQF,GAASF,GAAcF,EAAW,GAAK,IAAMQ,GAC7EG,EAAwF,MAAzEr0B,EAAQ+zB,EAAQE,GAASJ,GAAcF,EAAW,GAAK,IAAMQ,GAIlF,GAAmB,IAAfP,GAAmC,IAAfC,GAA8B,IAAVE,GAAyB,IAAVE,GAAyB,IAAVH,GAAyB,IAAVE,EAkCzF,IAPA,IAGMM,EAAmE,MAAlDv0B,EAAS+zB,EAAQE,GAHtBJ,GAAcF,EAAW,GAAK,IAGaQ,GACvDK,EAAiE,MAAjDv0B,EAAQ+zB,EAAQE,GAHpBJ,GAAcF,EAAW,GAAK,IAGWQ,GAErDK,EAAe50B,EAAW8zB,EAAWC,EAClCv7C,EAAI,EAAGA,EAAIo8C,IAAgBp8C,EAIlC,IAHA,IAAMq8C,EAAWr8C,EAAIu7C,EACfe,KAAct8C,EAAIu7C,GAAYD,EAC9BiB,KAAUv8C,GAAKs7C,EAAWC,IACvBiB,EAAI,EAAGA,EAAIN,IAAcM,EAChC,IAAK,IAAIvD,EAAI,EAAGA,EAAIkD,IAAalD,EAAG,CAClC,IAAMwD,EAAQD,EAAIV,EAAWJ,EAAQY,EAAWd,EAC1CkB,EAAQzD,EAAI8C,EAAWJ,EAAQU,EAAWZ,EAE9CJ,GAAUr7C,EAAIk8C,EAAaM,GAAKL,EAAYlD,GAD1CwD,GAAS,GAAKA,EAAQ90B,GAAU+0B,GAAS,GAAKA,EAAQ90B,EACPwzB,GAASmB,EAAO50B,EAAS80B,GAAS70B,EAAQ80B,GAE1C,OA5CvD,IAAK,IAAI1yC,EAAI,EAAGA,EAAIwd,EAAW8zB,EAAWC,EAAUvxC,IAQlD,IAPA,IAAM2yC,KAAS3yC,GAAKsxC,EAAWC,IACzBr2C,EAAO8E,GAAKsxC,EAAWC,GACvBqB,KAAQ13C,EAAOq2C,GACfsB,EAAK33C,EAAOq2C,EACZuB,EAAaH,GAAOrB,EAAWC,EAAWS,EAAWC,GAAYW,GAAMrB,EAAWS,EAAWC,GAC/FY,GAAMb,EAAWC,GACfc,EAAaJ,GAAOh1B,EAASC,GAC1Bpc,EAAI,EAAGA,EAAIwwC,EAAUxwC,IAAK,CACjC,IAAMwxC,EAAKxxC,EAAIswC,EAAWc,EACpBK,EAAKJ,EACX,GAAiB,IAAbd,EACFV,EAAS32C,IACL02C,EAAQztB,SAASovB,EAAaC,EAAKp1B,EAAQq1B,EAAIF,EAAaC,EAAKp1B,EAAQq1B,EAAKhB,GAC9Ea,EAAatxC,EAAIywC,QAErB,IAAK,IAAIpyC,EAAI,EAAGA,EAAIoyC,EAAUpyC,IAC5BwxC,EAASyB,GAActxC,EAAIywC,EAAWpyC,IAAMuxC,EAAQ2B,GAAcC,EAAKp1B,EAAQq1B,EAAKpzC,EAAIkyC,KA1HvF,EAAA5Z,UAyBb,Y,4bChCA,YACA,OAGA,2B,+CAKA,OALgC,OAC9B,YAAAnb,IAAA,SAAIC,EAAuCtlB,GAEzC,MAAO,CADQu7C,EAAQv7C,EAAO,GAAIoO,KAAK63B,MAAO73B,KAAK83B,YAGvD,EALA,CAAgC,EAAAC,SAOhC,SAAgBoV,EAAQrzC,EAAW+9B,EAAeuV,GAChD,IAAKA,EACH,MAAM,IAAIp3C,MAAM,+BAGlB,IAAMiO,EAAS,IAAI,EAAAxP,OAAOqF,EAAE/H,KAAM+H,EAAEpF,MAC9By2B,EAAIrxB,EAAEkI,UAGZ,OAFUiC,EAAOpG,WACflJ,IAAIw2B,GACClnB,EAhBI,EAAAsuB,aAOb,a,u1BCXA,YACA,OACA,OAKA,2B,+CAIA,OAJ+B,OAC7B,YAAAtb,IAAA,SAAIC,EAAuCtlB,GACzC,MAAO,CAACy7C,EAAOz7C,EAAO,GAAIA,EAAO,MAErC,EAJA,CAA+B,EAAA07C,QAM/B,SAAgBD,EAAOvzC,EAAWvE,GAKhC,IAJA,IAAMg4C,EAAYh4C,EAAM4hB,YAClBq2B,EAAa,EAAID,GACjBE,EAAqB3zC,EAAE/H,KAEpBvC,EAAIg+C,EAAW37C,OAAS,EAAGrC,GAAKg+C,EAAW37C,OAAS47C,EAAmB57C,SAAUrC,GAEjE,IAAnBg+C,EAAWh+C,KACbg+C,EAAWh+C,GAAKi+C,EAAmBj+C,EAAIg+C,EAAW37C,OAAS47C,EAAmB57C,SAIlF,IAAMoS,EAAS,IAAI,EAAAxP,OAAO+4C,EAAY1zC,EAAEpF,MAElCgY,EAAS,EAAA3Y,cAAcG,KAAK4F,EAAGmK,GAAQ,SAAC1U,EAAGmD,GAAM,OAAAnD,KAAG,GAC1D,IAAKmd,EACH,MAAM,IAAI1W,MAAM,qBAGlB,OAAO0W,EAzBI,EAAAimB,YAMb,Y,8FCXA,WAGA,2BAwBA,OArBE,YAAAjI,WAAA,SAAWC,KAEX,YAAAM,YAAA,SAAYr5B,GACV,SAAKA,GAA4B,IAAlBA,EAAOC,SAIfmO,KAAKkrB,gBAAgBt5B,IAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GACxB,OAA8C,IAA1C,EAAA0Z,aAAaxP,QAAQlK,EAAO,GAAG8C,OAIZ,UAAnB9C,EAAO,GAAG8C,MAMlB,EAxBA,GAAsB,EAAA44C,U,4bCLtB,YACA,OACA,OAGA,2B,+CAKA,OALgC,OAC9B,YAAAr2B,IAAA,SAAIC,EAAuCtlB,GAEzC,MAAO,CADQ87C,EAAQ97C,EAAO,GAAIoO,KAAKnH,QAG3C,EALA,CAAgC,EAAAm/B,SAOhC,SAAgB0V,EAAQ5zC,EAAWjB,GACjC,IAAM+C,EAAa,EAAAtH,UAAUgH,aAAaxB,EAAE/H,KAAM8G,GAC5CoL,EAAS,IAAI,EAAAxP,OAAOmH,EAAY9B,EAAEpF,MAElCy2B,EAAIrxB,EAAE+D,WAKZ,OAJUoG,EAAOpG,WAEflJ,IAAIw2B,GAEClnB,EAhBI,EAAA2uB,aAOb,a,0bCfA,YACA,OACA,OAGA,2B,+CAKA,OAL+B,OAC7B,YAAA3b,IAAA,SAAIC,EAAuCtlB,GAEzC,MAAO,CADQ+7C,EAAO/7C,EAAO,GAAIA,EAAO,GAAIoO,KAAKnH,QAGrD,EALA,CAA+B,EAAAo/B,QAO/B,SAAgB0V,EAAO7zC,EAAWN,EAAiBX,GACjDA,EAAO,EAAAvE,UAAUoF,cAAcb,EAAMiB,EAAE/H,KAAKF,QAC5C,IAAME,EAAO+H,EAAE/H,KAAKsH,QACdu0C,EAAU77C,EAAKsH,QACfw0C,EAAcr0C,EAAQsE,KAC5B8vC,EAAQ/0C,GAAQg1C,EAAYh8C,OAM5B,IALA,IAAMi8C,EAAc,EAAAx5C,UAAU2E,eAAelH,GACvCg8C,EAAiB,EAAAz5C,UAAU2E,eAAe20C,GAE1C/L,EADS,IAAI,EAAAptC,OAAOm5C,EAAS9zC,EAAEpF,MACpBmJ,WACXstB,EAAIrxB,EAAEgE,KACHtO,EAAI,EAAGA,EAAIqyC,EAAEhwC,SAAUrC,EAAG,CACjC,IAAMw+C,EAAkB,EAAA15C,UAAUmF,gBAAgBjK,EAAGu+C,GAC/CE,EAAkBD,EAAgB30C,QAClCqnC,EAAMmN,EAAYG,EAAgBn1C,IACxCo1C,EAAgBp1C,GAAQ6nC,EAAM,EAAIA,EAAM3uC,EAAK8G,GAAQ6nC,EACrD,IAAMwN,EAAY,EAAA55C,UAAUiF,gBAAgB00C,EAAiBH,GAC7DjM,EAAEryC,GAAK27B,EAAE+iB,GAGX,IAAMtyC,EAAa7J,EAAKsH,MAAM,EAAGR,GAAMwlB,OAAO7kB,EAAQzH,MAAMssB,OAAOtsB,EAAKsH,MAAMR,EAAO,IACrF,OAAO,IAAI,EAAApE,OAAOmH,EAAY9B,EAAEpF,UAAM/B,OAAWA,EAAWkvC,GA5BjD,EAAAhP,YAOb,Y,kvCCTA,YACA,OACA,UAGA,QAEA,2B,+CAOA,OAP6B,OAC3B,YAAA5b,IAAA,SAAIC,EAAuCtlB,GAIzC,MAAO,CAHQu8C,EACXv8C,EAAO,GAAIA,EAAO,GAAIoO,KAAK1D,MAAO0D,KAAK8sB,KAAM9sB,KAAK4sB,OAAQ5sB,KAAK6sB,OAC7C,IAAlBj7B,EAAOC,OAAeD,EAAO,QAAKe,KAG1C,EAPA,CAA6B,EAAA+6B,MAS7B,SAAgBygB,EAAK5+C,EAAWmD,EAAW4J,EAAewwB,EAAcF,EAAiBC,EAAiB58B,GAClG,QAAYid,EAAKtW,SAASV,qBAAqB3G,EAAEwC,KAAM66B,EAAQl6B,EAAEX,KAAM86B,EAAQ58B,aAAC,EAADA,EAAG8B,MAAK,GAAtFyE,EAAC,KAAEE,EAAC,KAAED,EAAC,KAGRwN,EAAS,IAAI,EAAAxP,OAAO,CAAC+B,EAAGE,GAAInH,EAAEmF,MAEpC,GAAIzE,GAAKid,EAAKnZ,cAAcG,KAAK+P,EAAQhU,GAAG,SAACV,EAAGmD,GAAM,OAAAA,KAAG,KAAUuR,EACjE,MAAM,IAAIjO,MAAM,0CAKlB,OAFA,EAAAy2B,SAASl9B,EAAEyS,UAAWtP,EAAEsP,UAAWiC,EAAOjC,UAAW4qB,EAAQC,EAAQvwB,EAAOwwB,EAAMt2B,EAAGE,EAAGD,GAEjFwN,EArBI,EAAA6uB,UASb,U,ivBChBA,YACA,OAGA,2B,+CAKA,OALoC,OAClC,YAAA7b,IAAA,SAAIC,EAAuCtlB,GAEzC,MAAO,CADQw8C,EAAYx8C,EAAO,GAAIoO,KAAKk4B,KAAMl4B,KAAKorB,SAG1D,EALA,CAAoC,EAAAgN,aAOpC,SAAgBgW,EAAYt0C,EAAWo+B,EAAgB9M,GAKrD,IAJM,QAAetxB,EAAE/H,KAAI,GAApB2E,EAAC,KAAEi2B,EAAC,KAAE0hB,EAAC,KAAEhF,EAAC,KACXplC,EAAS,IAAI,EAAAxP,OAAO,CAACiC,EAAGi2B,EAAG0hB,EAAGhF,GAAIvvC,EAAEpF,MACpCy2B,EAAIrxB,EAAEkI,UACN6/B,EAAI59B,EAAOjC,UACR8lC,EAAK,EAAGA,EAAKpxC,EAAIi2B,EAAGmb,IAC3B,IAAK,IAAIwG,EAAK,EAAGA,EAAKD,EAAIhF,EAAGiF,IAAM,CACjC,IAAM36C,EAAQm0C,EAAKuG,EAAIhF,EAAIiF,EAC3BzM,EAAEluC,GAASw3B,EAAEx3B,GAASy3B,EAAQ8M,EAAK4P,EAAKnb,GAI5C,OAAO1oB,EAnBI,EAAAgvB,iBAOb,iB,wdCXA,YACA,OAGA,2B,+CAKA,OAL8C,OAC5C,YAAAhc,IAAA,SAAIC,EAAuCtlB,GAEzC,MAAO,CADQ28C,EAAsB38C,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIoO,KAAK4qB,WAG/E,EALA,CAA8C,EAAA+C,uBAO9C,SAAgB4gB,EAAsBz0C,EAAWsxB,EAAe14B,EAAWk4B,GAOzE,IANA,IAAM4c,EAAkB1tC,EAAE/H,KACpB2E,EAAI8wC,EAAgB,GACpB7a,EAAI6a,EAAgB,GAGtBC,EAAc,EACTj4C,EAAI,EAAGA,EAAIg4C,EAAgB31C,OAAQrC,IAC1Ci4C,GAAeD,EAAgBh4C,GAgBjC,IAdA,IAOIg/C,EACAljB,EACAic,EACAkH,EACAC,EACAC,EAZE1qC,EAAS,IAAI,EAAAxP,OAAOqF,EAAE/H,KAAM+H,EAAEpF,MAE9By2B,EAAIrxB,EAAEkI,UACN6/B,EAAI59B,EAAOjC,UACX0lC,EAAYtc,EAAMvtB,WAClB8pC,EAAQj1C,EAAEmL,WASPiqC,EAAK,EAAGA,EAAKpxC,EAAIi2B,EAAGmb,IAAM,CAEjC4G,GADAD,EAAiB3G,EAAKL,GACKA,EAC3BkH,EAAiB7G,EAAKnb,EAGtB6hB,EAAO,EACP,IAASh/C,EAAIi/C,EAAgBj/C,EAAIk/C,IAAWl/C,EAC1Cg/C,GAAQrjB,EAAE37B,GAEZ87B,EAAOkjB,EAAO/G,EAGd+G,EAAO,EACP,IAASh/C,EAAIi/C,EAAgBj/C,EAAIk/C,IAAWl/C,EAC1Cg/C,GAAQp7C,KAAKgJ,IAAI+uB,EAAE37B,GAAK87B,EAAM,GAEhCic,EAAWiH,EAAO/G,EAGlB,IAASj4C,EAAIi/C,EAAgBj/C,EAAIk/C,IAAWl/C,EAC1CqyC,EAAEryC,GAAKk4C,EAAUiH,KAAoBxjB,EAAE37B,GAAK87B,GAAQl4B,KAAKwhC,KAAK2S,EAAW3c,IAAY+c,EAAMgH,GAI/F,OAAO1qC,EAxDI,EAAAivB,2BAOb,2B,m8BCXA,YACA,OACA,UAGA,2B,+CAKA,OAL4B,OAC1B,YAAAjc,IAAA,SAAIC,EAAuCtlB,GAEzC,MAAO,CADQg9C,EAAIh9C,EAAO,GAAIoO,KAAK1D,MAAO0D,KAAK8sB,KAAM9sB,KAAKk4B,KAAMl4B,KAAKxL,QAGzE,EALA,CAA4B,EAAAq6C,KAO5B,SAAgBD,EAAI90C,EAAWwC,EAAewwB,EAAcoL,EAAc1jC,GAMxE,IALA,IAAMkC,EAAIoD,EAAE/H,KAAK,GACX46B,EAAI7yB,EAAE/H,KAAK,GACXo5B,EAAIrxB,EAAEkI,UACRylC,EAAc,EAETj4C,EAAI,EAAGA,EAAIsK,EAAE/H,KAAKF,SAAUrC,EACnCi4C,GAAe3tC,EAAE/H,KAAKvC,GAGxB,IAAMs/C,EAAiBrH,EAAc9a,EAG/B1oB,EAAS,IAAI,EAAAxP,OAAOqF,EAAE/H,KAAM+H,EAAEpF,MAC9BmtC,EAAc,IAAItuC,MAAM2Z,EAAK5Y,UAAUE,KAAKsF,EAAE/H,OAGpD,IAASvC,EAAI,EAAGA,EAAIqyC,EAAEhwC,SAAUrC,EAC9BqyC,EAAEryC,GAAK0oC,EAWT,IAPA,IACM6W,EAAmB,IAAIjsC,cADH6pB,EAAIn4B,EAAO,GAAKizC,GAGpCuH,EAAgB1yC,EAAQ9H,EACxBy6C,GAAUz6C,EAAO,GAAK,EAGnBnD,EAAI,EAAGA,EAAIqF,IAAKrF,EAAG,CAE1B6b,EAAKzQ,SAASN,IAAI4yC,EAAkB5jB,EAAG8jB,EAASxH,EAAaqH,EAAiBz9C,EAAGy9C,GAGjF,IAAK,IAAI7+C,EAAI,EAAGA,EAAIuE,IAAQvE,EAC1Bid,EAAKzQ,SAASJ,KAAKwlC,EAAGkN,EAAkBD,EAAiBz9C,EAAGpB,EAAIw3C,EAAaA,EAAauH,GAG5F,IAAS/+C,EAAI,EAAGA,EAAI08B,IAAK18B,EAAG,CAC1B,IAAMi/C,EAAkB79C,EAAIy9C,EAAiB7+C,EAAIw3C,EAGjDv6B,EAAKiiC,gBAAgBtN,EAAGA,EAAGqN,EAAiBA,EAAkBzH,EAAaA,GAG3Ev6B,EAAKzQ,SAASJ,KACVwlC,EAAGkN,EAAkBG,GAAkBj/C,EAAIuE,EAAO,GAAKizC,EAAaA,EAAauH,GAGrF9hC,EAAKzQ,SAASJ,KAAKwlC,EAAGkN,EAAkBG,GAAkBj/C,EAAI,GAAKw3C,EAAaA,GAAcuH,IAUlG,OANA9hC,EAAKzQ,SAASF,KAAKslC,EAAGA,EAAG,EAAG,EAAG30B,EAAK5Y,UAAUE,KAAKsF,EAAE/H,OAAQ+6B,GAE7D5f,EAAKzQ,SAASD,IAAIqlC,EAAG1W,EAAG,EAAG,EAAGje,EAAK5Y,UAAUE,KAAKsF,EAAE/H,OAEpDkS,EAAOjC,UAAUrN,IAAIktC,GAEd59B,EAlEI,EAAAqvB,SAOb,S,2FCPA,+BAmCA,OAhCE,YAAA5I,WAAA,SAAWC,GACT3qB,KAAK1D,MAAQquB,EAAWE,SAAS,QAAS,MAC1C7qB,KAAK8sB,KAAOnC,EAAWE,SAAS,OAAQ,KACxC7qB,KAAKk4B,KAAOvN,EAAWE,SAAS,OAAQ,GACxC7qB,KAAKxL,KAAOm2B,EAAWK,OAAO,SAGhC,YAAAC,YAAA,SAAYr5B,GACV,SAAKA,GAA4B,IAAlBA,EAAOC,YAKlBD,EAAO,GAAGG,KAAKF,OAAS,IAIrBmO,KAAKkrB,gBAAgBt5B,KAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GACxB,MAAuB,YAAnBA,EAAO,GAAG8C,MAAyC,YAAnB9C,EAAO,GAAG8C,MAWlD,EAnCA,GAAsB,EAAAm6C,O,i1BCLtB,YACA,OAIA,2B,+CAKA,OAL4B,OAC1B,YAAA53B,IAAA,SAAIC,EAAuCtlB,GAEzC,MAAO,CADQkJ,EAAIlJ,EAAO,GAAIoO,KAAKjP,KAAMiP,KAAKnP,MAAOmP,KAAKrB,QAG9D,EALA,CAA4B,EAAA05B,KAO5B,SAAgBv9B,EAAIhB,EAAW/I,EAAcF,EAAe8N,GAC1D,IAAM6oC,EAAkB1tC,EAAE/H,KACpBq9C,EA+ER,SAAyB5H,EAAoC7oC,GAC3D,IAAMywC,EAAmB77C,MAAMi0C,EAAgB31C,QAC/CvB,OAAO++C,OAAOD,EAAkB5H,GAChC,IAAK,IAAIh4C,EAAI,EAAGA,EAAIg4C,EAAgB31C,OAAQrC,IAC1C4/C,EAAiB5/C,IAAMmP,EAAKnP,GAAKmP,EAAKnP,EAAI4/C,EAAiBv9C,QAE7D,OAAOu9C,EArFkBE,CAAgB9H,EAAiB7oC,GAEpDsF,EAAS,IAAI,EAAAxP,OAAO26C,EAAkBt1C,EAAEpF,MAE9C,OAAQ3D,GACN,IAAK,WACH,IAAK,IAAIwM,EAAM,EAAGA,EAAM6xC,EAAiB5zC,QAAO,SAAC+zC,EAAKC,GAAQ,OAAAD,EAAMC,IAAK,GAAIjyC,IAAO,CAClF,IAAMkyC,EAAMC,EAAgBnyC,EAAK6xC,GACjCnrC,EAAOtP,IAAI86C,EAAK5+C,GAElB,IAAS0M,EAAM,EAAGA,EAAMiqC,EAAgBhsC,QAAO,SAAC+zC,EAAKC,GAAQ,OAAAD,EAAMC,IAAK,GAAIjyC,IAAO,CAC3EkyC,EAAMC,EAAgBnyC,EAAKiqC,GACjCvjC,EAAOtP,IAAI86C,EAAI13C,KAAI,SAAC6C,EAAGpL,GAAM,OAAAoL,EAAI+D,EAAKnP,MAAKsK,EAAErJ,IAAIg/C,IAEnD,MACF,IAAK,UACH,IAASlyC,EAAM,EAAGA,EAAM6xC,EAAiB5zC,QAAO,SAAC+zC,EAAKC,GAAQ,OAAAD,EAAMC,IAAK,GAAIjyC,IAAO,CAC5EkyC,EAAMC,EAAgBnyC,EAAK6xC,GACjCnrC,EAAOtP,IAAI86C,EAAK31C,EAAErJ,IAAIg/C,EAAI13C,KAAI,SAAC6C,EAAGpL,GAAM,OAAAmgD,EAAmB/0C,EAAG+D,EAAKnP,GAAIg4C,EAAgBh4C,SAEzF,MACF,IAAK,OACH,IAAS+N,EAAM,EAAGA,EAAM6xC,EAAiB5zC,QAAO,SAAC+zC,EAAKC,GAAQ,OAAAD,EAAMC,IAAK,GAAIjyC,IAAO,CAC5EkyC,EAAMC,EAAgBnyC,EAAK6xC,GACjCnrC,EAAOtP,IAAI86C,EAAK31C,EAAErJ,IAAIg/C,EAAI13C,KAAI,SAAC6C,EAAGpL,GAAM,OAAAogD,EAAah1C,EAAG+D,EAAKnP,GAAIg4C,EAAgBh4C,SAEnF,MACF,QACE,MAAMwG,MAAM,qBAGhB,OAAOiO,EAGT,SAAS0rC,EAAmBh8C,EAAesC,EAAgBzB,GACzD,GAAIb,EAAQsC,EAAQ,CAClB,IAAM45C,GAAY55C,EAAStC,EAAQ,IAAMa,EAAO,GAEhD,OAAkB,IADApB,KAAKiC,OAAOY,EAAStC,EAAQ,IAAMa,EAAO,IAAM,EAEzDA,EAAOq7C,EAAW,EAElBA,EAAW,EAEf,GAAIl8C,EAAQsC,EAASzB,EAC1B,OAAOb,EAAQsC,EAET45C,GAAYl8C,GAASsC,EAASzB,KAAUA,EAAO,GAErD,OAAkB,IADApB,KAAKiC,OAAO1B,GAASsC,EAASzB,KAAUA,EAAO,IAAM,EAE9DA,EAAOq7C,EAAW,EAElBA,EAAW,EAKxB,SAASD,EAAaj8C,EAAesC,EAAgBzB,GACnD,OAAIb,EAAQsC,EACH,EACEtC,EAAQsC,EAASzB,EACnBb,EAAQsC,EAERzB,EAAO,EAIlB,SAASk7C,EAAgBI,EAAqBC,GAC5C,GAAID,EAAc,GAAMC,EAAUC,MAAK,SAAA91B,GAAO,OAAAA,EAAM,KAClD,MAAMlkB,MAAM,4BAEd,IAAMi6C,EAAa,EAAIF,GAKvB,OAJAE,EAAW32C,UAIJ22C,EAAWl4C,KAAI,SAAClH,EAAO8C,EAAOoO,GAAU,OAAA3O,KAAKiC,MAAMy6C,EAH1D,SAAiB/tC,GACf,OAAOA,EAAMvG,QAAO,SAAC+zC,EAAKC,GAAQ,OAAAD,EAAMC,IAAK,GAEyBhT,CAAQz6B,EAAM1I,MAAM,EAAG1F,KAAW9C,KACrGyI,UArFM,EAAAk6B,SAOb,S,gjBCZA,YACA,OACA,OAGA,2B,+CAMA,OANoC,OAClC,YAAAvc,IAAA,SAAIC,EAAuCtlB,GAGzC,MAAO,CADHs+C,EAAYt+C,EAAO,GAAIoO,KAAKlB,QAASkB,KAAK4tB,gBAAiB5tB,KAAKtB,YAAasB,KAAKrB,KAAMqB,KAAK7G,WAGrG,EANA,CAAoC,EAAA40B,aAAvB,EAAA+D,iBAQb,+B,+CAKA,OAL0C,OACxC,YAAA7a,IAAA,SAAIC,EAAuCtlB,GAEzC,MAAO,CADQu+C,EAAkBv+C,EAAO,MAG5C,EALA,CAA0C,EAAAo8B,mBAA7B,EAAA+E,uBAOb,+B,+CAKA,OALgC,OAC9B,YAAA9b,IAAA,SAAIC,EAAuCtlB,GAEzC,MAAO,CADQw+C,EAAQx+C,EAAO,GAAIoO,KAAKlB,QAASkB,KAAKtB,YAAasB,KAAKrB,KAAMqB,KAAK7G,WAGtF,EALA,CAAgC,EAAA+0B,SAAnB,EAAAqF,aAOb,+B,+CAKA,OALsC,OACpC,YAAAtc,IAAA,SAAIC,EAAuCtlB,GAEzC,MAAO,CADQy+C,EAAcz+C,EAAO,MAGxC,EALA,CAAsC,EAAAu8B,eAQtC,SAAgB+hB,EACZlyC,EAAec,EAAiB8uB,EAA0BlvB,EAAuBC,EACjFxF,GACF,OAAOgV,GACH,EAAOnQ,EAAOc,EAAS8uB,EAAiBlvB,EAAaC,EAAMxF,EAAS,GAAG,SAAC5J,EAAGmD,GAAM,OAACnD,EAAImD,KAAI,SAACnD,EAAGmD,GAAM,OAACnD,EAAImD,KAG/G,SAAgBy9C,EAAkBnyC,GAChC,OAAOmQ,GAAK,EAAMnQ,EAAO,UAAU,EAAO,GAAI,GAAI,GAAI,GAAG,SAACzO,EAAGmD,GAAM,OAACnD,EAAImD,KAAI,SAACnD,EAAGmD,GAAM,OAACnD,EAAImD,KAG7F,SAAgB09C,EACZpyC,EAAec,EAAiBJ,EAAuBC,EAAgBxF,GACzE,OAAOgV,GACH,EAAOnQ,EAAOc,GAAS,EAAOJ,EAAaC,EAAMxF,EAASiC,OAAOk1C,kBAAkB,SAAC/gD,EAAGmD,GAAM,OAACU,KAAKC,IAAI9D,EAAGmD,MAC1G,SAACnD,EAAGmD,GAAM,OAAAnD,KAGhB,SAAgB8gD,EAAcryC,GAC5B,OAAOmQ,GACH,EAAMnQ,EAAO,UAAU,EAAO,GAAI,GAAI,GAAI5C,OAAOk1C,kBAAkB,SAAC/gD,EAAGmD,GAAM,OAACU,KAAKC,IAAI9D,EAAGmD,MAAK,SAACnD,EAAGmD,GAAM,OAAAnD,KAmB/G,SAAgB4e,EACZ3P,EAA2BR,EAAec,EAAiB8uB,EAA0BlvB,EACrFC,EAAgBxF,EAAmBo3C,EAAkBC,EACrDC,GAEF,EAAA1xC,aAAaR,qBAAqBC,EAAkBR,EAAMjM,KAAM2M,EAAavF,EAASwF,GAetF,IAZA,IAAMvM,EACF,EAAA2M,aAAaE,uBAAuBT,EAAkBR,EAAMjM,KAAMoH,EAASuF,EAAaC,EAAMG,GAE5F4xC,EAAa,EAAAp8C,UAAUE,KAAKkK,GAC5BiyC,EAAgB,EAAAr8C,UAAU2E,eAAeyF,GACzCkyC,EAAcD,EAAc9+C,OAC5BqH,EAAO9G,EAAYP,OAEnBg/C,EAAa,EAAAv8C,UAAUE,KAAKpC,GAC5B6R,EAAS,IAAI,EAAAxP,OAAOrC,EAAa4L,EAAMtJ,MACvCo8C,EAAe,EAAAx8C,UAAU2E,eAAe7G,GAErCmL,EAAM,EAAGA,EAAMszC,EAAYtzC,IAAO,CAKzC,IAJA,IAAMwzC,EAAS,EAAAz8C,UAAUmF,gBAAgB8D,EAAKuzC,GACxCE,EAAWD,EAAO13C,MAAM,GACxBS,EAAIi3C,EAAO13C,MAAM,GAEd7J,EAAI,EAAGA,EAAIohD,EAAaphD,IAC/BwhD,EAAS93C,EAAO03C,EAAcphD,GAAKuhD,EAAO73C,EAAO03C,EAAcphD,GAAK2J,EAAQ3J,GAE9E,IAAIqB,EAAQ0/C,EACRz1C,EAAM,EACNm2C,GAAQ,EAEZ,IAASzhD,EAAI,EAAGA,EAAIkhD,EAAYlhD,IAAK,CACnC,IAAMyG,EAAS,EAAA3B,UAAUmF,gBAAgBjK,EAAGmhD,GAC5CM,GAAQ,EAER,IAAK,IAAI77C,EAAI8D,EAAO03C,EAAax7C,EAAI8D,EAAM9D,IAGzC,GAFA0E,EAAE1E,GAAK47C,EAAS57C,GAAKa,EAAOb,EAAI8D,EAAO03C,GAAejyC,EAAKvJ,EAAI,GAE3D0E,EAAE1E,IAAM4I,EAAMjM,KAAKqD,IAAM0E,EAAE1E,GAAK,EAAG,CACrC0F,IACAm2C,GAAQ,EACR,MAGJpgD,EAAQogD,EAAQpgD,EAAQ2/C,EAAU3/C,EAAOmN,EAAMvN,IAAIqJ,IAErDjJ,EAA0B4/C,EAAQ5/C,EAA1B+8B,EAAiC8iB,EAA6BA,EAAa51C,GACnFmJ,EAAOtP,IAAIo8C,EAAQlgD,GAGrB,OAAOoT,EAlGI,EAAA+uB,mBAQb,gBAOA,sBAIA,YAOA,kBAqBA,U,wnBC1EA,YAEA,OAGA,2B,+CAKA,OALkC,OAChC,YAAA/b,IAAA,SAAIC,EAAuCtlB,GAEzC,MAAO,CADQs/C,EAAUt/C,EAAO,GAAI,EAAA0C,UAAUsF,cAAcoG,KAAKnG,KAAMjI,EAAO,GAAGG,KAAKF,QAASmO,KAAK3B,YAGxG,EALA,CAAkC,EAAAi6B,YAArB,EAAAtE,eAOb,+B,+CAKA,OALwC,OACtC,YAAA/c,IAAA,SAAIC,EAAuCtlB,GAEzC,MAAO,CADQu/C,EAAgBv/C,EAAO,GAAI,EAAA0C,UAAUsF,cAAcoG,KAAKnG,KAAMjI,EAAO,GAAGG,KAAKF,QAASmO,KAAK3B,YAG9G,EALA,CAAwC,EAAAi6B,YAA3B,EAAArE,qBAOb,+B,+CAKA,OALqC,OACnC,YAAAhd,IAAA,SAAIC,EAAuCtlB,GAEzC,MAAO,CADQw/C,EAAax/C,EAAO,GAAI,EAAA0C,UAAUsF,cAAcoG,KAAKnG,KAAMjI,EAAO,GAAGG,KAAKF,QAASmO,KAAK3B,YAG3G,EALA,CAAqC,EAAAi6B,YAAxB,EAAA3E,kBAOb,+B,+CAKA,OALkC,OAChC,YAAA1c,IAAA,SAAIC,EAAuCtlB,GAEzC,MAAO,CADQy/C,EAAUz/C,EAAO,GAAI,EAAA0C,UAAUsF,cAAcoG,KAAKnG,KAAMjI,EAAO,GAAGG,KAAKF,QAASmO,KAAK3B,YAGxG,EALA,CAAkC,EAAAi6B,YAArB,EAAA1E,eAOb,+B,+CAKA,OALkC,OAChC,YAAA3c,IAAA,SAAIC,EAAuCtlB,GAEzC,MAAO,CADQ0/C,EAAU1/C,EAAO,GAAI,EAAA0C,UAAUsF,cAAcoG,KAAKnG,KAAMjI,EAAO,GAAGG,KAAKF,QAASmO,KAAK3B,YAGxG,EALA,CAAkC,EAAAi6B,YAArB,EAAAxE,eAOb,+B,+CAKA,OALmC,OACjC,YAAA7c,IAAA,SAAIC,EAAuCtlB,GAEzC,MAAO,CADQ2/C,EAAW3/C,EAAO,GAAI,EAAA0C,UAAUsF,cAAcoG,KAAKnG,KAAMjI,EAAO,GAAGG,KAAKF,QAASmO,KAAK3B,YAGzG,EALA,CAAmC,EAAAi6B,YAAtB,EAAAzE,gBAOb,+B,+CAKA,OALmC,OACjC,YAAA5c,IAAA,SAAIC,EAAuCtlB,GAEzC,MAAO,CADQ4/C,EAAW5/C,EAAO,GAAI,EAAA0C,UAAUsF,cAAcoG,KAAKnG,KAAMjI,EAAO,GAAGG,KAAKF,QAASmO,KAAK3B,YAGzG,EALA,CAAmC,EAAAi6B,YAQnC,SAAgB4Y,EAAUlzC,EAAenE,EAAgBwE,GACvD,OAAO,EAAAb,WAAWN,WAAWc,EAAOnE,EAAMwE,GAAU,SAAA3L,GAAK,OAAAA,KAAG,SAACnD,EAAGmD,GAAM,OAAAnD,EAAImD,KAG5E,SAAgBy+C,EAAgBnzC,EAAenE,EAAgBwE,GAC7D,OAAO,EAAAb,WAAWN,WAAWc,EAAOnE,EAAMwE,GAAU,SAAA3L,GAAK,OAAAA,EAAIA,KAAG,SAACnD,EAAGmD,GAAM,OAAAnD,EAAImD,KAGhF,SAAgB0+C,EAAapzC,EAAenE,EAAgBwE,GAG1D,IAFA,IAAM4F,EAAS,EAAAzG,WAAWN,WAAWc,EAAOnE,EAAMwE,GAAU,SAAA3L,GAAK,OAAAA,KAAG,SAACnD,EAAGmD,GAAM,OAAAnD,EAAImD,KAC5Eb,EAASoS,EAAOjC,UAAUnQ,OACvBrC,EAAI,EAAGA,EAAIqC,EAAQrC,IAC1ByU,EAAOjC,UAAUxS,GAAK4D,KAAKmR,IAAIN,EAAOjC,UAAUxS,IAElD,OAAOyU,EAGT,SAAgBotC,EAAUrzC,EAAenE,EAAgBwE,GACvD,OAAO,EAAAb,WAAWN,WAAWc,EAAOnE,EAAMwE,GAAU,SAAA3L,GAAK,OAAAA,KAAG,SAACnD,EAAGmD,GAAM,OAAAU,KAAKC,IAAI9D,EAAGmD,MAGpF,SAAgB4+C,EAAUtzC,EAAenE,EAAgBwE,GACvD,OAAO,EAAAb,WAAWN,WAAWc,EAAOnE,EAAMwE,GAAU,SAAA3L,GAAK,OAAAA,KAAG,SAACnD,EAAGmD,GAAM,OAAAU,KAAKwpB,IAAIrtB,EAAGmD,MAGpF,SAAgB6+C,EAAWvzC,EAAenE,EAAgBwE,GAOxD,IANA,IAAM4F,EAAS,EAAAzG,WAAWN,WAAWc,EAAOnE,EAAMwE,GAAU,SAAA3L,GAAK,OAAAA,KAAG,SAACnD,EAAGmD,GAAM,OAAAnD,EAAImD,KAC5EkJ,EAAa,EAAA4B,WAAWC,gBAAgBO,EAAMjM,KAAkB8H,EAAMwE,GAGtEozC,EAFY,EAAAn9C,UAAUE,KAAKwJ,EAAMjM,MACpB,EAAAuC,UAAUE,KAAKoH,GAE5B/J,EAASoS,EAAOjC,UAAUnQ,OACvBrC,EAAI,EAAGA,EAAIqC,EAAQrC,IAC1ByU,EAAOjC,UAAUxS,GAAKyU,EAAOjC,UAAUxS,GAAKiiD,EAE9C,OAAOxtC,EAGT,SAAgButC,EAAWxzC,EAAenE,EAAgBwE,GACxD,OAAO,EAAAb,WAAWN,WAAWc,EAAOnE,EAAMwE,GAAU,SAAA3L,GAAK,OAAAA,KAAG,SAACnD,EAAGmD,GAAM,OAAAnD,EAAImD,KA/C/D,EAAAqhC,gBAQb,cAIA,oBAIA,iBASA,cAIA,cAIA,eAaA,gB,4bC7FA,YACA,OACA,OAGA,2B,+CAKA,OALgC,OAC9B,YAAA9c,IAAA,SAAIC,EAAuCtlB,GAEzC,MAAO,CADQwlB,EAAQxlB,EAAO,GAAIA,EAAO,MAG7C,EALA,CAAgC,EAAAylB,SAOhC,SAAgBD,EAAQtd,EAAWvE,GACjC,IAAM+E,EAAe,EAAAhG,UAAU4F,sBAAsBJ,EAAE/H,KAAMwD,EAAM4hB,aAC7DlT,EAAS,IAAI,EAAAxP,OAAO6F,EAAcR,EAAEpF,MAG1C,OAFUuP,EAAOpG,WACflJ,IAAImF,EAAE+D,YACDoG,EAZI,EAAAkwB,aAOb,a,wbCZA,YACA,OAKA,2B,+CAIA,OAJ8B,OAC5B,YAAAld,IAAA,SAAIC,EAAuCtlB,GACzC,MAAO,CAAC2D,EAAM3D,EAAO,MAEzB,EAJA,CAA8B,EAAA8/C,OAM9B,SAAgBn8C,EAAMuE,GAGpB,IAFA,IAAMmK,EAAS,IAAI,EAAAxP,OAAO,CAACqF,EAAE/H,KAAKF,QAAS,SACrCiM,EAAOmG,EAAOnG,KACXtO,EAAI,EAAGA,EAAIsO,EAAKjM,SAAUrC,EACjCsO,EAAKtO,GAAKsK,EAAE/H,KAAKvC,GAGnB,OAAOyU,EAbI,EAAAmwB,WAMb,W,6FCPA,+BAYA,OATE,YAAA1J,WAAA,SAAWC,KAEX,YAAAM,YAAA,SAAYr5B,GACV,SAAKA,GAA4B,IAAlBA,EAAOC,SAM1B,EAZA,GAAsB,EAAA6/C,S,scCLtB,YACA,OACA,OAGA,2B,+CAKA,OAL8B,OAC5B,YAAAz6B,IAAA,SAAIC,EAAuCtlB,GAEzC,MAAO,CADQyH,EAAMzH,EAAO,GAAIoO,KAAKu4B,OAAQv4B,KAAKw4B,KAAMx4B,KAAKnG,QAGjE,EALA,CAA8B,EAAA4+B,OAAjB,EAAA/D,WAOb,+B,+CAWA,OAXiC,OAC/B,YAAAzd,IAAA,SAAIC,EAAuCtlB,GACzC,GAAIA,EAAOC,QAAU,GAAKD,EAAO,GAAGulB,YAAY64B,MAAK,SAACxgD,GAAc,OAAM,IAANA,KAClE,MAAM,IAAIwG,MAAM,oDAElB,IAAMuiC,EAAShlC,MAAM4N,KAAKvP,EAAO,GAAGulB,aAC9BqhB,EAAOjlC,MAAM4N,KAAKvP,EAAO,GAAGulB,aAC5Btd,EAAOjI,EAAOC,QAAU,EAAI0B,MAAM4N,KAAKvP,EAAO,GAAGulB,aAAe,GAEtE,MAAO,CADQ9d,EAAMzH,EAAO,GAAI2mC,EAAQC,EAAM3+B,KAGlD,EAXA,CAAiC,EAAA6+B,UAajC,SAAgBr/B,EACZS,EAAWy+B,EAA+BC,EAA6B3+B,GACrD,IAAhBA,EAAKhI,SACPgI,EAAOC,EAAE/H,KAAKgG,KAAI,SAACmiB,EAAK3c,GAAQ,OAAAA,MAElC1D,EAAO,EAAAvF,UAAUsF,cAAcC,EAAMC,EAAE/H,KAAKF,QAC5C0mC,EAASA,EAAOxgC,KAAI,SAACgB,EAAOwE,GAC1B,OAAIxE,EAAQe,EAAE/H,KAAK8H,EAAK0D,IAAQ,EACvBzD,EAAE/H,KAAK8H,EAAK0D,IAEd,EAAAjJ,UAAUoF,cAAcX,EAAOe,EAAE/H,KAAK8H,EAAK0D,QAEpDi7B,EAAOA,EAAKzgC,KAAI,SAACiB,EAAKuE,GACpB,OAAIvE,EAAMc,EAAE/H,KAAK8H,EAAK0D,IAAQ,EACrBzD,EAAE/H,KAAK8H,EAAK0D,IAEd,EAAAjJ,UAAUoF,cAAcV,EAAKc,EAAE/H,KAAK8H,EAAK0D,QAElD,IAAM/I,EAAiB,GACjBm9C,EAA2B,GACjC93C,EAAKyD,SAAQ,SAAC4c,EAAK3c,GACjB/I,EAAK0lB,GAAOse,EAAKj7B,GAAOg7B,EAAOh7B,GAC/Bo0C,EAAez3B,GAAOqe,EAAOh7B,MAE/B,IAAK,IAAI/N,EAAI,EAAGA,EAAIsK,EAAE/H,KAAKF,OAAQrC,IACjCgF,EAAKhF,GAAKgF,EAAKhF,IAAMsK,EAAE/H,KAAKvC,GAC5BmiD,EAAeniD,GAAKmiD,EAAeniD,IAAM,EAG3C,IAAMoiD,EAAgB,EAAAt9C,UAAU2E,eAAezE,GACzCq9C,EAAgB,EAAAv9C,UAAU2E,eAAea,EAAE/H,KAAO+H,EAAE/H,KAAO,CAAC+H,EAAEgE,KAAKjM,SACnEs5B,EAAIrxB,EAAEgE,KACNmG,EAAS,IAAI,EAAAxP,OAAOD,EAAMsF,EAAEpF,MAC5BmtC,EAAI59B,EAAOnG,KACjB,IAAStO,EAAI,EAAGA,EAAIqyC,EAAEhwC,SAAUrC,EAAG,CACjC,IACMy+C,EADkB,EAAA35C,UAAUmF,gBAAgBjK,EAAGoiD,GACb75C,KAAI,SAAC2oC,EAAKtrC,GAAM,OAAAsrC,EAAMiR,EAAev8C,MACvE84C,EAAY,EAAA55C,UAAUiF,gBAAgB00C,EAAiB4D,GAC7DhQ,EAAEryC,GAAK27B,EAAE+iB,GAEX,OAAOjqC,EArDI,EAAAwwB,cAab,W,28BCzBA,YACA,OACA,UAGA,2B,+CAKA,OALgC,OAC9B,YAAAxd,IAAA,SAAIC,EAAuCtlB,GAEzC,MAAO,CADQkgD,EAAQlgD,EAAO,GAAIoO,KAAKnH,QAG3C,EALA,CAAgC,EAAAu1B,SAOhC,SAAgB0jB,EAAQh4C,EAAWjB,GACjC,IAAM2uC,EAAkB1tC,EAAE/H,KACpB0D,EAAY+xC,EAAgB31C,OAElCgH,EAAOqU,EAAK5Y,UAAUoF,cAAcb,EAAMpD,GAS1C,IARA,IAAMiB,EAAIwW,EAAK5Y,UAAUwE,gBAAgB0uC,EAAiB3uC,GACpDk5C,EAAI7kC,EAAK5Y,UAAUsE,kBAAkB4uC,EAAiB3uC,GAEtDsyB,EAAIrxB,EAAE+D,WAENoG,EAAS,IAAI,EAAAxP,OAAOqF,EAAE/H,KAAM+H,EAAEpF,MAC9BmtC,EAAI59B,EAAOpG,WAERrO,EAAI,EAAGA,EAAIkH,EAAGlH,IAAK,CAM1B,IAJA,IAAMyG,EAASzG,EAAIuiD,EAGf1+C,EAAM+H,OAAO6oB,UACR7uB,EAAI,EAAGA,EAAI28C,EAAG38C,IACjB+1B,EAAEl1B,EAASb,GAAK/B,IAClBA,EAAM83B,EAAEl1B,EAASb,IAKrB,IAAIg2B,EAAQ,EACZ,IAASh2B,EAAI,EAAGA,EAAI28C,EAAG38C,IAAK,CAC1B,IAAMvE,EAAQs6B,EAAEl1B,EAASb,GAAK/B,EAC9BwuC,EAAE5rC,EAASb,GAAKhC,KAAKs/B,IAAI7hC,GACzBu6B,GAASh4B,KAAKs/B,IAAI7hC,GAIpB,IAASuE,EAAI,EAAGA,EAAI28C,EAAG38C,IACP,IAAVg2B,EACFyW,EAAE5rC,EAASb,GAAK,EAEhBysC,EAAE5rC,EAASb,IAAMg2B,EAKvB,OAAOnnB,EAlDI,EAAA0wB,aAOb,a,4bCZA,YACA,OACA,OAGA,2B,+CAKA,OALgC,OAC9B,YAAA1d,IAAA,SAAIC,EAAuCtlB,GAEzC,MAAO,CADQogD,EAAQpgD,EAAO,GAAIoO,KAAKnG,QAG3C,EALA,CAAgC,EAAA8+B,SAOhC,SAAgBqZ,EAAQl4C,EAAWD,GACjC,IAAM+B,EAAa,EAAAtH,UAAUqH,aAAa7B,EAAE/H,KAAM8H,GAC5CoK,EAAS,IAAI,EAAAxP,OAAOmH,EAAY9B,EAAEpF,MAElCy2B,EAAIrxB,EAAE+D,WAKZ,OAJUoG,EAAOpG,WAEflJ,IAAIw2B,GAEClnB,EAhBI,EAAA4wB,aAOb,a,obCZA,YACA,OAGA,2B,+CAKA,OAL4B,OAC1B,YAAA5d,IAAA,SAAIC,EAAuCtlB,GAEzC,MAAO,CADQs7B,EAAIt7B,KAGvB,EALA,CAA4B,EAAAy8B,KAO5B,SAAgBnB,EAAIpzB,GAIlB,IAHA,IAAMmK,EAAS,IAAI,EAAAxP,OAAOqF,EAAE,GAAG/H,KAAM+H,EAAE,GAAGpF,MACpCF,EAAOsF,EAAE,GAAGkI,UAAUnQ,OACtBgwC,EAAI59B,EAAOjC,UACRxS,EAAI,EAAGA,EAAIsK,EAAEjI,OAAQrC,IAE5B,IADA,IAAM4rB,EAAMthB,EAAEtK,GAAGwS,UACR5M,EAAI,EAAGA,EAAIZ,IAAQY,EAC1BysC,EAAEzsC,IAAMgmB,EAAIhmB,GAIhB,OAAO6O,EAlBI,EAAA6wB,SAOb,S,sbCdA,YACA,OACA,OAGA,2B,+CAKA,OAL6B,OAC3B,YAAA7d,IAAA,SAAIC,EAAuCtlB,GAEzC,MAAO,CADQqgD,EAAKrgD,EAAO,GAAIA,EAAO,MAG1C,EALA,CAA6B,EAAAgnC,MAO7B,SAAgBqZ,EAAKn4C,EAAWo4C,GAI9B,IAHA,IAAMngD,EAAO+H,EAAE/H,KAAO+H,EAAE/H,KAAO,CAAC+H,EAAEgE,KAAKjM,QACjCqH,EAAOnH,EAAKF,OACZ+7C,EAAU,IAAIr6C,MAAM2F,GACjB1J,EAAI,EAAGA,EAAI0J,EAAM1J,IACxBo+C,EAAQp+C,GAAKuC,EAAKvC,GAAK0iD,EAAQr0C,WAAWrO,GAE5C,IAAMs+C,EAAc,EAAAx5C,UAAU2E,eAAelH,GACvCg8C,EAAiB,EAAAz5C,UAAU2E,eAAe20C,GAC1C3pC,EAAS,IAAI,EAAAxP,OAAOm5C,EAAS9zC,EAAEpF,MAC/BmtC,EAAI59B,EAAOpG,WAEXstB,EAAIrxB,EAAEgE,KACZ,IAAStO,EAAI,EAAGA,EAAIqyC,EAAEhwC,SAAUrC,EAAG,CAGjC,IAFA,IAAMw+C,EAAkB,EAAA15C,UAAUmF,gBAAgBjK,EAAGu+C,GAC/CE,EAAkB,IAAI16C,MAAM2F,GACzB9D,EAAI,EAAGA,EAAI8D,IAAQ9D,EAC1B64C,EAAgB74C,GAAK44C,EAAgB54C,GAAK0E,EAAE/H,KAAKqD,GAEnD,IAAM84C,EAAY,EAAA55C,UAAUiF,gBAAgB00C,EAAiBH,GAC7DjM,EAAEryC,GAAK27B,EAAE+iB,GAEX,OAAOjqC,EA7BI,EAAAgxB,UAOb,U,gcCTA,YACA,OACA,OAGA,2B,+CAKA,OALkC,OAChC,YAAAhe,IAAA,SAAIC,EAAuCtlB,GAEzC,MAAO,CADQwH,EAAUxH,EAAO,GAAIoO,KAAKrF,QAG7C,EALA,CAAkC,EAAAk+B,WAOlC,SAAgBz/B,EAAUU,EAAWa,GACnC,IAAM8D,EAAY3E,EAAE/H,KACdmH,EAAOuF,EAAU5M,OAKnBsgD,EAAY,IAAI5+C,MAAc2F,GAClC,GAAIyB,EAAK9I,SAAWqH,EAClBi5C,EAAYx3C,OAEZ,IAAK,IAAInL,EAAI,EAAGA,EAAI0J,EAAM1J,IACxB2iD,EAAU3iD,GAAK0J,EAAO1J,EAAI,EAI9B,IAAMoM,EAAa,IAAIrI,MAAc2F,GAC/BoG,EAAS,IAAI/L,MAAc2F,GAKjC,IAAS1J,EAAI,EAAGA,EAAI0J,EAAM1J,IAAK,CAC7B,IAAM4iD,EAASD,EAAU3iD,GACzBoM,EAAWpM,GAAKiP,EAAU2zC,GAExB9yC,EAAO9P,GADL4iD,EAAS,EAAIl5C,EACH,EAAA5E,UAAUsE,kBAAkB6F,EAAW2zC,EAAS,GAEhD,EAIhB,IAwE8BC,EAA4B18C,EAA0BC,EAxE9EqO,EAAS,IAAI,EAAAxP,OAAOmH,EAAY9B,EAAEpF,MAElCy2B,EAAIrxB,EAAEkI,UACN6/B,EAAI59B,EAAOjC,UAIbswC,EAAkB,EAClBC,EAAkB,EAClBC,EAAkB,EAClBC,GAAW,EACf,IAASjjD,EAAI0J,EAAO,EAAG1J,GAAK,IAAKA,EAAG,CAClC,IAAMkjD,EAAUP,EAAU3iD,GACtBijD,GAAaC,IAAYljD,EAC3B+iD,GAAmB9zC,EAAUi0C,IAE7BD,GAAW,EACXD,GAAmB/zC,EAAUi0C,KAC3BJ,GAYN,OARwB,IAApBE,GAkD0BH,EAjDLE,EAiDiC58C,EAjDhBksC,EAiD0CjsC,EAjDvCu1B,EAkD7C,EAAAgkB,gBAAgBx5C,EAAQC,EAAQ,EAAG,EAAGy8C,IAjDP,IAApBE,EA+Bb,SACII,EAAiBC,EAAsBC,EAAmBvzC,EAAkB3J,EAC5EC,GAKF,IAJA,IAAMC,EAAc,IAAItC,MAAco/C,GAAS12C,KAAK,GAEhD62C,EAAmB,EAEdtjD,EAAI,EAAGA,EAAIqjD,IAAarjD,EAAG,CAClC,IAAMujD,EAAe,EAAAz+C,UAAUiF,gBAAgB1D,EAAayJ,EAAQqzC,GACpEh9C,EAAOm9C,KAAsBl9C,EAAOm9C,GACpC,EAAAz+C,UAAUyF,eAAelE,EAAa+8C,EAAYD,IAxClDK,CAAmBV,EAAiB12C,EAAY42C,EAAiBlzC,EAAQuiC,EAAG1W,GAUhF,SACIwnB,EAAiBC,EAAsBC,EAAmBR,EAA4B/yC,EACtF3J,EAA0BC,GAM5B,IALA,IAAMC,EAAc,IAAItC,MAAco/C,GAAS12C,KAAK,GAGhD62C,EAAmB,EAEdtjD,EAAI,EAAGA,EAAIqjD,IAAarjD,EAAG,CAClC,IAAMyjD,EAAa,EAAA3+C,UAAUiF,gBAAgB1D,EAAayJ,EAAQqzC,GAClE,EAAAxD,gBAAgBx5C,EAAQC,EAAQk9C,EALT,EAK8CG,EAAYZ,GAEjF,EAAA/9C,UAAUyF,eAAelE,EAAa+8C,EAAYD,GAClDG,GAAoBT,GArBpBa,CAAYZ,EAAiB12C,EAAY42C,EAAiBD,EAAiBjzC,EAAQuiC,EAAG1W,GAGjFlnB,EArEI,EAAAixB,eAOb,e,gcCZA,YACA,OACA,OAGA,2B,+CAKA,OALkC,OAChC,YAAAje,IAAA,SAAIC,EAAuCtlB,GAEzC,MAAO,CADQuhD,EAAUvhD,EAAO,GAAIoO,KAAKnG,QAG7C,EALA,CAAkC,EAAAo/B,WAOlC,SAAgBka,EAAUr5C,EAAWD,GACnC,IAAM+B,EAAa,EAAAtH,UAAU0H,eAAelC,EAAE/H,KAAM8H,GAC9CoK,EAAS,IAAI,EAAAxP,OAAOmH,EAAY9B,EAAEpF,MAElCy2B,EAAIrxB,EAAE+D,WAKZ,OAJUoG,EAAOpG,WAEflJ,IAAIw2B,GAEClnB,EAhBI,EAAAkxB,eAOb,e,g2BCZA,YACA,OAGA,2B,+CAYA,OAZiC,OAC/B,YAAAle,IAAA,SAAIC,EAAuCtlB,GAA3C,WACQwhD,EAAQxhD,EAAO,GAAGG,KAClBshD,EAAQD,EAAMr7C,KAAI,SAACQ,EAAK/I,GAAM,OAAA4D,KAAKiC,MAAMkD,EAAM,EAAK2gC,OAAO1pC,OAC3DiM,EAAI,IAAI,EAAAhH,OAAO4+C,EAAOzhD,EAAO,GAAG8C,MAMtC,MALkB,YAAdsL,KAAKjP,KACPuiD,EAAgB1hD,EAAO,GAAGkM,KAAMrC,EAAEqC,KAAMs1C,EAAOC,EAAOrzC,KAAKk5B,QAE3Dqa,EAAe3hD,EAAO,GAAGkM,KAAMrC,EAAEqC,KAAMs1C,EAAOC,EAAOrzC,KAAKk5B,QAErD,CAACz9B,IAEZ,EAZA,CAAiC,EAAA29B,UAApB,EAAAhE,cAcb,+B,+CAkBA,OAlBmC,OACjC,YAAAne,IAAA,SAAIC,EAAuCtlB,GACzC,IAAMsnC,EAAStnC,EAAO,GAAGoQ,UAEzB,GAAkB,WAAdhC,KAAKjP,MAAuC,IAAlBmoC,EAAOrnC,QAAkC,IAAlBqnC,EAAOrnC,OAC1D,MAAM,IAAImE,MAAM,sDAGlB,IAAMo9C,EAAQxhD,EAAO,GAAGG,KAClBshD,EAAQD,EAAMr7C,KAAI,SAACQ,EAAK/I,GAAM,OAAA4D,KAAKiC,MAAMkD,EAAM2gC,EAAO1pC,OACtDiM,EAAI,IAAI,EAAAhH,OAAO4+C,EAAOzhD,EAAO,GAAG8C,MAMtC,MALkB,YAAdsL,KAAKjP,KACPuiD,EAAgB1hD,EAAO,GAAGkM,KAAMrC,EAAEqC,KAAMs1C,EAAOC,EAAO,EAAIna,IAE1Dqa,EAAe3hD,EAAO,GAAGkM,KAAMrC,EAAEqC,KAAMs1C,EAAOC,EAAO,EAAIna,IAEpD,CAACz9B,IAEZ,EAlBA,CAAmC,EAAA49B,YAoBnC,SAASia,EACLE,EAA4CC,EAC5CL,EAA8BC,EAA8Bna,GAC9D,IAAM3gC,EAAM66C,EAAMvhD,OAEZ6hD,EAAkB,IAAIngD,MAAcgF,GAC1Cm7C,EAAgBz3C,KAAK,GACrB,IAAM03C,EAAiB,IAAIpgD,MAAcgF,GACzCo7C,EAAep7C,EAAM,GAAK,EAC1B,IAAK,IAAI/I,EAAI+I,EAAM,EAAG/I,GAAK,EAAGA,IAC5BmkD,EAAenkD,GAAKmkD,EAAenkD,EAAI,GAAK4jD,EAAM5jD,EAAI,GAExD,IAAMokD,EAAmB,IAAIrgD,MAAcgF,GAC3Cq7C,EAAiB33C,KAAK,GACtB23C,EAAiBr7C,EAAM,IAAM,EAI7B,IAFA,IAAIs7C,EAAO,EACPC,EAAO,EACJD,EAAOJ,EAAM5hD,OAAQgiD,IAAQ,CAClC,IAAK,IAAIE,EAASx7C,EAAM,EAAGw7C,GAAU,EAAGA,IAAU,CAChD,KAAMH,EAAiBG,GAAUV,EAAMU,GAAS,CAC9C,IAAIC,EAAyB,EACvBC,EAAcC,EAAsBN,EAAiBG,GAAS7a,EAAO6a,IAC3EC,EAAyB5gD,KAAKiC,MAAM4+C,IACpCD,EAAyB5gD,KAAKC,IAAI,EAAGD,KAAKwpB,IAAIo3B,EAAyBZ,EAAMW,GAAU,OAExDL,EAAgBK,KAC7CD,IAASE,EAAyBN,EAAgBK,IAAWJ,EAAeI,GAC5EL,EAAgBK,GAAUC,GAE5B,MAEAJ,EAAiBG,GAAU,EAC3BD,IAAS,EAAIJ,EAAgBK,IAAWJ,EAAeI,GACvDL,EAAgBK,GAAU,EAG9BN,EAAMI,GAAQL,EAAMM,IAIxB,SAASP,EACLC,EAA4CC,EAC5CL,EAA8BC,EAA8Bna,GAC9D,IAAMib,EAAwB,IAAjBf,EAAMvhD,QAarB,SACI2hD,EAA0BC,EAA0BzI,EAAmBoJ,EAAqBC,EAC5FC,EAAoBC,EAAsBC,EAAqBC,EAAqBC,GAatF,IAZA,IAAMC,EAAsB,GACtBC,EAAsB,GAEtBC,EAAkB,IAAIthD,MAAcghD,GACpCO,EAAkB,IAAIvhD,MAAcghD,GACpCQ,EAAO,IAAIxhD,MAAcihD,GACzBQ,EAAO,IAAIzhD,MAAcihD,GACzBS,EAAM,IAAI1hD,MAAcghD,GACxBW,EAAM,IAAI3hD,MAAcghD,GACxBY,EAAM,IAAI5hD,MAAcihD,GACxBY,EAAM,IAAI7hD,MAAcihD,GAErB/4C,EAAI,EAAGA,EAAI84C,IAAgB94C,EAAG,CACrC,IAAI45C,EAAMnB,EAAsBz4C,EAAGg5C,GACnCE,EAAU54C,KAAKs5C,GACfA,EAAMjiD,KAAKC,IAAI,EAAGD,KAAKwpB,IAAIy4B,EAAKhB,EAAc,IAE9C,IAAMiB,EAAOliD,KAAKwpB,IAAIxpB,KAAKiC,MAAMggD,GAAMhB,EAAc,GAC/CkB,EAAOniD,KAAKwpB,IAAI04B,EAAO,EAAGjB,EAAc,GAE1CiB,IAASC,GACXN,EAAIx5C,GAAK,GACTy5C,EAAIz5C,GAAK,KAETw5C,EAAIx5C,GAAKrI,KAAK+9B,IAAIkkB,EAAMC,GACxBJ,EAAIz5C,GAAKrI,KAAK+9B,IAAIkkB,EAAME,IAG1BV,EAAgBp5C,GAAK64C,EAAagB,EAClCR,EAAgBr5C,GAAK64C,EAAaiB,EAGpC,IAAK,IAAIz7C,EAAI,EAAGA,EAAI06C,IAAe16C,EAAG,CACpC,IAAI07C,EAAMtB,EAAsBp6C,EAAG46C,GACnCE,EAAU74C,KAAKy5C,GACfA,EAAMpiD,KAAKC,IAAI,EAAGD,KAAKwpB,IAAI44B,EAAKlB,EAAa,IAE7CS,EAAKj7C,GAAK1G,KAAKwpB,IAAIxpB,KAAKiC,MAAMmgD,GAAMlB,EAAa,GACjDU,EAAKl7C,GAAK1G,KAAKwpB,IAAIm4B,EAAKj7C,GAAK,EAAGw6C,EAAa,GAEzCS,EAAKj7C,KAAOk7C,EAAKl7C,IACnBq7C,EAAIr7C,GAAK,GACTs7C,EAAIt7C,GAAK,KAETq7C,EAAIr7C,GAAK1G,KAAK+9B,IAAIqkB,EAAMT,EAAKj7C,IAC7Bs7C,EAAIt7C,GAAK1G,KAAK+9B,IAAIqkB,EAAMR,EAAKl7C,KAMjC,IAFA,IAAI27C,EAAU,EACVC,EAAU,EACLrkD,EAAI,EAAGA,EAAI25C,IAAa35C,EAC/B,IAAK,IAAIpB,EAAI,EAAGA,EAAImkD,IAAenkD,EAAG,CACpC,IAASwL,EAAI,EAAGA,EAAI84C,IAAgB94C,EAClC,IAAS3B,EAAI,EAAGA,EAAI06C,IAAe16C,EAAG,CACpC,IAAM67C,EAAMnC,EAAMiC,EAAUZ,EAAgBp5C,GAAKs5C,EAAKj7C,IAChD87C,EAAMpC,EAAMiC,EAAUZ,EAAgBp5C,GAAKu5C,EAAKl7C,IAChD+7C,EAAMrC,EAAMiC,EAAUX,EAAgBr5C,GAAKs5C,EAAKj7C,IAChDg8C,EAAMtC,EAAMiC,EAAUX,EAAgBr5C,GAAKu5C,EAAKl7C,IAEtD25C,EAAMiC,EAAUlB,EAAc/4C,EAAI3B,GAC7Bs7C,EAAIt7C,GAAKo7C,EAAIz5C,GAAKk6C,EAAMR,EAAIr7C,GAAKo7C,EAAIz5C,GAAKm6C,EAAMR,EAAIt7C,GAAKm7C,EAAIx5C,GAAKo6C,EAAMV,EAAIr7C,GAAKm7C,EAAIx5C,GAAKq6C,EAGnGL,GAAWpB,EAAcC,EACzBoB,GAAWlB,EAAcD,GAzE7BwB,CACIvC,EAA4BC,EARdU,EAAO,EAAIf,EAAM,GACfe,EAAO,EAAIf,EAAM,GACjBe,EAAOf,EAAM,GAAKA,EAAM,GACzBe,EAAOf,EAAM,GAAKA,EAAM,GACtBe,EAAOd,EAAM,GAAKA,EAAM,GACzBc,EAAOd,EAAM,GAAKA,EAAM,GAIbc,EAAOjb,EAAO,GAAKA,EAAO,GAAIib,EAAOjb,EAAO,GAAKA,EAAO,IA4EzF,SAASgb,EAAsB8B,EAAkBC,GAI/C,OAAOD,EAAWC,EA1JP,EAAA5gB,iB,sgEClBb,eAIA,OAEA,UAEA,SAMA,aAKE,aAIEr1B,KAAKk2C,aAAc,EAEnBl2C,KAAKgK,OA4BT,WACE,GAAyB,oBAAd4wB,WAA6BA,UAAW,CAEjD,GAA6C,iBAAlCA,UAAUub,oBACnB,OAAO/iD,KAAKC,IAAID,KAAK81B,KAAK0R,UAAUub,oBAAsB,GAAK,EAAG,GAMpE,GAAsB,WAAlBvlB,EAASzgC,MACPygC,EAASgM,KAA8B,QAAvBhM,EAASgM,GAAGwB,QAA2C,SAAvBxN,EAASgM,GAAGwB,QAC9D,OAAO,EAKb,OAAO,EA7CSgY,GAEdp2C,KAAK+I,YAAc,IAwBvB,OAtBQ,YAAA2hB,WAAN,W,0FAEe,OA0CjB,SAAkC1gB,GAChC,IAAK5O,OAAO0T,SAAS9E,IAAW5O,OAAOmd,MAAMvO,GAC3C,MAAM,IAAIhU,MAASgU,EAAM,mCAE3B,IAAK5O,OAAOC,UAAU2O,GACpB,MAAM,IAAIhU,MAASgU,EAAM,4DAhDzBqsC,CAAyBr2C,KAAKgK,QACjB,GAAMhK,KAAKs2C,mB,OACxB,OADa,SAIN,CAAP,GAAO,GAFE,CAAP,GAAO,WAIX,YAAAnV,qBAAA,SAAqBt1B,GACnB,OAAO,IAAI,EAAA0qC,mBAAmBv2C,KAAM6L,EAAS7L,KAAKk2C,cAEpD,YAAA7U,QAAA,aAEM,YAAAiV,gBAAN,W,gGAEI,O,sBAAA,GAAME,EAAYltC,KAAKtJ,KAAKgK,OAAQhK,KAAK+I,c,OACzC,OADA,SACO,CAAP,GAAO,G,OAGP,O,WADA,EAAAzC,OAAOtB,QAAQ,cAAe,6CAA6C,GACpE,CAAP,GAAO,G,yBAGb,EArCA,GAAa,EAAA87B,e,cCjBb1xC,EAAOD,QAAU,SAASC,GAoBzB,OAnBKA,EAAOqnD,kBACXrnD,EAAOsnD,UAAY,aACnBtnD,EAAO+vC,MAAQ,GAEV/vC,EAAOunD,WAAUvnD,EAAOunD,SAAW,IACxCrmD,OAAOC,eAAenB,EAAQ,SAAU,CACvCoB,YAAY,EACZC,IAAK,WACJ,OAAOrB,EAAOS,KAGhBS,OAAOC,eAAenB,EAAQ,KAAM,CACnCoB,YAAY,EACZC,IAAK,WACJ,OAAOrB,EAAOI,KAGhBJ,EAAOqnD,gBAAkB,GAEnBrnD,I,6BC+BR,IAAImhC,E,mFACJ,IAAI3nB,GAAc,EACdC,GAAe,EAOnB,kBACE,GAAID,EACF,OAAOhB,QAAQC,UAEjB,GAAIgB,EACF,MAAM,IAAI7S,MAAM,wCAKlB,OAFA6S,GAAe,EAER,IAAIjB,SAAc,SAACC,EAASC,IAEjCyoB,EAAU,EAAQ,MACVA,GAAS5oB,MACb,WAEEE,IACAgB,GAAe,EACfD,GAAc,KAEhB,SAAA4B,GACE3B,GAAe,EACff,EAAO0C,UAMjB,iBAGE,aACExK,KAAK42C,KAAO,EACZ52C,KAAK62C,kBAAoB,EA0O7B,OAlOE,YAAAC,MAAA,SAAMjsC,G,IAAsB,wDAC1B,IAAKjC,EACH,MAAM,IAAI5S,MAAM,2DAElB,IAAMuQ,EAAY,EAAAa,MAEZnR,EAAmB,GACnBzB,EAAOkW,EAAYI,iBAAiB7U,EAAQ8U,GAC9CvW,EAAOwL,KAAK62C,mBACd72C,KAAK+2C,aAAaviD,GAEpBkW,EAAYM,eAAeulB,EAASymB,OAAOp5B,SAAS5d,KAAK42C,KAAM52C,KAAK42C,KAAOpiD,GAAOyB,EAAQ8U,GAE1F,IAAMksC,EAAgB,EAAA7vC,MACtBpH,KAAKwH,KAAKqD,EAAc7K,KAAK42C,MAC7B,IAAMM,EAAc,EAAA9vC,MAEpBsD,EAAYW,iBAAiBklB,EAASymB,OAAOp5B,SAAS5d,KAAK42C,KAAM52C,KAAK42C,KAAOpiD,GAAOyB,EAAQ8U,GAC5F,IAAMtE,EAAU,EAAAW,MAEhB,MAAO,CAACb,UAAS,EAAEE,QAAO,EAAEwwC,cAAa,EAAEC,YAAW,IAKxD,YAAAC,SAAA,SAAStsC,EAAsB/M,GAC7B,IAAK8K,EACH,MAAM,IAAI5S,MAAM,2DAElB,IAAMuQ,EAAY,EAAAa,MAEZ5S,EAAOsJ,EAAKwD,WACd9M,EAAOwL,KAAK62C,mBACd72C,KAAK+2C,aAAaviD,GAIpB+7B,EAASymB,OAAOp5B,SAAS5d,KAAK42C,KAAM52C,KAAK42C,KAAOpiD,GAAMG,IAAImJ,GAE1D,IAAMm5C,EAAgB,EAAA7vC,MACtBpH,KAAKwH,KAAKqD,EAAc7K,KAAK42C,MAC7B,IAAMM,EAAc,EAAA9vC,MAMpB,OAHAtJ,EAAKnJ,IAAI47B,EAASymB,OAAOp5B,SAAS5d,KAAK42C,KAAM52C,KAAK42C,KAAOpiD,IAGlD,CAAC+R,UAAS,EAAEE,QAFH,EAAAW,MAEY6vC,cAAa,EAAEC,YAAW,IAG9C,YAAA1vC,KAAV,SAAeqD,EAAsB+rC,IAGnCpvC,EADc+oB,EAAgB1lB,IACzB+rC,IAGA,EAAA9rC,iBAAP,SAAwB7U,EAAkB8U,GAGxC,IADA,IAAIvW,EAAO,EAAI,EAAIuW,EAAOlZ,OACjBrC,EAAI,EAAGA,EAAIub,EAAOlZ,OAAQrC,IAAK,CACtC,IAAM4nD,EAAQrsC,EAAOvb,GACf6nD,EAAYD,EAAM,GAClBE,EAAYF,EAAM,GAClBG,EAAYH,EAAM,GAEpBvjC,EAAM,EACV,OAAQyjC,GACN,IAAK,OACL,IAAK,QACL,IAAK,UACHzjC,EAAM,EACN,MACF,IAAK,UACHA,EAAM,EACN,MACF,IAAK,UACH,IAAKwjC,EAAW,CAEdphD,EAAO8F,KAAK,GACZ,SACK,IAAIxI,MAAM4M,QAAQk3C,KAAc92C,YAAY6Z,OAAOi9B,GAGxD,MAAM,IAAIrhD,MAAM,gDAFhB6d,EAAM,EAAIzgB,KAAK81B,KAAKmuB,EAAUxlD,OAAS,GAIzC,MACF,IAAK,WACL,IAAK,aACH,IAAKwlD,EAAW,CAEdphD,EAAO8F,KAAK,GACZ,SACK,GAAIxI,MAAM4M,QAAQk3C,GAAY,CACnC,GAAkB,UAAdE,GAAuC,QAAdA,EAC3B,MAAM,IAAIp8C,UAAU,+DAEtB0Y,EAAyB,EAAnBwjC,EAAUxlD,WACX,KAAI0O,YAAY6Z,OAAOi9B,GAG5B,MAAM,IAAIl8C,UAAU,sCAFpB0Y,EAAMwjC,EAAU/1C,WAIlB,MACF,QACE,MAAM,IAAItL,MAAM,iCAAiCshD,GAGrDrhD,EAAO8F,KAAKvH,GACZA,GAAQqf,EAGV,OAAOrf,GAIF,EAAAwW,eAAP,SAAsBwsC,EAAoBvhD,EAAkB8U,GAC1D,IAAM0sC,EAAS,IAAI90C,WAAW60C,EAAOp2C,OAAQo2C,EAAOn2C,YAC9Cq2C,EAAU,IAAI90C,YAAY40C,EAAOp2C,OAAQo2C,EAAOn2C,YAChDs2C,EAAU,IAAI90C,aAAa20C,EAAOp2C,OAAQo2C,EAAOn2C,YAEvDq2C,EAAQ,GAAK3sC,EAAOlZ,OAEpB,IAAK,IAAIrC,EAAI,EAAGA,EAAIub,EAAOlZ,OAAQrC,IAAK,CACtC,IAAM4nD,EAAQrsC,EAAOvb,GACf6nD,EAAYD,EAAM,GAClBE,EAAYF,EAAM,GAClBG,EAAYH,EAAM,GAClBQ,EAAU3hD,EAAOzG,GACjBqoD,EAAWD,GAAW,EAI5B,GAFAF,EAAQloD,EAAI,GAAKooD,EAEC,QAAdL,GAAmC,IAAZK,EAI3B,OAAQN,GACN,IAAK,OACHE,EAAOI,IAA8D,IAAlDP,EAAyD,EAAI,EAChF,MACF,IAAK,QACHI,EAAOI,GAAYR,EACnB,MACF,IAAK,UACHM,EAAQE,GAAYR,EACpB,MACF,IAAK,UACH,IAAMS,EAAYT,EAElBG,EAAO55B,SAASg6B,EAASA,EAAUE,EAAUjmD,QAAQ8C,IAAI0iD,GACzD,MACF,IAAK,WACH,IAAMU,EAAcV,EACpBI,EAAO75B,SAASi6B,EAAUA,EAAWE,EAAWlmD,QAAQ8C,IAAIojD,GAC5D,MACF,IAAK,aACH,IAAMC,EAAgBX,EACtBM,EAAQ/5B,SAASi6B,EAAUA,EAAWG,EAAanmD,QAAQ8C,IAAIqjD,GAC/D,MACF,QACE,MAAM,IAAIhiD,MAAM,iCAAiCshD,MAMlD,EAAAjsC,iBAAP,SAAwBjK,EAAoBnL,EAAkB8U,GAK5D,IAJA,IAAM4sC,EAAU,IAAI90C,aAAazB,EAAOA,OAAQA,EAAOC,YACjD42C,EAAU,IAAIt1C,WAAWvB,EAAOA,OAAQA,EAAOC,YAC/Cm2C,EAAS,IAAIj1C,WAAWnB,EAAOA,OAAQA,EAAOC,YAE3C7R,EAAI,EAAGA,EAAIub,EAAOlZ,OAAQrC,IAAK,CACtC,IAAM4nD,EAAQrsC,EAAOvb,GACf6nD,EAAYD,EAAM,GAClBE,EAAYF,EAAM,GAClBG,EAAYH,EAAM,GAClBQ,EAAU3hD,EAAOzG,GAEjBqoD,EAAWD,GAAW,EAG5B,GAAkB,QAAdL,GAAqC,UAAdA,EAI3B,OAAQD,GACN,IAAK,aACH,IAAMU,EAAgBX,EACtBW,EAAarjD,IAAIgjD,EAAQ/5B,SAASi6B,EAAUA,EAAWG,EAAanmD,SACpE,MACF,IAAK,WACH,IAAMkmD,EAAcV,EACpBU,EAAWpjD,IAAIsjD,EAAQr6B,SAASi6B,EAAUA,EAAWE,EAAWlmD,SAChE,MACF,IAAK,UACH,IAAMimD,EAAaT,EACnBS,EAAUnjD,IAAI6iD,EAAO55B,SAASg6B,EAASA,EAAUE,EAAUjmD,SAC3D,MACF,QACE,MAAM,IAAImE,MAAM,iCAAiCshD,MAMjD,YAAAP,aAAR,SAAqBmB,GAQnB,GANkB,IAAdl4C,KAAK42C,MACPrmB,EAAS4nB,MAAMn4C,KAAK42C,MAGtB52C,KAAK62C,kBAAoB,EAAIqB,EAC7Bl4C,KAAK42C,KAAOrmB,EAAS6nB,QAAQp4C,KAAK62C,mBAChB,IAAd72C,KAAK42C,KACP,MAAM,IAAI5gD,MAAM,4DAIpB,YAAAqrC,QAAA,WACE,IAAKz4B,EACH,MAAM,IAAI5S,MAAM,2DAEA,IAAdgK,KAAK42C,MACPrmB,EAAS4nB,MAAMn4C,KAAK42C,OAG1B,EA/OA,GAAa,EAAAlsC,cAoPA,EAAAtD,IAA8B,oBAAhBoB,aAA+BA,YAAYpB,IAAO,WAAM,OAAAoB,YAAYpB,OAAQlB,KAAKkB,K,iCC3U5G,IACMixC,EADFh1B,GAEqCg1B,GADnCA,EAAiC,oBAAb7c,UAA4BA,SAAS8c,cAAgB9c,SAAS8c,cAAcjrC,SAAM1a,IACxC4lD,EAC3D,SACAl1B,GAGLA,OAAuB,KAFzBA,EAASA,GAAU,IAEkBA,EAAO,GAA9C,IAA4ElyB,EAAvBqnD,EAAgB,GAAW,IAAIrnD,KAAOkyB,EAAWA,EAAO5xB,eAAeN,KAAMqnD,EAAgBrnD,GAAKkyB,EAAOlyB,IAAM,IAAIsnD,EAAW,GAA0FC,GAAmB,EAAUC,GAAsB,EAAUC,GAAoB,EAAUC,GAAqB,EAAMH,EAAmC,iBAATjpD,OAAkBkpD,EAA6C,mBAAhBG,cAA2BF,EAAqC,iBAAVhqC,GAA8C,iBAAnBA,EAAQC,UAAoD,iBAAxBD,EAAQC,SAAS1C,KAAgB0sC,GAAsBH,IAAqBE,IAAsBD,EAAsB,IAA4JI,EAAgBC,EAA8BC,EAAWC,EAAjNC,EAAgB,GAAG,SAASC,EAAWra,GAAM,OAAG1b,EAAmB,WAAUA,EAAmB,WAAE0b,EAAKoa,GAAwBA,EAAgBpa,EAA8E6Z,GAA+CO,EAAvBR,EAAuC,EAAQ,IAAQ/Y,QAAQuZ,GAAiB,IAAyBE,EAAU,IAAIN,EAAM,SAAoBO,EAASC,GAAuH,OAA3GN,IAAOA,EAAO,EAAQ,KAAUC,IAASA,EAAS,EAAQ,KAAQI,EAASJ,EAAoB,UAAEI,GAAiBL,EAAqB,aAAEK,EAASC,EAAO,KAAK,SAASP,EAAW,SAAoBM,GAAU,IAAIl6B,EAAI25B,EAAMO,GAAS,GAAiE,OAAvDl6B,EAAIhe,SAAQge,EAAI,IAAI7c,WAAW6c,IAAKo6B,EAAOp6B,EAAIhe,QAAege,GAAQxQ,EAAc,KAAE/c,OAAO,GAAe+c,EAAc,KAAE,GAAGmU,QAAQ,MAAM,KAAK01B,EAAW7pC,EAAc,KAAEvV,MAAM,GAAGuV,EAAY,GAAE,qBAAoB,SAAS6qC,GAAI,KAAKA,aAAcC,IAAa,MAAMD,KAAM7qC,EAAY,GAAE,qBAAqB+qC,IAAuDt2B,EAAgB,QAAE,WAAW,MAAM,+BAAsCw1B,GAAsC,oBAANr9B,OAAmBu9B,EAAM,SAAoB/lC,GAAG,OAAOwI,KAAKxI,KAAIgmC,EAAW,SAAoBhmC,GAAG,IAAIlV,EAAK,MAAuB,mBAAb87C,WAAgC,IAAIr3C,WAAWq3C,WAAW5mC,KAA0BwmC,EAAqB,iBAA3C17C,EAAK0d,KAAKxI,EAAE,YAAgDlV,IAA4B,oBAAZ+7C,WAAyBpB,EAAWoB,gBAAqC,IAAXn7B,YAAwB+5B,EAAW/5B,WAA8F,oBAARo7B,QAAyC,oBAAVn1C,UAAsBA,QAAQ,IAAGA,QAAQJ,IAAIu1C,MAAMn1C,QAAQo1C,KAAKp1C,QAAQM,MAAwB,oBAAX+0C,SAAuBA,SAASF,SAAepB,GAAoBC,KAA0BA,EAAuBQ,EAAgB7qC,KAAK2rC,SAASC,KAAa1e,SAAS8c,gBAAea,EAAgB3d,SAAS8c,cAAcjrC,KAAOgrC,IAAYc,EAAgBd,GAAoDc,EAAH,IAAnCA,EAAgBr9C,QAAQ,SAA8Bq9C,EAAgBn9B,OAAO,EAAEm9B,EAAgBh+B,YAAY,KAAK,GAAwB,GAAI49B,EAAM,SAAoBoB,GAAK,IAAIC,EAAI,IAAIC,eAAwD,OAAzCD,EAAIE,KAAK,MAAMH,GAAI,GAAOC,EAAIG,KAAK,MAAaH,EAAII,cAAiB7B,IAAuBK,EAAW,SAAoBmB,GAAK,IAAIC,EAAI,IAAIC,eAAuF,OAAxED,EAAIE,KAAK,MAAMH,GAAI,GAAOC,EAAIK,aAAa,cAAcL,EAAIG,KAAK,MAAa,IAAIh4C,WAAW63C,EAAIhT,aAAuW,IAAI/nB,EAAIgE,EAAc,OAAG1e,QAAQJ,IAAInT,KAAKuT,SAAa6F,EAAI6Y,EAAiB,UAAG1e,QAAQo1C,KAAK3oD,KAAKuT,SAAS,IAAIxT,KAAOqnD,EAAoBA,EAAgB/mD,eAAeN,KAAMkyB,EAAOlyB,GAAKqnD,EAAgBrnD,IAAMqnD,EAAgB,KAAQn1B,EAAkB,YAAEo1B,EAAWp1B,EAAkB,WAAKA,EAAoB,aAAcA,EAAoB,YAAKA,EAAa,MAAQA,EAAa,KAAk4E,IAAmEq3B,EAA+3BC,EAA/6BC,EAAY,SAAS/pD,KAAyCwyB,EAAmB,aAAEq3B,EAAWr3B,EAAmB,YAAuBA,EAAsB,eAAgBA,EAAsB,cAA0B,iBAAdF,aAAwB3Y,EAAI,mCAA8sB,IAAIqwC,EAAU,IAAI13B,YAAY23B,MAAM,CAAC,QAAU,GAAG,QAAU,GAAK,QAAU,YAAgBC,GAAM,EAAuB,SAASvB,EAAOwB,EAAUC,GAAUD,GAAWrB,GAAM,qBAAqBsB,GAA65B,IAAqBC,EAAiC,oBAAdC,YAA0B,IAAIA,YAAY,aAAQxoD,EAAU,SAASyoD,EAAkBC,EAAQ3a,EAAI4a,GAA6D,IAA7C,IAAIC,EAAO7a,EAAI4a,EAAmBE,EAAO9a,EAAU2a,EAAQG,MAAWA,GAAQD,MAAUC,EAAO,GAAGA,EAAO9a,EAAI,IAAI2a,EAAQz9B,UAAUs9B,EAAa,OAAOA,EAAYvnC,OAAO0nC,EAAQz9B,SAAS8iB,EAAI8a,IAAyB,IAAX,IAAIv6C,EAAI,GAASy/B,EAAI8a,GAAO,CAAC,IAAIC,EAAGJ,EAAQ3a,KAAO,GAAQ,IAAH+a,EAAL,CAAoD,IAAIC,EAAkB,GAAfL,EAAQ3a,KAAU,GAAa,MAAN,IAAH+a,GAAJ,CAAmE,IAAIE,EAAkB,GAAfN,EAAQ3a,KAAsG,IAA1E+a,EAAL,MAAN,IAAHA,IAAqB,GAAHA,IAAQ,GAAGC,GAAI,EAAEC,GAAe,EAAHF,IAAO,GAAGC,GAAI,GAAGC,GAAI,EAAiB,GAAfN,EAAQ3a,MAAgB,MAAOz/B,GAAK+N,OAAOqO,aAAao+B,OAAQ,CAAC,IAAIG,EAAGH,EAAG,MAAMx6C,GAAK+N,OAAOqO,aAAa,MAAMu+B,GAAI,GAAG,MAAS,KAAHA,SAAjR36C,GAAK+N,OAAOqO,cAAiB,GAAHo+B,IAAQ,EAAEC,QAArHz6C,GAAK+N,OAAOqO,aAAao+B,GAAoV,OAAOx6C,EAAI,SAAS46C,EAAaC,EAAIR,GAAgB,OAAOQ,EAAIV,EAAkBpE,EAAO8E,EAAIR,GAAgB,GAA0qC,oBAAdH,aAA0B,IAAIA,YAAY,YAAkP,IAA2G/5C,EAAa41C,EAAsB+E,EAA1IC,EAAe,MAAM,SAASC,EAAQniD,EAAEoiD,GAAkD,OAArCpiD,EAAEoiD,EAAS,IAAGpiD,GAAGoiD,EAASpiD,EAAEoiD,GAAgBpiD,EAAwE,SAASqiD,EAA2B77C,GAAKc,EAAOd,EAAI+iB,EAAc,MAAQ,IAAI7gB,UAAUlC,GAAK+iB,EAAe,OAAS,IAAI5gB,WAAWnC,GAAK+iB,EAAe,OAAE04B,EAAO,IAAIp5C,WAAWrC,GAAK+iB,EAAe,OAAE2zB,EAAO,IAAIz0C,WAAWjC,GAAK+iB,EAAgB,QAAU,IAAI3gB,YAAYpC,GAAK+iB,EAAgB,QAAU,IAAIzgB,YAAYtC,GAAK+iB,EAAgB,QAAU,IAAIxgB,aAAavC,GAAK+iB,EAAgB,QAAU,IAAIvgB,aAAaxC,GAAK,IAAuB87C,EAAa,QAAQC,EAAe,KAASC,EAAuBj5B,EAAuB,gBAAG,SAAuT,SAASk5B,EAAqBC,GAAW,KAAMA,EAAU3qD,OAAO,GAAE,CAAC,IAAIsoC,EAASqiB,EAAUnyC,QAAQ,GAAoB,mBAAV8vB,EAAV,CAAoD,IAAI3yB,EAAK2yB,EAAS3yB,KAAsB,iBAAPA,OAAmC7U,IAAfwnC,EAAS5gB,IAAiB8J,EAAkB,UAAE7b,GAAW6b,EAAmB,WAAE7b,EAAK2yB,EAAS5gB,KAAW/R,OAAoB7U,IAAfwnC,EAAS5gB,IAAgB,KAAK4gB,EAAS5gB,UAA5N4gB,MAAvZwgB,EAAtBt3B,EAAmB,WAAcA,EAAmB,WAAkB,IAAIF,YAAYs5B,OAAO,CAAC,QAAUH,EAAuBN,OAAgC56C,EAAOu5C,EAAWv5C,QAAOk7C,EAAuBl7C,EAAOE,WAAW66C,EAA2B/6C,GAAQ26C,EAAOM,GAAgB,GAAGD,EAAkX,IAAIM,EAAa,GAAOC,EAAW,GAAOC,EAAW,GAAOC,EAAW,GAAOC,EAAc,GAAwD,SAASC,IAAS,GAAG15B,EAAe,OAA8E,IAA/C,mBAAlBA,EAAe,SAAcA,EAAe,OAAE,CAACA,EAAe,SAASA,EAAe,OAAExxB,QAAQmrD,EAAY35B,EAAe,OAAEhZ,SAAUkyC,EAAqBG,GAAc,SAASO,IAAsCV,EAAqBI,GAAY,SAASO,IAAUX,EAAqBK,GAAuF,SAASO,IAAU,GAAG95B,EAAgB,QAAiF,IAAjD,mBAAnBA,EAAgB,UAAcA,EAAgB,QAAE,CAACA,EAAgB,UAASA,EAAgB,QAAExxB,QAAQurD,EAAa/5B,EAAgB,QAAEhZ,SAAUkyC,EAAqBO,GAAe,SAASE,EAAYK,GAAIX,EAAazf,QAAQogB,GAAI,SAASD,EAAaC,GAAIP,EAAc7f,QAAQogB,GAAiBjqD,KAAK+9B,IAAkB/9B,KAAK81B,KAAoB91B,KAAKiC,MAAmBjC,KAAKwpB,IAA1F,IAAkG0gC,EAAgB,EAAMC,EAAqB,KAASC,EAAsB,KAAK,SAASC,EAAiBC,GAAIJ,IAAqBj6B,EAA+B,wBAAGA,EAA+B,uBAAEi6B,GAAkB,SAASK,GAAoBD,GAA6G,GAAzGJ,IAAqBj6B,EAA+B,wBAAGA,EAA+B,uBAAEi6B,GAAqC,GAAjBA,IAA8C,OAAvBC,IAA6BK,cAAcL,GAAsBA,EAAqB,MAAQC,GAAsB,CAAC,IAAIrjB,EAASqjB,EAAsBA,EAAsB,KAAKrjB,KAAuE,SAASwf,GAAMkE,GAA2K,MAAlKx6B,EAAgB,SAAGA,EAAgB,QAAEw6B,GAAex+B,EAATw+B,GAAM,IAAarzC,EAAIqzC,GAAM9C,GAAM,EAAkB8C,EAAK,SAASA,EAAK,+CAAqD,IAAI16B,YAAY26B,aAAaD,GAAvRx6B,EAAwB,gBAAE,GAAGA,EAAwB,gBAAE,GAAsO,IAAI06B,GAAc,wCAAwC,SAASC,GAAU1E,GAAU,OAAOtqC,OAAOxd,UAAUysD,WAAW3E,EAAS2E,WAAWF,IAAiD,IAAlCzE,EAASx9C,QAAQiiD,IAAmB,IAAIG,GAAe,iBAA0F,SAASC,KAAY,IAAI,GAAGzD,EAAY,OAAO,IAAIn4C,WAAWm4C,GAAY,GAAG1B,EAAY,OAAOA,EAAWkF,IAAqB,KAAK,kDAAmD,MAAM1zC,GAAKmvC,GAAMnvC,IAAM,SAAS4zC,KAAmB,OAAI1D,IAAahC,IAAoBC,GAAuC,mBAAR0F,MAAwQ,IAAIz2C,SAAQ,SAASC,EAAQC,GAAQD,EAAQs2C,SAA1RE,MAAMH,GAAe,CAACI,YAAY,gBAAgB32C,MAAK,SAASy/B,GAAU,IAAIA,EAAa,GAAG,KAAK,uCAAuC8W,GAAe,IAAI,OAAO9W,EAAsB,iBAAMmX,OAAM,WAAW,OAAOJ,QAAiF,SAASK,KAAa,IAAIz5C,EAAK,CAAC,IAAM05C,GAAc,uBAAyBA,IAAe,SAASC,EAAgB/zC,EAASvb,GAAQ,IAAID,EAAQwb,EAASxb,QAAQk0B,EAAY,IAAEl0B,EAAQwuD,KAA6E,SAASgB,EAA0B16C,GAAQy6C,EAAgBz6C,EAAiB,UAAG,SAAS26C,EAAuBC,GAAU,OAAOT,KAAmBz2C,MAAK,SAAS4xC,GAAQ,OAAOp2B,YAAY27B,YAAYvF,EAAOx0C,MAAQ4C,KAAKk3C,GAAS,SAAS92C,GAAQyC,EAAI,0CAA0CzC,GAAQ4xC,GAAM5xC,MAA0jB,GAAj5B01C,IAAo5Bp6B,EAAwB,gBAAG,IAAgE,OAAhDA,EAAwB,gBAAEte,EAAK25C,GAAgC,MAAMx2C,GAAgE,OAA7DsC,EAAI,sDAAsDtC,IAAU,EAA0B,OAApwB,WAA4B,GAAIwyC,GAAsD,mBAAnCv3B,YAAY47B,sBAAoCf,GAAUE,KAAgC,mBAARG,MAAiX,OAAOO,EAAuBD,GAA3XN,MAAMH,GAAe,CAACI,YAAY,gBAAgB32C,MAAK,SAASy/B,GAAqE,OAAhDjkB,YAAY47B,qBAAqB3X,EAASriC,GAAoB4C,KAAKg3C,GAA0B,SAAS52C,GAAQyC,EAAI,kCAAkCzC,GAAQyC,EAAI,6CAA6Co0C,EAAuBD,SAA+RK,GAAyB,GAAib,SAASC,GAAejE,EAAU1B,EAAS4F,EAAK13C,GAAMmyC,GAAM,qBAAqBkC,EAAab,GAAW,SAAS,CAAC1B,EAASuC,EAAavC,GAAU,mBAAmB4F,EAAK13C,EAAKq0C,EAAar0C,GAAM,qBAAqB,SAAS23C,GAA0B3qD,GAAM,OAAO4jD,GAAQ5jD,GAArsFwpD,GAAUE,MAAiBA,GAAe9E,EAAW8E,KAA6+DvB,EAAW5gD,KAAK,CAACyL,KAAK,WAAW43C,QAAwoB,IAAIC,GAAmB,GAA2B,SAASC,KAA6B,OAAOA,GAA2BC,oBAAoB,EAAE,SAASC,GAAa1D,EAAIpnD,EAAK+qD,GAA0T,MAA9SJ,GAAmBvD,GAAK,CAACA,IAAIA,EAAI4D,SAAS,CAAC5D,GAAKpnD,KAAKA,EAAK+qD,WAAWA,EAAWE,SAAS,EAAEC,QAAO,EAAMC,UAAS,GAAkC,uBAAuBP,GAAmFA,GAA2BC,sBAAjFD,GAA2BC,oBAAoB,EAA8DzD,EAAI,SAASgE,KAASnG,KAAQ,SAASoG,KAA4B,OAAO/I,EAAOnlD,OAAO,SAASmuD,KAA2B,OAAO,KAAK,SAASC,GAAuBC,EAAK7yC,EAAIw1B,GAAKmU,EAAOmJ,WAAWD,EAAK7yC,EAAIA,EAAIw1B,GAAK,SAASud,GAA0B5rD,GAAM,IAAoG,OAAhGmmD,EAAW0F,KAAK7rD,EAAK4M,EAAOE,WAAW,OAAO,IAAI66C,EAA2BxB,EAAWv5C,QAAe,EAAE,MAAM8G,KAAK,SAASo4C,GAAwBC,GAAe,IAAIC,EAAQT,KAA6F,GAAGQ,EAA5B,WAAuD,OAAO,EAA+B,IAAzB,IAAiCE,EAAQ,EAAEA,GAAS,EAAEA,GAAS,EAAE,CAAC,IAAIC,EAAkBF,GAAS,EAAE,GAAGC,GAAiP,GAAxOC,EAAkBttD,KAAKwpB,IAAI8jC,EAAkBH,EAAc,WAA0IH,GAAnHhtD,KAAKwpB,IAA1Q,WAA0Rq/B,EAAQ7oD,KAAKC,IAAnN,SAAmOktD,EAAcG,GAA3V,SAAic,OAAO,EAAM,OAAO,EAAM,IAAyvCC,GAAS,CAACC,SAAS,GAAGC,QAAQ,CAAC,KAAK,GAAG,IAAIC,UAAU,SAASC,EAAOC,GAAM,IAAI5/C,EAAOu/C,GAASE,QAAQE,GAAkB,IAAPC,GAAiB,KAAPA,IAAqB,IAATD,EAAW1hC,EAAI7U,GAAK4wC,EAAkBh6C,EAAO,IAAIA,EAAOvP,OAAO,GAAOuP,EAAOrF,KAAKilD,IAAQC,aAAQtuD,EAAUlC,IAAI,WAAqE,OAA1DkwD,GAASM,SAAS,EAAUlF,EAAO4E,GAASM,QAAQ,GAAG,IAAeC,OAAO,SAASpF,GAA+B,OAAlBD,EAAaC,IAAiBqF,MAAM,SAAShtC,EAAIC,GAAM,OAAOD,IAAM,SAASitC,GAAUC,GAAI,OAAO,EAAE,SAASC,GAASD,EAAGE,EAAWC,EAAYC,EAAOC,IAAY,SAASC,UAA0C,IAAVC,IAAsBA,GAAQ,GAAG,IAAIf,EAAQF,GAASE,QAAWA,EAAQ,GAAGhvD,QAAO8uD,GAASG,UAAU,EAAE,IAAOD,EAAQ,GAAGhvD,QAAO8uD,GAASG,UAAU,EAAE,IAAI,SAASe,GAAUR,EAAGS,EAAIC,EAAOC,GAAgB,IAAV,IAAInf,EAAI,EAAUrzC,EAAE,EAAEA,EAAEuyD,EAAOvyD,IAAI,CAA2D,IAA1D,IAAIssD,EAAIC,EAAO+F,EAAM,EAAFtyD,GAAK,GAAOqkB,EAAIkoC,EAAO+F,GAAO,EAAFtyD,EAAI,IAAI,GAAW4F,EAAE,EAAEA,EAAEye,EAAIze,IAAKurD,GAASG,UAAUO,EAAGrK,EAAO8E,EAAI1mD,IAAIytC,GAAKhvB,EAAwB,OAApBkoC,EAAOiG,GAAM,GAAGnf,EAAW,EAAE,SAASof,GAAaC,GAAItH,EAAe,EAAHsH,GAAMrF,EAAW9gD,KAAK4lD,IAAqB,IAAyBlD,GAAc,CAAC,cAAgBQ,GAAe,yBAA2BE,GAA0B,YAAcK,GAAa,MAAQM,GAAO,wBAA0BE,GAAyB,sBAAwBC,GAAuB,uBAAyBK,GAAwB,SAAWc,GAAU,QAAUE,GAAS,SAAWO,GAAU,OAASlH,EAAW,YAAcsH,GAAa,MAAQpH,GAAesH,GAAI3D,KAAan7B,EAAY,IAAE8+B,GAAI,IAAsnLC,GAAlnLhD,GAAmB/7B,EAA2B,mBAAE,WAAW,OAAO+7B,GAAmB/7B,EAA2B,mBAAEA,EAAY,IAAqB,mBAAG/F,MAAM,KAAKoB,YAAskE05B,IAA7hE/0B,EAAiC,yBAAE,WAAW,OAAgCA,EAAiC,yBAAEA,EAAY,IAA2B,yBAAG/F,MAAM,KAAKoB,YAAyB2E,EAAiB,SAAE,WAAW,OAAgBA,EAAiB,SAAEA,EAAY,IAAW,SAAG/F,MAAM,KAAKoB,YAAyB2E,EAAiB,SAAE,WAAW,OAAgBA,EAAiB,SAAEA,EAAY,IAAW,SAAG/F,MAAM,KAAKoB,YAAyB2E,EAAiB,SAAE,WAAW,OAAgBA,EAAiB,SAAEA,EAAY,IAAW,SAAG/F,MAAM,KAAKoB,YAAyB2E,EAAiB,SAAE,WAAW,OAAgBA,EAAiB,SAAEA,EAAY,IAAW,SAAG/F,MAAM,KAAKoB,YAA2B2E,EAAmB,WAAE,WAAW,OAAkBA,EAAmB,WAAEA,EAAY,IAAa,WAAG/F,MAAM,KAAKoB,YAAyB2E,EAAiB,SAAE,WAAW,OAAgBA,EAAiB,SAAEA,EAAY,IAAW,SAAG/F,MAAM,KAAKoB,YAAyB2E,EAAiB,SAAE,WAAW,OAAgBA,EAAiB,SAAEA,EAAY,IAAW,SAAG/F,MAAM,KAAKoB,YAAyB2E,EAAiB,SAAE,WAAW,OAAgBA,EAAiB,SAAEA,EAAY,IAAW,SAAG/F,MAAM,KAAKoB,YAAwB2E,EAAgB,QAAE,WAAW,OAAeA,EAAgB,QAAEA,EAAY,IAAU,QAAG/F,MAAM,KAAKoB,YAAuB2E,EAAe,OAAE,WAAW,OAAcA,EAAe,OAAEA,EAAY,IAAS,OAAG/F,MAAM,KAAKoB,YAAwB2E,EAAgB,QAAE,WAAW,OAAeA,EAAgB,QAAEA,EAAY,IAAU,QAAG/F,MAAM,KAAKoB,YAA0B2E,EAAkB,UAAE,WAAW,OAAiBA,EAAkB,UAAEA,EAAY,IAAY,UAAG/F,MAAM,KAAKoB,YAA0B2E,EAAkB,UAAE,WAAW,OAAiBA,EAAkB,UAAEA,EAAY,IAAY,UAAG/F,MAAM,KAAKoB,YAA0B2E,EAAkB,UAAE,WAAW,OAAiBA,EAAkB,UAAEA,EAAY,IAAY,UAAG/F,MAAM,KAAKoB,YAAsB2E,EAAc,MAAE,WAAW,OAAaA,EAAc,MAAEA,EAAY,IAAQ,MAAG/F,MAAM,KAAKoB,YAAwB2E,EAAgB,QAAE,WAAW,OAAO+0B,GAAQ/0B,EAAgB,QAAEA,EAAY,IAAU,QAAG/F,MAAM,KAAKoB,aAA8nCkjC,IAAllCv+B,EAAoC,4BAAE,WAAW,OAAmCA,EAAoC,4BAAEA,EAAY,IAA8B,4BAAG/F,MAAM,KAAKoB,YAA4B2E,EAAoB,YAAE,WAAW,OAAmBA,EAAoB,YAAEA,EAAY,IAAc,YAAG/F,MAAM,KAAKoB,YAAkC2E,EAA0B,kBAAE,WAAW,OAAyBA,EAA0B,kBAAEA,EAAY,IAAoB,kBAAG/F,MAAM,KAAKoB,YAA8B2E,EAAsB,cAAE,WAAW,OAAqBA,EAAsB,cAAEA,EAAY,IAAgB,cAAG/F,MAAM,KAAKoB,YAA6B2E,EAAqB,aAAE,WAAW,OAAoBA,EAAqB,aAAEA,EAAY,IAAe,aAAG/F,MAAM,KAAKoB,YAAyB2E,EAAiB,SAAE,WAAW,OAAgBA,EAAiB,SAAEA,EAAY,IAAW,SAAG/F,MAAM,KAAKoB,YAAkC2E,EAA0B,kBAAE,WAAW,OAAyBA,EAA0B,kBAAEA,EAAY,IAAoB,kBAAG/F,MAAM,KAAKoB,YAAwB2E,EAAgB,QAAE,WAAW,OAAOu+B,GAAQv+B,EAAgB,QAAEA,EAAY,IAAU,QAAG/F,MAAM,KAAKoB,aAA4vE,SAASg7B,GAAW2I,GAAQriD,KAAK7P,KAAK,aAAa6P,KAAK0N,QAAQ,gCAAgC20C,EAAO,IAAIriD,KAAKqiD,OAAOA,EAAqH,SAASprC,GAAIuY,GAA8F,SAAS8yB,IAAWF,KAAiBA,IAAU,EAAK/+B,EAAkB,WAAE,EAAQ03B,IAAakC,IAAcC,IAAa75B,EAA6B,sBAAEA,EAA6B,uBAAI85B,MAAhR3tB,EAAKA,GAAMipB,EAAc6E,EAAgB,IAAUP,IAAYO,EAAgB,IAA8Mj6B,EAAkB,WAAGA,EAAkB,UAAE,cAAc7Z,YAAW,WAAWA,YAAW,WAAW6Z,EAAkB,UAAE,MAAK,GAAGi/B,MAAS,IAAQA,MAA2B,GAAz6Fj/B,EAAkB,UAAE,WAAW,OAAiBA,EAAkB,UAAEA,EAAY,IAAY,UAAG/F,MAAM,KAAKoB,YAA0B2E,EAAkB,UAAE,WAAW,OAAiBA,EAAkB,UAAEA,EAAY,IAAa,WAAG/F,MAAM,KAAKoB,YAA2B2E,EAAmB,WAAE,WAAW,OAAkBA,EAAmB,WAAEA,EAAY,IAAc,YAAG/F,MAAM,KAAKoB,YAA6B2E,EAAqB,aAAE,WAAW,OAAoBA,EAAqB,aAAEA,EAAY,IAAgB,cAAG/F,MAAM,KAAKoB,YAAiC2E,EAAyB,iBAAE,WAAW,OAAwBA,EAAyB,iBAAEA,EAAY,IAAoB,kBAAG/F,MAAM,KAAKoB,YAA2B2E,EAAmB,WAAE,WAAW,OAAkBA,EAAmB,WAAEA,EAAY,IAAc,YAAG/F,MAAM,KAAKoB,YAA6B2E,EAAqB,aAAE,WAAW,OAAoBA,EAAqB,aAAEA,EAAY,IAAgB,cAAG/F,MAAM,KAAKoB,YAA6B2E,EAAqB,aAAE,WAAW,OAAoBA,EAAqB,aAAEA,EAAY,IAAgB,cAAG/F,MAAM,KAAKoB,YAAgC2E,EAAwB,gBAAE,WAAW,OAAuBA,EAAwB,gBAAEA,EAAY,IAAmB,iBAAG/F,MAAM,KAAKoB,YAA4B2E,EAAoB,YAAE,WAAW,OAAmBA,EAAoB,YAAEA,EAAY,IAAe,aAAG/F,MAAM,KAAKoB,YAA2B2E,EAAmB,WAAE,WAAW,OAAkBA,EAAmB,WAAEA,EAAY,IAAc,YAAG/F,MAAM,KAAKoB,YAAgC2E,EAAwB,gBAAE,WAAW,OAAuBA,EAAwB,gBAAEA,EAAY,IAAmB,iBAAG/F,MAAM,KAAKoB,YAA+B2E,EAAuB,eAAE,WAAW,OAAsBA,EAAuB,eAAEA,EAAY,IAAkB,gBAAG/F,MAAM,KAAKoB,YAA8B2E,EAAsB,cAAE,WAAW,OAAqBA,EAAsB,cAAEA,EAAY,IAAiB,eAAG/F,MAAM,KAAKoB,YAAY2E,EAAY,IAAE8+B,GAAkB9+B,EAAa,KAAE,SAAS7b,GAAM,GAAG46C,GAAW56C,EAAK6b,OAAY,CAAC,IAAIk/B,EAAIl/B,EAA6B,qBAAEA,EAA6B,qBAAE,WAAck/B,GAAIA,IAAM/6C,EAAK6b,IAAS,OAAOA,GAAsIm6B,EAAsB,SAASgF,IAAgBJ,IAAUnrC,KAAUmrC,KAAU5E,EAAsBgF,IAAodn/B,EAAY,IAAEpM,GAAOoM,EAAgB,QAAiF,IAAjD,mBAAnBA,EAAgB,UAAcA,EAAgB,QAAE,CAACA,EAAgB,UAASA,EAAgB,QAAExxB,OAAO,GAAGwxB,EAAgB,QAAE7wB,KAAlB6wB,GAGt02B,OAHi22BpM,KAG112BoM,IAKHj0B,EAAOD,QAAUk0B,I,+DChBvB,OAAe,qBACb,OAAO,IAAI5Z,OAAO,IAA0B,oB,0GCK9C,YAEA,QAEA,SACA,SAEA,aAEE,WAAqBknB,EAA2B9kB,EAA0B42C,GAArD,KAAA9xB,UAA2B,KAAA9kB,UAC9C7L,KAAK0iD,eAAiBD,EAAmB,EAAAE,sBAAsBtkC,OAAO,EAAA2S,sBAAwB,EAAA2xB,sBAclG,OAXE,YAAArhB,uBAAA,WACE,OAAO,IAAI,EAAAshB,qBAAqB5iD,KAAMA,KAAK6L,QAAQ21B,WAGrD,YAAAH,QAAA,aAEA,YAAAx5B,QAAA,SAAQsE,EAAkBuM,EAA8B/C,GACtD,IAAMxhB,EAAK,EAAAstC,gBAAgBt1B,EAAMuM,EAAQ1Y,KAAK0iD,gBAE9C,OADAvuD,EAAGu2B,WAAWve,EAAKwe,WAAYxe,EAAMwJ,GAC9BxhB,GAEX,EAjBA,GAAa,EAAAoiD,sB,4GCLb,iBACE,WAA4B7U,EAA6CF,GAA7C,KAAAE,UAA6C,KAAAF,WAG3E,OADE,YAAAH,QAAA,aACF,EAJA,GAAa,EAAAuhB,wB,6GCHb,aACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SAEa,EAAAD,sBAA0D,CACrE,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI,EAAAE,aAAa,CAAC,UAAW,SAAU,SAC/D,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI,EAAAA,aAAa,CAAC,QAAS,SACnD,CAAC,cAAe,GAAI,OAAQ,WAAM,WAAI,EAAAC,kBACtC,CAAC,qBAAsB,GAAI,KAAM,WAAM,WAAI,EAAAC,yBAC3C,CAAC,OAAQ,GAAI,OAAQ,WAAM,WAAI,EAAAC,WAC/B,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI,EAAAC,WAC7B,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI,EAAAJ,aAAa,CAAC,WAAY,SACtD,CAAC,OAAQ,GAAI,OAAQ,WAAM,WAAI,EAAAK,UAAS,KACxC,CAAC,OAAQ,GAAI,MAAO,WAAM,WAAI,EAAAA,UAAS,KACvC,CAAC,oBAAqB,GAAI,KAAM,WAAM,WAAI,EAAAC,wBAC1C,CAAC,gBAAiB,GAAI,KAAM,WAAM,WAAI,EAAAC,oBACtC,CAAC,wBAAyB,GAAI,KAAM,WAAM,WAAI,EAAAC,4BAC9C,CAAC,SAAU,GAAI,KAAM,WAAM,WAAI,EAAAC,aAC/B,CAAC,UAAW,GAAI,MAAO,WAAM,WAAI,EAAAC,cACjC,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI,EAAAV,aAAa,CAAC,UAAW,SAAU,SAC/D,CAAC,KAAM,GAAI,KAAM,WAAM,WAAI,EAAAA,aAAa,CAAC,QAAS,QAClD,CAAC,QAAS,GAAI,KAAM,WAAM,WAAI,EAAAA,aAAa,CAAC,WAAY,WACxD,CAAC,UAAW,GAAI,KAAM,WAAM,WAAI,EAAAW,cAChC,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI,EAAAX,aAAa,CAAC,UAAW,SAAU,SAC/D,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI,EAAAY,UAC5B,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI,EAAAZ,aAAa,CAAC,QAAS,W,8bClCrD,YACA,OACA,OAGA,2B,+CAkDA,OAlD4C,OAC1C,YAAA5rC,IAAA,SAAIC,EAAwCtlB,GAS1C,IARA,IAAMkI,EAAIlI,EAAO,GACXw5B,EAAQx5B,EAAO,GACfc,EAAId,EAAO,GACX05B,EAAO15B,EAAO,GACd21C,EAAW31C,EAAO,GAGpB61C,EAAc,EACTj4C,EAAI,EAAGA,EAAIsK,EAAE/H,KAAKF,OAAQrC,IACjCi4C,GAAe3tC,EAAE/H,KAAKvC,GAIxB,IAAMiM,EAAI,IAAI,EAAAhH,OAAOqF,EAAE/H,KAAM+H,EAAEpF,MAO/B,OANA,EAAAgW,YAAYD,cAAcqsC,MACtB,2BAA4B,CAACh9C,EAAEkI,UAAW,cAAe,CAACvG,EAAEuG,UAAW,aAAc,OACrF,CAAClI,EAAE/H,KAAK,GAAI,SAAU,CAAC+H,EAAE/H,KAAK,GAAI,SAAU,CAAC01C,EAAa,SAAU,CAACrc,EAAMppB,UAAW,cACtF,CAACtP,EAAEsP,UAAW,cAAe,CAACspB,EAAKtpB,UAAW,cAAe,CAACulC,EAASvlC,UAAW,cAClF,CAAChC,KAAK4qB,QAAS,YAEZ,CAACnvB,IAIV,YAAAyvB,gBAAA,SAAgBt5B,GACd,IAAMu5B,EAAIv5B,EAAO,GACXw5B,EAAQx5B,EAAO,GACfy5B,EAAIz5B,EAAO,GACX05B,EAAO15B,EAAO,GACd25B,EAAO35B,EAAO,GAIpB,QAAIu5B,EAAEp5B,KAAKF,OAAS,GAA2B,IAAtBu5B,EAAMr5B,KAAKF,QAAkC,IAAlBw5B,EAAEt5B,KAAKF,QAAqC,IAArBy5B,EAAKv5B,KAAKF,QAC5D,IAArB05B,EAAKx5B,KAAKF,UAGVu5B,EAAMr5B,KAAK,KAAOo5B,EAAEp5B,KAAK,IAAMs5B,EAAEt5B,KAAK,KAAOo5B,EAAEp5B,KAAK,IAAMu5B,EAAKv5B,KAAK,KAAOo5B,EAAEp5B,KAAK,IAClFw5B,EAAKx5B,KAAK,KAAOo5B,EAAEp5B,KAAK,KAIb,YAAXo5B,EAAEz2B,MAAqC,YAAf02B,EAAM12B,MAAiC,YAAX22B,EAAE32B,MAAoC,YAAd42B,EAAK52B,MACnE,YAAd62B,EAAK72B,QAKb,EAlDA,CAA4C,EAAA82B,oBAA/B,EAAAu3B,0B,obCLb,YACA,OACA,OACA,OAGA,cACE,WAAYt3B,EAAgDvW,EAAgB7gB,G,OAC1E,YAAMo3B,EAAgBvW,EAAQ7gB,IAAW,KA+F7C,OAjGkC,OAKhC,YAAA4iB,IAAA,SAAIC,EAAwCtlB,GAC1C,IAAMQ,EAAc,EAAA2B,cAAclB,UAAUjB,EAAO,GAAGG,KAAMH,EAAO,GAAGG,MAAM,GAC5E,IAAKK,EACH,MAAM,IAAI4D,MAAM,qBAElB,IA0DI0W,EA1DAiiB,EAAM,GAEN+0B,EAAe,GACnB,OAAQ1jD,KAAKkV,QACX,IAAK,MACoB,YAAnBtjB,EAAO,GAAG8C,MACZi6B,EAAM,WACN+0B,EAAe,uBACa,UAAnB9xD,EAAO,GAAG8C,OACnBi6B,EAAM,WACN+0B,EAAe,mBAEjB,MACF,IAAK,MACoB,YAAnB9xD,EAAO,GAAG8C,MACZi6B,EAAM,WACN+0B,EAAe,uBACa,UAAnB9xD,EAAO,GAAG8C,OACnBi6B,EAAM,WACN+0B,EAAe,mBAEjB,MACF,IAAK,MACoB,YAAnB9xD,EAAO,GAAG8C,MACZi6B,EAAM,WACN+0B,EAAe,uBACa,UAAnB9xD,EAAO,GAAG8C,OACnBi6B,EAAM,WACN+0B,EAAe,mBAEjB,MACF,IAAK,MACoB,YAAnB9xD,EAAO,GAAG8C,OACZi6B,EAAM,WACN+0B,EAAe,uBAEjB,MACF,IAAK,QACoB,YAAnB9xD,EAAO,GAAG8C,OACZi6B,EAAM,aACN+0B,EAAe,uBAEjB,MACF,IAAK,MACH/0B,EAAM,UACN+0B,EAAe,gBACf,MACF,IAAK,KACH/0B,EAAM,SACN+0B,EAAe,gBACf,MACF,IAAK,MACH/0B,EAAM,UACN+0B,EAAe,gBACf,MACF,QACE,MAAM1tD,MAAM,6CAGhB,GAAqB,wBAAjB0tD,EACFh3C,EAAS,IAAI,EAAAjY,OAAOrC,EAAa,WACjC,EAAAsY,YAAYD,cAAcqsC,MACtBnoB,EAAK,CAAC/8B,EAAO,GAAGoQ,UAAW,cAAe,CAACpQ,EAAO,GAAGG,KAAKF,OAAQ,SAAU,CAACD,EAAO,GAAGG,KAAM,YAC7F,CAACH,EAAO,GAAGoQ,UAAW,cAAe,CAACpQ,EAAO,GAAGG,KAAKF,OAAQ,SAAU,CAACD,EAAO,GAAGG,KAAM,YACxF,CAAC2a,EAAO1K,UAAW,aAAc,OAAQ,CAAC0K,EAAO1K,UAAUnQ,OAAQ,SAAU,CAACO,EAAYP,OAAQ,SAClG,CAACO,EAAa,kBACb,GAAqB,oBAAjBsxD,EACTh3C,EAAS,IAAI,EAAAjY,OAAOrC,EAAa,SACjC,EAAAsY,YAAYD,cAAcqsC,MACtBnoB,EAAK,CAAC/8B,EAAO,GAAGulB,YAA2B,YAAa,CAACvlB,EAAO,GAAGG,KAAKF,OAAQ,SAChF,CAACD,EAAO,GAAGG,KAAM,YAAa,CAACH,EAAO,GAAGulB,YAA2B,YACpE,CAACvlB,EAAO,GAAGG,KAAKF,OAAQ,SAAU,CAACD,EAAO,GAAGG,KAAM,YACnD,CAAC2a,EAAOyK,YAA2B,WAAY,OAAQ,CAACzK,EAAOyK,YAAYtlB,OAAQ,SACnF,CAACO,EAAYP,OAAQ,SAAU,CAACO,EAAa,iBAC5C,IAAqB,kBAAjBsxD,EAST,MAAM,IAAI1tD,MAAM,kEARhB0W,EAAS,IAAI,EAAAjY,OAAOrC,EAAa,QACjC,EAAAsY,YAAYD,cAAcqsC,MACtBnoB,EAAK,CAAC/8B,EAAO,GAAGulB,YAA2B,WAAY,CAACvlB,EAAO,GAAGG,KAAKF,OAAQ,SAC/E,CAACD,EAAO,GAAGG,KAAM,YAAa,CAACH,EAAO,GAAGulB,YAA2B,WACpE,CAACvlB,EAAO,GAAGG,KAAKF,OAAQ,SAAU,CAACD,EAAO,GAAGG,KAAM,YACnD,CAAC2a,EAAOyK,YAA2B,UAAW,OAAQ,CAACzK,EAAOyK,YAAYtlB,OAAQ,SAClF,CAACO,EAAYP,OAAQ,SAAU,CAACO,EAAa,aAInD,MAAO,CAACsa,IAEZ,EAjGA,CAAkC,EAAAgf,UAArB,EAAAm3B,gB,gbCNb,YACA,OACA,OAGA,2B,+CAyBA,OAzB8B,OAC5B,YAAA5rC,IAAA,SAAIC,EAAwCtlB,GAC1C,IAAM8a,EAAS,IAAI,EAAAjY,OAAO7C,EAAO,GAAGG,KAAMH,EAAO,GAAG8C,MAC9CF,EAAOkY,EAAO1K,UAAUnQ,OAC9B,GAAuB,YAAnBD,EAAO,GAAG8C,KAOZ,MAAM,IAAIsB,MAAM,6CAElB,OARE,EAAA0U,YAAYD,cAAcqsC,MACtB,YAAa,CAACllD,EAAO,GAAGoQ,UAAW,cAAe,CAAC0K,EAAO1K,UAAW,aAAc,OAAQ,CAACxN,EAAM,SAClG,CAACwL,KAAK4c,IAAK,WAAY,CAAC5c,KAAK3M,IAAK,YAMjC,CAACqZ,IAIV,YAAAwe,gBAAA,SAAgBt5B,GAEd,MAAuB,YAAnBA,EAAO,GAAG8C,MAMlB,EAzBA,CAA8B,EAAA0rC,MAAjB,EAAA4iB,Y,2yDCLb,YACA,OACA,OACA,OAIA,2B,+CAiGA,OAjG8B,OACtB,YAAA/rC,IAAN,SAAUC,EAAwCtlB,G,kIAMhD,GALMkI,EAAIlI,EAAO,GACXs3C,EAAIt3C,EAAO,GACXc,EAAsB,IAAlBd,EAAOC,OAAeD,EAAO,QAAKe,EAGZ,IAA5BqN,KAAKtB,YAAY7M,OAEnB,IADMs3C,EAAQv3C,EAAO,GAAGG,KACfvC,EAAI,EAAGA,EAAI25C,EAAMt3C,SAAUrC,EAClCwQ,KAAKtB,YAAY3C,KAAKotC,EAAM35C,I,OAK1BoM,EAAa,EAAAmD,aAAaI,uBAC5BrF,EAAE/H,KAAMm3C,EAAEn3C,KAAMiO,KAAK7G,QAAS6G,KAAKnB,UAAWmB,KAAKtB,YAAasB,KAAKrB,KAAMqB,KAAKlB,SAC9ErD,EAAI,IAAI,EAAAhH,OAAOmH,EAAY9B,EAAEpF,MAMhB,KAHbivD,EAkFV,SAA6B3Y,EAAmBnf,EAAe+3B,EAAuBC,GAMpF,GAAkB,IAAd7Y,GAA6B,IAAVnf,GAAiC,IAAlB+3B,GAAuBC,GAAiB,EAC5E,OAAO,EAKT,OAAOzwD,KAAKwpB,IAAIgnC,EAAeC,EAAgB,GA9F1BC,CAAoBhqD,EAAE/H,KAAK,GAAIiO,KAAK6rB,MAAOqd,EAAEn3C,KAAK,GAAI,EAAA2Y,YAAYq5C,eAGjF,OACF,EAAAr5C,YAAYD,cAAcqsC,MACtB,YAAa,CAACh9C,EAAEkI,UAAW,cAAe,CAAClI,EAAE/H,KAAM,YAAa,CAACm3C,EAAElnC,UAAW,cAC9E,CAACknC,EAAEn3C,KAAM,YAAa,CAAC0J,EAAEuG,UAAW,aAAc,OAAQ,CAACvG,EAAE1J,KAAM,YACnE,CAACW,EAAIA,EAAEsP,UAAY,KAAM,cAAe,CAAChC,KAAKnB,UAAW,YAAa,CAACmB,KAAK6rB,MAAO,SACnF,CAAC7rB,KAAKrB,KAAM,YAAa,CAACqB,KAAK7G,QAAS,aACrC,CAAC,EAAD,CAACsC,K,OAwBR,KAlBMuoD,EAAU9a,EAAEn3C,KAAKsH,MAAM,IACrB,GAAKjG,KAAKiC,MAAM6zC,EAAEn3C,KAAK,GAAK4xD,GAC9BM,EAAUD,EAAQ,GAAKA,EAAQ,GAAKA,EAAQ,GAAKA,EAAQ,IAEzDE,EAAahb,EAAEn3C,KAAKsH,MAAM,IACrB,GAAK6vC,EAAEn3C,KAAK,IAAM4xD,EAAa,GAAKK,EAAQ,GAEjDG,EAAU,CAAC,EAAGH,EAAQ,GAAIpoD,EAAW,GAAIA,EAAW,IACpDwoD,EAAUJ,EAAQ,GAAKpoD,EAAW,GAAKA,EAAW,GAElDyoD,EAAa,CAAC,EAAGH,EAAW,GAAItoD,EAAW,GAAIA,EAAW,IAE1D0oD,EAAS,IAAI/wD,MAAoBowD,GACjCY,EAAS,IAAIhxD,MAAoBowD,GACjCa,EAAS,IAAIjxD,MAAoBowD,GACjCc,EAAc,IAAIlxD,MAAgCowD,EAAa,GAG5Dn0D,EAAI,EAAGA,EAAIm0D,IAAcn0D,EAC5BA,IAAMm0D,EAAa,GACrBW,EAAO90D,GAAK05C,EAAElnC,UAAU4b,SAASpuB,EAAIy0D,GAAUz0D,EAAI,GAAKy0D,GACxDM,EAAO/0D,GAAKiM,EAAEuG,UAAU4b,SAASpuB,EAAI40D,GAAU50D,EAAI,GAAK40D,GACpD1xD,IACF8xD,EAAOh1D,GAAKkD,EAAEsP,UAAU4b,SAASpuB,EAAIw0D,EAAQ,IAAKx0D,EAAI,GAAKw0D,EAAQ,KAErES,EAAYj1D,GAAK,EAAAkb,YAAYD,cAAcG,YACvCpb,EAAG,YAAa,CAACsK,EAAEkI,UAAW,cAAe,CAAClI,EAAE/H,KAAM,YAAa,CAACuyD,EAAO90D,GAAI,cAC/E,CAACw0D,EAAS,YAAa,CAACO,EAAO/0D,GAAI,aAAc,OAAQ,CAAC20D,EAAS,YACnE,CAACK,EAAO3yD,OAAS,EAAI2yD,EAAOh1D,GAAK,KAAM,cAAe,CAACwQ,KAAKnB,UAAW,YAAa,CAACmB,KAAK6rB,MAAO,SACjG,CAAC7rB,KAAKrB,KAAM,YAAa,CAACqB,KAAK7G,QAAS,eAE5CmrD,EAAO90D,GAAK05C,EAAElnC,UAAU4b,SAASpuB,EAAIy0D,GACrCM,EAAO/0D,GAAKiM,EAAEuG,UAAU4b,SAASpuB,EAAI40D,GACjC1xD,IACF8xD,EAAOh1D,GAAKkD,EAAEsP,UAAU4b,SAASpuB,EAAIw0D,EAAQ,KAE/C,EAAAt5C,YAAYD,cAAcqsC,MACtB,YAAa,CAACh9C,EAAEkI,UAAW,cAAe,CAAClI,EAAE/H,KAAM,YAAa,CAACuyD,EAAO90D,GAAI,cAC5E,CAAC00D,EAAY,YAAa,CAACK,EAAO/0D,GAAI,aAAc,OAAQ,CAAC60D,EAAY,YACzE,CAACG,EAAO3yD,OAAS,EAAI2yD,EAAOh1D,GAAK,KAAM,cAAe,CAACwQ,KAAKnB,UAAW,YAAa,CAACmB,KAAK6rB,MAAO,SACjG,CAAC7rB,KAAKrB,KAAM,YAAa,CAACqB,KAAK7G,QAAS,cAIhD,SAAMyO,QAAQ2C,IAAIk6C,I,OAClB,OADA,SACO,CAAC,EAAD,CAAChpD,YAKZ,YAAAyvB,gBAAA,SAAgBt5B,GAEd,MAAuB,YAAnBA,EAAO,GAAG8C,MAAyC,YAAnB9C,EAAO,GAAG8C,OAIxB,IAAlB9C,EAAOC,QAAmC,YAAnBD,EAAO,GAAG8C,OAMzC,EAjGA,CAA8B,EAAAq3B,MAAjB,EAAAk3B,Y,6tBCPb,YACA,OACA,OACA,OAGA,2B,+CAiCA,OAjC8B,OAC5B,YAAAhsC,IAAA,SAAIC,EAAwCtlB,GAC1C,IAAMrC,EAAIqC,EAAO,GACXc,EAAId,EAAO,GACX3B,EAAI2B,EAAO,GAEX,IAAS,EAAAgF,SAASV,qBAAqB3G,EAAEwC,KAAMiO,KAAK4sB,OAAQl6B,EAAEX,KAAMiO,KAAK6sB,OAAQ58B,aAAC,EAADA,EAAG8B,MAAK,GAAxFyE,EAAC,KAAEE,EAAC,KACL+E,EAAI,IAAI,EAAAhH,OAAO,CAAC+B,EAAGE,GAAInH,EAAEmF,MAC/B,GAAIzE,IAAM,EAAA8D,cAAcG,KAAKuH,EAAGxL,GAAG,SAACV,EAAGmD,GAAM,YAAK,GAChD,MAAM,IAAIsD,MAAM,0EAQlB,OANA,EAAA0U,YAAYD,cAAcqsC,MACtB,YAAa,CAAC92C,KAAK4sB,OAAQ,QAAS,CAAC5sB,KAAK6sB,OAAQ,QAAS,CAAC7sB,KAAK4sB,OAASr9B,EAAEwC,KAAK,GAAKxC,EAAEwC,KAAK,GAAI,SACjG,CAACiO,KAAK6sB,OAASn6B,EAAEX,KAAK,GAAKW,EAAEX,KAAK,GAAI,SAAU,CAACiO,KAAK4sB,OAASr9B,EAAEwC,KAAK,GAAKxC,EAAEwC,KAAK,GAAI,SACtF,CAACiO,KAAK1D,MAAO,WAAY,CAAC/M,EAAEyS,UAAW,cAAe,CAACtP,EAAEsP,UAAW,cAAe,CAAChC,KAAK8sB,KAAM,WAC/F,CAACrxB,EAAEuG,UAAW,aAAc,UAEzB,CAACvG,IAIV,YAAAyvB,gBAAA,SAAgBt5B,GAEd,MAAuB,YAAnBA,EAAO,GAAG8C,MAAyC,YAAnB9C,EAAO,GAAG8C,MAAyC,YAAnB9C,EAAO,GAAG8C,OAIzE9C,EAAO,GAAG8C,OAAS9C,EAAO,GAAG8C,MAAU9C,EAAO,GAAG8C,OAAS9C,EAAO,GAAG8C,OAM7E,EAjCA,CAA8B,EAAAg5B,MAAjB,EAAAw1B,Y,icCNb,YACA,OACA,OAGA,2B,+CA0CA,OA1C+C,OAC7C,YAAAjsC,IAAA,SAAIC,EAAwCtlB,GAO1C,IANA,IAAMkI,EAAIlI,EAAO,GACXw5B,EAAQx5B,EAAO,GACfc,EAAId,EAAO,GAGb61C,EAAc,EACTj4C,EAAI,EAAGA,EAAIsK,EAAE/H,KAAKF,OAAQrC,IACjCi4C,GAAe3tC,EAAE/H,KAAKvC,GAIxB,IAAMiM,EAAI,IAAI,EAAAhH,OAAOqF,EAAE/H,KAAM+H,EAAEpF,MAM/B,OALA,EAAAgW,YAAYD,cAAcqsC,MACtB,8BAA+B,CAACh9C,EAAEkI,UAAW,cAAe,CAACvG,EAAEuG,UAAW,aAAc,OACxF,CAAClI,EAAE/H,KAAK,GAAI,SAAU,CAAC+H,EAAE/H,KAAK,GAAI,SAAU,CAAC01C,EAAa,SAAU,CAACrc,EAAMppB,UAAW,cACtF,CAACtP,EAAEsP,UAAW,cAAe,CAAChC,KAAK4qB,QAAS,YAEzC,CAACnvB,IAIV,YAAAyvB,gBAAA,SAAgBt5B,GACd,IAAMu5B,EAAIv5B,EAAO,GACXw5B,EAAQx5B,EAAO,GACfy5B,EAAIz5B,EAAO,GAIjB,QAAIu5B,EAAEp5B,KAAKF,OAAS,GAA2B,IAAtBu5B,EAAMr5B,KAAKF,QAAkC,IAAlBw5B,EAAEt5B,KAAKF,UAGvDu5B,EAAMr5B,KAAK,KAAOo5B,EAAEp5B,KAAK,IAAMs5B,EAAEt5B,KAAK,KAAOo5B,EAAEp5B,KAAK,KAIzC,YAAXo5B,EAAEz2B,MAAqC,YAAf02B,EAAM12B,MAAiC,YAAX22B,EAAE32B,QAK9D,EA1CA,CAA+C,EAAAi5B,uBAAlC,EAAA01B,6B,+tBCLb,YACA,OACA,OACA,OAGA,2B,+CAmCA,OAnCgC,OAC9B,YAAApsC,IAAA,SAAIC,EAAwCtlB,GACpC,QAAiB,EAAAgB,WAAWZ,sBAAsBJ,EAAO,GAAGG,KAAMH,EAAO,GAAGG,MAAK,GAAhFE,EAAK,KAAEC,EAAK,KACbE,EAAc,EAAA2B,cAAclB,UAAUZ,EAAOC,GAAO,GAC1D,IAAKE,EAEH,MAAM,IAAI4D,MAAM,iDAGlB,IAAM66C,EAAa,EAAAv8C,UAAUE,KAAKpC,GAC5BsyD,EAAa,IAAI7hD,aAAaguC,GACpC,EAAAnmC,YAAYD,cAAcqsC,MACtB,cAAe,CAACllD,EAAO,GAAGoQ,UAAW,cAAe,CAACpQ,EAAO,GAAGG,KAAM,YACrE,CAACH,EAAO,GAAGG,KAAKF,OAAQ,SAAU,CAACD,EAAO,GAAGoQ,UAAW,cAAe,CAACpQ,EAAO,GAAGG,KAAM,YACxF,CAACH,EAAO,GAAGG,KAAKF,OAAQ,SAAU,CAAC6yD,EAAY,aAAc,OAAQ,CAACA,EAAW7yD,OAAQ,SACzF,CAACO,EAAa,YAAa,CAACA,EAAYP,OAAQ,UACpD,EAAAe,WAAWT,uBAAuBC,EAAyBR,EAAO,GAAGG,KAAKF,OAAQD,EAAO,GAAGG,KAAKF,QACjG,IAAM6a,EAAS,IAAI,EAAAjY,OAAOrC,EAAaR,EAAO,GAAG8C,MAEjD,OADAgY,EAAO1K,UAAUrN,IAAI+vD,GACd,CAACh4C,IAIV,YAAAwe,gBAAA,SAAgBt5B,GAEd,MAAuB,YAAnBA,EAAO,GAAG8C,MAAyC,YAAnB9C,EAAO,GAAG8C,MAI1C9C,EAAO,GAAG8C,OAAS9C,EAAO,GAAG8C,MAMrC,EAnCA,CAAgC,EAAAu3B,QAAnB,EAAAq3B,c,42DCNb,YACA,OACA,OACA,OAIA,2B,+CASA,OATqC,OAEnC,YAAAp4B,gBAAA,SAAgBt5B,GACd,OAAOs5B,EAAgBt5B,IAGnB,YAAAqlB,IAAN,SAAUC,EAAwCtlB,G,mEAChD,MAAO,CAAP,EAAOs+C,EAAYt+C,EAAO,GAAIoO,KAAKlB,QAASkB,KAAK4tB,gBAAiB5tB,KAAKtB,YAAasB,KAAKrB,KAAMqB,KAAK7G,iBAExG,EATA,CAAqC,EAAA40B,aAAxB,EAAA+0B,kBAWb,+B,+CASA,OAT2C,OAEzC,YAAA53B,gBAAA,SAAgBt5B,GACd,OAAOs5B,EAAgBt5B,IAGnB,YAAAqlB,IAAN,SAAUC,EAAwCtlB,G,mEAChD,MAAO,CAAP,EAAOu+C,EAAkBv+C,EAAO,YAEpC,EATA,CAA2C,EAAAo8B,mBAA9B,EAAAm1B,wBAWb,+B,+CASA,OATiC,OAE/B,YAAAj4B,gBAAA,SAAgBt5B,GACd,OAAOs5B,EAAgBt5B,IAGnB,YAAAqlB,IAAN,SAAUC,EAAwCtlB,G,mEAChD,MAAO,CAAP,EAAOw+C,EAAQx+C,EAAO,GAAIoO,KAAKlB,QAASkB,KAAKtB,YAAasB,KAAKrB,KAAMqB,KAAK7G,iBAE9E,EATA,CAAiC,EAAA+0B,SAApB,EAAAq1B,cAWb,+B,+CASA,OATuC,OAErC,YAAAr4B,gBAAA,SAAgBt5B,GACd,OAAOs5B,EAAgBt5B,IAGnB,YAAAqlB,IAAN,SAAUC,EAAwCtlB,G,mEAChD,MAAO,CAAP,EAAOy+C,EAAcz+C,EAAO,YAEhC,EATA,CAAuC,EAAAu8B,eAYvC,SAASjD,EAAgBt5B,GAEvB,MAAuB,YAAnBA,EAAO,GAAG8C,KAQhB,SAAew7C,EACXlyC,EAAec,EAAiB8uB,EAA0BlvB,EAAuBC,EACjFxF,G,mEACF,MAAO,CAAP,EAAOgV,GAAK,EAAO,EAAGnQ,EAAOc,EAAS8uB,EAAiBlvB,EAAaC,EAAMxF,UAG5E,SAAeg3C,EAAkBnyC,G,mEAC/B,MAAO,CAAP,EAAOmQ,GAAK,EAAM,EAAGnQ,EAAO,UAAU,EAAO,GAAI,GAAI,WAGvD,SAAeoyC,EACXpyC,EAAec,EAAiBJ,EAAuBC,EAAgBxF,G,mEACzE,MAAO,CAAP,EAAOgV,GAAK,EAAO,EAAGnQ,EAAOc,GAAS,EAAOJ,EAAaC,EAAMxF,UAGlE,SAAek3C,EAAcryC,G,mEAC3B,MAAO,CAAP,EAAOmQ,GAAK,EAAM,EAAGnQ,EAAO,UAAU,EAAO,GAAI,GAAI,WAiBvD,SAAemQ,EACX3P,EAA2BmmD,EAAkB3mD,EAAec,EAAiB8uB,EAC7ElvB,EAAuBC,EAAgBxF,G,0HAGzC,OADIyrD,EAAW,GACPD,GACN,KAAK,EACHC,EAAW,oBACX,MACF,KAAK,EACHA,EAAW,gBACX,MACF,QACE,MAAM,IAAI5uD,MAAM,qB,OAGpB,EAAA+I,aAAaR,qBAAqBC,EAAkBR,EAAMjM,KAAM2M,EAAavF,EAASwF,GAGhF/C,EACF,EAAAmD,aAAaE,uBAAuBT,EAAkBR,EAAMjM,KAAMoH,EAASuF,EAAaC,EAAMG,GAG5FrD,EAAI,IAAI,EAAAhH,OAAOmH,EAAYoC,EAAMtJ,MAMpB,KAHbivD,EAyDR,SAA6B3Y,EAAmBoJ,EAAqByP,GAKnE,GAAkB,IAAd7Y,GAAmC,IAAhBoJ,GAAqByP,GAAiB,EAC3D,OAAO,EAKT,OAAOzwD,KAAKwpB,IAAIw3B,EAAayP,EAAgB,GApE1BC,CAAoB9lD,EAAMjM,KAAK,GAAIiM,EAAMjM,KAAK,GAAI,EAAA2Y,YAAYq5C,eAG7E,OACF,EAAAr5C,YAAYD,cAAcqsC,MACtB8N,EAAU,CAAClmD,EAAY7M,OAAQ,SAAU,CAAC2M,EAAkB,QAAS,CAACR,EAAMgE,UAAW,cACvF,CAAChE,EAAMjM,KAAM,YAAa,CAAC0J,EAAEuG,UAAW,aAAc,OAAQ,CAACvG,EAAE1J,KAAM,YAAa,CAAC2M,EAAa,YAClG,CAACC,EAAM,YAAa,CAACxF,EAAS,YAAa,CAACy0B,EAAiB,S,cA0BjE,KApBMi3B,EAAU7mD,EAAMjM,KAAKsH,MAAM,IACzB,GAAKjG,KAAKiC,MAAM2I,EAAMjM,KAAK,GAAK4xD,GAClCmB,EAAU,EAAAxwD,UAAUE,KAAKqwD,IAEzBE,EAAa/mD,EAAMjM,KAAKsH,MAAM,IACzB,GAAK2E,EAAMjM,KAAK,IAAM4xD,EAAa,GAAKkB,EAAQ,IAErDV,EAAUvoD,EAAWvC,MAAM,IACzB,GAAKwrD,EAAQ,GACfT,EAAU,EAAA9vD,UAAUE,KAAK2vD,IAEzBE,EAAazoD,EAAWvC,MAAM,IACzB,GAAK0rD,EAAW,GAErBN,EAAc,IAAIlxD,MAAgCowD,EAAa,GAE/Dx4B,EAAIntB,EAAMgE,UACV6/B,EAAIpmC,EAAEuG,UAGHxS,EAAI,EAAGA,EAAIm0D,IAAcn0D,EAC5BA,IAAMm0D,EAAa,EACrBc,EAAYj1D,GAAK,EAAAkb,YAAYD,cAAcG,YACvCpb,EAAGo1D,EAAU,CAAClmD,EAAY7M,OAAQ,SAAU,CAAC2M,EAAkB,QAC/D,CAAC2sB,EAAEvN,SAASpuB,EAAIs1D,GAAUt1D,EAAI,GAAKs1D,GAAU,cAAe,CAACD,EAAS,YACtE,CAAChjB,EAAEjkB,SAASpuB,EAAI40D,GAAU50D,EAAI,GAAK40D,GAAU,aAAc,OAAQ,CAACD,EAAS,YAC7E,CAACzlD,EAAa,YAAa,CAACC,EAAM,YAAa,CAACxF,EAAS,YAAa,CAACy0B,EAAiB,SAE5F,EAAAljB,YAAYD,cAAcqsC,MACtB8N,EAAU,CAAClmD,EAAY7M,OAAQ,SAAU,CAAC2M,EAAkB,QAC5D,CAAC2sB,EAAEvN,UAAU+lC,EAAa,GAAKmB,GAAU,cAAe,CAACC,EAAY,YACrE,CAACljB,EAAEjkB,UAAU+lC,EAAa,GAAKS,GAAU,aAAc,OAAQ,CAACC,EAAY,YAC5E,CAAC3lD,EAAa,YAAa,CAACC,EAAM,YAAa,CAACxF,EAAS,YAAa,CAACy0B,EAAiB,SAIhG,SAAMhmB,QAAQ2C,IAAIk6C,I,OAAlB,S,iBAGF,MAAO,CAAC,EAAD,CAAChpD,WArIG,EAAA2nD,qB,mbCxCb,YACA,OACA,OACA,OAGA,2B,+CAsBA,OAtBiC,OAC/B,YAAAnsC,IAAA,SAAIC,EAAwCtlB,GAC1C,IAAMkI,EAAIlI,EAAO,GACXiH,EAAO,EAAAvE,UAAUoF,cAAcsG,KAAKnH,KAAMiB,EAAE/H,KAAKF,QACjD6E,EAAI,EAAApC,UAAUwE,gBAAgBgB,EAAE/H,KAAM8G,GACtCk5C,EAAI,EAAAz9C,UAAUsE,kBAAkBkB,EAAE/H,KAAM8G,GACxC4C,EAAI,IAAI,EAAAhH,OAAOqF,EAAE/H,KAAM+H,EAAEpF,MAI/B,OAHA,EAAAgW,YAAYD,cAAcqsC,MACtB,eAAgB,CAACh9C,EAAEkI,UAAW,cAAe,CAACvG,EAAEuG,UAAW,aAAc,OAAQ,CAACtL,EAAG,SAAU,CAACq7C,EAAG,UAEhG,CAACt2C,IAIV,YAAAyvB,gBAAA,SAAgBt5B,GAEd,MAAuB,YAAnBA,EAAO,GAAG8C,MAMlB,EAtBA,CAAiC,EAAA05B,SAApB,EAAAo1B,e,40BCNb,YACA,OACA,OAGA,2B,+CA4BA,OA5B6B,OAC3B,YAAAvsC,IAAA,SAAIC,EAAwCtlB,GAI1C,I,MAHM6J,EAAI,IAAI,EAAAhH,OAAO7C,EAAO,GAAGG,KAAMH,EAAO,GAAG8C,MACzCF,EAAO5C,EAAO,GAAGoQ,UAAUnQ,OAC3BmM,EAAQ,IAAIzK,MAAwB3B,EAAOC,QACxCrC,EAAI,EAAGA,EAAIoC,EAAOC,OAAQrC,IACjCwO,EAAMxO,GAAK,CAACoC,EAAOpC,GAAGwS,UAAW,cAKnC,OAHA,IAAA0I,YAAYD,eAAcqsC,MAAK,WAC3B,WAAY,CAACllD,EAAOC,OAAQ,SAAU,CAAC2C,EAAM,SAAU,CAACiH,EAAEuG,UAAW,aAAc,UAAahE,IAE7F,CAACvC,IAIV,YAAAyvB,gBAAA,SAAgBt5B,GAEd,GAAuB,YAAnBA,EAAO,GAAG8C,KACZ,OAAO,EAET,IAAK,IAAIlF,EAAI,EAAGA,EAAIoC,EAAOC,OAAQrC,IACjC,GAAIoC,EAAO,GAAG8C,OAAS9C,EAAOpC,GAAGkF,KAC/B,OAAO,EAIX,OAAO,GAEX,EA5BA,CAA6B,EAAA25B,KAAhB,EAAAo1B,W,oGCHb,WAGA,SAEA,SASA,2BA6BA,OAtBE,YAAA/4B,WAAA,WACE,IASE,OARA1qB,KAAK0L,UAAY,EAAAs5C,mBAAmBhlD,KAAKilD,WACF,iBAA5BjlD,KAAKklD,qBACdllD,KAAKklD,mBAAqB,IAES,iBAA1BllD,KAAKmlD,mBACdnlD,KAAKmlD,iBAAmB,QAE1B,EAAA7+C,OAAOxB,QAAQ,eAAgB,gCAAgC9E,KAAK0L,YAC7D,EACP,MAAOxD,GAEP,OADA,EAAA5B,OAAOtB,QAAQ,eAAgB,sCAAsCkD,IAC9D,IAGX,YAAAi5B,qBAAA,SAAqBt1B,GACnB,OAAO,IAAI,EAAAu5C,oBAAoBplD,KAAM6L,IAEvC,YAAAw1B,QAAA,WACErhC,KAAK0L,UAAU21B,WAEnB,EA7BA,GAAa,EAAAL,gB,2GCdb,WAEA,QAKA,SACA,SACA,SACA,SACA,SAGA,aAOE,WAA4BrQ,EAAuC9kB,GAAvC,KAAA8kB,UAAuC,KAAA9kB,UACjE7L,KAAKqlD,eAAiB,IAAI,EAAAC,eAAetlD,KAAK6L,QAAQ21B,SAAU7Q,EAAQjlB,WACxE1L,KAAKulD,eAAiB,IAAI,EAAAC,+BAA+B70B,EAAQjlB,UAAU+5C,gBAC3EzlD,KAAK0lD,eAAiB,IAAI,EAAAC,eACtBh1B,EAAQjlB,UAAW1L,KAAKulD,eAAgBvlD,KAAK6L,QAAQ21B,SACrD,CAACokB,cAA4C,SAA7Bj1B,EAAQw0B,mBAC5BnlD,KAAK6lD,iBAAmB,IAAIC,IA+BhC,OA5BE,YAAAxkB,uBAAA,WACE,OAAO,IAAI,EAAAykB,sBAAsB/lD,OAEnC,YAAAgmD,mBAAA,SAAmBrwC,GACjB,IAAMswC,EAAetwC,EAAMuwC,YAAY5nD,QAAO,SAAA1D,GAAK,OAAY,IAAZA,EAAEuG,MAAevG,EAAEqd,UAAQlgB,KAAI,SAAA6C,GAAK,OAAAA,EAAEqd,OAAQla,UACjGiC,KAAKimD,aAAe,IAAIz5C,IAAIy5C,IAE9B,YAAAE,cAAA,SAAcC,GACZ,QAAOpmD,KAAKimD,cAAejmD,KAAKimD,aAAan5C,IAAIs5C,IAEnD,YAAAC,eAAA,SAAeD,GACb,OAAOpmD,KAAK6lD,iBAAiBp1D,IAAI21D,IAEnC,YAAAE,eAAA,SAAeF,EAAqBG,GAClC,EAAAjgD,OAAOxB,QAAQ,sBAAuB,iCACtC9E,KAAK6lD,iBAAiBlxD,IAAIyxD,EAAUG,IAEtC,YAAAllB,QAAA,sBACErhC,KAAKqlD,eAAehkB,UACpBrhC,KAAK0lD,eAAec,sBACpBxmD,KAAK6lD,iBAAiBvoD,SAAQ,SAAAmpD,GAAM,SAAKf,eAAegB,eAAeD,GAAI,MAC3EzmD,KAAK6lD,iBAAmB,IAAIC,KAE9B,YAAAj+C,QAAA,SAAQsE,EAAkBuM,EAA8B/C,GACtD,IAAMxhB,EAAK,EAAAstC,gBAAgBt1B,EAAMuM,EAAQ,EAAAiuC,wBAEzC,OADAxyD,EAAGu2B,WAAWve,EAAKwe,WAAYxe,EAAMwJ,GAC9BxhB,GAEX,EA5CA,GAAa,EAAAixD,uB,koBCfb,WACA,OACA,OAEA,SAKA,QAEA,aAEE,WAAmB1jB,GAAA,KAAAA,UACjB1hC,KAAK6lD,iBAAmB,IAAIC,IAsKhC,OAnKE,YAAA7uC,IAAA,SAAI9iB,EAAmBvC,GACrB,IAAIg1D,EAAW5mD,KAAK0hC,QAAQ2jB,eAAewB,YAAY1yD,GACvD,IAAKyyD,EAAU,CACb,IAAMj7C,EAAcxX,EAAG2yD,kBAAkB9mD,KAAMpO,GAC/Cg1D,EAAW5mD,KAAK0hC,QAAQ2jB,eAAe5hB,MAAM93B,GAC7C3L,KAAK0hC,QAAQ2jB,eAAe0B,YAAY5yD,EAAIyyD,GAE9C,IAAMI,EAAU7yD,EAAG8yD,cAAcjnD,KAAM4mD,EAASj7C,YAAa/Z,GAE7D,OADAoO,KAAK0hC,QAAQ2jB,eAAepuC,IAAI2vC,EAAUI,GACnC,CAACA,EAAQE,kBAAkBjvC,SAcpC,YAAAV,uBAAA,SAAuBU,EAAgB+jB,GACrC,IAAIyqB,EAAKzmD,KAAKqmD,eAAepuC,EAAOla,QAWpC,OAVK0oD,EAQH,EAAAngD,OAAOxB,QAAQ,mBAAoB,uCAAuCmT,EAAOlmB,KAAI,MAPrF,EAAAuU,OAAOxB,QAAQ,mBAAoB,uCAAuCmT,EAAOlmB,KAAI,KAChFiqC,IACHA,EAASh8B,KAAKmnD,6BAA6BlvC,EAAOlmB,KAAKsH,UAGzDotD,EAAKzmD,KAAKonD,kBAAkBprB,EAAQ/jB,EAAOvjB,KAAMujB,EAAOpa,WAAYoa,EAAQ,IAIvEwuC,GAQT,YAAAY,4BAAA,SAA4BrrB,EAAuBj7B,GACjD,OAAOf,KAAKonD,kBAAkBprB,EAAQj7B,IAYxC,YAAAumD,sCAAA,SACItrB,EAAuBj7B,EAA2BjD,EAAyBma,GAC7E,OAAOjY,KAAKonD,kBAAkBprB,EAAQj7B,EAAUjD,EAAMma,EAAQ,IAGxD,YAAAmvC,kBAAR,SACIprB,EAAuBj7B,EAA2BjD,EAA0Bma,EAC5EsvC,GACF,EAAAjhD,OAAOxB,QAAQ,mBAAoB,iCAAiC0iD,KAAKC,UAAUzrB,GAAO,KAC1F,IAAMhkB,EAAUhY,KAAK0hC,QAAQgkB,eAAegC,wBAAwB3mD,EAAUi7B,EAAQl+B,EAAMypD,GAC5F,OAAOvnD,KAAK2nD,6BAA6B3rB,EAAQj7B,EAAUiX,EAASC,IAUtE,YAAAF,wBAAA,SAAwBikB,EAAuBj7B,EAA2BiX,EAAuBouC,GAE/F,OAAOpmD,KAAK2nD,6BAA6B3rB,EAAQj7B,EAAUiX,OAASrlB,EAAWyzD,IAGzE,YAAAuB,6BAAR,SACI3rB,EAAuBj7B,EAA2BiX,EAAuBC,EAAiBmuC,GAD9F,WAEQG,EAAW,OACZvqB,GAAM,CACT/jB,OAAQA,GACJ,IAAI,EAAAxjB,OACIunC,EAAOlkB,cAAe/W,GACtB,SAAC28C,GACC,OAAO,EAAKkK,YAAYrB,UAE1B5zD,OAAWA,EAAWyzD,GAClCpuC,QAAO,IAGT,OADAhY,KAAKsmD,eAAeC,EAAYtuC,OAAOla,OAAQwoD,GACxCA,GAGT,YAAAF,eAAA,SAAeD,GACb,OAAOpmD,KAAK0hC,QAAQykB,cAAcC,GAAYpmD,KAAK0hC,QAAQ2kB,eAAeD,GAC5BpmD,KAAK6lD,iBAAiBp1D,IAAI21D,IAE1E,YAAAE,eAAA,SAAeF,EAAqBK,GAC9BzmD,KAAK0hC,QAAQykB,cAAcC,GAC7BpmD,KAAK0hC,QAAQ4kB,eAAeF,EAAUK,GAEtCzmD,KAAK6lD,iBAAiBlxD,IAAIyxD,EAAUK,IAOxC,YAAAoB,yBAAA,SAAyB5vC,EAAgBR,EAAuBK,QAAvB,IAAAL,MAAA,GAEvC,IAAMgvC,EAAKzmD,KAAKqmD,eAAepuC,EAAOla,QACtC,OAAI0oD,GAGGzmD,KAAKmnD,6BACK,IAAb1vC,EAAiBQ,EAAOlmB,KAAKsH,QAAU,EAAAqe,eAAeO,EAAOlmB,KAAKsH,SAAUoe,EAAUK,IAK5F,YAAAqvC,6BAAA,SACI5xD,EAA8BkiB,EAAuBK,EACrDgwC,QAD8B,IAAArwC,MAAA,GAE1B,QAAkBzX,KAAK0hC,QAAQ6jB,eAAewC,iBAAiBxyD,EAAOuyD,GAAM,GAA3EjwC,EAAK,KAAED,EAAM,KAChByoB,EAAe9qC,EAInB,GAHqB,IAAjBA,EAAM1D,SACRwuC,EAAe,CAAC,IAED,IAAb5oB,EAEFK,EAAgBviB,OACX,IAAKuiB,EACV,MAAM,IAAI9hB,MAAM,oDAElB,MAAO,CACL6hB,MAAK,EACLD,OAAM,EACNH,SAAUA,GAAsB,EAChCliB,MAAO8qC,EACPlnC,QAAS,EAAA7E,UAAU2E,eAAeonC,GAClCvoB,cAAa,IAIjB,YAAAupB,QAAA,sBACErhC,KAAK0hC,QAAQgkB,eAAec,sBAC5BxmD,KAAK6lD,iBAAiBvoD,SAAQ,SAAAmpD,GAAM,SAAK/kB,QAAQgkB,eAAegB,eAAeD,MAC/EzmD,KAAK6lD,iBAAmB,IAAIC,KAG9B,YAAA8B,YAAA,SAAYrB,GACV,IAAKvmD,KAAK0hC,QAAQ/Q,QAAQjlB,UAAUs8C,2BAA4B,CAC9D,IACMC,GADK,IAAI,EAAAC,kBACIC,YAAYnoD,KAAMumD,GACrC,OAAOvmD,KAAK0hC,QAAQgkB,eAAe0C,wBAAwBH,GAE7D,OAAOjoD,KAAK0hC,QAAQgkB,eAAekC,YAAYrB,EAAaA,EAAYtuC,OAAOvjB,KAAM6xD,EAAY9uC,WAErG,EAzKA,GAAa,EAAAsuC,yB,yZCZb,WACA,OAIA,2BA6EA,OA5EE,YAAAoC,YAAA,SAAYjxC,EAAyClZ,GACnD,IAAM5L,EAAc4L,EAAMzI,MACpB,IAAkB2hB,EAAiBwqB,QAAQ6jB,eAAewC,iBAAiB/pD,EAAMzI,OAAM,GACvF8yD,EAA8B,CAClCxwC,MAFU,KAGVD,OAHkB,KAIlBH,SAAU,EACVliB,MAAOnD,EACP+G,QAAS,EAAA7E,UAAU2E,eAAe7G,GAClC0lB,cAAe1lB,GAEXiS,EAAO,EAAAD,QAAQ8S,EAAiBwqB,QAAQ/Q,QAAQjlB,UAAU9H,SAqD1D+H,EAAc,CAAC28C,aAAc,CAACtqD,GAAQqqD,aAAY,EAAEE,SAAU,CAAC,KAAMC,aAhDtD,8sCA6CDnkD,EAAKL,UAAS,6BAC5BK,EAAKJ,OAAM,oCAEwEwkD,SAAS,GAC5F7B,EAAW1vC,EAAiBwqB,QAAQ2jB,eAAe5hB,MAAM93B,GAEzD+8C,EAAUxxC,EAAiBwqB,QAAQ/Q,QAAQjlB,UAAUi9C,WAAW,OAAQ,GACxE3wC,EACFd,EAAiBwqB,QAAQ/Q,QAAQjlB,UAAUk9C,gBAAgBP,EAAaxwC,MAAOwwC,EAAazwC,OAAQ8wC,GAElG1B,EAAU,CAAC6B,kBAAmB,CAAC7qD,GAAQkpD,kBADnBhwC,EAAiBa,wBAAwBswC,EAAc,QAASrwC,EAAS,IACnC8wC,YAAa,IAG7E,OADA5xC,EAAiBwqB,QAAQ2jB,eAAepuC,IAAI2vC,EAAUI,GAC/CA,EAAQE,mBAEnB,EA7EA,GAAa,EAAAgB,oB,ioBCLb,WAGA,SACA,YACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,YACA,QACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,YACA,SACA,SAEa,EAAAvB,uBAA2D,CACtE,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIz1B,EAAS63B,aAAa,EAAAz9C,aAAc4lB,EAAS83B,aACzE,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI93B,EAAS63B,aAAa,EAAAv9C,YAAa0lB,EAAS+3B,cACzE,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIC,EAAUC,cAAc,EAAA79C,aAAc49C,EAAUE,aAC5E,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIF,EAAUC,cAAc,CAAC,QAASD,EAAUG,aACxE,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAIn4B,EAAS63B,aAAa,EAAAv9C,YAAa0lB,EAASo4B,cACzE,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAIp4B,EAAS63B,aAAa,EAAAv9C,YAAa0lB,EAASq4B,cACzE,CAAC,cAAe,GAAI,OAAQ,WAAM,WAAI,EAAAC,mBACtC,CAAC,qBAAsB,GAAI,KAAM,WAAM,WAAI,EAAAC,0BAC3C,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAIv4B,EAAS63B,aAAa,EAAAv9C,YAAa0lB,EAASw4B,cACzE,CAAC,OAAQ,GAAI,OAAQ,WAAM,WAAI,EAAAC,YAC/B,CAAC,SAAU,GAAI,KAAM,WAAM,WAAI,EAAAC,cAC/B,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI,EAAAC,YAC7B,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI34B,EAAS63B,aAAa,EAAAv9C,YAAa0lB,EAAS44B,aACxE,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIZ,EAAUC,cAAc,EAAA79C,aAAc49C,EAAUa,aAC5E,CAAC,UAAW,GAAI,KAAM,WAAM,WAAI,EAAAC,eAChC,CAAC,QAAS,GAAI,KAAM,WAAM,WAAId,EAAUC,cAAc,EAAA79C,aAAc49C,EAAUe,iBAAat3D,EAAW,UACtG,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI,EAAAu3D,WAC5B,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIh5B,EAAS63B,aAAa,EAAAv9C,YAAa0lB,EAASi5B,aACxE,CAAC,UAAW,GAAI,KAAM,WAAM,WAAI,EAAAC,eAChC,CAAC,QAAS,GAAI,KAAM,WAAM,WAAIl5B,EAAS63B,aAAa,EAAAv9C,YAAa0lB,EAASm5B,eAC1E,CAAC,SAAU,GAAI,KAAM,WAAM,WAAI,EAAAC,cAC/B,CAAC,OAAQ,GAAI,OAAQ,WAAM,WAAI,EAAAC,WAAU,KACzC,CAAC,OAAQ,GAAI,MAAO,WAAM,WAAI,EAAAA,WAAU,KACxC,CAAC,oBAAqB,GAAI,KAAM,WAAM,WAAI,EAAAC,yBAC1C,CAAC,gBAAiB,GAAI,KAAM,WAAM,WAAI,EAAAC,qBACtC,CAAC,UAAW,GAAI,KAAM,WAAM,WAAIvB,EAAUC,cAAc,EAAA79C,aAAc49C,EAAUwB,mBAAe/3D,EAAW,UAC1G,CAAC,WAAY,GAAI,KAAM,WAAM,WAAIu+B,EAAS63B,aAAa,EAAAz9C,aAAc4lB,EAASy5B,kBAC9E,CAAC,cAAe,GAAI,KAAM,WAAM,WAAI,EAAAC,mBACpC,CAAC,wBAAyB,GAAI,KAAM,WAAM,WAAI,EAAAC,6BAC9C,CAAC,YAAa,GAAI,KAAM,WAAM,WAAI,EAAAC,iBAClC,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI5B,EAAUC,cAAc,EAAA79C,aAAc49C,EAAU6B,gBAAYp4D,EAAW,UACpG,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIu+B,EAAS63B,aAAa,EAAAv9C,YAAa0lB,EAAS85B,aACxE,CAAC,SAAU,GAAI,KAAM,WAAM,WAAI,EAAAC,cAC/B,CAAC,UAAW,GAAI,MAAO,WAAM,WAAI,EAAAC,eACjC,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIhC,EAAUC,cAAc,EAAA79C,aAAc49C,EAAUiC,aAC5E,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIj6B,EAAS63B,aAAa,EAAAz9C,aAAc4lB,EAASk6B,aACzE,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIl6B,EAAS63B,aAAa,CAAC,QAAS73B,EAASm6B,aACrE,CAAC,KAAM,GAAI,KAAM,WAAM,WAAInC,EAAUC,cAAc,CAAC,QAASD,EAAUoC,YACvE,CAAC,MAAO,GAAI,OAAQ,WAAM,WAAI,EAAAC,WAC9B,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIrC,EAAUC,cAAc,EAAA39C,YAAa09C,EAAUsC,aAC3E,CAAC,QAAS,GAAI,KAAM,WAAM,WAAItC,EAAUC,cAAc,EAAA39C,YAAa09C,EAAUuC,eAC7E,CAAC,eAAgB,GAAI,KAAM,WAAM,WAAIC,EAAUC,oBAC/C,CAAC,YAAa,GAAI,KAAM,WAAM,WAAID,EAAUE,iBAC5C,CAAC,aAAc,GAAI,KAAM,WAAM,WAAIF,EAAUG,kBAC7C,CAAC,YAAa,GAAI,KAAM,WAAM,WAAIH,EAAUI,iBAC5C,CAAC,aAAc,GAAI,KAAM,WAAM,WAAIJ,EAAUK,kBAC7C,CAAC,YAAa,GAAI,KAAM,WAAM,WAAIL,EAAUM,iBAC5C,CAAC,kBAAmB,GAAI,KAAM,WAAM,WAAIN,EAAUO,uBAClD,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI/6B,EAAS63B,aAAa,EAAAv9C,YAAa0lB,EAASg7B,cACzE,CAAC,UAAW,GAAI,KAAM,WAAM,WAAI,EAAAh0C,eAChC,CAAC,UAAW,GAAI,KAAM,WAAM,WAAIgZ,EAAS63B,aAAa,EAAAv9C,YAAa0lB,EAASi7B,iBAC5E,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIj7B,EAAS63B,aAAa,EAAAv9C,YAAa0lB,EAASk7B,aACxE,CAAC,QAAS,GAAI,MAAO,WAAM,WAAI,EAAAC,gBAC/B,CAAC,QAAS,GAAI,MAAO,WAAM,WAAI,EAAAC,aAC/B,CAAC,UAAW,GAAI,KAAM,WAAM,WAAI,EAAAC,eAKhC,CAAC,QAAS,GAAI,KAAM,SAACpgD,GAAS,WAAI,EAAAqgD,WAAWrgD,EAAKsgD,QAAQ56D,UAC1D,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAIq/B,EAAS63B,aAAa,EAAAv9C,YAAa0lB,EAASw7B,cACzE,CAAC,UAAW,GAAI,KAAM,WAAM,WAAI,EAAAC,eAChC,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIzD,EAAUC,cAAc,EAAA79C,aAAc49C,EAAU0D,aAC5E,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI,EAAAC,WAC5B,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI37B,EAAS63B,aAAa,EAAAv9C,YAAa0lB,EAAS47B,aACxE,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI57B,EAAS63B,aAAa,EAAAv9C,YAAa0lB,EAAS67B,cACzE,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI,EAAAC,YAC7B,CAAC,YAAa,GAAI,KAAM,WAAM,WAAI,EAAAC,iBAClC,CAAC,WAAY,GAAI,MAAO,WAAM,WAAI,EAAAC,gBAClC,CAAC,YAAa,GAAI,KAAM,WAAM,WAAI,EAAAC,iBAClC,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIjE,EAAUC,cAAc,CAAC,QAASD,EAAUkE,e,+bCvG1E,YAEA,OAIA,2B,+CAiCA,OAjC6C,OAC3C,YAAAn2C,IAAA,SAAIC,EAAyCtlB,GAC3C,OAAOslB,EAAiBD,IAAIjX,KAAMpO,IAEpC,YAAAk1D,kBAAA,SAAkBuG,EAAgCz7D,GAChD,IAAM02D,EAAe12D,EAAOmG,KAAI,SAAAjH,GAAK,OAAAu8D,EAAQxF,yBAAyB/2D,MAChEsB,EAAcR,EAAO,GAAGG,KAAKsH,QAC7BH,EAAO9G,EAAYP,OACnBu5B,EAAQk9B,EAAa,GACrBjkD,EAAO,EAAAD,QAAQipD,EAAQ3rB,QAAQ/Q,QAAQjlB,UAAU9H,SACjD4kD,EAAe,6BACCtvD,EAAI,oEACuBkyB,EAAMvT,MAAK,KAAKuT,EAAMxT,OAAM,6CACzCvT,EAAKL,UAAS,6DACfK,EAAKL,UAAS,gEACVK,EAAKL,UAAS,6DACrBK,EAAKL,UAAS,4FAEsBhE,KAAK4qB,QAAO,qBAEhF,MAAO,CACL09B,aAAY,EACZD,aAAcgF,EAAQlG,6BAA6B/0D,GACnDm2D,SAAU,CAAC,IAAK,QAAS,IAAK,OAAQ,YACtCC,aAAY,IAGhB,YAAAvB,cAAA,SAAcoG,EAAgC1hD,EAA0B/Z,GACtE,IAAM07D,EAAW,CAACD,EAAQ91C,uBAAuB3lB,EAAO,GAAI+Z,EAAY28C,aAAa,KACrF12D,EAAOyH,MAAM,GAAGiE,SAAQ,SAAAxM,GAAK,OAAAw8D,EAASvxD,KAAKsxD,EAAQ91C,uBAAuBzmB,OAC1E,IAAMy8D,EAAWF,EAAQhG,4BAA4B17C,EAAY08C,aAAciF,EAAS,GAAGr1C,OAAOvjB,MAClG,MAAO,CAACm0D,kBAAmByE,EAAUpG,kBAAmBqG,EAAUzE,YAAa,KAEnF,EAjCA,CAA6C,EAAAt9B,oBAAhC,EAAAi+B,2B,qjBCNb,YAEA,OACA,OACA,OAIA,cACE,WACIh+B,EAA0D+hC,EAA6Bt4C,EACvF7gB,GAFJ,MAGE,YAAMo3B,EAAgBvW,EAAQ7gB,IAAW,K,OAFmB,EAAAm5D,W,EA+DhE,OAjEmC,OAMjC,YAAAv2C,IAAA,SAAIC,EAAyCtlB,GAC3C,OAAOslB,EAAiBD,IAAIjX,KAAMpO,IAEpC,YAAAk1D,kBAAA,SAAkBuG,EAAgCz7D,GAChD,IAAM02D,EAAe12D,EAAOmG,KAAI,SAAAjH,GAAK,OAAAu8D,EAAQxF,yBAAyB/2D,MAEtE,IADqB,EAAAwD,UAAUC,SAAS3C,EAAO,GAAGG,KAAMH,EAAO,GAAGG,MACjD,CACf,IAAMK,EAAc,EAAA2B,cAAclB,UAAUjB,EAAO,GAAGG,KAAMH,EAAO,GAAGG,MAAM,GAC5E,IAAKK,EACH,MAAM,IAAI4D,MAAM,gDAElB,IAAMy3D,EAAar7D,EAAYP,OACzBQ,EAAkC,IAA1BT,EAAO,GAAGG,KAAKF,OAAeD,EAAO,GAAGG,KAAKF,OAAS,EAC9DS,EAAkC,IAA1BV,EAAO,GAAGG,KAAKF,OAAeD,EAAO,GAAGG,KAAKF,OAAS,EAC9D67D,EAAmC,IAA1B97D,EAAO,GAAGG,KAAKF,OAAe,qCAAuC,mBAC9E87D,EAAmC,IAA1B/7D,EAAO,GAAGG,KAAKF,OAAe,qCAAuC,mBAC9E,EAAe,WACnBmO,KAAKwtD,SAASI,KAAI,qCACQH,EAAU,8BACrBp7D,EAAK,4BACLC,EAAK,eAClBo7D,EAAM,aACNC,EAAM,oBACC3tD,KAAKwtD,SAASr9D,KAAI,uCAE7B,MAAO,CACLm4D,aAAY,EACZD,aAAcgF,EAAQlG,6BAA6B/0D,GACnDm2D,SAAU,CAAC,IAAK,KAChBC,aAAY,GAGhB,IAAMnkD,EAAO,EAAAD,QAAQipD,EAAQ3rB,QAAQ/Q,QAAQjlB,UAAU9H,SACjD4kD,EAAe,SACnBxoD,KAAKwtD,SAASI,KAAI,wCAENvpD,EAAKL,UAAS,oCACdK,EAAKL,UAAS,wCACVhE,KAAKwtD,SAASr9D,KAAI,oBAChCkU,EAAKJ,OAAM,0BAGf,MAAO,CACLwkD,SAAS,EACTH,aAAY,EACZD,aAAcgF,EAAQlG,6BAA6Bv1D,EAAO,GAAGG,MAC7Dw2D,SAAU,CAAC,IAAK,KAChBC,aAAY,IAGhB,YAAAvB,cAAA,SAAcoG,EAAgC1hD,EAA0B/Z,GAEtE,MAAO,CACLi3D,kBAFej3D,EAAOmG,KAAI,SAACjH,EAAGtB,GAAM,OAAA69D,EAAQ91C,uBAAuBzmB,EAAG6a,EAAY28C,aAAa94D,OAG/F03D,kBAAmBmG,EAAQhG,4BACvB17C,EAAY08C,aAAcroD,KAAK3L,WAAa2L,KAAK3L,WAAazC,EAAO,GAAG8C,MAC5Eo0D,YAAa,KAGnB,EAjEA,CAAmC,EAAAp9B,UAAtB,EAAAy9B,gBAmEb,qBAUE,MAAO,CAACyE,KARK,4HAQCz9D,KATD,OASOuE,KAAM,EAAA+W,aAAaoiD,aAEzC,qBAUE,MAAO,CAACD,KARK,4HAQCz9D,KATD,OASOuE,KAAM,EAAA+W,aAAaoiD,aAEzC,qBAUE,MAAO,CAACD,KARK,4HAQCz9D,KATD,OASOuE,KAAM,EAAA+W,aAAaoiD,aAEzC,qBAUE,MAAO,CAACD,KARK,4HAQCz9D,KATD,OASOuE,KAAM,EAAA+W,aAAaoiD,aAEzC,uBAUE,MAAO,CAACD,KARK,iJAQCz9D,KATD,SASOuE,KAAM,EAAA+W,aAAaoiD,aAEzC,yBACE,IAAM19D,EAAO,WAYb,MAAO,CAACy9D,KAXK,oNAWCz9D,KAAI,EAAEuE,KAAM,EAAA+W,aAAaoiD,aAEzC,sBAaE,MAAO,CAACD,KAXK,4OAWCz9D,KAZD,QAYOuE,KAAM,EAAA+W,aAAaoiD,aAEzC,qBAeE,MAAO,CAACD,KAbK,mTAaCz9D,KAdD,OAcOuE,KAAM,EAAA+W,aAAaoiD,aAEzC,oBAeE,MAAO,CAACD,KAbK,iTAaCz9D,KAdD,MAcOuE,KAAM,EAAA+W,aAAaoiD,aAEzC,qBAeE,MAAO,CAACD,KAbK,mTAaCz9D,KAdD,OAcOuE,KAAM,EAAA+W,aAAaoiD,aAEzC,qBACE,OAoBF,SAA2BC,GACzB,IAAM39D,EAAU29D,EAAK,IASrB,MAAO,CAACF,KARK,aACLz9D,EAAI,oCACD29D,EAAK,wBAET39D,EAAI,oCACA29D,EAAK,qBAGF39D,KAAI,EAAEuE,KAAM,EAAA+W,aAAaoiD,YA9BhCE,CAAkB,QAE3B,uBAeE,MAAO,CAACH,KAbK,+SAaCz9D,KAdD,SAcOuE,KAAM,EAAA+W,aAAaoiD,c,ibC1OzC,YAEA,OAIA,2B,+CA+BA,OA/B+B,OAC7B,YAAA52C,IAAA,SAAIC,EAAyCtlB,GAC3C,OAAOslB,EAAiBD,IAAIjX,KAAMpO,IAEpC,YAAAk1D,kBAAA,SAAkBuG,EAAgCz7D,GAChD,IAAMQ,EAAcR,EAAO,GAAGG,KAAKsH,QAC7BgL,EAAO,EAAAD,QAAQipD,EAAQ3rB,QAAQ/Q,QAAQjlB,UAAU9H,SACjD4kD,EAAe,mCACOxoD,KAAK4c,IAAG,qCACR5c,KAAK3M,IAAG,8CAEpBgR,EAAKL,UAAS,8BACxBK,EAAKJ,OAAM,gDAGjB,MAAO,CACLqkD,aAAc,CAAC+E,EAAQxF,yBAAyBj2D,EAAO,KACvDy2D,aAAcgF,EAAQlG,6BAA6B/0D,GACnDm2D,SAAU,CAAC,KACXC,aAAY,EACZC,SAAS,IAGb,YAAAxB,cAAA,SAAcoG,EAAgC1hD,EAA0B/Z,GACtE,IAAM07D,EAAW,CAACD,EAAQ91C,uBAAuB3lB,EAAO,GAAI+Z,EAAY28C,aAAa,KACrF,MAAO,CACLO,kBAAmByE,EACnBpG,kBAAmBmG,EAAQhG,4BAA4B17C,EAAY08C,aAAciF,EAAS,GAAGr1C,OAAOvjB,MACpGo0D,YAAa,KAGnB,EA/BA,CAA+B,EAAA1oB,MAAlB,EAAAupB,a,mbCNb,IAKA,2B,+CA4IA,OA5IiC,OAC/B,YAAA1yC,IAAA,SAAIC,EAAyCtlB,GAC3C,OAAOslB,EAAiBD,IAAIjX,KAAMpO,IAEpC,YAAAk1D,kBAAA,SAAkBuG,EAAgCz7D,GAChD,IAAM02C,EAAa12C,EAAO,GAAGG,KAAKsH,QAClC,GAAI2G,KAAKnH,MAAQyvC,EAAWz2C,QAAUmO,KAAKnH,MAAS,EAAIyvC,EAAWz2C,OACjE,MAAM,IAAImE,MAAM,gEAEdgK,KAAKnH,KAAO,IACdmH,KAAKnH,KAAOyvC,EAAWz2C,OAASmO,KAAKnH,MAKvC,IADA,IAAMzG,EAAck2C,EAAWjvC,MAAM,GAC5B7J,EAAI,EAAGA,EAAIoC,EAAOC,OAAQrC,IAEjC,IADA,IAAMg5C,EAAa52C,EAAOpC,GAAGuC,KAAKsH,QACzBqvC,EAAY,EAAGA,EAAYJ,EAAWz2C,OAAQ62C,IAErD,GAAIA,IAAc1oC,KAAKnH,KACrBzG,EAAY4N,KAAKnH,OAAS2vC,EAAWE,QAGlC,GAAIJ,EAAWI,KAAeF,EAAWE,GAC5C,MAAM,IAAI1yC,MAAM,oCAKtB,IAAMkD,EAAO9G,EAAYP,OAErBm8D,EAAwC,GAG1CA,EADEp8D,EAAOC,OAAS,EACsBmO,KAAKiuD,4CAA4Cr8D,EAAOC,QAExDmO,KAAKkuD,4CAA4Ct8D,EAAOC,QAGlG,IAAMs8D,EAAoCnuD,KAAKmuD,kCAAkCv8D,EAAOC,OAAQqH,GAC1Fk1D,EAA+BpuD,KAAKouD,6BAA6Bx8D,EAAOC,QACxE02D,EAAW32D,EAAOmG,KAAI,SAAC6C,EAAGpL,GAAM,UAAIA,KACpCg5D,EAAe,WACjB2F,EAAiC,WACjCC,EAA4B,WAC5BJ,EAAqC,qCACX90D,EAAI,wEAC2B8G,KAAKnH,KAAI,6DAGtDmH,KAAKnH,KAAI,eACrBmH,KAAKnH,KAAI,oKAKb,MAAO,CACLyvD,aAAc12D,EAAOmG,KAAI,SAAAjH,GAAK,OAAAu8D,EAAQxF,yBAAyB/2D,MAC/Du3D,aAAcgF,EAAQlG,6BAA6B/0D,GACnDm2D,SAAQ,EACR8F,UAAW,CAAC,CAACl+D,KAAM,mBAAoBuE,KAAM,MAAO45D,YAAa18D,EAAOC,SACxE22D,aAAY,IAGhB,YAAAvB,cAAA,SAAcoG,EAAgC1hD,EAA0B/Z,GAItE,IAHA,IAAM07D,EAAW17D,EAAOmG,KAAI,SAACjH,EAAGtB,GAAM,OAAA69D,EAAQ91C,uBAAuBzmB,EAAG6a,EAAY28C,aAAa94D,OAC3F++D,EAAmB,IAAIh7D,MAAcoY,EAAY28C,aAAaz2D,QAChE28D,EAAc,EACTh/D,EAAI,EAAGA,EAAImc,EAAY28C,aAAaz2D,SAAUrC,EACrDg/D,GAAe7iD,EAAY28C,aAAa94D,GAAG+F,MAAMyK,KAAKnH,MACtD01D,EAAiB/+D,GAAKg/D,EAExB,IAAM1F,EAAc,CAAC,iBAAoByF,GACzC,MAAO,CACL1F,kBAAmByE,EACnBpG,kBAAmBmG,EAAQhG,4BAA4B17C,EAAY08C,aAAciF,EAAS,GAAGr1C,OAAOvjB,MACpGo0D,YAAW,IAGP,YAAAmF,4CAAR,SAAoDQ,GAClD,MAAO,qEACYA,EAAe,uHAS5B,YAAAP,4CAAR,SAAoDO,GAClD,OAAOzuD,KAAKiuD,4CAA4CQ,IAGlD,YAAAN,kCAAR,SAA0CM,EAAyB90D,GAEjE,IADA,IAAM+0D,EAAsB,CAAC,mEAAmE/0D,EAAU,QACjGnK,EAAI,EAAGA,EAAIi/D,IAAmBj/D,EAC3B,IAANA,EACFk/D,EAAU3yD,KACN,yBACuBvM,EAAC,gBAAgBA,EAAC,gBACpCA,IAAMi/D,EAAkB,EACjCC,EAAU3yD,KACN,qBACmBvM,EAAC,gBAExBk/D,EAAU3yD,KACN,8BAC4BvM,EAAC,gBAAgBA,EAAC,gBAMtD,OAHAk/D,EAAU3yD,KACN,OAEG2yD,EAAU11C,KAAK,OAGhB,YAAAo1C,6BAAR,SAAqCO,GAEnC,IADA,IAAMD,EAAsB,CAAC,sCAAsCC,EAAS,mBACnEn/D,EAAI,EAAGA,EAAIm/D,IAAan/D,EACrB,IAANA,EACFk/D,EAAU3yD,KACN,kBACgBvM,EAAC,kBAAkBA,EAAC,QAC/BA,IAAMm/D,EAAY,EAC3BD,EAAU3yD,KACN,uBACqBvM,EAAC,QAE1Bk/D,EAAU3yD,KACN,uBACqBvM,EAAC,kBAAkBA,EAAC,QAOjD,OAJAk/D,EAAU3yD,KACN,OAGG2yD,EAAU11C,KAAK,OAE1B,EA5IA,CALA,MAKiC4e,QAApB,EAAAgyB,e,80BCLb,WACA,QAEA,OACA,OAKA,yE,OA6QY,EAAAgF,SAAW,EACX,EAAA74D,UAAY,G,EACxB,OA/Q+B,OAC7B,YAAAkhB,IAAA,SAAIC,EAAyCtlB,GAC3C,IAAMyzD,EAAiBnuC,EAAiBwqB,QAAQ2jB,eAChD,IAAKrlD,KAAK6uD,UAAW,CACnB7uD,KAAK6uD,UAAY,GAEjB,IADA,IAAMC,EAAe9uD,KAAK+uD,mBAAmB73C,EAAkBtlB,GACtDpC,EAAI,EAAGA,EAAIs/D,EAAaj9D,SAAUrC,EAAG,CAC5C,IAAMo3D,EAAW1vC,EAAiBwqB,QAAQ2jB,eAAe5hB,MAAMqrB,EAAat/D,IAC5EwQ,KAAK6uD,UAAU9yD,KAAK6qD,IAGxB,IAAMoI,EAAWhvD,KAAKivD,eAAe/3C,EAAkBlX,KAAK6uD,UAAU92D,KAAI,SAAAxI,GAAK,OAAAA,EAAEoc,eAAc/Z,GAG/F,OAFAyzD,EAAepuC,IAAIjX,KAAK6uD,UAAU,GAAIG,EAAS,IAC/C3J,EAAepuC,IAAIjX,KAAK6uD,UAAU,GAAIG,EAAS,IACxC,CAACA,EAAS,GAAG9H,kBAAkBjvC,SAExC,YAAA82C,mBAAA,SAAmB73C,EAAyCtlB,GAC1D,IAAMs9D,EAASt9D,EAAO,GAAGG,KAAKsH,QACxB81D,EAASv9D,EAAO,GAAGG,KAAKsH,QAE9B,GAAgC,IAA5B2G,KAAKtB,YAAY7M,OAEnB,IADA,IAAMs3C,EAAQv3C,EAAO,GAAGG,KACfvC,EAAI,EAAGA,EAAI25C,EAAMt3C,SAAUrC,EAClCwQ,KAAKtB,YAAY3C,KAAKotC,EAAM35C,IAGhC,EAAAuP,aAAaH,yBACThN,EAAO,GAAGG,KAAMiO,KAAK7G,QAAS6G,KAAKnB,UAAWmB,KAAKtB,YAAasB,KAAKrB,KAAMqB,KAAKlB,SACpF,EAAAwH,OAAOxB,QACH,OACA,WAAW9E,KAAKlB,QAAO,eAAekB,KAAKnB,UAAS,WAAWmB,KAAK6rB,MAAK,iBACrE7rB,KAAKtB,YAAW,UAAUsB,KAAKrB,KAAI,aAAaqB,KAAK7G,SAC7D,IAAM/G,EAAcy3D,EAAUuF,gBAAgBF,EAAQC,EAAQnvD,KAAKnB,UAAWmB,KAAKrB,KAAMqB,KAAK7G,SACxFk2D,EAAoBrvD,KAAKsvD,wBAAwBp4C,EAAkBtlB,EAAQQ,GAGjF,MAAO,CAACi9D,EADJrvD,KAAKuvD,4BAA4Br4C,EAAkBm4C,EAAkBhH,aAAcz2D,EAAQQ,KAGjG,YAAA68D,eAAA,SAAe/3C,EAAyC43C,EAA6Bl9D,GACnF,IAAMqI,EAAIrI,EAAO,GACXc,EAAId,EAAOC,QAAU,EAAID,EAAO,QAAKe,EACvC68D,EAAMt4C,EAAiBmvC,eAAepsD,EAAE8D,QAC5C,IAAKyxD,EAAK,CACR,EAAAlpD,OAAOxB,QAAQ,OAAQ,uEACvB,IAAM2qD,EACF5F,EAAU6F,wBAAwBz1D,EAAElI,KAAKsH,QAAS2G,KAAK6rB,MAAO,EAAG5xB,EAAE+H,WAEvEwtD,EAAMt4C,EAAiBowC,sCACnBwH,EAAa,GAAGxG,aAAa,GAAIruD,EAAEvF,KAAM+6D,EAAex1D,GAE9D,IAAM01D,EAAiB,CACrB9G,kBAAmB,CAAC3xC,EAAiBK,uBAAuB3lB,EAAO,KACnEs1D,kBAAmBhwC,EAAiBmwC,4BAA4ByH,EAAa,GAAGzG,aAAcz2D,EAAO,GAAG8C,MACxGo0D,YAAa,IAETwE,EAAW,CAACqC,EAAezI,kBAAmBsI,GAuCpD,OAtCI98D,GACF46D,EAASvxD,KAAKmb,EAAiBK,uBAAuB7kB,IAqCjD,CAACi9D,EAlCkB,CACxB9G,kBAAmByE,EACnBpG,kBAHehwC,EAAiBmwC,4BAA4ByH,EAAa,GAAGzG,aAAcz2D,EAAO,GAAG8C,MAIpGo0D,YAAa,GACb8G,KAAM,SAAClkD,EAAyBk7C,GAM9B,IALA,IAAMiJ,EAAKnkD,EAAUmkD,GACfC,EAAYlJ,EAASj7C,YAAYZ,OAAQ+kD,UACzCC,EAAoBnJ,EAASj7C,YAAYZ,OAAQglD,kBACjDC,EAA0BpJ,EAASqJ,iBAAiBC,MAAK,SAAArgE,GAAK,MAAW,oBAAXA,EAAEM,QAA6B8pD,SAC/FkW,GAAQ,EACH,EAAI,EAAG,EAAIL,EAAW,GAAKC,EAClC,EAAAzpD,OAAOxB,QAAQ,WAAY,OAAO,EAAC,gBAAgBgrD,EAAS,gBAAgBC,GAExE,IAAMA,IACRI,GAAQ,EACRN,EAAGO,OAAOP,EAAGQ,OACb3kD,EAAU4kD,aACVT,EAAGU,cAAcV,EAAGW,UACpB9kD,EAAU4kD,aACVT,EAAGY,UAAUZ,EAAGhrC,IAAKgrC,EAAGhrC,KACxBnZ,EAAU4kD,cAGZT,EAAGa,UAAUV,EAAyB,GACtCtkD,EAAU4kD,aACV5kD,EAAUkkD,OAGRO,IACFN,EAAGc,QAAQd,EAAGQ,OACd3kD,EAAU4kD,kBAMlB,YAAAhB,wBAAA,SAAwBp4C,EAAyCtlB,EAAkBQ,GAEjF,IAAM88D,EAASt9D,EAAO,GAAGG,KAAKsH,QACxB81D,EAASv9D,EAAO,GAAGG,KAAKsH,QAExBH,EAAO9G,EAAYP,OACnB++D,EAAa/G,EAAUgH,eAAe3B,EAAQC,EAAQ/8D,EAAa,GACnEi2D,EAAenxC,EAAiBiwC,6BAClCyJ,EAAY,EAAG,CAACA,EAAW,GAAIA,EAAW,GAAIA,EAAW,GAAoB,EAAhBA,EAAW,IAAS,CAACE,UAAW,IAC3FtI,EAAe,0BACF0G,EAAO,GAAE,2BACTA,EAAO,GAAE,2BACTA,EAAO,GAAE,2BACTlvD,KAAKtB,YAAY,GAAE,2BACnBsB,KAAKtB,YAAY,GAAE,kCACZsB,KAAKnB,UAAU,GAAE,kCACjBmB,KAAKnB,UAAU,GAAE,gCACnBmB,KAAK7G,QAAQ,GAAE,gCACf6G,KAAK7G,QAAQ,GAAE,6BAClB6G,KAAKrB,KAAK,GAAE,6BACZqB,KAAKrB,KAAK,GAAE,gJAKJzF,EAAI,qlBAajBg2D,EAAOr9D,OAAM,qVAiB7B,MAAO,CACLy2D,aAAc,CAACpxC,EAAiBiwC,6BAA6B+H,IAC7D7G,aAAY,EACZE,SAAU,CAAC,KACXC,aAAY,IAGhB,YAAA+G,4BAAA,SACIr4C,EAAyC65C,EAA6Bn/D,EACtEQ,GACF,IAMI4+D,EANE9B,EAASt9D,EAAO,GAAGG,KAAKsH,QACxB81D,EAASv9D,EAAO,GAAGG,KAAKsH,QACxB43D,EAAsB,CAAC9B,EAAO,GAAI/7D,KAAK81B,KAAMgmC,EAAO,GAAKC,EAAO,GAAKA,EAAO,GAAM,IAClF+B,EAAUh6C,EAAiBiwC,6BAC7B8J,EAAqB,EAAG,CAACA,EAAoB,GAA6B,EAAzBA,EAAoB,IAAS,CAACH,UAAW,IAGxF53D,EAAO9G,EAAYP,OAEnBy2D,EAAe,CAACyI,EAAcG,GACd,IAAlBt/D,EAAOC,SACTm/D,EAAU95C,EAAiBiwC,6BAA6Bv1D,EAAO,GAAGG,KAAKsH,SACvEivD,EAAavsD,KAAKi1D,IAEpB,IAAM3I,EAAenxC,EAAiBiwC,6BAA6B/0D,GAC7D++D,EAAav/D,EAAOC,OAAS,EAAK,MAAQ,QAC1Ci+D,EAAYiB,EAAax7D,MAAM,GAE/Bw6D,EADe74C,EAAiBwqB,QAAQ/Q,QAAQjlB,UAAU0lD,kBACtBl6C,EAAiBwqB,QAAQ/Q,QAAQu0B,mBACvEllD,KAAKqxD,sBAAsBn6C,EAAiBwqB,QAAQ/Q,QAAQu0B,mBAAoB4K,GAChFA,EACEvH,EAAW,CAAC,SAAU,KACN,IAAlB32D,EAAOC,QACT02D,EAASxsD,KAAK,KAEhB,IAAMsI,EAAO,EAAAD,QAAQ8S,EAAiBwqB,QAAQ/Q,QAAQjlB,UAAU9H,SAC1D4kD,EAAe,mCACOtvD,EAAI,qEAGjB63D,EAAax7D,MAAM1D,OAAM,yIAILk/D,EAAa53D,QAAQ,GAAE,kBACtD43D,EAAa53D,QAAQ,GAAE,kBAAkB43D,EAAa53D,QAAQ,GAAE,8DAChC+3D,EAAQ/3D,QAAQ,GAAE,iEACfg4D,EAAS,sCACxBpB,EAAiB,sEACcgB,EAAal5C,MAAK,KAAKk5C,EAAan5C,OAAM,gEAC1Cs5C,EAAQr5C,MAAK,KAAKq5C,EAAQt5C,OAAM,0BACtEvT,EAAKL,UAAS,2BAA2BK,EAAKL,UAAS,2GAMxE,MAAO,CACLskD,aAAgC,IAAlB12D,EAAOC,OAAe,CAACk/D,EAAcG,EAASF,GAAY,CAACD,EAAcG,GACvF7I,aAAY,EACZG,aAAY,EACZD,SAAQ,EACR8F,UAAW,CAAC,CAACl+D,KAAM,kBAAmBuE,KAAM,QAC5CqW,OAAQ,CAAC,UAAa+kD,EAAW,kBAAqBC,KAGnD,EAAAL,wBAAP,SAA+Bn6D,EAAiBs2B,EAAepU,EAAkBjY,GAC/E,GAAc,IAAVqsB,IAA6B,IAAbpU,GAAmBliB,EAAM,GAAKA,EAAM,GAAMkiB,GAAa,GACzE,OAAOjY,EAOT,IALA,IAAM8xD,EAAiB/7D,EAAM,GACvBg8D,EAAah8D,EAAM,GAAKA,EAAM,GAAKA,EAAM,GACzCi8D,EAAap+D,KAAK81B,KAAKqoC,EAAa1lC,EAAQpU,GAAYA,EAExDrW,EAAS,IAAIyB,aADHyuD,EAAiBE,GAExBx+C,EAAI,EAAGA,EAAIs+C,IAAkBt+C,EAAG,CACvC,IAAMk7B,EAAYl7B,EAAIu+C,EAChB7P,EAAY1uC,EAAIw+C,EAAax+C,EAAI6Y,EAAQ0lC,EAC/CnwD,EAAOzM,IAAI6K,EAAOoe,SAASswB,EAAWA,EAAYqjB,GAAa7P,GAEjE,OAAOtgD,GAEF,EAAAyvD,eAAP,SAAsBvoB,EAAsB5pC,EAAuBtM,EAAuBqlB,GACxF,YADwF,IAAAA,MAAA,GACjF,CACLrlB,EAAY,GAAIA,EAAY,GAAIA,EAAY,GAC5CgB,KAAK81B,KAAKof,EAAW,GAAK5pC,EAAY,GAAKA,EAAY,GAAK+Y,KAGzD,EAAA23C,gBAAP,SACI9mB,EAAsB5pC,EAAuBG,EAAqB4yD,EAClEt4D,G,MACI6xC,EAAY1C,EAAW,GACvBopB,EAAoBppB,EAAWjvC,MAAM,GACrCyyB,EAAc4lC,EAAkB7/D,OAChC8/D,EAAcjzD,EAAY,GAE1BkzD,EADqBlzD,EAAYrF,MAAM,GACCtB,KAAI,SAAC6C,EAAGpL,GAAM,OAAAoL,GAAKA,EAAI,IAAMiE,EAAUrP,GAAK,MAEpFqiE,EAD2BH,EAAkB35D,KAAI,SAAC6C,EAAGpL,GAAM,OAAAoL,EAAI62D,EAAWjiE,GAAKiiE,EAAWjiE,EAAIs8B,MAEvE/zB,KAAI,SAAC6C,EAAGpL,GAAM,OAAA4D,KAAKiC,OAAOuF,EAAIg3D,EAAmBpiE,GAAK2J,EAAQ3J,IAAM2J,EAAQ3J,OAEzG,OADoB,GAACw7C,EAAW2mB,IAAatzC,OAAM,UAAIwzC,KAG/C,YAAAR,sBAAV,SAAgCS,EAA4BhC,GAC1D,OAAIgC,GAAsB,GAAKhC,EAAYgC,GAAsBhC,EAAYgC,GAAuB,EAC3FhC,EAEFgC,GAEC,YAAAC,cAAV,SAAwB1J,GAGtB,KAAIA,EAAazwC,OAFS,IAK1B,MAAO,CAJmB,GADA,KAU9B,EA/QA,CAA+B,EAAAmU,MAAlB,EAAA89B,a,obCTb,IAKA,2B,+CAaA,OAbkC,OAChC,YAAA5yC,IAAA,SAAIC,EAAyCtlB,GAC3C,GAAIoO,KAAK83B,SACP,MAAO,CAAClmC,EAAO,IAEjB,MAAM,IAAIoE,MAAM,iDAElB,YAAA8wD,kBAAA,SAAkBuG,EAAgCz7D,GAChD,MAAM,IAAIoE,MAAM,iDAElB,YAAAixD,cAAA,SAAcoG,EAAgC1hD,EAA0B/Z,GACtE,MAAM,IAAIoE,MAAM,iDAEpB,EAbA,CALA,MAKkC+hC,SAArB,EAAAiyB,gB,gbCLb,aAEA,OAIA,2B,+CA6BA,OA7B8B,OAC5B,YAAA/yC,IAAA,SAAIC,EAAyCtlB,GAC3C,OAAOslB,EAAiBD,IAAIjX,KAAMpO,IAEpC,YAAAk1D,kBAAA,SAAkBuG,EAAgCz7D,GAChD,IAAMQ,EAAcR,EAAO,GAAGG,KAAKsH,QAC7BgL,EAAO,EAAAD,QAAQipD,EAAQ3rB,QAAQ/Q,QAAQjlB,UAAU9H,SACjD4kD,EAAe,4CAELnkD,EAAKL,UAAS,8BACxBK,EAAKJ,OAAM,0CAA0CjE,KAAK1D,MAAM01D,gBAAe,gDAGrF,MAAO,CACL1J,aAAc,CAAC+E,EAAQxF,yBAAyBj2D,EAAO,KACvDy2D,aAAcgF,EAAQlG,6BAA6B/0D,GACnDm2D,SAAU,CAAC,KACXC,aAAY,EACZC,SAAS,IAGb,YAAAxB,cAAA,SAAcoG,EAAgC1hD,EAA0B/Z,GACtE,IAAM07D,EAAW,CAACD,EAAQ91C,uBAAuB3lB,EAAO,GAAI+Z,EAAY28C,aAAa,KACrF,MAAO,CACLO,kBAAmByE,EACnBpG,kBAAmBmG,EAAQhG,4BAA4B17C,EAAY08C,aAAciF,EAAS,GAAGr1C,OAAOvjB,MACpGo0D,YAAa,KAGnB,EA7BA,CAA8B,EAAAmJ,KAAjB,EAAA/H,Y,2FCDb,+BAwBA,OArBE,YAAAx/B,WAAA,SAAWC,GACT3qB,KAAK1D,MAAQquB,EAAWE,SAAS,QAAS,IAG5C,YAAAI,YAAA,SAAYr5B,GACV,SAAKA,GAA4B,IAAlBA,EAAOC,SAIfmO,KAAKkrB,gBAAgBt5B,IAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GACxB,MAAuB,YAAnBA,EAAO,GAAG8C,MAAyC,YAAnB9C,EAAO,GAAG8C,MAQlD,EAxBA,GAAsB,EAAAu9D,O,obCLtB,YAEA,OAGA,QAEA,2B,+CAMA,OANkC,OAChC,YAAAh7C,IAAA,SAAIC,EAAyCtlB,GAC3C,IAAMgK,EAAa,EAAAtH,UAAUgH,aAAa1J,EAAO,GAAGG,KAAMiO,KAAKnH,MAE/D,MAAO,CAAC,EAAAue,QAAQF,EAAkBtlB,EAAO,GAAIgK,KAEjD,EANA,CAAkC,EAAAo8B,SAArB,EAAAoyB,gB,mbCRb,YAEA,OAIA,2B,+CA4DA,OA5DiC,OAC/B,YAAAnzC,IAAA,SAAIC,EAAyCtlB,GAC3C,OAAOslB,EAAiBD,IAAIjX,KAAMpO,IAGpC,YAAAk1D,kBAAA,SAAkBuG,EAAgCz7D,GAOhD,IANA,IAAM02C,EAAa12C,EAAO,GAAGG,KAAKsH,QAC5B64D,EAAiBtgE,EAAO,GAAGG,KAAKsH,QAChCjH,EAAc,IAAImB,MAAM+0C,EAAWz2C,OAASqgE,EAAergE,OAAS,GAEpEgH,EAAO,EAAAvE,UAAUoF,cAAcsG,KAAKnH,KAAMyvC,EAAWz2C,QACrDsgE,EAAyB,GACtB3iE,EAAI,EAAGA,EAAI4C,EAAYP,OAAQrC,IAMlCA,EAAIqJ,GACNzG,EAAY5C,GAAK84C,EAAW94C,GAC5B2iE,EAAap2D,KAAK,YAAYvM,EAAC,iBAAiBA,EAAC,OAE7CA,EAAIqJ,EAAOq5D,EAAergE,QAC5BO,EAAY5C,GAAK0iE,EAAe1iE,EAAIqJ,GACpCs5D,EAAap2D,KAAK,iBAAgBvM,EAAIqJ,GAAI,iBAAiBrJ,EAAC,QAE5D4C,EAAY5C,GAAK84C,EAAW94C,EAAI0iE,EAAergE,OAAS,GACxDsgE,EAAap2D,KAAK,aAAYvM,EAAI0iE,EAAergE,OAAS,GAAC,iBAAiBrC,EAAC,OAKnF,IAGMg5D,EAAe,wCAHPp2D,EAAYP,QAAU,GAIC,8BAHvBy2C,EAAWz2C,OAID,iCAHTqgE,EAAergE,QAAU,GAIX,6CAEvBsgE,EAAan5C,KAAK,cAAa,gEAEtBngB,EAAI,uBAAuByvC,EAAWzvC,GAAK,iDAG1D,MAAO,CACLyvD,aAAc12D,EAAOmG,KAAI,SAAAjH,GAAK,OAAAu8D,EAAQxF,yBAAyB/2D,MAC/Du3D,aAAcgF,EAAQlG,6BAA6B/0D,GACnDm2D,SAAU,CAAC,IAAK,KAChBC,aAAY,IAGhB,YAAAvB,cAAA,SAAcoG,EAAgC1hD,EAA0B/Z,GACtE,IAAM07D,EAAW17D,EAAOmG,KAAI,SAACjH,EAAGtB,GAAM,OAAA69D,EAAQ91C,uBAAuBzmB,EAAG6a,EAAY28C,aAAa94D,OACjG,MAAO,CACLq5D,kBAAmByE,EACnBpG,kBAAmBmG,EAAQhG,4BAA4B17C,EAAY08C,aAAciF,EAAS,GAAGr1C,OAAOvjB,MACpGo0D,YAAa,KAGnB,EA5DA,CAAiC,EAAA7wB,QAApB,EAAAqyB,e,8tBCLb,YAEA,OAIA,2B,+CAsEA,OAtE+B,OAC7B,YAAArzC,IAAA,SAAIC,EAAyCtlB,GAC3C,OAAOslB,EAAiBD,IAAIjX,KAAMpO,IAEpC,YAAAk1D,kBAAA,SAAkB5vC,EAAyCtlB,GACzD,IAAMwgE,EAASxgE,EAAO,GAAGG,KAAKsH,QACxBg5D,EAASzgE,EAAO,GAAGG,KAAKsH,QACxB,IAAS,EAAAzC,SAASV,qBACpBk8D,EAAQpyD,KAAK4sB,OAAQylC,EAAQryD,KAAK6sB,OAA0B,IAAlBj7B,EAAOC,OAAeD,EAAO,GAAGG,UAAOY,GAAU,GACzF2/D,EAAS,CAFP,KAAG,MAGX,IAAKA,EACH,MAAM,IAAIt8D,MAAM,uCAElB,IAAI85D,EAAYsC,EAAOA,EAAOvgE,OAAS,GACnCqtD,EAAO,GACPl/C,KAAK4sB,SACPkjC,EAAYsC,EAAO,IAEjBpyD,KAAK4sB,QAAU5sB,KAAK6sB,OACtBqyB,EAAO,8BACEl/C,KAAK4sB,SAAW5sB,KAAK6sB,OAC9BqyB,EAAO,6BACGl/C,KAAK4sB,QAAU5sB,KAAK6sB,OAC9BqyB,EAAO,4BACGl/C,KAAK4sB,QAAW5sB,KAAK6sB,SAC/BqyB,EAAO,2BAET,IAAMhmD,EAAOo5D,EAAOzgE,OAId22D,EAAe,qCACStvD,EAAI,yBACpBA,EAAI,uBACJA,EAAI,kBANiB,IAAlBtH,EAAOC,OAAe,SAASD,EAAO,GAAGG,KAAKF,OAAM,KAAO,IAO5D,kFANqB,IAAlBD,EAAOC,OAAe,8BAAgC,IAUvD,+DAGMi+D,EAAS,8BACnB52D,EAAO,GAAC,4BACRA,EAAO,GAAC,yBACVgmD,EAAI,iEAfqB,IAAlBttD,EAAOC,OAAe,yBAA2B,IAmBlD,qCAIlB,MAAO,CACLy2D,aAFmB12D,EAAOmG,KAAI,SAAAjH,GAAK,OAAAomB,EAAiB2wC,yBAAyB/2D,MAG7Eu3D,aAAcnxC,EAAiBiwC,6BAA6BmL,GAC5D/J,SAA4B,IAAlB32D,EAAOC,OAAe,CAAC,IAAK,IAAK,KAAO,CAAC,IAAK,KACxDw8D,UAAW,CAAC,CAACl+D,KAAM,QAASuE,KAAM,SAAU,CAACvE,KAAM,OAAQuE,KAAM,UACjE8zD,aAAY,IAGhB,YAAAvB,cAAA,SAAc/vC,EAAyCvL,EAA0B/Z,GAC/E,IAAM07D,EAAW17D,EAAOmG,KAAI,SAACjH,EAAGtB,GAAM,OAAA0nB,EAAiBK,uBAAuBzmB,EAAG6a,EAAY28C,aAAa94D,OAC1G,MAAO,CACLq5D,kBAAmByE,EACnBpG,kBACIhwC,EAAiBmwC,4BAA4B17C,EAAY08C,aAAciF,EAAS,GAAGr1C,OAAOvjB,MAC9Fo0D,YAAa,CAAC,MAAS9oD,KAAK1D,MAAO,KAAQ0D,KAAK8sB,QAGtD,EAtEA,CAA+B,EAAAY,MAAlB,EAAA68B,a,wbCNb,IAKA,2B,+CAmDA,OAnDsC,OACpC,YAAAtzC,IAAA,SAAIC,EAAyCtlB,GAC3C,OAAOslB,EAAiBD,IAAIjX,KAAMpO,IAEpC,YAAAk1D,kBAAA,SAAkBuG,EAAgCz7D,GAChD,IAAMQ,EAAcR,EAAO,GAAGG,KAAKsH,QAC7BH,EAAO9G,EAAYP,OAEnB22D,EAAe,WADCxoD,KAAKuyD,oBAAoBvyD,KAAKk4B,KAAKrmC,QAExC,qCACaqH,EAAI,iFAGlC,MAAO,CACLovD,aAAc,CAAC+E,EAAQxF,yBAAyBj2D,EAAO,KACvDy2D,aAAcgF,EAAQlG,6BAA6B/0D,GACnDm2D,SAAU,CAAC,KACX8F,UAAW,CAAC,CAACl+D,KAAM,OAAQuE,KAAM,QAAS45D,YAAatuD,KAAKk4B,KAAKrmC,QAAS,CAAC1B,KAAM,QAASuE,KAAM,UAChG8zD,aAAY,IAGhB,YAAAvB,cAAA,SAAcoG,EAAgC1hD,EAA0B/Z,GACtE,IAAM07D,EAAW,CAACD,EAAQ91C,uBAAuB3lB,EAAO,GAAI+Z,EAAY28C,aAAa,KACrF,MAAO,CACLO,kBAAmByE,EACnBpG,kBAAmBmG,EAAQhG,4BAA4B17C,EAAY08C,aAAciF,EAAS,GAAGr1C,OAAOvjB,MACpGo0D,YAAa,CAAC,KAAQ9oD,KAAKk4B,KAAM,MAASl4B,KAAKorB,SAG3C,YAAAmnC,oBAAR,SAA4Bne,GAE1B,IADA,IAAMsa,EAAsB,CAAC,4BAA4Bta,EAAW,qBAC3D5kD,EAAI,EAAGA,EAAI4kD,IAAe5kD,EACvB,IAANA,EACFk/D,EAAU3yD,KACN,oBACkBvM,EAAC,mBAAmBA,EAAC,QAClCA,IAAM4kD,EAAc,EAC7Bsa,EAAU3yD,KACN,wBACsBvM,EAAC,QAE3Bk/D,EAAU3yD,KACN,yBACuBvM,EAAC,mBAAmBA,EAAC,QAMpD,OAHAk/D,EAAU3yD,KACN,OAEG2yD,EAAU11C,KAAK,OAE1B,EAnDA,CALA,MAKsCof,aAAzB,EAAAwyB,oB,kcCLb,YAEA,OAIA,2B,+CA2IA,OA3IgD,OAC9C,YAAA3zC,IAAA,SAAIC,EAAyCtlB,GAA7C,WACOoO,KAAK6uD,YACR7uD,KAAK6uD,UAAY,GACI7uD,KAAK+uD,mBAAmB73C,EAAkBtlB,GAClD0L,SAAQ,SAACk1D,EAAIhjE,GACxB,IAAMo3D,EAAW1vC,EAAiBwqB,QAAQ2jB,eAAe5hB,MAAM+uB,GAC/D,EAAK3D,UAAU9yD,KAAK6qD,OAIxB,IAAMoI,EAAWhvD,KAAKivD,eAAe/3C,EAAkBlX,KAAK6uD,UAAU92D,KAAI,SAAAxI,GAAK,OAAAA,EAAEoc,eAAc/Z,GAE/F,OADAo9D,EAAS1xD,SAAQ,SAAC1C,EAAGpL,GAAM,OAAA0nB,EAAiBwqB,QAAQ2jB,eAAepuC,IAAI,EAAK43C,UAAUr/D,GAAIoL,MACnF,CAACo0D,EAAS,GAAG9H,kBAAkBjvC,SAGxC,YAAAiT,gBAAA,SAAgBt5B,GACd,QAAK,YAAMs5B,gBAAe,UAACt5B,IAIG,IAA1BA,EAAO,GAAGG,KAAKF,QAQrB,YAAA4gE,iCAAA,SAAiCv7C,EAAyCw7C,GACxE,IAAMtf,EAAQsf,EAAQn9D,MAChB61C,EAAUgI,EAAM,GAChB3L,EAAc2L,EAAM,GAAKA,EAAM,GAC/BhhD,EAAc,CAACghD,EAAM,GAAIhI,GACzBunB,EAAsB,CAACvf,EAAM,GAAc,EAAVhI,GAEjCod,EAAe,yLAOApV,EAAM,GAAE,2DAENA,EAAM,GAAE,0IAMD3L,EAAW,iDAEpB2L,EAAM,GAAE,2DAENA,EAAM,GAAE,4KAOR3L,EAAW,+BAIlC,MAAO,CACL6gB,aAAc,CAACoK,GACfrK,aAAcnxC,EAAiBiwC,6BAA6B/0D,EAAa,EAAGugE,GAC5EpK,SAAU,CAAC,KACXC,aAAY,IAIhB,YAAAoK,8BAAA,SACI17C,EAAyCw7C,EAAwBG,EACjE7B,EAAwB8B,GAC1B,IAAMzuD,EAAO,EAAAD,QAAQ8S,EAAiBwqB,QAAQ/Q,QAAQjlB,UAAU9H,SAC1D4kD,EAAe,mJAGoBsK,EAAsBj7C,MAAK,KAAKi7C,EAAsBl7C,OAAM,oBAC1FvT,EAAKL,UAAS,ghBAmBzB,MAAO,CACLskD,aAAc,CAACoK,EAASI,EAAuBD,EAAa7B,GAC5D3I,aAAcnxC,EAAiBiwC,6BAA6BuL,EAAQn9D,OACpEgzD,SAAU,CAAC,IAAK,kBAAmB,QAAS,KAC5C8F,UAAW,CAAC,CAACl+D,KAAM,UAAWuE,KAAM,UACpC8zD,aAAY,IAGhB,YAAAuG,mBAAA,SAAmB73C,EAAyCtlB,GAC1D,IAAM8gE,EAAUx7C,EAAiB2wC,yBAAyBj2D,EAAO,IAC3DihE,EAAc37C,EAAiB2wC,yBAAyBj2D,EAAO,IAC/Do/D,EAAU95C,EAAiB2wC,yBAAyBj2D,EAAO,IAC3DmhE,EAA6B/yD,KAAKyyD,iCAAiCv7C,EAAkBw7C,GAK3F,MADoC,CAACK,EAHJ/yD,KAAK4yD,8BAClC17C,EAAkBw7C,EAASG,EAAa7B,EAAS+B,EAA2B1K,gBAKlF,YAAA4G,eAAA,SAAe/3C,EAAyC43C,EAA6Bl9D,GACnF,IAAMmP,EAAWnP,EAAO,GAAG8C,KACrB4iB,EAAUJ,EAAiBK,uBAAuB3lB,EAAO,GAAIk9D,EAAa,GAAGxG,aAAa,IAC1F0K,EAAU97C,EAAiBK,uBAAuB3lB,EAAO,GAAIk9D,EAAa,GAAGxG,aAAa,IAC1F2K,EAAM/7C,EAAiBK,uBAAuB3lB,EAAO,GAAIk9D,EAAa,GAAGxG,aAAa,IACtF0G,EAAsB,GAW5B,OAVAA,EAASjzD,KAAK,CACZ8sD,kBAAmB,CAACvxC,GACpB4vC,kBAAmBhwC,EAAiBmwC,4BAA4ByH,EAAa,GAAGzG,aAActnD,GAC9F+nD,YAAa,KAEfkG,EAASjzD,KAAK,CACZ8sD,kBAAmB,CAACvxC,EAAS03C,EAAS,GAAG9H,kBAAmB8L,EAASC,GACrE/L,kBAAmBhwC,EAAiBmwC,4BAA4ByH,EAAa,GAAGzG,aAActnD,GAC9F+nD,YAAa,CAAC,QAAW9oD,KAAK4qB,WAEzBokC,GAGX,EA3IA,CAAgD,EAAArhC,uBAAnC,EAAAk9B,8B,sbCNb,aAEA,OAIA,2B,+CA6BA,OA7BoC,OAClC,YAAA5zC,IAAA,SAAIC,EAAyCtlB,GAC3C,OAAOslB,EAAiBD,IAAIjX,KAAMpO,IAEpC,YAAAk1D,kBAAA,SAAkBuG,EAAgCz7D,GAChD,IAAMQ,EAAcR,EAAO,GAAGG,KAAKsH,QAC7BgL,EAAO,EAAAD,QAAQipD,EAAQ3rB,QAAQ/Q,QAAQjlB,UAAU9H,SACjD4kD,EAAe,4CAELnkD,EAAKL,UAAS,8BACxBK,EAAKJ,OAAM,+BAA+BjE,KAAK1D,MAAK,2BAG1D,MAAO,CACLmsD,SAAS,EACTH,aAAc,CAAC+E,EAAQxF,yBAAyBj2D,EAAO,KACvDy2D,aAAcgF,EAAQlG,6BAA6B/0D,GACnDm2D,SAAU,CAAC,KACXC,aAAY,IAGhB,YAAAvB,cAAA,SAAcoG,EAAgC1hD,EAA0B/Z,GACtE,IAAM07D,EAAW,CAACD,EAAQ91C,uBAAuB3lB,EAAO,GAAI+Z,EAAY28C,aAAa,KACrF,MAAO,CACLO,kBAAmByE,EACnBpG,kBAAmBmG,EAAQhG,4BAA4B17C,EAAY08C,aAAciF,EAAS,GAAGr1C,OAAOvjB,MACpGo0D,YAAa,KAGnB,EA7BA,CAAoC,EAAAoK,WAAvB,EAAApI,kB,iGCDb,+BAwBA,OArBE,YAAApgC,WAAA,SAAWC,GACT3qB,KAAK1D,MAAQquB,EAAWE,SAAS,QAAS,MAG5C,YAAAI,YAAA,SAAYr5B,GACV,SAAKA,GAA4B,IAAlBA,EAAOC,SAIfmO,KAAKkrB,gBAAgBt5B,IAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GACxB,MAAuB,YAAnBA,EAAO,GAAG8C,MAAyC,YAAnB9C,EAAO,GAAG8C,MAQlD,EAxBA,GAAsB,EAAAw+D,a,mbCLtB,YAEA,OAIA,2B,+CA6CA,OA7CiC,OAC/B,YAAAj8C,IAAA,SAAIC,EAAyCtlB,GAC3C,OAAOslB,EAAiBD,IAAIjX,KAAMpO,IAEpC,YAAAk1D,kBAAA,SAAkBuG,EAAgCz7D,GAChD,IAAMwgE,EAASxgE,EAAO,GAAGG,KACnBsgE,EAASzgE,EAAO,GAAGG,KACnBK,EAAc,EAAA2B,cAAclB,UAAUu/D,EAAQC,GAAQ,GAC5D,IAAKjgE,EACH,MAAM,IAAI4D,MAAM,yCAElB,IAAMkD,EAAO9G,EAAYP,OACnBoB,EAAQm/D,EAAOvgE,OACfqB,EAAQm/D,EAAOxgE,OAEf22D,EAAe,qCACStvD,EAAI,yBACpBjG,EAAK,uBACLC,EAAK,qJAJDk/D,EAAOA,EAAOvgE,OAAS,GASR,8BACnBoB,EAAQ,GAAC,4BACTC,EAAQ,GAAC,+FAKvB,MAAO,CACLo1D,aAAc12D,EAAOmG,KAAI,SAAAjH,GAAK,OAAAu8D,EAAQxF,yBAAyB/2D,MAC/Du3D,aAAcgF,EAAQlG,6BAA6B/0D,GACnDm2D,SAAU,CAAC,IAAK,KAChBC,aAAY,IAGhB,YAAAvB,cAAA,SAAcoG,EAAgC1hD,EAA0B/Z,GACtE,IAAM07D,EAAW17D,EAAOmG,KAAI,SAACjH,EAAGtB,GAAM,OAAA69D,EAAQ91C,uBAAuBzmB,EAAG6a,EAAY28C,aAAa94D,OACjG,MAAO,CACLq5D,kBAAmByE,EACnBpG,kBAAmBmG,EAAQhG,4BAA4B17C,EAAY08C,aAAciF,EAAS,GAAGr1C,OAAOvjB,MACpGo0D,YAAa,KAGnB,EA7CA,CAAiC,EAAA78B,QAApB,EAAAg/B,e,icCNb,YAEA,OACA,OAIA,2B,+CA+BA,OA/B8B,OAC5B,YAAAh0C,IAAA,SAAIC,EAAyCtlB,GAC3C,OAAOslB,EAAiBD,IAAIjX,KAAMpO,IAEpC,YAAAk1D,kBAAA,SAAkB5vC,EAAyCtlB,GACzD,IAAMQ,EAAc,EAAAkC,UAAUuG,SAASjJ,EAAO,GAAGG,KAAKsH,QAAS2G,KAAKrB,MAC9DzF,EAAO9G,EAAYP,OACnBshE,EAAUj8C,EAAiB2wC,yBAAyBj2D,EAAO,IAG3D42D,EAAe,WAFD4K,EAChB,EAAAhvD,QAAQ8S,EAAiBwqB,QAAQ/Q,QAAQjlB,UAAU9H,SAAU,IAAKuvD,EAASnzD,KAAKjP,KAAMiP,KAAKrB,KAAMqB,KAAKnP,OAE3F,6BACOqI,EAAI,yDAG1B,MAAO,CACLovD,aAAc,CAAC6K,GACf9K,aAAcnxC,EAAiBiwC,6BAA6B/0D,GAC5Dm2D,SAAU,CAAC,KACXC,aAAY,IAGhB,YAAAvB,cAAA,SAAc/vC,EAAyCvL,EAA0B/Z,GAC/E,IAAM07D,EAAW,CAACp2C,EAAiBK,uBAAuB3lB,EAAO,GAAI+Z,EAAY28C,aAAa,KAC9F,MAAO,CACLO,kBAAmByE,EACnBpG,kBACIhwC,EAAiBmwC,4BAA4B17C,EAAY08C,aAAciF,EAAS,GAAGr1C,OAAOvjB,MAC9Fo0D,YAAa,KAGnB,EA/BA,CAA8B,EAAAzwB,KAgC9B,SAAgB+6B,EACZ/uD,EAAYlU,EAAckjE,EAA4BtiE,EAAc4N,EAAgB9N,GACtF,OAAQE,GACN,IAAK,WACH,OAYN,SACIsT,EAAYlU,EAAcoF,EAA8B4D,EAAgC0e,EACxFD,EAAgBjZ,EAAgB9N,GAGlC,IAFA,IAAMqI,EAAO3D,EAAM1D,OACfyhE,EAAQ,GACH9jE,EAAI0J,EAAO,EAAG1J,GAAK,IAAKA,EAC/B8jE,GAAS,qBACK9jE,EAAC,OAAOmP,EAAKnP,GAAE,iEAEZ+F,EAAM/F,GAAE,+CACH2J,EAAQ3J,GAAE,gBAGlC,MAAO,sBACUW,EAAI,UAAU+I,EAAI,gDACIrI,EAAK,kEAGlCyiE,EAAK,oDACgCz7C,EAAK,KAAKD,EAAM,+CACvBvT,EAAKL,UAAS,IAAI7T,EAAI,4DAhCnDojE,CACHlvD,EAAMlU,EAAMkjE,EAAY99D,MAAO89D,EAAYl6D,QAASk6D,EAAYx7C,MAAOw7C,EAAYz7C,OAAQjZ,EAAM9N,GACvG,IAAK,UACH,OAkCN,SACIwT,EAAYlU,EAAcoF,EAA8B4D,EAAgC0e,EACxFD,EAAgBjZ,GAIlB,IAHA,IAAMzF,EAAO3D,EAAM1D,OAEfyhE,EAAQ,GACH9jE,EAAI0J,EAAO,EAAG1J,GAAK,IAAKA,EAC/B8jE,GAAS,mBACG9jE,EAAC,OAAOmP,EAAKnP,GAAE,6EAGD,GAAK+F,EAAM/F,GAAK,GAAE,8EAE5B+F,EAAM/F,GAAE,0DAEJ2J,EAAQ3J,GAAE,cAGhC,MAAO,oBACQW,EAAI,UAAU+I,EAAI,8DAGzBo6D,EAAK,kDACgCz7C,EAAK,KAAKD,EAAM,6CACvBvT,EAAKL,UAAS,IAAI7T,EAAI,sDA1DjDqjE,CACHnvD,EAAMlU,EAAMkjE,EAAY99D,MAAO89D,EAAYl6D,QAASk6D,EAAYx7C,MAAOw7C,EAAYz7C,OAAQjZ,GACjG,IAAK,OACH,OA4DN,SACI0F,EAAYlU,EAAcoF,EAA8B4D,EAAgC0e,EACxFD,EAAgBjZ,GAIlB,IAHA,IAAMzF,EAAO3D,EAAM1D,OAEfyhE,EAAQ,GACH9jE,EAAI0J,EAAO,EAAG1J,GAAK,IAAKA,EAC/B8jE,GAAS,iBACC9jE,EAAC,OAAOmP,EAAKnP,GAAE,+CAEZ+F,EAAM/F,GAAE,UAAS+F,EAAM/F,GAAK,GAAC,0BACxB2J,EAAQ3J,GAAE,YAG9B,MAAO,kBACMW,EAAI,UAAU+I,EAAI,wDAGzBo6D,EAAK,gDACgCz7C,EAAK,KAAKD,EAAM,2CACvBvT,EAAKL,UAAS,IAAI7T,EAAI,gDAhF/CsjE,CACHpvD,EAAMlU,EAAMkjE,EAAY99D,MAAO89D,EAAYl6D,QAASk6D,EAAYx7C,MAAOw7C,EAAYz7C,OAAQjZ,GACjG,QACE,MAAM,IAAI3I,MAAM,iBA7CT,EAAAu1D,WAgCb,oB,yiBCvCA,YAEA,OAIA,2B,+CAiBA,OAjB4C,OAC1C,YAAAt0C,IAAA,SAAIC,EAAyCtlB,GAC3C,OAAOslB,EAAiBD,IAAIjX,KAAMpO,IAEpC,YAAAk1D,kBAAA,SAAkB5vC,EAAyCtlB,GACzD,OAAO8hE,EACHx8C,EAAkBtlB,GAAQ,EAAMoO,KAAKtB,YAAasB,KAAKlB,QAASkB,KAAK7G,QAAS6G,KAAKrB,KAAMqB,KAAK4tB,kBAEpG,YAAAq5B,cAAA,SAAc/vC,EAAyCvL,EAA0B/Z,GAC/E,IAAM07D,EAAW,CAACp2C,EAAiBK,uBAAuB3lB,EAAO,GAAI+Z,EAAY28C,aAAa,KAC9F,MAAO,CACLO,kBAAmByE,EACnBpG,kBACIhwC,EAAiBmwC,4BAA4B17C,EAAY08C,aAAciF,EAAS,GAAGr1C,OAAOvjB,MAC9Fo0D,YAAa,KAGnB,EAjBA,CAA4C,EAAA96B,mBAA/B,EAAAw8B,yBAmBb,+B,+CAiBA,OAjBsC,OACpC,YAAAvzC,IAAA,SAAIC,EAAyCtlB,GAC3C,OAAOslB,EAAiBD,IAAIjX,KAAMpO,IAEpC,YAAAk1D,kBAAA,SAAkB5vC,EAAyCtlB,GACzD,OAAO8hE,EACHx8C,EAAkBtlB,GAAQ,EAAOoO,KAAKtB,YAAasB,KAAKlB,QAASkB,KAAK7G,QAAS6G,KAAKrB,KAAMqB,KAAK4tB,kBAErG,YAAAq5B,cAAA,SAAc/vC,EAAyCvL,EAA0B/Z,GAC/E,IAAM07D,EAAW,CAACp2C,EAAiBK,uBAAuB3lB,EAAO,GAAI+Z,EAAY28C,aAAa,KAC9F,MAAO,CACLO,kBAAmByE,EACnBpG,kBACIhwC,EAAiBmwC,4BAA4B17C,EAAY08C,aAAciF,EAAS,GAAGr1C,OAAOvjB,MAC9Fo0D,YAAa,KAGnB,EAjBA,CAAsC,EAAA/6B,aAkBtC,SAAS2lC,EACLx8C,EAAyCtlB,EAAkB4M,EAA2BE,EACtFI,EAAc3F,EAAwBwF,EAAqBivB,QAD2B,IAAAlvB,MAAA,SACtF,IAAAI,MAAA,SAAc,IAAA3F,MAAA,SAAwB,IAAAwF,MAAA,IACxC,IAAM2pC,EAAa12C,EAAO,GAAGG,KAAKsH,QAClC,EAAA0F,aAAaR,qBAAqBC,EAAkB8pC,EAAY5pC,EAAavF,EAASwF,GACtF,IAAMvM,EACF,EAAA2M,aAAaE,uBAAuBT,EAAkB8pC,EAAYnvC,EAASuF,EAAaC,EAAMG,GAC5F4xC,EAAa,EAAAp8C,UAAUE,KAAKkK,GAE9BrB,EAAM,GAERA,GADEuwB,EACK,kBAAkB8iB,EAAU,KAE5B,kBAAkBA,EAAU,WAErC,IAAM2iB,EAAcn8C,EAAiB2wC,yBAAyBj2D,EAAO,IAE/D42D,EAAe,WADDmL,EAAoBN,EAAa30D,EAAaC,EAAMxF,EAR5D,kBAQ0EkE,EAAK,OAE1E,SAEjB,MAAO,CACLirD,aAAc,CAAC+K,GACfhL,aAAcnxC,EAAiBiwC,6BAA6B/0D,GAC5Dm2D,SAAU,CAAC,KACXC,aAAY,GA1CH,EAAAgB,mBA8Cb,+B,+CAiBA,OAjBwC,OACtC,YAAAvyC,IAAA,SAAIC,EAAyCtlB,GAC3C,OAAOslB,EAAiBD,IAAIjX,KAAMpO,IAEpC,YAAAk1D,kBAAA,SAAkB5vC,EAAyCtlB,GACzD,OAAOgiE,EACH18C,EAAkBtlB,GAAQ,EAAMoO,KAAKtB,YAAasB,KAAKlB,QAASkB,KAAK7G,QAAS6G,KAAKrB,OAEzF,YAAAsoD,cAAA,SAAc/vC,EAAyCvL,EAA0B/Z,GAC/E,IAAM07D,EAAW,CAACp2C,EAAiBK,uBAAuB3lB,EAAO,KACjE,MAAO,CACLi3D,kBAAmByE,EACnBpG,kBACIhwC,EAAiBmwC,4BAA4B17C,EAAY08C,aAAciF,EAAS,GAAGr1C,OAAOvjB,MAC9Fo0D,YAAa,KAGnB,EAjBA,CAAwC,EAAA36B,eAA3B,EAAAs8B,qBAmBb,+B,+CAiBA,OAjBkC,OAChC,YAAAxzC,IAAA,SAAIC,EAAyCtlB,GAC3C,OAAOslB,EAAiBD,IAAIjX,KAAMpO,IAEpC,YAAAk1D,kBAAA,SAAkB5vC,EAAyCtlB,GACzD,OAAOgiE,EACH18C,EAAkBtlB,GAAQ,EAAOoO,KAAKtB,YAAasB,KAAKlB,QAASkB,KAAK7G,QAAS6G,KAAKrB,OAE1F,YAAAsoD,cAAA,SAAc/vC,EAAyCvL,EAA0B/Z,GAC/E,IAAM07D,EAAW,CAACp2C,EAAiBK,uBAAuB3lB,EAAO,KACjE,MAAO,CACLi3D,kBAAmByE,EACnBpG,kBACIhwC,EAAiBmwC,4BAA4B17C,EAAY08C,aAAciF,EAAS,GAAGr1C,OAAOvjB,MAC9Fo0D,YAAa,KAGnB,EAjBA,CAAkC,EAAA56B,SAkBlC,SAAS0lC,EACL18C,EAAyCtlB,EAAkB4M,EAA2BE,EACtFI,EAAc3F,EAAwBwF,QADgD,IAAAD,MAAA,SACtF,IAAAI,MAAA,SAAc,IAAA3F,MAAA,SAAwB,IAAAwF,MAAA,IACxC,IAAM2pC,EAAa12C,EAAO,GAAGG,KAAKsH,QAClC,EAAA0F,aAAaR,qBAAqBC,EAAkB8pC,EAAY5pC,EAAavF,EAASwF,GACtF,IAAMvM,EACF,EAAA2M,aAAaE,uBAAuBT,EAAkB8pC,EAAYnvC,EAASuF,EAAaC,EAAMG,GAK5Fu0D,EAAcn8C,EAAiBiwC,6BAA6B7e,GAE5DkgB,EAAe,SADDmL,EAAoBN,EAAa30D,EAAaC,EAAMxF,EAL5D,qDAGA,GAE+E,QAE5E,OAEf,MAAO,CACLmvD,aAAc,CAAC+K,GACfhL,aAAcnxC,EAAiBiwC,6BAA6B/0D,GAC5Dm2D,SAAU,CAAC,KACXC,aAAY,GAIhB,SAAgBmL,EACZ75D,EAAkB4E,EAAuBC,EAAgBxF,EAAmBiE,EAAaC,EACzFkzC,GACF,IAAM9xC,EAAY3E,EAAEvE,MACd2D,EAAOY,EAAEvE,MAAM1D,OACrB,GAAI6M,EAAY7M,QAAU,EAAG,CAC3B,IAAMi7C,EAAKpuC,EAAYA,EAAY7M,OAAS,GACtCgiE,EAAK16D,EAAQA,EAAQtH,OAAS,GAC9BiiE,EAAUn1D,EAAKA,EAAK9M,OAAS,EAAI,GACjCkiE,EAAQp1D,EAAKA,EAAK9M,OAAS,GAC3BmiE,EAAOv1D,EAAUvF,EAAO,GAC1B+6D,EAAQ,GACRC,EAAQ,GACRC,EAAW,GAmBf,GAjBEF,EADEH,EAAUC,IAAU,EACd,yCACwBjnB,EAAE,iCAClB5zC,EAAI,mBAAmBA,EAAI,WAAW26D,EAAE,MAAMC,EAAO,kCACjD56D,EAAI,kBAAkBA,EAAI,YAAY86D,EAAI,0GAIhD52D,EAAG,sBAGT,yCACwB0vC,EAAE,iCAClB5zC,EAAI,mBAAmBA,EAAI,WAAW26D,EAAE,MAAMC,EAAO,4BACvD12D,EAAG,sBAIQ,IAAvBsB,EAAY7M,OAAc,CAC5B,IAAMg7C,EAAKnuC,EAAYA,EAAY7M,OAAS,GACtCuiE,EAAKj7D,EAAQA,EAAQtH,OAAS,GAC9BwiE,EAAU11D,EAAKA,EAAK9M,OAAS,EAAI,GACjCyiE,EAAQ31D,EAAKA,EAAK9M,OAAS,GAC3B0iE,EAAO91D,EAAUvF,EAAO,GAE5Bg7D,EADEG,EAAUC,IAAU,EACd,uCACoBznB,EAAE,+BAClB3zC,EAAI,mBAAmBA,EAAI,WAAWk7D,EAAE,MAAMC,EAAO,gCACjDn7D,EAAI,kBAAkBA,EAAI,YAAYq7D,EAAI,gCACxCznB,EAAE,kEAKZ,yCACsBD,EAAE,iCAClB3zC,EAAI,mBAAmBA,EAAI,WAAWk7D,EAAE,MAAMC,EAAO,0BAGrEF,EAAW,kCAmBb,MAdoB,2CACgBj7D,EAAI,6BACtBA,EAAI,yEAGIq3C,EAAQ,gDAEtB2jB,EAAK,mBACLD,EAAK,mBACLE,EAAQ,mBACR92D,EAAG,2DAMf,IAAMqzC,EAAa,EAAAp8C,UAAUE,KAAKkK,GAC5BiyC,EAAgB,EAAAr8C,UAAU2E,eAAeyF,GACzCkyC,EAAcD,EAAc9+C,OAC5B2iE,EAAW71D,EAAK9M,OAChB4iE,EAA0Bh7D,EAAgBm3C,GAC1C8jB,EAAgBC,EAAUl2D,EAAW,aACrCm2D,EAAWD,EAAUh2D,EAAM,QAC3Bk2D,EAAoBF,EAAUhkB,EAAe,iBAkDnD,MA9BoB,iBACV8jB,EAAuB,2CACGv7D,EAAI,+BACpBA,EAAI,wEAEC03C,EAAW,gCACb4jB,EAAQ,qCACHt7D,EAAI,yCACA03C,EAAW,mCACjBA,EAAW,uBACvBgkB,EAAQ,qBACRF,EAAa,qBA9BPC,EAAUx7D,EAAS,WA+Bd,qBACX07D,EAAiB,qCAEHtkB,EAAQ,6GAGFG,EAAU,kJAGbx3C,EAAI,MAAM03C,EAAW,SAAS13C,EAAI,mEACbA,EAAI,MAAM03C,EAAW,2CACtC13C,EAAI,MAAM03C,EAAW,4CAzCxCjyC,EAAKnD,QAAO,SAAC0xB,EAAKsiB,GAAQ,OAAAtiB,EAAMsiB,KAGpC,oOAQEpyC,EAAG,oBAGL,4CAEIA,GA0BW,wCAEbC,EAAG,mDAQrB,SAAgBs3D,EAAU5yD,EAA8B+yD,GAEtD,IADA,IAAIxB,EAAQ,GACH9jE,EAAI,EAAGA,EAAIuS,EAAMlQ,OAAQrC,IAChC8jE,GAAS,WACLwB,EAAS,IAAItlE,EAAC,OAAOuS,EAAMvS,GAAE,UAGnC,OAAO8jE,EAGT,SAAgB75D,EAAgBP,GAC9B,MAAO,8CACkCA,EAAI,sBAAsBA,EAAI,2BAC7DA,EAAI,iEAGYA,EAAI,+HAIhBA,EAAI,yBArMP,EAAAgyD,eA0Cb,wBAuIA,cAUA,qB,uiBCtRA,YAEA,OAIA,2B,+CAiEA,OAjE0C,OAGxC,YAAAj0C,IAAA,SAAIC,EAAyCtlB,GAC3C,OAAOslB,EAAiBD,IAAIjX,KAAMpO,IAEpC,YAAAk1D,kBAAA,SAAkBuG,EAAgCz7D,GAUhD,IATA,IAAMQ,EAAwB,GACxB2iE,EAAQnjE,EAAO,GAAGG,KAAKF,QAAU,EAEjCmjE,EAAU,GAEVn7D,EAAO,EAAAvF,UAAUsF,cAAcoG,KAAKnG,KAAMjI,EAAO,GAAGG,KAAKF,QACzDojE,EAAMj1D,KAAKk1D,OAAOtjE,EAAQiI,GAC5B6xD,EAAYuJ,EAAI,GAEXh7D,EAAI,EAAGA,EAAIrI,EAAO,GAAGG,KAAKF,OAAQoI,IAErCJ,EAAKiC,QAAQ7B,IAAM,GAAqB,IAAhBJ,EAAKhI,QAC3BmO,KAAK3B,UACPjM,EAAY2J,KAAK,GAInB2vD,EAAY,sBACDzxD,EAAC,UAAUA,EAAC,MAAMrI,EAAO,GAAGG,KAAKkI,GAAE,MAAMA,EAAC,6BACxCA,EAAC,QAAQA,EAAC,gBACnByxD,EAAS,0BAIbsJ,EAAQj5D,KAAK,YAAY9B,EAAC,iBAAiB7H,EAAYP,OAAM,MAE7DO,EAAY2J,KAAKnK,EAAO,GAAGG,KAAKkI,KAIpC,IAEMuuD,EAAe,wCAFPp2D,EAAYP,QAAU,GAGC,oFAElBkjE,EAAK,6CAClBC,EAAQh8C,KAAK,MAAK,aAClBi8C,EAAI,GAAE,kDACNvJ,EAAS,aACTuJ,EAAI,GAAE,8EAIZ,MAAO,CACL3M,aAAc12D,EAAOmG,KAAI,SAAAjH,GAAK,OAAAu8D,EAAQxF,yBAAyB/2D,MAC/Du3D,aAAcgF,EAAQlG,6BAA6B/0D,GACnDm2D,SAAU,CAAC,KACXC,aAAY,IAGhB,YAAAvB,cAAA,SAAcoG,EAAgC1hD,EAA0B/Z,GACtE,IAAM07D,EAAW17D,EAAOmG,KAAI,SAACjH,EAAGtB,GAAM,OAAA69D,EAAQ91C,uBAAuBzmB,EAAG6a,EAAY28C,aAAa94D,OACjG,MAAO,CACLq5D,kBAAmByE,EACnBpG,kBAAmBmG,EAAQhG,4BAA4B17C,EAAY08C,aAAciF,EAAS,GAAGr1C,OAAOvjB,MACpGo0D,YAAa,KAGnB,EAjEA,CAA0C,EAAAxwB,YAmE1C,2B,+CAIA,OAJoC,OAClC,YAAA48B,OAAA,SAAOtjE,GACL,MAAO,CAAC,eAAgB,yBAA0B,KAEtD,EAJA,CAAoCujE,GAAvB,EAAAnJ,iBAMb,+B,+CAWA,OAXqC,OACnC,YAAAkJ,OAAA,SAAOtjE,EAAkBiI,GAEvB,IADA,IAAIrF,EAAO,EACFyF,EAAI,EAAGA,EAAIrI,EAAO,GAAGG,KAAKF,OAAQoI,KACrCJ,EAAKiC,QAAQ7B,IAAM,GAAqB,IAAhBJ,EAAKhI,UAC/B2C,GAAQ5C,EAAO,GAAGG,KAAKkI,IAI3B,MAAO,CAAC,eAAgB,yBAA0B,YAAYzF,EAAI,OAEtE,EAXA,CAAqC2gE,GAAxB,EAAAtJ,kBAab,+B,+CAWA,OAXoC,OAClC,YAAAqJ,OAAA,SAAOtjE,EAAkBiI,GAEvB,IADA,IAAMu7D,EAAU,GACPn7D,EAAI,EAAGA,EAAIrI,EAAO,GAAGG,KAAKF,OAAQoI,KACrCJ,EAAKiC,QAAQ7B,IAAM,GAAqB,IAAhBJ,EAAKhI,SAC/BujE,EAAQr5D,KAAK,YAAY9B,EAAC,UAI9B,MAAO,CAAIm7D,EAAQp8C,KAAK,MAAK,0BAA2B,oCAAqC,KAEjG,EAXA,CAAoCm8C,GAAvB,EAAAvJ,iBAab,+B,+CAWA,OAXoC,OAClC,YAAAsJ,OAAA,SAAOtjE,EAAkBiI,GAEvB,IADA,IAAMu7D,EAAU,GACPn7D,EAAI,EAAGA,EAAIrI,EAAO,GAAGG,KAAKF,OAAQoI,KACrCJ,EAAKiC,QAAQ7B,IAAM,GAAqB,IAAhBJ,EAAKhI,SAC/BujE,EAAQr5D,KAAK,YAAY9B,EAAC,UAI9B,MAAO,CAAIm7D,EAAQp8C,KAAK,MAAK,0BAA2B,oCAAqC,KAEjG,EAXA,CAAoCm8C,GAAvB,EAAArJ,iBAab,+B,+CAIA,OAJqC,OACnC,YAAAoJ,OAAA,SAAOtjE,GACL,MAAO,CAAC,eAAgB,yBAA0B,KAEtD,EAJA,CAAqCujE,GAAxB,EAAApJ,kBAMb,+B,+CAIA,OAJuC,OACrC,YAAAmJ,OAAA,SAAOtjE,GACL,MAAO,CAAC,eAAgB,yBAA0B,wBAEtD,EAJA,CAAuCujE,GAA1B,EAAAxJ,oBAMb,+B,+CAIA,OAJ0C,OACxC,YAAAuJ,OAAA,SAAOtjE,GACL,MAAO,CAAC,wBAAyB,oCAAqC,KAE1E,EAJA,CAA0CujE,GAA7B,EAAAlJ,wB,kcClIb,YAEA,OAIA,2B,+CAWA,OAXgC,OAC9B,YAAAh1C,IAAA,SAAIC,EAAyCtlB,GAC3C,OAAOslB,EAAiBD,IAAIjX,KAAMpO,IAGpC,YAAAk1D,kBAAA,SAAkBuG,EAAgCz7D,GAChD,OAAOk1D,EAAkBuG,EAASz7D,EAAO,GAAIoO,KAAKu4B,OAAQv4B,KAAKw4B,KAAMx4B,KAAKnG,OAE5E,YAAAotD,cAAA,SAAcoG,EAAgC1hD,EAA0B/Z,GACtE,OAAOq1D,EAAcoG,EAAS1hD,EAAa/Z,IAE/C,EAXA,CAAgC,EAAA6mC,OAAnB,EAAA6zB,aAab,+B,+CAwBA,OAxBmC,OACjC,YAAAr1C,IAAA,SAAIC,EAAyCtlB,GAC3C,OAAOslB,EAAiBD,IAAIjX,KAAMpO,IAGpC,YAAAk1D,kBAAA,SAAkBuG,EAAgCz7D,GAChD,IAAKy7D,EAAQ3rB,QAAQykB,cAAcv0D,EAAO,GAAGmM,UAAYsvD,EAAQ3rB,QAAQykB,cAAcv0D,EAAO,GAAGmM,SAC5FnM,EAAOC,QAAU,IAAMw7D,EAAQ3rB,QAAQykB,cAAcv0D,EAAO,GAAGmM,SAC/DnM,EAAOC,QAAU,IAAMw7D,EAAQ3rB,QAAQykB,cAAcv0D,EAAO,GAAGmM,QAClE,MAAM,IAAI/H,MAAM,4CAElB,GAAIpE,EAAOC,QAAU,GAAKD,EAAO,GAAGulB,YAAY64B,MAAK,SAACxgD,GAAc,OAAM,IAANA,KAClE,MAAM,IAAIwG,MAAM,oDAElB,IAAMuiC,EAAShlC,MAAM4N,KAAKvP,EAAO,GAAGulB,aAC9BqhB,EAAOjlC,MAAM4N,KAAKvP,EAAO,GAAGulB,aAC5Btd,EAAOjI,EAAOC,QAAU,EAAI0B,MAAM4N,KAAKvP,EAAO,GAAGulB,aAAe,GAEtE,OAAO2vC,EAAkBuG,EAASz7D,EAAO,GAAI2mC,EAAQC,EAAM3+B,IAG7D,YAAAotD,cAAA,SAAcoG,EAAgC1hD,EAA0B/Z,GACtE,OAAOq1D,EAAcoG,EAAS1hD,EAAa/Z,IAE/C,EAxBA,CAAmC,EAAA8mC,UA0BnC,SAASouB,EACLuG,EAAgCvzD,EAAWy+B,EAA+BC,EAC1E3+B,GACkB,IAAhBA,EAAKhI,SACPgI,EAAOC,EAAE/H,KAAKsH,MAAM,GAAGtB,KAAI,SAACmiB,EAAK3c,GAAQ,OAAAA,MAE3C1D,EAAO,EAAAvF,UAAUsF,cAAcC,EAAMC,EAAE/H,KAAKF,QAC5C0mC,EAASA,EAAOxgC,KAAI,SAACgB,EAAOwE,GAC1B,OAAIxE,EAAQe,EAAE/H,KAAK8H,EAAK0D,IAAQ,EACvBzD,EAAE/H,KAAK8H,EAAK0D,IAEd,EAAAjJ,UAAUoF,cAAcX,EAAOe,EAAE/H,KAAK8H,EAAK0D,QAEpDi7B,EAAOA,EAAKzgC,KAAI,SAACiB,EAAKuE,GACpB,OAAIvE,EAAMc,EAAE/H,KAAK8H,EAAK0D,IAAQ,EACrBzD,EAAE/H,KAAK8H,EAAK0D,IAEd,EAAAjJ,UAAUoF,cAAcV,EAAKc,EAAE/H,KAAK8H,EAAK0D,QAMlD,IAHA,IAAMnL,EAAc0H,EAAE/H,KAAKsH,QAErBg8D,EAAqB,GAClB7lE,EAAI,EAAGA,EAAIqK,EAAKhI,OAAQrC,IAC/B4C,EAAYyH,EAAKrK,IAAMgpC,EAAKhpC,GAAK+oC,EAAO/oC,GACpC+oC,EAAO/oC,GAAK,GACd6lE,EAASt5D,KAAK,aAAalC,EAAKrK,GAAE,QAAQ+oC,EAAO/oC,GAAE,KAIvD,IACMg5D,EAAe,uCADRp2D,EAAYP,OAEa,iBAC9BwjE,EAASr8C,KAAK,YAAW,2CAGjC,MAAO,CACLsvC,aAAc,CAAC+E,EAAQxF,yBAAyB/tD,IAChDuuD,aAAcgF,EAAQlG,6BAA6B/0D,GACnDm2D,SAAU,CAAC,KACXC,aAAY,GAIhB,SAASvB,EAAcoG,EAAgC1hD,EAA0B/Z,GAC/E,IAAM07D,EAAW,CAACD,EAAQ91C,uBAAuB3lB,EAAO,GAAI+Z,EAAY28C,aAAa,KACrF,MAAO,CACLO,kBAAmByE,EACnBpG,kBAAmBmG,EAAQhG,4BAA4B17C,EAAY08C,aAAciF,EAAS,GAAGr1C,OAAOvjB,MACpGo0D,YAAa,IA3EJ,EAAAuD,iB,i1BClBb,YAEA,OACA,OAIA,cACE,a,OACE,cAAO,KAyMX,OA3MkC,OAIhC,YAAAp1C,IAAA,SAAIC,EAAyCtlB,GAA7C,WACOoO,KAAK6uD,YACR7uD,KAAK6uD,UAAY,GACI7uD,KAAK+uD,mBAAmB73C,EAAkBtlB,GAClD0L,SAAQ,SAACk1D,EAAIhjE,GACxB,IAAMo3D,EAAW1vC,EAAiBwqB,QAAQ2jB,eAAe5hB,MAAM+uB,GAC/D,EAAK3D,UAAU9yD,KAAK6qD,OAIxB,IAAMoI,EAAWhvD,KAAKivD,eAAe/3C,EAAkBlX,KAAK6uD,UAAU92D,KAAI,SAAAxI,GAAK,OAAAA,EAAEoc,eAAc/Z,GAG/F,OAFAo9D,EAAS1xD,SAAQ,SAAC1C,EAAGpL,GAAM,OAAA0nB,EAAiBwqB,QAAQ2jB,eAAepuC,IAAI,EAAK43C,UAAUr/D,GAAIoL,MAEnF,CAACo0D,EAASA,EAASn9D,OAAS,GAAGq1D,kBAAkBjvC,SAE1D,YAAAq9C,yBAAA,SACIp+C,EAAyClZ,EAAetH,EAAWq7C,EACnEwjB,EAAwCC,GAC1C,IAAMltB,EAAatqC,EAAMjM,KAAKsH,QACxBg6D,EAAcn8C,EAAiBiwC,6BAA6B7e,GAC5Dl2C,EAAck2C,EACdpvC,EAAO9G,EAAYP,OACnB4jE,EAAepC,EAAYx7C,MAC3B69C,EAAgBrC,EAAYz7C,OAElC,GAAIlhB,EAAI,GAAKq7C,EAAI,EACf,MAAM,IAAI/7C,MAAM,8EAGlB,GAA6C,IAAzCu/D,EAAwBhgE,MAAM1D,QAA4D,IAA5C2jE,EAA2BjgE,MAAM1D,OACjF,MAAM,IAAImE,MAAM,0DAGlB,GAAIu/D,EAAwBhgE,MAAM,KAAOmB,GAAK8+D,EAA2BjgE,MAAM,KAAOmB,EACpF,MAAM,IAAIV,MAAM,0EAGlB,IAAMwyD,EAAe,2BACDtvD,EAAI,kKAGmBu8D,EAAY,KAAKC,EAAa,kIAIrC3jB,EAAC,sTAYrC,MAAO,CACLuW,aAAc,CAAC+K,EAAakC,EAAyBC,GACrDnN,aAAcnxC,EAAiBiwC,6BAA6B/0D,GAC5Dm2D,SAAU,CAAC,IAAK,MAAO,QACvBC,aAAY,IAOhB,YAAAmN,6BAAA,SACIz+C,EAAyCpd,EAAWpD,EAAWq7C,EAAWwjB,EAC1EnjE,GACF,IAAMwjE,EAAU1+C,EAAiBiwC,6BAA6BrtD,EAAE/H,KAAKsH,SAC/DH,EAAO9G,EAAYP,OACnB4jE,EAAeG,EAAQ/9C,MACvB69C,EAAgBE,EAAQh+C,OAE9B,GAAIlhB,EAAI,GAAKq7C,EAAI,EACf,MAAM,IAAI/7C,MAAM,8EAGlB,GAA2B,IAAvB5D,EAAYP,OACd,MAAM,IAAImE,MAAM,4CAGlB,GAAI5D,EAAY,KAAOsE,EACrB,MAAM,IAAIV,MAAM,4DAGlB,GAA6C,IAAzCu/D,EAAwBhgE,MAAM1D,OAChC,MAAM,IAAImE,MAAM,0DAGlB,GAAIu/D,EAAwBhgE,MAAM,KAAOmB,EACvC,MAAM,IAAIV,MAAM,0EAGlB,IACMwyD,EAAe,2BACDtvD,EAAI,qEAEwB64C,EAAC,+FAI9BA,EAAC,+DARP,EAAA3tC,QAAQ8S,EAAiBwqB,QAAQ/Q,QAAQjlB,UAAU9H,SAUlBI,UAAS,oDACnDyxD,EAAY,KAAKC,EAAa,2DAKlC,MAAO,CACLpN,aAAc,CAACsN,EAASL,GACxBlN,aAAcnxC,EAAiBiwC,6BAA6B/0D,GAC5Dm2D,SAAU,CAAC,IAAK,OAChBC,aAAY,IAMhB,YAAAqN,4BAAA,SACI3+C,EAAyCpd,EAAWpD,EAAWq7C,EAAW3/C,GAC5E,IAAMwjE,EAAU1+C,EAAiBiwC,6BAA6BrtD,EAAE/H,KAAKsH,SAC/DH,EAAO9G,EAAYP,OACnB4jE,EAAeG,EAAQ/9C,MACvB69C,EAAgBE,EAAQh+C,OAE9B,GAAIlhB,EAAI,GAAKq7C,EAAI,EACf,MAAM,IAAI/7C,MAAM,8EAGlB,GAA2B,IAAvB5D,EAAYP,OACd,MAAM,IAAImE,MAAM,4CAGlB,GAAI5D,EAAY,KAAOsE,EACrB,MAAM,IAAIV,MAAM,4DAGlB,IAAMqO,EAAO,EAAAD,QAAQ8S,EAAiBwqB,QAAQ/Q,QAAQjlB,UAAU9H,SAC1D4kD,EAAe,+BACGtvD,EAAI,yEAEwB64C,EAAC,8CAEjB1tC,EAAKL,UAAS,gDAAgDyxD,EAAY,KAC1GC,EAAa,mCACM3jB,EAAC,oEAEkB1tC,EAAKL,UAAS,oDACpDyxD,EAAY,KAAKC,EAAa,qHAOlC,MAAO,CACLpN,aAAc,CAACsN,GACfvN,aAAcnxC,EAAiBiwC,6BAA6B/0D,GAC5Dm2D,SAAU,CAAC,KACXC,aAAY,IAGhB,YAAAuG,mBAAA,SAAmB73C,EAAyCtlB,GAC1D,IAAM02C,EAAa12C,EAAO,GAAGG,KAAKsH,QAC5BR,EAAO,EAAAvE,UAAUoF,cAAcsG,KAAKnH,KAAMyvC,EAAWz2C,QACrD6E,EAAI,EAAApC,UAAUwE,gBAAgBwvC,EAAYzvC,GAC1Ck5C,EAAI,EAAAz9C,UAAUsE,kBAAkB0vC,EAAYzvC,GAC5Ci9D,EAAwB91D,KAAK61D,4BAA4B3+C,EAAkBtlB,EAAO,GAAI8E,EAAGq7C,EAAG,CAACr7C,IAC7Fq/D,EACF/1D,KAAK21D,6BAA6Bz+C,EAAkBtlB,EAAO,GAAI8E,EAAGq7C,EAAG+jB,EAAsBzN,aAAc,CAAC3xD,IAK9G,MADoC,CAACo/D,EAAuBC,EAHjC/1D,KAAKs1D,yBAC5Bp+C,EAAkBtlB,EAAO,GAAI8E,EAAGq7C,EAAG+jB,EAAsBzN,aAAc0N,EAAwB1N,gBAKrG,YAAA4G,eAAA,SAAe/3C,EAAyC43C,EAA6Bl9D,GACnF,IAAMmP,EAAWnP,EAAO,GAAG8C,KACrB4iB,EAAUJ,EAAiBK,uBAAuB3lB,EAAO,GAAIk9D,EAAa,GAAGxG,aAAa,IAC1F0G,EAAsB,GAC5BA,EAASjzD,KAAK,CACZ8sD,kBAAmB,CAACvxC,GACpB4vC,kBAAmBhwC,EAAiBmwC,4BAA4ByH,EAAa,GAAGzG,aAActnD,GAC9F+nD,YAAa,KAEf,IAAK,IAAIt5D,EAAI,EAAGA,EAAIs/D,EAAaj9D,SAAUrC,EACzCw/D,EAASjzD,KAAK,CACZ8sD,kBAAmB,EAAImG,EAASx/D,EAAI,GAAGq5D,kBAAmB,CAAAmG,EAASx/D,EAAI,GAAG03D,oBAC1EA,kBAAmBhwC,EAAiBmwC,4BAA4ByH,EAAat/D,GAAG64D,aAActnD,GAC9F+nD,YAAa,KAGjB,OAAOkG,GAGX,EA3MA,CAAkC,EAAA5gC,SAArB,EAAAm+B,gB,+tBCPb,aAEA,OAIA,2B,+CAoDA,OApDgC,OAC9B,YAAAt1C,IAAA,SAAIC,EAAyCtlB,GAA7C,WACE,IAAKoO,KAAK6uD,UAAW,CACnB7uD,KAAK6uD,UAAY,GAGjB,IAFA,IAAMh2D,EAAO,EAAAvE,UAAUoF,cAAcsG,KAAKnH,KAAMjH,EAAO,GAAGG,KAAKF,QACzDmkE,EAAQh2D,KAAKi2D,gBAAgB/+C,EAAkBtlB,EAAQiH,GACpDrJ,EAAI,EAAGA,EAAIwmE,IAASxmE,EAAG,CAC9B,IAAMmc,EAAc3L,KAAK8mD,kBAAkB5vC,EAAkBtlB,EAAO,GAAIiH,EAAMrJ,GACxEo3D,EAAW1vC,EAAiBwqB,QAAQ2jB,eAAe5hB,MAAM93B,GAC/D3L,KAAK6uD,UAAU9yD,KAAK6qD,IAGxB,IAAMsP,EAAoB,GAO1B,OALAl2D,KAAK6uD,UAAUvxD,SAAQ,SAAAspD,GACrB,IAAMuP,EAAU,EAAKlP,cAAc/vC,EAAkB0vC,EAASj7C,YAAa/Z,GAC3EslB,EAAiBwqB,QAAQ2jB,eAAepuC,IAAI2vC,EAAUuP,GACtDD,EAAQn6D,KAAKo6D,EAAQjP,kBAAkBjvC,WAElCi+C,GAET,YAAAD,gBAAA,SAAgB/+C,EAAyCtlB,EAAkBiH,GAEzE,OADM,EAAc,EAAAgE,UAAUH,WAAW9K,EAAO,GAAGG,KAAM8G,EAAMmH,KAAKrD,MAAOqD,KAAKpD,YAAW,GAA3E,GACD/K,QAEjB,YAAAi1D,kBAAA,SAAkB5vC,EAAyClZ,EAAenF,EAAclF,GAChF,QAAoB,EAAAkJ,UAAUH,WAAWsB,EAAMjM,KAAM8G,EAAMmH,KAAKrD,MAAOqD,KAAKpD,YAAW,GAAtFG,EAAM,KACP9G,EADgB,KACCtC,GACjBvB,EAAc2K,EAAOpJ,GAErB60D,EAAe,qCADRp2D,EAAYP,OAES,yBACpBgH,EAAI,QAAQ5C,EAAM,0CAGhC,MAAO,CACLqyD,aAAc,CAACpxC,EAAiB2wC,yBAAyB7pD,IACzDqqD,aAAcnxC,EAAiBiwC,6BAA6B/0D,GAC5Dm2D,SAAU,CAAC,KACXC,aAAY,IAGhB,YAAAvB,cAAA,SAAc/vC,EAAyCvL,EAA0B/Z,GAC/E,IAAM07D,EAAW,CAACp2C,EAAiBK,uBAAuB3lB,EAAO,GAAI+Z,EAAY28C,aAAa,KAC9F,MAAO,CACLO,kBAAmByE,EACnBpG,kBACIhwC,EAAiBmwC,4BAA4B17C,EAAY08C,aAAciF,EAAS,GAAGr1C,OAAOvjB,MAC9Fo0D,YAAa,KAInB,EApDA,CAAgC,EAAAsN,OAAnB,EAAA5J,c,6FCDb,iBACE,WAAsB5vD,GAAA,KAAAA,aA6BxB,OAzBE,YAAA8tB,WAAA,SAAWC,GACT3qB,KAAKnH,KAAO8xB,EAAWK,OAAO,OAAQ,GACtChrB,KAAKrD,MAAQguB,EAAWiB,QAAQ,QAAS,KAG3C,YAAAX,YAAA,SAAYr5B,GACV,SAAKA,GAA4B,IAAlBA,EAAOC,SAIfmO,KAAKkrB,gBAAgBt5B,IAGpB,YAAAs5B,gBAAV,SAA0Bt5B,GACxB,MAAuB,SAAnBA,EAAO,GAAG8C,MAAsC,UAAnB9C,EAAO,GAAG8C,MAAuC,UAAnB9C,EAAO,GAAG8C,MAClD,WAAnB9C,EAAO,GAAG8C,MAAwC,UAAnB9C,EAAO,GAAG8C,MAAuC,WAAnB9C,EAAO,GAAG8C,MACpD,YAAnB9C,EAAO,GAAG8C,MAAyC,YAAnB9C,EAAO,GAAG8C,MAAyC,SAAnB9C,EAAO,GAAG8C,MASlF,EA9BA,GAAsB,EAAA0hE,S,obCLtB,YAEA,OAEA,QAEA,2B,+CAKA,OALkC,OAChC,YAAAn/C,IAAA,SAAIC,EAAyCtlB,GAC3C,IAAMgK,EAAa,EAAAtH,UAAUqH,aAAa/J,EAAO,GAAGG,KAAMiO,KAAKnG,MAC/D,MAAO,CAAC,EAAAud,QAAQF,EAAkBtlB,EAAO,GAAIgK,KAEjD,EALA,CAAkC,EAAA+8B,SAArB,EAAAg0B,gB,gbCNb,YAEA,OAIA,2B,+CA6BA,OA7B8B,OAC5B,YAAA11C,IAAA,SAAIC,EAAyCtlB,GAC3C,OAAOslB,EAAiBD,IAAIjX,KAAMpO,IAEpC,YAAAk1D,kBAAA,SAAkBuG,EAAgCz7D,GAChD,IAAMyS,EAAO,EAAAD,QAAQipD,EAAQ3rB,QAAQ/Q,QAAQjlB,UAAU9H,SACjDxR,EAAcR,EAAO,GAAGG,KAAKsH,QAC7Bg9D,EAAUzkE,EAAOmG,KAAI,SAAC6C,EAAGpL,GAAM,OAAG6U,EAAKL,UAAS,KAAKxU,EAAC,iBAAewpB,KAAK,OAC1EuvC,EAAW32D,EAAOmG,KAAI,SAAC6C,EAAGpL,GAAM,UAAIA,KAC1C,MAAO,CACL84D,aAAc12D,EAAOmG,KAAI,SAAAjH,GAAK,OAAAu8D,EAAQxF,yBAAyB/2D,MAC/Du3D,aAAcgF,EAAQlG,6BAA6B/0D,GACnDm2D,SAAQ,EACRC,aAAc,gDAEI6N,EAAO,cACrBhyD,EAAKJ,OAAM,sBAEfwkD,SAAS,IAGb,YAAAxB,cAAA,SAAcoG,EAAgC1hD,EAA0B/Z,GACtE,IAAM07D,EAAW17D,EAAOmG,KAAI,SAACjH,EAAGtB,GAAM,OAAA69D,EAAQ91C,uBAAuBzmB,EAAG6a,EAAY28C,aAAa94D,OACjG,MAAO,CACLq5D,kBAAmByE,EACnBpG,kBAAmBmG,EAAQhG,4BAA4B17C,EAAY08C,aAAciF,EAAS,GAAGr1C,OAAOvjB,MACpGo0D,YAAa,KAGnB,EA7BA,CAA8B,EAAAz6B,KAAjB,EAAAw+B,Y,ibCPb,IAKA,2B,+CAqCA,OArC+B,OAC7B,YAAA51C,IAAA,SAAIC,EAAyCtlB,GAC3C,OAAOslB,EAAiBD,IAAIjX,KAAMpO,IAGpC,YAAAk1D,kBAAA,SAAkBuG,EAAgCz7D,GAKhD,IAJA,IAAM02C,EAAa12C,EAAO,GAAGG,KAAKsH,QAC5BjH,EAAc,IAAImB,MAAM+0C,EAAWz2C,QAEnCykE,EAAoB,GACjB9mE,EAAI,EAAGA,EAAI84C,EAAWz2C,OAAQrC,IACrC4C,EAAY5C,GAAK84C,EAAW94C,GAAKoC,EAAO,GAAGiM,WAAWrO,GACtD8mE,EAAQv6D,KAAK,YAAYvM,EAAC,+BAA+BA,EAAC,OAAO84C,EAAW94C,GAAE,QAGhF,IAAM0J,EAAO9G,EAAYP,OACnB22D,EAAe,qCACStvD,EAAI,4BACjBA,EAAI,aACjBo9D,EAAQt9C,KAAK,MAAK,sCAGtB,MAAO,CACLsvC,aAAc12D,EAAOmG,KAAI,SAAAjH,GAAK,OAAAu8D,EAAQxF,yBAAyB/2D,MAC/Du3D,aAAcgF,EAAQlG,6BAA6B/0D,GACnDm2D,SAAU,CAAC,KACXC,aAAY,IAGhB,YAAAvB,cAAA,SAAcoG,EAAgC1hD,EAA0B/Z,GACtE,IAAM07D,EAAW17D,EAAOmG,KAAI,SAACjH,EAAGtB,GAAM,OAAA69D,EAAQ91C,uBAAuBzmB,EAAG6a,EAAY28C,aAAa94D,OACjG,MAAO,CACLq5D,kBAAmByE,EACnBpG,kBAAmBmG,EAAQhG,4BAA4B17C,EAAY08C,aAAciF,EAAS,GAAGr1C,OAAOvjB,MACpGo0D,YAAa,KAGnB,EArCA,CALA,MAK+BlwB,MAAlB,EAAAo0B,a,m1BCJb,YAEA,OACA,OAIA,2B,+CA+DA,OA/DoC,OAClC,YAAA/1C,IAAA,SAAIC,EAAyCtlB,GAC3C,OAAOslB,EAAiBD,IAAIjX,KAAMpO,IAEpC,YAAA2kE,eAAA,SAAeC,GACb,IAAM77D,EAAOqF,KAAKy2D,gBAAgBD,EAAY,IAC9C,OAAO,EAAAliE,UAAUoG,gBAAgB87D,EAAY,GAAI77D,IAEnD,YAAAmsD,kBAAA,SAAkBuG,EAAgCz7D,GAChD,IAAM4kE,EAAc5kE,EAAOmG,KAAI,SAAAjH,GAAK,OAAAA,EAAEiB,KAAKsH,WACrCsB,EAAOqF,KAAKy2D,gBAAgBD,EAAY,IACxCE,EAAsB12D,KAAKu2D,eAAeC,GAC1Ct9D,EAAOtH,EAAO,GAAGG,KAAKF,OAItB22D,EAAe,WACjBxoD,KAAK22D,oBAAoB,OAAQh8D,EAAMzB,GAAK,qCAClBA,EAAI,uBACtBA,EAAI,gEAIVmvD,EAAegF,EAAQlG,6BAA6BuP,EAAqB,EAAGA,GAClF,MAAO,CAACpO,aAAc,CAAC+E,EAAQxF,yBAAyBj2D,EAAO,KAAMy2D,aAAY,EAAEE,SAAU,CAAC,KAAMC,aAAY,IAElH,YAAAvB,cAAA,SAAcoG,EAAgC1hD,EAA0B/Z,GACtE,IAAM07D,EAAW,CAACD,EAAQ91C,uBAAuB3lB,EAAO,GAAI+Z,EAAY28C,aAAa,KACrF,MAAO,CACLO,kBAAmByE,EACnBpG,kBAAmBmG,EAAQhG,4BAA4B17C,EAAY08C,aAAciF,EAAS,GAAGr1C,OAAOvjB,MACpGo0D,YAAa,KAGjB,YAAA8N,sBAAA,SAAsBvJ,EAAgC/kB,EAAsBn4C,GAC1E,IAAMiC,EAAc4N,KAAKu2D,eAAe,CAACjuB,IAIzC,OAHKn4C,IACHA,EAAO,QAEF,CACLA,KAAI,EACJy9D,KAAM5tD,KAAK22D,oBAAoBxmE,EAAM6P,KAAKy2D,gBAAgBnuB,GAAal2C,EAAYP,QACnF6C,KAAM,EAAA+W,aAAaorD,WACnBvuB,WAAU,EACVl2C,YAAW,IAGL,YAAAqkE,gBAAV,SAA0BnuB,GACxB,IAAI3tC,EAAOqF,KAAKrF,KAIhB,OAHIA,GAAQA,EAAK9I,SAAWy2C,EAAWz2C,SACrC8I,EAAO,EAAK2tC,EAAW/6B,QAASjU,WAE3BqB,GAEC,YAAAg8D,oBAAV,SAA8BxmE,EAAcwK,EAAgBzB,GAC1D,IAAM49D,EAAc,GACpBA,EAAY/6D,KAAK,QAAQ5L,EAAI,cAAc+I,EAAI,cAAcA,EAAI,QACjE,IAAK,IAAI1J,EAAI,EAAGA,EAAI0J,IAAQ1J,EAC1BsnE,EAAY/6D,KAAK,OAAOpB,EAAKnL,GAAE,SAASA,EAAC,MAG3C,OADAsnE,EAAY/6D,KAAK,OACV+6D,EAAY99C,KAAK,OAE5B,EA/DA,CAAoC,EAAA6f,WAAvB,EAAAo0B,kB,0nBCPb,YAEA,OACA,OAIA,cACE,WAAsBxhC,EAA0D+hC,GAAhF,MACE,YAAM/hC,IAAe,K,OADD,EAAAA,iBAA0D,EAAA+hC,W,EA6BlF,OA9BkC,OAIhC,YAAAv2C,IAAA,SAAIC,EAAyCtlB,GAC3C,OAAOslB,EAAiBD,IAAIjX,KAAMpO,IAEpC,YAAAk1D,kBAAA,SAAkBuG,EAAgCz7D,GAChD,IAAMQ,EAAcR,EAAO,GAAGG,KAAKsH,QAC7Bg6D,EAAchG,EAAQxF,yBAAyBj2D,EAAO,IACtDyS,EAAO,EAAAD,QAAQipD,EAAQ3rB,QAAQ/Q,QAAQjlB,UAAU9H,SACjD4kD,EAAe,WACjBxoD,KAAKwtD,SAASI,KAAI,2CAEPvpD,EAAKL,UAAS,gCACnBhE,KAAKwtD,SAASr9D,KAAI,iBACtBkU,EAAKJ,OAAM,yBAIjB,MAAO,CAACqkD,aAAc,CAAC+K,GAAchL,aADhBgF,EAAQlG,6BAA6B/0D,GACPm2D,SAAU,CAAC,KAAMC,aAAY,EAAEC,SAAS,IAE7F,YAAAxB,cAAA,SAAcoG,EAAgC1hD,EAA0B/Z,GACtE,IAAM07D,EAAW,CAACD,EAAQ91C,uBAAuB3lB,EAAO,GAAI+Z,EAAY28C,aAAa,KACrF,MAAO,CACLO,kBAAmByE,EACnBpG,kBAAmBmG,EAAQhG,4BAA4B17C,EAAY08C,aAAciF,EAAS,GAAGr1C,OAAOvjB,MACpGo0D,YAAa,KAGnB,EA9BA,CAAkC,EAAA9vB,SAsJlC,SAAS+9B,EAAiBjJ,GACxB,IAAM39D,EAAU29D,EAAK,IASrB,MAAO,CAACF,KARK,aACLz9D,EAAI,2BACD29D,EAAK,qBAET39D,EAAI,0BACA29D,EAAK,gBAGF39D,KAAI,EAAEuE,KAAM,EAAA+W,aAAaoiD,YAhK5B,EAAA9E,eAgCb,qBACE,OAAOgO,EAAiB,QAE1B,sBACE,OAAOA,EAAiB,SAE1B,sBACE,OAAOA,EAAiB,SAE1B,sBACE,OAAOA,EAAiB,SAE1B,sBACE,OAAOA,EAAiB,SAE1B,qBACE,OAAOA,EAAiB,QAE1B,qBACE,OAAOA,EAAiB,QAE1B,uBACE,OAAOA,EAAiB,UAE1B,0BACE,IAAM5mE,EAAO,aASb,MAAO,CAACy9D,KARK,2GAQCz9D,KAAI,EAAEuE,KAAM,EAAA+W,aAAaoiD,aAEzC,qBACE,OAAOkJ,EAAiB,QAE1B,qBAUE,MAAO,CAACnJ,KARK,iGAQCz9D,KATD,OASOuE,KAAM,EAAA+W,aAAaoiD,aAEzC,qBAgBE,MAAO,CAACD,KAdK,wRAcCz9D,KAfD,OAeOuE,KAAM,EAAA+W,aAAaoiD,aAEzC,qBACE,OAAOkJ,EAAiB,QAE1B,sBAUE,MAAO,CAACnJ,KARK,yHAQCz9D,KATD,QASOuE,KAAM,EAAA+W,aAAaoiD,aAEzC,yBACE,IAAM19D,EAAO,WASb,MAAO,CAACy9D,KARK,+IAQCz9D,KAAI,EAAEuE,KAAM,EAAA+W,aAAaoiD,aAEzC,sBACE,OAAOkJ,EAAiB,SAE1B,qBACE,OAAOA,EAAiB,QAE1B,sBAcE,MAAO,CAACnJ,KAZK,yOAYCz9D,KAbD,QAaOuE,KAAM,EAAA+W,aAAaoiD,c,sbC3JzC,YAEA,OAEA,QAEA,2B,+CAKA,OALoC,OAClC,YAAA52C,IAAA,SAAIC,EAAyCtlB,GAC3C,IAAMgK,EAAa,EAAAtH,UAAU0H,eAAepK,EAAO,GAAGG,KAAMiO,KAAKnG,MACjE,MAAO,CAAC,EAAAud,QAAQF,EAAkBtlB,EAAO,GAAIgK,KAEjD,EALA,CAAoC,EAAAq9B,WAAvB,EAAAk0B,kB,qbCNb,YAEA,OAIA,2B,+CAuLA,OAvLmC,OACjC,YAAAl2C,IAAA,SAAIC,EAAyCtlB,GAC3C,OAAOslB,EAAiBD,IAAIjX,KAAMpO,IAEpC,YAAAk1D,kBAAA,SAAkBuG,EAAgCz7D,GAchD,IAdF,WACQyhE,EAAchG,EAAQxF,yBAAyBj2D,EAAO,IACtDQ,EAAcR,EAAO,GAAGG,KAAKgG,KAAI,SAACQ,EAAK/I,GAAM,OAAA4D,KAAKiC,MAAMkD,EAAM,EAAK2gC,OAAO1pC,OAC1E64D,EAAegF,EAAQlG,6BAA6B/0D,GACpDmG,EAAMnG,EAAYP,OAElBwS,EAAO,EAAAD,QAAQipD,EAAQ3rB,QAAQ/Q,QAAQjlB,UAAU9H,SAEjDozD,EAAgB,IAAIzjE,MAAcgF,GAClC0+D,EAAe,IAAI1jE,MAAcgF,GACnC2+D,EAAuB,8BACJ3+D,EAAG,+BACJA,EAAG,aAEhBrI,EAAIqI,EAAM,EAAGrI,GAAK,EAAGA,IAC5B8mE,EAAc9mE,GAAMA,IAAMqI,EAAM,EAAK,EAAIy+D,EAAc9mE,EAAI,GAAKkC,EAAYlC,EAAI,GAChF+mE,EAAa/mE,GAAMA,IAAMqI,EAAM,EAAK,EAAI0+D,EAAa/mE,EAAI,GAAK0B,EAAO,GAAGG,KAAK7B,EAAI,GAEjFgnE,GAAwB,0BACPhnE,EAAC,OAAO8mE,EAAc9mE,GAAE,0BACzBA,EAAC,OAAO+mE,EAAa/mE,GAAE,YAGzC,IAAMinE,EAAwB,qFAEU9D,EAAYx7C,MAAK,KAAKw7C,EAAYz7C,OAAM,2CAC9CvT,EAAKL,UAAS,kDAyIhD,MAAO,CACLskD,aAAc,CAAC+K,GACfhL,aAAY,EACZE,SAAU,CAAC,KACXC,aAxIiC,YAAdxoD,KAAKjP,KAEtB,WACAomE,EAAqB,qCACK5+D,EAAG,4FAEkB8vD,EAAaxwC,MAAK,KAAKwwC,EAAazwC,OAAM,iBAEvFs/C,EAAoB,0DAGI3+D,EAAG,saAerB,IAARA,EAEI,WACJ4+D,EAAqB,+HAG0B9O,EAAaxwC,MAAK,KAAKwwC,EAAazwC,OAAM,iBAEvFs/C,EAAoB,qoCA2BQtlE,EAAO,GAAGG,KAAK,GAAE,ovBAuB3C,WACJolE,EAAqB,+HAG0B9O,EAAaxwC,MAAK,KAAKwwC,EAAazwC,OAAM,iBAEvFs/C,EAAoB,oxBAoBQtlE,EAAO,GAAGG,KAAK,GAAE,ovBA2BjDs8D,UAAW,CAAC,CAACl+D,KAAM,SAAUuE,KAAM,MAAO45D,YAAatuD,KAAKk5B,OAAOrnC,WAGvE,YAAAo1D,cAAA,SAAcoG,EAAgC1hD,EAA0B/Z,GACtE,IAAM07D,EAAW17D,EAAOmG,KAAI,SAACjH,EAAGtB,GAAM,OAAA69D,EAAQ91C,uBAAuBzmB,EAAG6a,EAAY28C,aAAa94D,OACjG,MAAO,CACLq5D,kBAAmByE,EACnBpG,kBAAmBmG,EAAQhG,4BAA4B17C,EAAY08C,aAAciF,EAAS,GAAGr1C,OAAOvjB,MACpGo0D,YAAa,CAAC5vB,OAAQl5B,KAAKk5B,OAAOnhC,KAAI,SAAA+B,GAAK,OAAA1G,KAAK81B,KAAKpvB,SAG3D,EAvLA,CAAmC,EAAAs/B,UAAtB,EAAA8zB,iB,+oBCNb,YACA,OAEA,SACA,OAaA,aAKE,WAAmB1rB,EAAqC91B,GAArC,KAAA81B,WAAqC,KAAA91B,YACtD1L,KAAKo3D,KAAO,IAAItR,IAChB9lD,KAAKq3D,iBAAkB,EAwJ3B,OAtJE,YAAAxQ,YAAA,SAAY11D,GACV,OAAO6O,KAAKo3D,KAAK3mE,IAAIU,IAEvB,YAAA41D,YAAA,SAAY51D,EAASy1D,GACnB5mD,KAAKo3D,KAAKziE,IAAIxD,EAAKy1D,IAErB,YAAA3vC,IAAA,SAAIqgD,EAAyBtQ,GAA7B,WACEhnD,KAAKwhC,SAASj6B,MAAM,UAAW,sBAAsB,WACnD,IAAMsoD,EAAK,EAAKnkD,UAAUmkD,GACpB0H,EAAUD,EAAcC,QAC9B1H,EAAG2H,WAAWD,GACd,IACE,EAAKE,WAAWzQ,EAAQE,mBACnB,EAAKmQ,iBACR,EAAKK,eAAeJ,EAAcK,iBAEpC,EAAKC,aAAaN,EAAcrH,iBAAkBjJ,EAAQ8B,YAAa9B,EAAQ6B,mBAC/E,MAAOr+C,GAEP,MADA,EAAAlE,OAAOrB,MAAM,iBAAkBqyD,EAAc3rD,YAAY68C,cACnDh+C,EAER,EAAKg3B,SAASj6B,MAAM,UAAW,oBAAoB,WACjD,EAAKswD,OAAOP,EAAetQ,GAC3B6I,EAAG7nD,eAIT,YAAAq5B,QAAA,sBACMrhC,KAAK83D,cACP93D,KAAK0L,UAAUqsD,aAAa/3D,KAAK83D,cAEnC93D,KAAKo3D,KAAK95D,SAAQ,SAAA/N,GAAK,SAAKmc,UAAUssD,cAAczoE,EAAEgoE,aAExD,YAAA9zB,MAAA,SAAM93B,GAAN,WACE,OAAO3L,KAAKwhC,SAASj6B,MAAM,UAAW,wBAAwB,WAC5D,IAAM0wD,EAAe,IAAI,EAAAC,iBAAiB,EAAKxsD,UAAWC,GACpDwsD,EAAaF,EAAaG,aAC1Bb,EAAU,EAAKc,QAAQF,GAQ7B,MAPiB,CACfxsD,YAAW,EACX4rD,QAAO,EACPtH,iBAAkB,EAAKqI,oBACnBf,EAASU,EAAapsD,QAAQF,YAAY48C,SAAU0P,EAAapsD,QAAQF,YAAY0iD,WACzFsJ,gBAAiB,EAAKY,mBAAmBhB,QAKrC,YAAAM,OAAV,SAAiBjR,EAAoBI,GAC/BA,EAAQ4I,MACV,EAAAtpD,OAAOxB,QAAQ,iBAAkB,wBACjCkiD,EAAQ4I,KAAK5vD,KAAK0L,UAAWk7C,IAE7B5mD,KAAK0L,UAAUkkD,QAGT,YAAAyI,QAAV,SAAkBG,GAChB,IAAKx4D,KAAK83D,aAAc,CACtB,EAAAxxD,OAAOxB,QAAQ,kBAAmB,0DAClC,IAAM2zD,EAAqB,EAAAC,sBAAsB14D,KAAK0L,UAAU9H,SAChE5D,KAAK83D,aAAe93D,KAAK0L,UAAUitD,cAAcF,EAAoBz4D,KAAK0L,UAAUmkD,GAAG+I,eAErF,EAAAjpC,IAAIkB,OACN,EAAAvqB,OAAOxB,QAAQ,kBAAmB,gBACtC0zD,EAAgB,MAGd,IAAMK,EAAa74D,KAAK0L,UAAUitD,cAAcH,EAAkBx4D,KAAK0L,UAAUmkD,GAAGiJ,iBAC9EvB,EAAUv3D,KAAK0L,UAAUqtD,cAAc/4D,KAAK83D,aAAce,GAEhE,OADA74D,KAAK0L,UAAUqsD,aAAac,GACrBtB,GAET,YAAAE,WAAA,SAAWhR,GACT,EAAAngD,OAAOxB,QACH,kBACA,8CAA8C2hD,EAAG5uC,MAAK,IAAI4uC,EAAG7uC,OAAM,WAAW6uC,EAAGlxD,MAAK,UAClFkxD,EAAGxuC,OAAOvjB,MAClBsL,KAAK0L,UAAUstD,kBAAkBvS,EAAGzuC,QAASyuC,EAAG5uC,MAAO4uC,EAAG7uC,SAE5D,YAAA8/C,eAAA,SAAeC,GACb,IAAMsB,EAAiBtB,EAAgB9nB,SACjCqpB,EAAqBvB,EAAgBwB,aAC3Cn5D,KAAK0L,UAAU0tD,oBAAoBH,EAAgBC,GACnDl5D,KAAKq3D,iBAAkB,GAEzB,YAAAO,aAAA,SAAa3H,EAA6CnH,EAA0BuQ,G,QAC5ExJ,EAAK7vD,KAAK0L,UAAUmkD,GACtByJ,EAAkB,E,IACtB,IAAkD,QAAArJ,GAAgB,8BAAE,CAAzD,cAAC,EAAI,OAAEv7D,EAAI,OAAE,EAAQ,WAAE45D,EAAW,cAC3C,OAAQ55D,GACN,IAAK,YACHsL,KAAKu5D,YAAYF,EAASC,GAAkB,EAAUA,GACtDA,IACA,MACF,IAAK,QACChL,EACFuB,EAAG2J,WAAW,EAAU1Q,EAAY,IAEpC+G,EAAG4J,UAAU,EAAU3Q,EAAY,IAErC,MACF,IAAK,MACCwF,EACFuB,EAAG6J,WAAW,EAAU5Q,EAAY,IAEpC+G,EAAGa,UAAU,EAAU5H,EAAY,IAErC,MACF,QACE,MAAM,IAAI9yD,MAAM,4BAA4BtB,K,mGAIpD,YAAA6kE,YAAA,SAAY9S,EAAiBkT,EAAqC9pB,GAChE7vC,KAAK0L,UAAUkuD,qBAAqBnT,EAAGzuC,QAAS63B,EAAU8pB,IAE5D,YAAApB,mBAAA,SAAmBhB,GACjB,MAAO,CACL1nB,SAAU7vC,KAAK65D,kBAAkBtC,EAAS,YAC1C4B,aAAcn5D,KAAK65D,kBAAkBtC,EAAS,kBAGlD,YAAAe,oBAAA,SAAoBf,EAAuBhP,EAAqB8F,G,YAExD4B,EAA8C,GACpD,GAAI1H,E,IACF,IAAsB,QAAAA,GAAQ,8BAAE,CAA3B,IAAMuR,EAAO,QAChB7J,EAAiBl0D,KAAK,CAAC5L,KAAM2pE,EAASplE,KAAM,YAAaulD,SAAUj6C,KAAK+5D,mBAAmBxC,EAASuC,M,iGAGxG,GAAIzL,E,IACF,IAAuB,QAAAA,GAAS,8BAAE,CAA7B,IAAM2L,EAAQ,QACjB/J,EAAiBl0D,KAAK,EAAD,KAAKi+D,GAAQ,CAAE/f,SAAUj6C,KAAK+5D,mBAAmBxC,EAASyC,EAAS7pE,U,iGAG5F,OAAO8/D,GAET,YAAA8J,mBAAA,SAAmBxC,EAAuBpnE,GACxC,IACM8pE,EADKj6D,KAAK0L,UAAUmkD,GACLkK,mBAAmBxC,EAASpnE,GACjD,GAAkB,OAAd8pE,EACF,MAAM,IAAIjkE,MAAM,WAAW7F,EAAI,eAEjC,OAAO8pE,GAET,YAAAJ,kBAAA,SAAkBtC,EAAuBpnE,GAGvC,OAFW6P,KAAK0L,UAAUmkD,GACWgK,kBAAkBtC,EAASpnE,IAGpE,EA/JA,GAAa,EAAAm1D,kB,6aCjBb,WACA,SACA,SACA,OAYA,aAKE,WAAY55C,EAAyBC,GAArC,WAHS,KAAAuuD,KAAkC,GAClC,KAAAC,8BAA6E,GAGpFn6D,KAAK6L,QAAU,IAAI,EAAAD,YAAYF,EAAWC,GAG1Crb,OAAOid,KAAK,EAAA6sD,cAAc98D,SAAQ,SAACnN,GACjC,IAAMkqE,EAAM,IAAI,EAAAD,aAAajqE,GAAM,EAAK0b,SACxC,EAAKquD,KAAK/pE,GAAQkqE,KAIpB,IAAMtiE,EAAMiI,KAAKm6D,8BACjB,IAAK,IAAMG,KAAWt6D,KAAKk6D,KAAM,CAC/B,IACMK,EADMv6D,KAAKk6D,KAAKI,GACIE,eAC1B,IAAK,IAAMC,KAAWF,EAAe,CACnC,IAAMppE,EAAMmpE,EAAU,IAAMG,EACxBC,OAAW,EACX3iE,EAAI5G,IACNupE,EAAc3iE,EAAI5G,IACN4a,YAAcwuD,EAAcE,GAAS1uD,aAEjD2uD,EAAc,IAAI,EAAAtuD,mBAAmBjb,EAAKopE,EAAcE,GAAS1uD,aACjEhU,EAAI5G,GAAOupE,GAEb,IAAM1uD,EAAeuuD,EAAcE,GAASzuD,aAC5C,GAAIA,EACF,IAAK,IAAIxc,EAAI,EAAGA,EAAIwc,EAAana,SAAUrC,EACzC,GAAKuI,EAAIiU,EAAaxc,IAKpBkrE,EAAYxuD,cAAcnU,EAAIiU,EAAaxc,SALlB,CACzB,IAAM2c,EAAO,IAAI,EAAAC,mBAAmBJ,EAAaxc,IACjDuI,EAAIiU,EAAaxc,IAAM2c,EACvBuuD,EAAYxuD,cAAcC,MA2ExC,OAjEE,YAAAisD,WAAA,WACE,IAAMzsD,EAAc3L,KAAK6L,QAAQF,YAC7B/V,EAAS+V,EAAY68C,aAWzB,OARKxoD,KAAK6L,QAAQF,YAAY88C,UAC5B7yD,EAAYA,EAAM,WAChB,EAAA+kE,yBAAyB36D,KAAK6L,QAAQH,UAAU9H,QAAS+H,EAAY08C,aAAa9yD,MAAM1D,SAG5F+D,EAAS,EAAAglE,eAAehlE,GAGd,EAAAilE,sBAAsB76D,KAAK6L,QAAQH,UAAU9H,SAAQ,SAC7D5D,KAAK86D,YAAYnvD,EAAY48C,SAAU58C,EAAY0iD,WAAU,SAC7DruD,KAAK+6D,WAAWnlE,GAAO,SACvBA,GAGM,YAAAmlE,WAAV,SAAqBC,GACnB,IAAMC,EAAmBj7D,KAAKk7D,kCAAkCF,GAEhE,GAAgC,IAA5BC,EAAiBppE,OACnB,MAAO,GAIT,IADA,IAAIspE,EAAW,GACN3rE,EAAI,EAAGA,EAAIyrE,EAAiBppE,SAAUrC,EAAG,CAChD,IAAIyrE,EAAiBzrE,GAAGuc,YAGtB,MAAM,IAAI/V,MAAM,8CAA8CilE,EAAiBzrE,GAAGW,MAFlFgrE,GAAYF,EAAiBzrE,GAAGuc,YAAc,KAMlD,OAAOovD,GAED,YAAAD,kCAAR,SAA0CF,GAA1C,WACQ1uD,EAA8B,GASpC,OAPAhc,OAAOid,KAAKvN,KAAKm6D,+BAA+B78D,SAAQ,SAAA89D,GACtD,IAAMX,EAAUW,EAAgBz+D,MAAM,KAAK,IACV,IAA7Bq+D,EAAOl/D,QAAQ2+D,IACjBnuD,EAAMvQ,KAAK,EAAKo+D,8BAA8BiB,OAI3C,EAAAnuD,4BAA4BZ,mBAAmBC,IAG9C,YAAAwuD,YAAV,SAAsBvS,EAAqB8F,G,YACnCgN,EAAyB,GAC/B,GAAI9S,E,IACF,IAAsB,QAAAA,GAAQ,8BAAE,CAA3B,IAAMuR,EAAO,QAChBuB,EAAat/D,KAAK,qBAAqB+9D,EAAO,M,iGAGlD,GAAIzL,E,IACF,IAAuB,QAAAA,GAAS,8BAAE,CAA7B,IAAM2L,EAAQ,QACjBqB,EAAat/D,KACT,WAAWi+D,EAAStlE,KAAI,IAAIslE,EAAS7pE,MAAO6pE,EAAS1L,YAAc,IAAI0L,EAAS1L,YAAW,IAAM,IAAE,M,iGAG3G,OAAO+M,EAAariD,KAAK,OAE7B,EA9GA,GAAa,EAAAk/C,oB,sGCfb,IAAMoD,EACF,qFAKJ,0BAA+BN,GAG7B,IAFA,IACIn8C,EADE08C,EAAiG,GAE/C,QAAhD18C,EAAQy8C,EAAsBl/B,KAAK4+B,KAAmB,CAC5D,IAAMjwD,EAAS8T,EAAM,GACDliB,MAAM,KACN5E,KAAI,SAAApG,GACH,IAAM6pE,EAAS7pE,EAAEmxB,OAAOnmB,MAAM,KAC9B,OAAI6+D,GAA4B,IAAlBA,EAAO3pE,OACZ,CAAC6C,KAAM8mE,EAAO,GAAIrrE,KAAMqrE,EAAO,IAEjC,QAERl9D,QAAO,SAAA1D,GAAK,OAAM,OAANA,KAChC2gE,EAAW18C,EAAM,IAAM,CAAC9T,OAAM,EAAE6iD,KAAM/uC,EAAM,IAE9C,IAAK,IAAM,KAAQ08C,EAGjB,IAFA,IAAME,EArBc,6DAqBgB14C,QAAQ,WAAY,GAClD24C,EAAQ,IAAIx/B,OAAOu/B,EAAa,M,aAEpC,IAAM/mE,EAAOmqB,EAAM,GACbm7C,EAAWn7C,EAAM,GACjB9T,EAAS8T,EAAM,GAAGliB,MAAM,KACxBg/D,EAAW,EAAYjnE,EAAI,IAAIslE,EAAQ,IAAM,GAC/C4B,EAAkBL,EAAW,GAAM3N,KACnCiO,EAAiB,GACrBN,EAAW,GAAMxwD,OAAOzN,SAAQ,SAAC1C,EAAGpL,GAC9BoL,IACFihE,GAAqBjhE,EAAElG,KAAI,IAAIkG,EAAEzK,KAAI,MAAM4a,EAAOvb,GAAE,UAKxD,IAAMssE,EAAc,WAClBH,EAAQ,uBAFVC,GADAA,EAAaC,EAAc,MAAMD,GACf74C,QAAQ,SAAai3C,EAAQ,QAIpC,oBAGXgB,EAASA,EAAOj4C,QAAQlE,EAAM,GAAIi9C,IApBI,QAAhCj9C,EAAQ68C,EAAMt/B,KAAK4+B,K,IAwB7B,OADAA,EAASA,EAAOj4C,QAAQu4C,EAAuB,M,oGChDjD,aAEA,SACA,SACA,SACA,SAEa,EAAAlB,aAAwE,CACnF,SAAY,EAAA2B,gBACZ,UAAa,EAAAC,iBACb,IAAO,EAAAC,WACP,WAAc,EAAAC,kBACd,YAAe,EAAAC,gB,ypBCZjB,WACA,OAMA,cAGE,WAAYtwD,G,OACV,YAAMA,IAAQ,KA0HlB,OA9HmC,OAMjC,YAAA2uD,aAAA,WACE,OAAO,EAAP,SAAWx6D,KAAKo8D,kBAAqBp8D,KAAKq8D,kBAAqBr8D,KAAKs8D,SAAYt8D,KAAKu8D,cAEvF,YAAAC,eAAA,WACE,MAAO,IAMC,YAAAJ,eAAV,WAEE,MAAO,CACLA,eAAgB,IAAI,EAAAnwD,eAAe,6PAc7B,YAAAowD,eAAV,WAEE,MAAO,CACLA,eAAgB,IAAI,EAAApwD,eAAe,uPAgB7B,YAAAqwD,MAAV,WAQE,IAPA,IAAMr4D,EAASjE,KAAK6L,QAAQF,YAAY08C,aAClCnvD,EAAO+K,EAAO1O,MAAM1D,OACpBsH,EAAU8K,EAAO9K,QACjB88C,EAAShyC,EAAO4T,MAChB4kD,EAASx4D,EAAO2T,OAEhB8kD,EAAe,GACZltE,EAAI,EAAGA,EAAI0J,EAAO,IAAK1J,EAC9BktE,EAAa3gE,KAAK,eACZvM,EAAC,gBAAgB2J,EAAQ3J,GAAE,KACjCktE,EAAa3gE,KAAK,yBACFvM,EAAC,OAAO2J,EAAQ3J,GAAE,KAEpCktE,EAAa3gE,KAAK,gBACV7C,EAAO,GAAC,eAChB,IAAM00D,EAAO,gDAC4B10D,EAAI,wDACA+8C,EAAM,KAAKwmB,EAAM,eACxDC,EAAa1jD,KAAK,IAAG,qDAEU9f,EAAI,iBACnCwjE,EAAa1jD,KAAK,IAAG,kBAG3B,MAAO,CAACsjD,MAAO,IAAI,EAAArwD,eAAe2hD,EAAM,CAAC,iCAQjC,YAAA2O,UAAV,sBACQ5wD,EAAc3L,KAAK6L,QAAQF,YAC3Be,EAA2C,GAcjD,OAbA1M,KAAK6L,QAAQF,YAAY48C,SAASjrD,SAAQ,SAACnN,EAAMX,GAC/C,IAAMwsC,EAASrwB,EAAY28C,aAAa94D,GAElC0J,EADQ8iC,EAAOzmC,MACF1D,OACf8qE,EAAW,IAAIxsE,EACnBuc,EAAOiwD,GAAY,IAAI,EAAA1wD,eACnB,EAAK2wD,mBAAmBzsE,EAAM+I,EAAM8iC,EAAOnkB,MAAOmkB,EAAOpkB,QAAQ,GACjE,CAAC,6BAA6B+kD,EAAY,6BAA8B,8BAE5EjwD,EADAiwD,GAAsB,MACH,IAAI,EAAA1wD,eACnB,EAAK2wD,mBAAmBzsE,EAAM+I,EAAM8iC,EAAOnkB,MAAOmkB,EAAOpkB,QAAQ,GACjE,CAAC,6BAA6B+kD,EAAY,6BAA8B,iCAEvEjwD,GASC,YAAAkwD,mBAAV,SAA6BC,EAAiB3jE,EAAc2e,EAAeD,EAAgBxe,GAEzF,IAAIjJ,EAAO,IAAI0sE,EAKf,OAJIzjE,IACFjJ,GAAc,MAGT,mBACKA,EAAI,UAAU+I,EAAI,+CACM/I,EAAI,wDACK0nB,EAAK,KAAKD,EAAM,+CAJhD,EAAAxT,QAAQpE,KAAK6L,QAAQH,UAAU9H,SAKDI,UAAS,IAAI64D,EAAO,6DAKnE,EA9HA,CAAmC,EAAA/wD,SAAtB,EAAAqwD,iB,2pBCPb,WAMA,cACE,WAAYtwD,G,OACV,YAAMA,IAAQ,KAuFlB,OAzFqC,OAInC,YAAA2uD,aAAA,WACE,OAAO,EAAP,KAAWx6D,KAAK88D,iBAAoB98D,KAAK+8D,kBAE3C,YAAAP,eAAA,WACE,MAAO,IAEC,YAAAM,cAAV,WACE,MAAO,CACL7pD,OAAQ,IAAI,EAAAhH,eAAe,mGAMrB,YAAA8wD,cAAV,WACE,MAAO,CACLppD,OAAQ,IAAI,EAAA1H,eAAe,sFAUrB,YAAA+wD,YAAV,WACE,IAAMC,EAAalB,EAAgBmB,iBAAmB,uBAAyB,GAC/E,MAAO,CACLjqD,OAAQ,IAAI,EAAAhH,eAAe,kmBAYvBgxD,EAAU,oHAWR,YAAAE,YAAV,WACE,IAAMF,EAAalB,EAAgBmB,iBAAmB,uBAAyB,GAC/E,MAAO,CACLvpD,OAAQ,IAAI,EAAA1H,eAAe,uJAGrBgxD,EAAU,uYAcb,EAAAC,eAAP,WACE,IAAMxqE,EAAI,IAAI6N,YAAY,GACpBhR,EAAI,IAAIqT,YAAYlQ,GACpBzC,EAAI,IAAIsS,WAAW7P,GAEzB,GADAnD,EAAE,GAAK,WACM,MAATU,EAAE,GACJ,OAAO,EAET,GAAa,MAATA,EAAE,GACJ,OAAO,EAET,MAAM,IAAI+F,MAAM,uBAEpB,EAzFA,CAAqC,EAAA8V,SAAxB,EAAAiwD,mB,4pBCNb,WACA,OAOA,cACE,WAAYlwD,G,OACV,YAAMA,IAAQ,KA+BlB,OAjCsC,OAIpC,YAAA2uD,aAAA,WACE,OAAO,EAAP,KAAWx6D,KAAKo9D,gBAAmBp9D,KAAKq9D,oBAE1C,YAAAb,eAAA,WACE,MAAO,IAEC,YAAAY,aAAV,WACE,IAAM/4D,EAAO,EAAAD,QAAQpE,KAAK6L,QAAQH,UAAU9H,SAC5C,MAAO,CACLw5D,aAAc,IAAI,EAAAnxD,eACd,2DAEI5H,EAAKJ,OAAM,yCAGf,CAAC,sBAGC,YAAAo5D,gBAAV,WACE,MAAO,CACLA,gBAAiB,IAAI,EAAApxD,eACjB,wGAKA,CAAC,sBAGX,EAjCA,CAAsC,EAAAH,SAAzB,EAAAkwD,oB,6pBCRb,WAMA,cACE,WAAYnwD,G,OACV,YAAMA,IAAQ,KA+JlB,OAjKuC,OAIrC,YAAA2uD,aAAA,WACE,OAAO,EAAP,WACKx6D,KAAKs9D,cACLt9D,KAAKu9D,oBACLv9D,KAAKvG,mBACLuG,KAAKzG,mBACLyG,KAAKw9D,qBAGZ,YAAAhB,eAAA,WACE,MAAO,IAEC,YAAAc,WAAV,WACE,IAAM3xD,EAAc3L,KAAK6L,QAAQF,YAC3B8hD,EAAa9hD,EAAY08C,aAAa9yD,MAAM1D,OAC5C6a,EAA2C,GAqBjD,OApBA1M,KAAK6L,QAAQF,YAAY48C,SAASjrD,SAAQ,SAACnN,EAAMX,GAC/C,IAAM+F,EAAQoW,EAAY28C,aAAa94D,GAAG+F,MAC1C,GAAIA,EAAM1D,QAAU47D,EAAY,CAK9B,IAJA,IAAMv0D,EAAO3D,EAAM1D,OACboC,EAAYw5D,EAAav0D,EACzByjE,EAAW,gBAAgBxsE,EAC7BmjE,EAAQ,GACH,EAAI,EAAG,EAAIp6D,IAAQ,EAC1Bo6D,GAAS,2BACK,EAAC,sCAAqCr/D,EAAY,GAAC,OAAOsB,EAAM,GAAE,qBAGlF,IAAMq4D,EAAO,kBACN+O,EAAQ,wBAAwBlP,EAAU,0BAA0Bv0D,EAAI,mBAC3Eo6D,EAAK,wBAGT5mD,EAAOiwD,GAAY,IAAI,EAAA1wD,eAAe2hD,OAGnClhD,GAEC,YAAA6wD,iBAAV,WACE,IAAM5xD,EAAc3L,KAAK6L,QAAQF,YAC3B8hD,EAAa9hD,EAAY08C,aAAa9yD,MAAM1D,OAC5C6a,EAA2C,GAuBjD,OAtBA1M,KAAK6L,QAAQF,YAAY48C,SAASjrD,SAAQ,SAACnN,EAAMX,GAC/C,IAAM+F,EAAQoW,EAAY28C,aAAa94D,GAAG+F,MAC1C,KAAMA,EAAM1D,OAAS,GAAK0D,EAAM1D,OAAS47D,GAAa,CAKpD,IAJA,IAAMv0D,EAAO3D,EAAM1D,OACboC,EAAYw5D,EAAav0D,EACzByjE,EAAW,sBAAsBxsE,EACnCmjE,EAAQ,GACH,EAAI,EAAG,EAAIp6D,EAAO,IAAK,EAC9Bo6D,GAAS,2BACK,EAAC,sCAAqCr/D,EAAY,GAAC,OAAOsB,EAAM,GAAE,qBAGlF,IAAMq4D,EAAO,kBACN+O,EAAQ,uBAAuBlP,EAAU,0BAA0Bv0D,EAAI,mBAC1Eo6D,EAAK,4BACOp6D,EAAO,GAAC,uBAAsBu0D,EAAa,GAAC,8BAC5Cv0D,EAAO,GAAC,uBAAsBu0D,EAAa,GAAC,0BAG5D/gD,EAAOiwD,GAAY,IAAI,EAAA1wD,eAAe2hD,OAGnClhD,GAEC,YAAAnT,gBAAV,WACE,IAAMoS,EAAc3L,KAAK6L,QAAQF,YAC3Be,EAA2C,GAWjD,OAVA1M,KAAK6L,QAAQF,YAAY48C,SAASjrD,SAAQ,SAACnN,EAAMX,GAC/C,IAAM+F,EAAQoW,EAAY28C,aAAa94D,GAAG+F,MACpC4D,EAAUwS,EAAY28C,aAAa94D,GAAG2J,QACtCD,EAAO3D,EAAM1D,OACf8qE,EAAW,mBAAmBxsE,EAClCuc,EAAOiwD,GAAY,IAAI,EAAA1wD,eAAeiwD,EAAkBuB,oBAAoBd,EAAUzjE,EAAMC,IAE5FuT,EADAiwD,EAAW,mBAAmBxsE,EAAI,MAE9B,IAAI,EAAA8b,eAAeiwD,EAAkBuB,oBAAoBd,EAAUzjE,EAAMC,EAAQE,QAAQC,eAExFoT,GAEF,EAAA+wD,oBAAP,SAA2BttE,EAAc+I,EAAcC,GAErD,IADA,IAAIm6D,EAAQ,GACH9jE,EAAI0J,EAAO,EAAG1J,GAAK,IAAKA,EAC/B8jE,GAAS,+BACa9jE,EAAC,OAAO2J,EAAQ3J,GAAE,cAG1C,MAAO,eACCW,EAAI,gBAAgB+I,EAAI,0CAE1Bo6D,EAAK,6CAKH,YAAA75D,gBAAV,WACE,IAAMkS,EAAc3L,KAAK6L,QAAQF,YAC3Be,EAA2C,GAWjD,OAVA1M,KAAK6L,QAAQF,YAAY48C,SAASjrD,SAAQ,SAACnN,EAAMX,GAC/C,IAAM+F,EAAQoW,EAAY28C,aAAa94D,GAAG+F,MACpC4D,EAAUwS,EAAY28C,aAAa94D,GAAG2J,QACtCD,EAAO3D,EAAM1D,OACf8qE,EAAW,mBAAmBxsE,EAClCuc,EAAOiwD,GAAY,IAAI,EAAA1wD,eAAeiwD,EAAkBwB,sBAAsBf,EAAUzjE,EAAMC,IAE9FuT,EADAiwD,EAAW,mBAAmBxsE,EAAI,MAE9B,IAAI,EAAA8b,eAAeiwD,EAAkBwB,sBAAsBf,EAAUzjE,EAAMC,EAAQE,QAAQC,eAE1FoT,GAEF,EAAAgxD,sBAAP,SAA6BvtE,EAAc+I,EAAcC,GAEvD,IADA,IAAMujE,EAAe,GACZltE,EAAI,EAAGA,EAAI0J,EAAO,IAAK1J,EAC9BktE,EAAa3gE,KAAK,mBACRvM,EAAC,gBAAgB2J,EAAQ3J,GAAE,KACrCktE,EAAa3gE,KAAK,+BACIvM,EAAC,OAAO2J,EAAQ3J,GAAE,KAI1C,OAFAktE,EAAa3gE,KAAK,oBACN7C,EAAO,GAAC,eACb,gBACE/I,EAAI,gCAAgC+I,EAAI,iBAC3CwjE,EAAa1jD,KAAK,IAAG,qBAInB,YAAAwkD,iBAAV,WACE,IAAM7xD,EAAc3L,KAAK6L,QAAQF,YAC3Be,EAA2C,GA0BjD,OAzBA1M,KAAK6L,QAAQF,YAAY48C,SAASjrD,SAAQ,SAACnN,EAAMX,GAK/C,IAJA,IAAM+F,EAAQoW,EAAY28C,aAAa94D,GAAG+F,MACpC2D,EAAO3D,EAAM1D,OACb8qE,EAAW,oBAAoBxsE,EACjCwtE,EAAY,GACP,EAAI,EAAG,EAAIzkE,IAAQ,EAC1BykE,GAAa,mBACL,EAAC,OAAOpoE,EAAM,GAAE,IAE1B,IAAMq4D,EAAO,kBACJ+O,EAAQ,8BAA8BzjE,EAAI,6BACnCA,EAAI,iBACdykE,EAAS,4BACGzkE,EAAI,sOAUtBwT,EAAOiwD,GAAY,IAAI,EAAA1wD,eAAe2hD,MAEjClhD,GAEX,EAjKA,CAAuC,EAAAZ,SAA1B,EAAAowD,qB,spBCNb,WAOA,cACE,WAAYrwD,G,OACV,YAAMA,IAAQ,KAoGlB,OAtGgC,OAI9B,YAAA2wD,eAAA,WACE,MAAO,IAET,YAAAhC,aAAA,WACE,OAAO,EAAP,SAAWx6D,KAAK49D,sBAAyB59D,KAAK69D,WAAc79D,KAAK89D,cAAiB99D,KAAK+9D,eAE/E,YAAAH,mBAAV,WACE,IACM1kE,EADe8G,KAAK6L,QAAQF,YAAY08C,aACpB9yD,MAAM1D,OAC1BmsE,EAAoC,CAACjxD,IAAK,KAAM8U,IAAK,KAAMrlB,IAAK,KAAM8oB,IAAK,MAC3E5Y,EAA4C,GAClD,IAAK,IAAM,KAAQsxD,EAAQ,CAGzB,IAFA,IAAMlQ,EAAW,EAAI,MACjBmQ,EAAkB,GACbzuE,EAAI,EAAGA,EAAI0J,IAAQ1J,EAC1ByuE,GAAmB,oBACVzuE,EAAC,KAAKwuE,EAAO,GAAK,QAAQxuE,EAAC,iBAGtC,IAAMo+D,EAAO,kBACJE,EAAK,YAAY50D,EAAI,mBAAmBA,EAAI,mBAC/C+kE,EAAe,wBAGrBvxD,EAAOohD,GAAS,IAAI,EAAA7hD,eAAe2hD,GAGrC,OAAOlhD,GAEC,YAAAmxD,QAAV,WAIE,IAHA,IACM3kE,EADe8G,KAAK6L,QAAQF,YAAY08C,aACpB9yD,MAAM1D,OAC5BosE,EAAkB,GACbzuE,EAAI,EAAGA,EAAI0J,IAAQ1J,EAC1ByuE,GAAmB,kBACVzuE,EAAC,WAAWA,EAAC,eAGxB,IAAMo+D,EAAO,gCACY10D,EAAI,mBAAmBA,EAAI,iBAC9C+kE,EAAe,oBAGrB,MAAO,CAACJ,QAAS,IAAI,EAAA5xD,eAAe2hD,KAG5B,YAAAkQ,WAAV,WASE,IARA,IACM5kE,EADe8G,KAAK6L,QAAQF,YAAY08C,aACpB9yD,MAAM1D,OAC5ByhE,EAAQ,+CAEKp6D,EAAI,0EAIZ1J,EAAI,EAAGA,EAAI0J,EAAO,IAAK1J,EAC9B8jE,GAAS,+BACa9jE,EAAC,oBACbA,EAAC,2BAOb,IAAMo+D,EAAO,qCACiB10D,EAAI,wCALlCo6D,GAAS,kCAEGp6D,EAAO,GAAC,wBAIT,sBAGX,MAAO,CAAC4kE,WAAY,IAAI,EAAA7xD,eAAe2hD,KAE/B,YAAAmQ,WAAV,WASE,IARA,IACM7kE,EADe8G,KAAK6L,QAAQF,YAAY08C,aACpB9yD,MAAM1D,OAC5ByhE,EAAQ,gDAEMp6D,EAAI,uEAIb1J,EAAI,EAAGA,EAAI0J,EAAO,IAAK1J,EAC9B8jE,GAAS,+BACa9jE,EAAC,2BACNA,EAAC,aAOpB,IAAMo+D,EAAO,gCACY10D,EAAI,6BAL7Bo6D,GAAS,yCAEUp6D,EAAO,GAAC,gBAIhB,kBAGX,MAAO,CAAC6kE,WAAY,IAAI,EAAA9xD,eAAe2hD,KAE3C,EAtGA,CAAgC,EAAA9hD,SAAnB,EAAAmwD,c,sHCPb,WAiBA,aACE,WAAmBxW,GAAA,KAAAA,iBAoCrB,OAnCE,YAAAsC,iBAAA,SAAiBxyD,EAA8BuyD,GAE7C,GAAqB,IAAjBvyD,EAAM1D,OACR,MAAO,CAAC,EAAG,GAEb,IAAM4zD,EAAiBzlD,KAAKylD,eAC5B,GAAIqC,EAAO,CAET,IAAMoW,EAAQpW,EAAMgJ,WAAav7D,EAAM1D,OAAS,EAAI0D,EAAM8D,MAAMyuD,EAAMgJ,WAAWt1D,QAAO,SAACjM,EAAGmD,GAAM,OAAAnD,EAAImD,KAChGyrE,EAAQrW,EAAMgJ,WAAa,EAAI,EAAIv7D,EAAM8D,MAAM,EAAGyuD,EAAMgJ,WAAWt1D,QAAO,SAACjM,EAAGmD,GAAM,OAAAnD,EAAImD,KAC9F,KAAIwrE,EAAQzY,GAAkB0Y,EAAQ1Y,GAOpC,MAAO,CAACyY,EAAOC,GAJf,EAAA73D,OAAOxB,QACH,gBACA,2DAA2DvP,EAAK,eAAeuyD,EAAMgJ,WAS7F,IAJA,IAAMsN,EAAY7oE,EAAMiG,QAAO,SAACjM,EAAGmD,GAAM,OAAAnD,EAAImD,KAEzCmlB,EAAQzkB,KAAKiC,MAAMjC,KAAKwhC,KAAKwpC,IAE1BvmD,EAAQ4tC,GAAkB5tC,EAAQumD,GACnCA,EAAYvmD,GAAU,EADwBA,KAMpD,GAAIA,GAAS4tC,GAAkB2Y,EAAYvmD,GAAU,EACnD,MAAM,IAAI7hB,MAAM,2DAA4DT,GAE9E,MAAO,CAACsiB,EAAOumD,EAAYvmD,IAE/B,EArCA,GAAa,EAAA2tC,kC,sGCjBb,WAsBA,aAKE,WACW95C,EAAgC65C,EAA8C/jB,EAC7Ev7B,GADD,KAAAyF,YAAgC,KAAA65C,iBAA8C,KAAA/jB,WAC7E,KAAAv7B,SACNA,EAAO2/C,gBACT5lD,KAAKq+D,cAAgB,IAAIvY,IACzB9lD,KAAKs+D,aAAe,IAAIxY,IACxB9lD,KAAKu+D,cAAgB,IAAIzY,KA+J/B,OA5JE,YAAA4B,wBAAA,SACI3mD,EAA2Bi7B,EAAuBl+B,EAA0BypD,GAC9E,IAIIp2D,EACAktE,EALEG,EAAkBx+D,KAAKy+D,cAAc19D,GAErC2nD,EAAU1oD,KAAK0L,UAAUi9C,WAAW6V,EAAiBxiC,EAAOvkB,UAAY,EAAG8vC,GAIjF,GAAIvnD,KAAKiG,OAAO2/C,cAAe,CAC7Bz0D,EAAS6qC,EAAOnkB,MAAK,IAAImkB,EAAOpkB,OAAM,IAAI8wC,EAAQ1uB,OAAM,IAAI0uB,EAAQgW,eAAc,IAAIhW,EAAQiW,aAC9FN,EAAgBr+D,KAAKq+D,cAAc5tE,IAAIU,MAErCktE,EAAgB,GAChBr+D,KAAKq+D,cAAc1pE,IAAIxD,EAAKktE,IAG9B,IAAMC,EAAet+D,KAAKs+D,aAAa7tE,IAAIU,GAC3C,GAAImtE,GAAgBA,EAAazsE,OAAS,EAAG,CAC3C,IAAM,EAAUysE,EAAa9rE,MAM7B,OALA6rE,EAActiE,KAAK,GACL,IAAVwrD,GACFvnD,KAAK0L,UAAUkzD,cACX,EAAS5iC,EAAOnkB,MAAOmkB,EAAOpkB,OAAQ8wC,EAAS1oD,KAAK6+D,cAAc99D,EAAUjD,IAE3E,GAIX,EAAAwI,OAAOxB,QAAQ,iBAAkB,gCAAgCk3B,EAAOnkB,MAAK,IAAImkB,EAAOpkB,QACxF,IAAMI,EACFhY,KAAK0L,UAAUk9C,gBAAgB5sB,EAAOnkB,MAAOmkB,EAAOpkB,OAAQ8wC,EAAS1oD,KAAK6+D,cAAc99D,EAAUjD,IAMtG,OAJIkC,KAAKiG,OAAO2/C,gBACdyY,EAAetiE,KAAKic,GACpBhY,KAAKu+D,cAAc5pE,IAAIqjB,EAAS7mB,IAE3B6mB,GAET,YAAA4vC,YAAA,SAAYnB,EAAiB1lD,EAA2B0W,GAAxD,WAIE,OAHKA,IACHA,EAAW,GAENzX,KAAKwhC,SAASj6B,MAAM,UAAW,8BAA8B,WAClE,IAAM2jC,EAAWub,EAAGlxD,MAAMiG,QAAO,SAACjM,EAAGmD,GAAM,OAAAnD,EAAImD,KAAK+kB,EAC9C3Z,EAAO,EAAK4N,UAAUk8C,YACxBnB,EAAGzuC,QAASyuC,EAAG5uC,MAAO4uC,EAAG7uC,OAAQszB,EAAU,EAAKuzB,cAAc19D,GAAW0W,GAC7E,OAAO,EAAKqnD,aAAa/9D,EAAUjD,OAGvC,YAAAsqD,wBAAA,SAAwB3B,GAAxB,WACE,OAAOzmD,KAAKwhC,SAASj6B,MAAM,UAAW,0CAA0C,WAC9E,IAAM2jC,EAAWub,EAAGlxD,MAAMiG,QAAO,SAACjM,EAAGmD,GAAM,OAAAnD,EAAImD,KACzCoL,EAAO,EAAK4N,UAAUk8C,YAAYnB,EAAGzuC,QAASyuC,EAAG5uC,MAAO4uC,EAAG7uC,OAAmB,EAAXszB,EAAc,OAAQ,GAC/F,OAAO,IAAIroC,aAAa/E,EAAKsD,OAAQtD,EAAKuD,WAAY6pC,OAG1D,YAAAwb,eAAA,SAAeH,EAA0BwY,GACvC,IAAI5tE,EACJ,GAAI6O,KAAKiG,OAAO2/C,gBACdz0D,EAAM6O,KAAKu+D,cAAc9tE,IAAI81D,EAAYvuC,UAChC,CACH+mD,GACF/+D,KAAKu+D,cAAcvxD,OAAO7b,GAE5B,IAAMktE,EAAgBr+D,KAAKq+D,cAAc5tE,IAAIU,GAC7C,GAAIktE,EAAe,CACjB,IAAM1qE,EAAQ0qE,EAAcviE,QAAQyqD,EAAYvuC,SAChD,IAAe,IAAXrkB,EAAc,CAChB0qE,EAAc9rE,OAAOoB,EAAO,GAC5B,IAAI2qE,EAAet+D,KAAKs+D,aAAa7tE,IAAIU,GACpCmtE,IACHA,EAAe,GACft+D,KAAKs+D,aAAa3pE,IAAIxD,EAAKmtE,IAE7BA,EAAaviE,KAAKwqD,EAAYvuC,WAMjC7mB,IAAO4tE,IACV,EAAAz4D,OAAOxB,QAAQ,iBAAkB,4BAA4ByhD,EAAY1uC,MAAK,IAAI0uC,EAAY3uC,QAC9F5X,KAAK0L,UAAUqzD,cAAcxY,EAAYvuC,WAG7C,YAAA8mD,aAAA,SAAa/9D,EAA2BjD,GACtC,OAAQA,aAAgB+E,aAAgB/E,EAAO,IAAI+E,aAAa/E,IAyBlE,YAAA+gE,cAAA,SAAc99D,EAA2BjD,GACvC,GAAKA,EAGL,OAAQA,aAAgB+E,aAAgB/E,EAAO,IAAI+E,aAAa/E,IAoBlE,YAAA2gE,cAAA,SAAc19D,GACZ,MAAO,SAiBT,YAAAylD,oBAAA,WACExmD,KAAK0L,UAAU86C,uBAEnB,EA1KA,GAAa,EAAAb,kB,kICtBb,WAEA,SAEM5lD,EAA6C,GAuCnD,SAAgBi/D,EAAsB/Z,GACpC,IAUI4K,EAVEoP,EAsCR,WACE,IAAMA,EAA4BzjC,SAAS0jC,cAAc,UAGzD,OAFAD,EAAOpnD,MAAQ,EACfonD,EAAOrnD,OAAS,EACTqnD,EA1CQE,GAWTC,EAV4C,CAChD9iE,OAAO,EACP+iE,OAAO,EACPC,WAAW,EACXC,SAAS,EACTC,uBAAuB,EACvBC,oBAAoB,EACpBC,8BAA8B,GAIhC,KAAKza,GAA2B,WAAdA,KAChB4K,EAAKoP,EAAOU,WAAW,SAAUP,IAE/B,IACE,OAAO,IAAI,EAAAQ,aAAa/P,EAAI,GAC5B,MAAOrlD,GACP,EAAAlE,OAAOtB,QAAQ,mBAAoB,kEAAkEwF,GAI3G,KAAKy6C,GAA2B,UAAdA,KAChB4K,EAAKoP,EAAOU,WAAW,QAASP,IAAOH,EAAOU,WAAW,qBAAsBP,IAE7E,IACE,OAAO,IAAI,EAAAQ,aAAa/P,EAAI,GAC5B,MAAOrlD,GACP,EAAAlE,OAAOtB,QACH,mBACA,yFAAyFwF,GAKnG,MAAM,IAAIxU,MAAM,0BApElB,8BAAgBgvD,EAAmBC,GACjC,IAAIp5C,EACEo5C,GAA2B,WAAdA,KAA2B,WAAYllD,GAE7CklD,GAA2B,UAAdA,KAA0B,UAAWllD,KAC7D8L,EAAU9L,EAAMghC,OAFhBl1B,EAAU9L,EAAM8/D,OAKlBh0D,EAAUA,GAAWmzD,EAAsB/Z,GAC3CA,EAAYA,GAAiC,IAApBp5C,EAAQjI,QAAgB,QAAU,SAC3D,IAAMisD,EAAKhkD,EAAQgkD,GAInB,OAFA9vD,EAAMklD,GAAap5C,EAEfgkD,EAAGiQ,wBACE//D,EAAMklD,GACND,EAAmBC,KAG5B4K,EAAGc,QAAQd,EAAGkQ,YACdlQ,EAAGc,QAAQd,EAAGmQ,cACdnQ,EAAGc,QAAQd,EAAGQ,OACdR,EAAGc,QAAQd,EAAGoQ,QACdpQ,EAAGc,QAAQd,EAAGqQ,qBACdrQ,EAAGc,QAAQd,EAAGsQ,iBACdtQ,EAAGO,OAAOP,EAAGuQ,cACbvQ,EAAGO,OAAOP,EAAGwQ,WACbxQ,EAAGyQ,SAASzQ,EAAG0Q,MAER10D,IAGT,2B,unBC3CA,YAEA,YAMA,aAoCE,WAAYgkD,EAA2BjsD,GAF/B,KAAA48D,kBAAmB,EAGzBxgE,KAAK6vD,GAAKA,EACV7vD,KAAK4D,QAAUA,EAEf5D,KAAKygE,gBACLzgE,KAAK0gE,aAAe1gE,KAAK2gE,qBACzB3gE,KAAK4gE,YAAc5gE,KAAK6gE,oBACxB7gE,KAAK8gE,uBA4ZT,OAzZE,YAAAlY,gBAAA,SAAgB/wC,EAAeD,EAAgB8wC,EAAsB5qD,GACnE,IAAM+xD,EAAK7vD,KAAK6vD,GAEV73C,EAAU63C,EAAGkR,gBAEnBlR,EAAG0J,YAAY1J,EAAGmR,WAAYhpD,GAC9B63C,EAAGoR,cAAcpR,EAAGmR,WAAYnR,EAAGqR,mBAAoBrR,EAAGsR,SAC1DtR,EAAGoR,cAAcpR,EAAGmR,WAAYnR,EAAGuR,mBAAoBvR,EAAGsR,SAC1DtR,EAAGoR,cAAcpR,EAAGmR,WAAYnR,EAAGwR,eAAgBxR,EAAGyR,eACtDzR,EAAGoR,cAAcpR,EAAGmR,WAAYnR,EAAG0R,eAAgB1R,EAAGyR,eACtD,IAAMlgE,EAAStD,EAAO4qD,EAAQz1C,OAAOnV,EAAM+Z,EAAQD,GAAU,KAQ7D,OAPAi4C,EAAG2R,WACC3R,EAAGmR,WACH,EACAtY,EAAQgW,eAAgB7mD,EAAOD,EAC/B,EACA8wC,EAAQ1uB,OAAQ0uB,EAAQiW,YAAav9D,GACzCpB,KAAKswD,aACEt4C,GAET,YAAA4mD,cAAA,SACI5mD,EAAuBH,EAAeD,EAAgB8wC,EAAsB5qD,GAC9E,IAAM+xD,EAAK7vD,KAAK6vD,GAChBA,EAAG0J,YAAY1J,EAAGmR,WAAYhpD,GAC9B,IAAM5W,EAASsnD,EAAQz1C,OAAOnV,EAAM+Z,EAAQD,GAC5Ci4C,EAAG4R,cACC5R,EAAGmR,WACH,EACA,EACA,EACAnpD,EAAOD,EAAQ8wC,EAAQ1uB,OAAQ0uB,EAAQiW,YAAav9D,GACxDpB,KAAKswD,cAEP,YAAA0I,kBAAA,SAAkBhhD,EAAuBH,EAAeD,GACtD,IAAMi4C,EAAK7vD,KAAK6vD,GAEhBA,EAAG0J,YAAY1J,EAAGmR,WAAYhpD,GAC9B63C,EAAG6R,gBAAgB7R,EAAG8R,YAAa3hE,KAAK4gE,aACxC/Q,EAAG+R,qBACC/R,EAAG8R,YAAa9R,EAAGgS,kBAAmBhS,EAAGmR,WAAYhpD,EACrD,GACJhY,KAAKswD,aACLT,EAAGiS,SAAS,EAAG,EAAGjqD,EAAOD,GACzBi4C,EAAGkS,QAAQ,EAAG,EAAGlqD,EAAOD,IAE1B,YAAAgwC,YAAA,SACI5vC,EAAuBH,EAAeD,EAAgBszB,EAAkBnqC,EACxE0W,GACF,IAAMo4C,EAAK7vD,KAAK6vD,GACXp4C,IACHA,EAAW,GAERzX,KAAKwgE,kBACRxgE,KAAKg5D,kBAAkBhhD,EAASH,EAAOD,GAEzC,IAAM8wC,EAAU1oD,KAAK2oD,WAAW5nD,EAAU0W,GACpCrW,EAASsnD,EAAQsZ,SAASnqD,EAAQD,GAUxC,OARAi4C,EAAG0J,YAAY1J,EAAGmR,WAAYhpD,GAC9B63C,EAAG+R,qBACC/R,EAAG8R,YAAa9R,EAAGgS,kBAAmBhS,EAAGmR,WAAYhpD,EACrD,GAEJ63C,EAAGoS,WAAW,EAAG,EAAGpqD,EAAOD,EAAQi4C,EAAGqS,KAAMxZ,EAAQiW,YAAav9D,GACjEpB,KAAKswD,aAEE5H,EAAQ/0C,OAAOvS,EAAQ8pC,IAEhC,YAAAi3B,mBAAA,WAEE,OAAO,GAET,YAAAC,iBAAA,WACE,IAAMvS,EAAK7vD,KAAK6vD,GAEhB,MAAO,WADGA,EAAGwS,aAAariE,KAAK6vD,GAAGyS,gBACZzS,EAAG0S,WAE3B,YAAAC,kBAAA,WACE,OAAOxiE,KAAK6vD,GAAGwS,aAAariE,KAAK6vD,GAAG4S,qBAEtC,YAAAC,sBAAA,WACE,OAAO1iE,KAAK6vD,GAAGwS,aAAariE,KAAK6vD,GAAG8S,sBAEtC,YAAAvJ,oBAAA,SAAoBH,EAAwBC,GAC1C,IAAMrJ,EAAK7vD,KAAK6vD,GAChBA,EAAG+S,oBAAoB3J,EAAgB,EAAGpJ,EAAGp4D,OAAO,EAAO,GAAI,GAC/Do4D,EAAGgT,wBAAwB5J,IACC,IAAxBC,IACFrJ,EAAG+S,oBAAoB1J,EAAoB,EAAGrJ,EAAGp4D,OAAO,EAAO,GAAI,IACnEo4D,EAAGgT,wBAAwB3J,IAE7Bl5D,KAAKswD,cAEP,YAAAyI,cAAA,SACIjB,EACAe,GAEF,IAAMhJ,EAAK7vD,KAAK6vD,GACV0H,EAAU1H,EAAGkJ,gBAMnB,OAHAlJ,EAAGiT,aAAavL,EAASO,GACzBjI,EAAGiT,aAAavL,EAASsB,GACzBhJ,EAAGkT,YAAYxL,GACRA,GAET,YAAAoB,cAAA,SAAcnQ,EAAsBwa,GAClC,IAAMnT,EAAK7vD,KAAK6vD,GACVoT,EAASpT,EAAGqT,aAAaF,GAC/B,IAAKC,EACH,MAAM,IAAIjtE,MAAM,0CAA0CgtE,GAK5D,GAFAnT,EAAGrH,aAAaya,EAAQza,GACxBqH,EAAG8I,cAAcsK,IACwC,IAArDpT,EAAGsT,mBAAmBF,EAAQpT,EAAGuT,gBACnC,MAAM,IAAIptE,MAAM,6BAA6B65D,EAAGwT,iBAAiBJ,IAEnE,OAAOA,GAET,YAAAlL,aAAA,SAAakL,GACXjjE,KAAK6vD,GAAGkI,aAAakL,IAEvB,YAAArJ,qBAAA,SAAqB5hD,EAAuB63B,EAAkB8pB,GAC5D,IAAM9J,EAAK7vD,KAAK6vD,GAChBA,EAAGyT,cAAczT,EAAG0S,SAAW1yB,GAC/B7vC,KAAKswD,aACLT,EAAG0J,YAAY1J,EAAGmR,WAAYhpD,GAC9BhY,KAAKswD,aACLT,EAAGa,UAAUiJ,EAAe9pB,GAC5B7vC,KAAKswD,cAEP,YAAAV,KAAA,WACE5vD,KAAK6vD,GAAG0T,WAAWvjE,KAAK6vD,GAAG2T,eAAgB,EAAG,GAC9CxjE,KAAKswD,cAEP,YAAAA,WAAA,WACE,GAAI,EAAA3gC,IAAIkB,MAAO,CACb,IAAMg/B,EAAK7vD,KAAK6vD,GACV5qD,EAAQ4qD,EAAG4T,WACbpnC,EAAQ,GACZ,OAAQp3B,GACN,KAAM4qD,EAAW,SACf,OACF,KAAMA,EAAe,aACnBxzB,EAAQ,eACR,MACF,KAAMwzB,EAAgB,cACpBxzB,EAAQ,gBACR,MACF,KAAMwzB,EAAoB,kBACxBxzB,EAAQ,oBACR,MACF,KAAMwzB,EAAgC,8BACpCxzB,EAAQ,gCACR,MACF,KAAMwzB,EAAgB,cACpBxzB,EAAQ,gBACR,MACF,KAAMwzB,EAAqB,mBACzBxzB,EAAQ,qBACR,MACF,QACEA,EAAQ,wBAA0Bp3B,EAAM1D,SAAS,IAErD,MAAM,IAAIvL,MAAMqmC,KAGpB,YAAA0iC,cAAA,SAAc/mD,GACZhY,KAAK6vD,GAAGkP,cAAc/mD,IAExB,YAAAggD,cAAA,SAAcT,GACZv3D,KAAK6vD,GAAGmI,cAAcT,IAExB,YAAA5O,WAAA,SAAW5nD,EAA4B0W,EAAkB8vC,GACvD,QADuD,IAAAA,MAAA,GAClC,IAAjBvnD,KAAK4D,QACP,OAAO,IAAI8/D,EAAaC,sBAAsB3jE,KAAK6vD,GAA8Bp4C,GAGnF,OAAQ1W,GACN,IAAK,QACH,OAAc,IAAVwmD,GAAsCvnD,KAAK4jE,yBACtC,IAAIF,EAAaG,qBAAqB7jE,KAAK6vD,GAAIp4C,GAE/C,IAAIisD,EAAaG,qBACpB7jE,KAAK6vD,GAAIp4C,EAAUzX,KAAK8jE,0BAA2BC,gBAE3D,IAAK,MACH,MAAM,IAAI/tE,MAAM,mBAClB,IAAK,OACH,OAAO,IAAI0tE,EAAaM,iBAAiBhkE,KAAK6vD,GAAIp4C,GACpD,QACE,MAAM,IAAIzhB,MAAM,qBAAqB+K,KAG3C,YAAAylD,oBAAA,WAEE,IADA,IAAMqJ,EAAK7vD,KAAK6vD,GACPoU,EAAO,EAAGA,EAAOjkE,KAAKkkE,uBAAwBD,EACrDpU,EAAGyT,cAAczT,EAAG0S,SAAW0B,GAC/BpU,EAAG0J,YAAY1J,EAAGmR,WAAY,OAGlC,YAAA3/B,QAAA,WACE,IAAIrhC,KAAKmkE,SAAT,CAGA,IAAMtU,EAAK7vD,KAAK6vD,GAChBA,EAAG6R,gBAAgB7R,EAAG8R,YAAa,MACnC9R,EAAGuU,kBAAkBpkE,KAAK4gE,aAC1B/Q,EAAGwU,WAAWxU,EAAGyU,aAAc,MAC/BzU,EAAG0U,aAAavkE,KAAK0gE,cACrB7Q,EAAGwU,WAAWxU,EAAG2U,qBAAsB,MACvC3U,EAAGj5B,SACH52B,KAAKmkE,UAAW,IAGV,YAAAM,sBAAR,WAEE,OAAO,IAAI5hE,aAAa,EACrB,EAAK,EAAM,EAAK,EAAK,GACrB,GAAM,EAAK,EAAK,EAAK,EACtB,EAAM,EAAM,EAAK,EAAK,EACtB,GAAO,EAAK,EAAK,EAAK,KAGlB,YAAA89D,mBAAR,WACE,IAAM9Q,EAAK7vD,KAAK6vD,GACVzuD,EAASyuD,EAAGz2C,eAClB,IAAKhY,EACH,MAAM,IAAIpL,MAAM,gCAElB,IAAM0uE,EAAW1kE,KAAKykE,wBAItB,OAHA5U,EAAGwU,WAAWxU,EAAGyU,aAAcljE,GAC/ByuD,EAAG8U,WAAW9U,EAAGyU,aAAcI,EAAU7U,EAAG+U,aAC5C5kE,KAAKswD,aACElvD,GAED,YAAAy/D,kBAAR,WACE,IAAMgE,EAAK7kE,KAAK6vD,GAAGgR,oBACnB,IAAKgE,EACH,MAAM,IAAI7uE,MAAM,mCAElB,OAAO6uE,GAGD,YAAA/D,qBAAR,WACE,IAAMjR,EAAK7vD,KAAK6vD,GAMhB,GAJA7vD,KAAK8kE,sCAAwC9kE,KAAK+kE,2CAClD/kE,KAAK4jE,yBAA2B5jE,KAAKglE,qBACrChlE,KAAKgoD,2BAA6BhoD,KAAKilE,uBAElB,IAAjBjlE,KAAK4D,UAAkB5D,KAAK8jE,4BAA8B9jE,KAAK4jE,yBACjE,MAAM,IAAI5tE,MAAM,0DAGlBgK,KAAKoxD,kBAAoBpxD,KAAK4jE,0BAA4B5jE,KAAKklE,oBAG/DllE,KAAKylD,eAAiBoK,EAAGwS,aAAaxS,EAAGsV,kBACzCnlE,KAAKkkE,qBAAuBrU,EAAGwS,aAAaxS,EAAGuV,yBAM3CplE,KAAK4D,SAOH,YAAA68D,cAAR,WACuB,IAAjBzgE,KAAK4D,QACP5D,KAAKqlE,0BAA4BrlE,KAAK6vD,GAAGyV,aAAa,2BAEtDtlE,KAAKulE,sBAAwBvlE,KAAK6vD,GAAGyV,aAAa,qBAClDtlE,KAAK8jE,0BAA4B9jE,KAAK6vD,GAAGyV,aAAa,4BAIlD,YAAAP,yCAAR,WAGE,IAAMlV,EAAK7vD,KAAK6vD,GACV73C,EAAU63C,EAAGkR,gBACnBlR,EAAG0J,YAAY1J,EAAGmR,WAAYhpD,GAC9B,IAAM0mD,EAAkC,IAAjB1+D,KAAK4D,QAAiBisD,EAAoC2V,QAAU3V,EAAGqS,KAC9FrS,EAAG2R,WAAW3R,EAAGmR,WAAY,EAAGtC,EAAgB,EAAG,EAAG,EAAG7O,EAAGqS,KAAMrS,EAAGp4D,MAAO,MAE5E,IAAMguE,EAAc5V,EAAGgR,oBACvBhR,EAAG6R,gBAAgB7R,EAAG8R,YAAa8D,GAEnC5V,EAAG+R,qBAAqB/R,EAAG8R,YAAa9R,EAAGgS,kBAAmBhS,EAAGmR,WAAYhpD,EAAS,GAEtF,IAAM0tD,EAAa7V,EAAG8V,uBAAuB9V,EAAG8R,eAAiB9R,EAAG+V,qBAKpE,OAJA/V,EAAG0J,YAAY1J,EAAGmR,WAAY,MAC9BnR,EAAG6R,gBAAgB7R,EAAG8R,YAAa,MACnC9R,EAAGkP,cAAc/mD,GACjB63C,EAAGuU,kBAAkBqB,GACdC,GAGD,YAAAV,mBAAR,WACE,GAAqB,IAAjBhlE,KAAK4D,SACP,IAAK5D,KAAKqlE,0BACR,OAAO,OAGT,IAAKrlE,KAAKulE,sBACR,OAAO,EAGX,OAAOvlE,KAAK8kE,uCAGN,YAAAG,qBAAR,WACE,GAAqB,IAAjBjlE,KAAK4D,SACP,IAAK5D,KAAKqlE,0BACR,OAAO,MAEJ,CACL,IAAKrlE,KAAKulE,sBACR,OAAO,EAET,IAAKvlE,KAAK6vD,GAAGyV,aAAa,4BACxB,OAAO,EAGX,OAAOtlE,KAAK8kE,uCAMN,YAAAI,kBAAR,WAIE,IAEIltD,EACAytD,EACA3N,EACA+N,EACAtO,EANE1H,EAAK7vD,KAAK6vD,GAQhB,IACE73C,EAAU63C,EAAGkR,gBACb0E,EAAc5V,EAAGgR,oBACjBhR,EAAG0J,YAAY1J,EAAGmR,WAAYhpD,GAE9B,IAAM0mD,EAAkC,IAAjB1+D,KAAK4D,QAAiBisD,EAAoC2V,QAAU3V,EAAGqS,KAS9F,OARArS,EAAG2R,WAAW3R,EAAGmR,WAAY,EAAGtC,EAAgB,EAAG,EAAG,EAAG7O,EAAGqS,KAAMrS,EAAGp4D,MAAO,MAE5Eo4D,EAAG6R,gBAAgB7R,EAAG8R,YAAa8D,GACnC5V,EAAG+R,qBAAqB/R,EAAG8R,YAAa9R,EAAGgS,kBAAmBhS,EAAGmR,WAAYhpD,EAAS,GAEtF63C,EAAGO,OAAOP,EAAGQ,QAEbyH,EAAejI,EAAGqT,aAAarT,EAAG+I,iBAIlC/I,EAAGrH,aAAasP,EAAc,iBAC9BjI,EAAG8I,cAAcb,MAEjB+N,EAAiBhW,EAAGqT,aAAarT,EAAGiJ,oBAIpCjJ,EAAGrH,aAAaqd,EAAgB,8DAChChW,EAAG8I,cAAckN,MAEjBtO,EAAU1H,EAAGkJ,mBAIblJ,EAAGiT,aAAavL,EAASO,GACzBjI,EAAGiT,aAAavL,EAASsO,GACzBhW,EAAGkT,YAAYxL,GACf1H,EAAG2H,WAAWD,GAEd1H,EAAG0T,WAAW1T,EAAGiW,OAAQ,EAAG,GACrBjW,EAAG4T,aAAe5T,EAAGkW,aAtBnB,E,QAyBTlW,EAAGc,QAAQd,EAAGQ,OAEVkH,GACF1H,EAAGmI,cAAcT,GAEfO,GACFjI,EAAGkI,aAAaD,GAEd+N,GACFhW,EAAGkI,aAAa8N,GAEdJ,IACF5V,EAAG6R,gBAAgB7R,EAAG8R,YAAa,MACnC9R,EAAGuU,kBAAkBqB,IAEnBztD,IACF63C,EAAG0J,YAAY1J,EAAGmR,WAAY,MAC9BnR,EAAGkP,cAAc/mD,MAIzB,EAvcA,GAAa,EAAA4nD,gB,uJCRb,WAoCA,aAKE,WAAY/P,EAA4Bp4C,GACtC,QADsC,IAAAA,MAAA,GACrB,IAAbA,EACFzX,KAAK0+D,eAAiB7O,EAAGmW,KACzBhmE,KAAKg6B,OAAS61B,EAAGoW,IACjBjmE,KAAK2+D,YAAc9O,EAAGp4D,MACtBuI,KAAKynC,YAAchwB,MACd,IAAiB,IAAbA,EAMT,MAAM,IAAIzhB,MAAM,+BAA+ByhB,GAL/CzX,KAAK0+D,eAAiB7O,EAAG2V,QACzBxlE,KAAKg6B,OAAS61B,EAAGqS,KACjBliE,KAAK2+D,YAAc9O,EAAGp4D,MACtBuI,KAAKynC,YAAchwB,GAiCzB,OA5BE,YAAAxE,OAAA,SAAO5F,EAA4B64D,GACjC,IAAIx5D,EACA9W,EAcJ,OAbIyX,EAAIjN,cAAgByC,eACtB,EAAAyD,OAAOtB,QAAQ,UAAW,2DAC1BpP,EAAS,IAAIiN,aAAawK,IAExB64D,EAAclmE,KAAKynC,YAAcp6B,EAAIxb,QACvC,EAAAyU,OAAOtB,QAAQ,UAAW,kDAC1BpP,EAASyX,EACTX,EAAS1M,KAAKgiE,SAASkE,EAAclmE,KAAKynC,aAC1C7xC,EAAO0H,SAAQ,SAAC1C,EAAGpL,GAAM,OAAAkd,EAAOld,GAAKoL,MAGrC8R,EADA9W,EAASyX,EAGJX,GAET,YAAAs1D,SAAA,SAASxtE,GACP,OAAO,IAAIqO,aAAoB,EAAPrO,IAE1B,YAAAmf,OAAA,SAAOvS,EAA+B8pC,GACpC,OAAyB,IAArBlrC,KAAKynC,YACermC,EAAwB9C,QAAO,SAACzN,EAAO8C,GAAU,OAAAA,EAAQ,GAAM,KAAGiqB,SAAS,EAAGstB,GAG/F9pC,EAAOwc,SAAS,EAAGstB,IAE9B,EAhDA,GAAa,EAAAy4B,wBAoDb,iBAKE,WAAY9T,EAA2Bp4C,EAAcknD,GACnD,QADqC,IAAAlnD,MAAA,GACpB,IAAbA,GAA+B,IAAbA,EACpB,MAAM,IAAIzhB,MAAM,+BAA+ByhB,GAEjDzX,KAAK0+D,eAAiB7O,EAAGqS,KACzBliE,KAAKg6B,OAAS61B,EAAGqS,KACjBliE,KAAKynC,YAAchwB,EACnBzX,KAAK2+D,YAAcA,GAAe9O,EAAGp4D,MAqBzC,OAnBE,YAAAwb,OAAA,SAAO5F,EAAmB64D,GACxB,IAAIhmB,EAAO7yC,EAMX,OALyB,IAArBrN,KAAKynC,cACP,EAAAnhC,OAAOxB,QAAQ,UAAW,iCAC1Bo7C,EAAOlgD,KAAKgiE,SAASkE,GACrB74D,EAAI/P,SAAQ,SAAC1C,EAAGpL,GAAM,OAAA0wD,EAAS,EAAJ1wD,GAASoL,MAE/BslD,GAET,YAAA8hB,SAAA,SAASxtE,GACP,OAAO,IAAIqO,aAAoB,EAAPrO,IAE1B,YAAAmf,OAAA,SAAOvS,EAA+B8pC,GACpC,OAAyB,IAArBlrC,KAAKynC,YACermC,EAAwB9C,QAAO,SAACzN,EAAO8C,GAAU,OAAAA,EAAQ,GAAM,KAAGiqB,SAAS,EAAGstB,GAG/F9pC,EAAOwc,SAAS,EAAGstB,IAE9B,EAjCA,GAAa,EAAA24B,uBAmCb,iBAKE,WAAYhU,EAA2Bp4C,GACrC,QADqC,IAAAA,MAAA,GADvC,KAAAgwB,YAAc,EAEK,IAAbhwB,EACFzX,KAAK0+D,eAAiB7O,EAAGsW,MACzBnmE,KAAKg6B,OAAS61B,EAAGsW,MACjBnmE,KAAK2+D,YAAc9O,EAAGuW,cACtBpmE,KAAKynC,YAAchwB,MACd,IAAiB,IAAbA,EAMT,MAAM,IAAIzhB,MAAM,+BAA+ByhB,GAL/CzX,KAAK0+D,eAAiB7O,EAAGqS,KACzBliE,KAAKg6B,OAAS61B,EAAGqS,KACjBliE,KAAK2+D,YAAc9O,EAAGuW,cACtBpmE,KAAKynC,YAAchwB,GAiBzB,OAZE,YAAAxE,OAAA,SAAO5F,EAAiB64D,GACtB,OAAO,IAAI3jE,WAAW8K,EAAIjM,OAAQiM,EAAIhM,WAAYgM,EAAI/L,aAExD,YAAA0gE,SAAA,SAASxtE,GACP,OAAO,IAAI+N,WAAW/N,EAAOwL,KAAKynC,cAEpC,YAAA9zB,OAAA,SAAOvS,EAA+B8pC,GACpC,GAAI9pC,aAAkBmB,WACpB,OAAOnB,EAAOwc,SAAS,EAAGstB,GAE5B,MAAM,IAAIl1C,MAAM,uBAAuBoL,EAAOhB,cAElD,EAhCA,GAAa,EAAA4jE,oB,+FC3Hb,YAIA,2BAOA,OANE,sBAAW,oBAAK,C,IAGhB,WACE,OAAO,EAAAr0C,IAAIkB,O,IAJb,SAAiBhgC,GACf,EAAA8+B,IAAIkB,MAAQhgC,G,gCAKhB,EAPA,GASa,EAAAqwC,QAAU,IAAID,G,+wBCoF3B,eACa,EAAAxsC,OAA4B4xE,EAAW5xE,Q,2nBCiBpD,gBACa,EAAA6xE,iBAAgDC,EAAqBD,kB,s/DCpHlF,aAMA,WAMA,aAEE,WAAYrgE,GACVjG,KAAK0hC,QAAU,IAAI,EAAA8kC,QAAQvgE,GAwD/B,OAlDE,YAAAwgE,UAAA,SAAU9gE,EAA0CtE,EAAqBxP,GACvE,GAAoB,iBAAT8T,EACT,OAAO3F,KAAK0hC,QAAQ+kC,UAAU9gE,GACzB,GAAoB,oBAAT+gE,MAAyB/gE,aAAgB+gE,KAAO,CAEhE,IAAMvsB,EAAMwsB,IAAIC,gBAAgBjhE,GAChC,OAAO3F,KAAK0hC,QAAQ+kC,UAAUtsB,GACzB,GAAIx0C,aAAgBpF,YAEzB,OAAOP,KAAK0hC,QAAQ+kC,UAAU9gE,EAAMtE,EAAYxP,GAC3C,GAAI0O,YAAY6Z,OAAOzU,GAE5B,OAAO3F,KAAK0hC,QAAQ+kC,UAAU9gE,GAE9B,MAAM,IAAI3P,MAAM,iCAId,YAAAihB,IAAN,SAAU4vD,EAAsBpyD,G,iHAC1BxQ,EAAS,IAAI6hD,IACb+gB,aAAqB/gB,KACjB,EAAiB,IAAIA,IAC3B+gB,EAAUvpE,SAAQ,SAACzM,EAAkBM,GACnC,EAAewD,IAAIxD,EAAKN,EAAMyvC,mBAEvB,GAAMtgC,KAAK0hC,QAAQzqB,IAAI,KAL9B,M,cAKFhT,EAAS,S,oBACA1Q,MAAM4M,QAAQ0mE,IACjB,EAAmC,GACzCA,EAAUvpE,SAAQ,SAACzM,GACjB,EAAekL,KAAKlL,EAAMyvC,mBAEnB,GAAMtgC,KAAK0hC,QAAQzqB,IAAI,KALvB,M,cAKThT,EAAS,S,aAGT,IAAW,KADL6iE,EAAiB,IAAIhhB,IACR+gB,EACjBC,EAAenyE,IAAI,EAAOkyE,EAAmD,GAAMvmC,gB,iBAOvF,OAJMymC,EAAuD,IAAIjhB,IACjE7hD,EAAO3G,SAAQ,SAACzM,EAAOM,GACrB41E,EAAgBpyE,IAAIxD,EAAK61E,EAAYC,mBAAmBp2E,OAEnD,CAAP,EAAOk2E,WAET,YAAAG,eAAA,WACElnE,KAAK0hC,QAAQwlC,kBAEf,YAAAC,aAAA,WACEnnE,KAAK0hC,QAAQylC,gBAEjB,EA3DA,GAAa,EAAAb,oB,2+CCZb,YACA,SAEA,SACA,SAEA,OACA,SAiBA,aACE,WAAYrgE,QAAA,IAAAA,MAAA,IACVjG,KAAKonE,cAAe,EACpBpnE,KAAKqnE,YAAcphE,EAAOohE,YAC1BrnE,KAAKwhC,SAAW,EAAAj5B,SAASrX,OAAO+U,EAAOu7B,UACvCxhC,KAAK6L,QAAU,CAAC21B,SAAUxhC,KAAKwhC,SAAU8lC,gBAAiB,GAAIC,eAAgB,IAyNlF,OAtNE,YAAAL,eAAA,WACElnE,KAAKwhC,SAASzoC,SAGhB,YAAAouE,aAAA,WACEnnE,KAAKwhC,SAASn6B,QAMV,YAAAo/D,UAAN,SAAgBltD,EAAoClY,EAAqBxP,G,qGACvE,SAAMmO,KAAKwhC,SAASj6B,MAAM,UAAW,qBAAqB,gD,4DAExC,SAAM,EAAAigE,QAAQxnE,KAAKqnE,c,cAA7B12C,EAAU,SAChB3wB,KAAKynE,eAAiB92C,EAAQwQ,qBAAqBnhC,KAAK6L,SAExD7L,KAAK0nE,OAAS,IAAI,EAAAC,MACC,iBAARpuD,EAAP,MACmB,oBAAV8kC,MAAP,MAEU,GAAM,EAAAupB,UAAU,EAAAC,SAAV,CAAoBtuD,I,cAAhCjZ,EAAM,SACZN,KAAK0qB,WAAWxpB,EAAOC,KAAKb,I,aAGX,SAAM+9C,MAAM9kC,I,OACjB,SADK,SACUuuD,e,OAArBxnE,EAAM,SACZN,KAAK0qB,WAAWxpB,EAAOC,KAAKb,I,oCAEpBC,YAAY6Z,OAAOb,GAM7BvZ,KAAK0qB,WAAWxpB,EAAOC,KAAKoY,KAJtB6B,EAAM,IAAI7Y,WAAWgX,EAAKlY,GAAc,EAAGxP,GAAU0nB,EAAIjY,YAC/DtB,KAAK0qB,WAAWxpB,EAAOC,KAAKia,K,oDApBhC,S,YA4BM,YAAAsP,WAAR,SAAmBq9C,GAAnB,WACE,GAAI/nE,KAAKonE,aACP,MAAM,IAAIpxE,MAAM,uBAGlBgK,KAAKwhC,SAASj6B,MAAM,UAAW,sBAAsB,WAEnD,IAAMygE,EACF,EAAKP,eAAeQ,eAAiB,EAAKR,oBAAsC90E,EACpF,EAAK+0E,OAAOQ,KAAKH,EAAgBC,GAG7B,EAAKP,eAAezhB,oBACtB,EAAKyhB,eAAezhB,mBAAmB,EAAK0hB,OAAO/xD,OAGrD,EAAKwyD,cAAc,EAAKT,OAAO/xD,OAG/B,EAAKyyD,eAAiB,IAAI,EAAAC,cAAc,EAAKX,OAAO/xD,MAAO,EAAK2yD,KAAM,EAAK9mC,aAG7ExhC,KAAKonE,cAAe,GAGtB,YAAAnwD,IAAA,SAAIrlB,GAAJ,WACE,IAAKoO,KAAKonE,aACR,MAAM,IAAIpxE,MAAM,+BAGlB,OAAOgK,KAAKwhC,SAASj6B,MAAM,UAAW,eAAe,gD,0DAG7B,OAFhBghE,EAAevoE,KAAKwoE,2BAA2B52E,GAE/B,GAAMoO,KAAKooE,eAAeK,QAAQzoE,KAAKynE,eAAgBc,I,OAE7E,OAFMG,EAAgB,SAEf,CAAP,EAAO1oE,KAAK2oE,aAAaD,eAIrB,YAAAF,2BAAR,SAAmC52E,GACjC,IAAMg3E,EAAkB5oE,KAAK0nE,OAAO/xD,MAAMkzD,gBAI1C,GAAIt1E,MAAM4M,QAAQvO,IAChB,GAAIA,EAAOC,SAAW+2E,EAAgB/2E,OACpC,MAAM,IAAImE,MAAM,0CAA0C4yE,EAAgB/2E,OAAM,YAAYD,EAAOC,YAKlG,CACH,GAAID,EAAO4C,OAASo0E,EAAgB/2E,OAClC,MAAM,IAAImE,MAAM,sCAAsC4yE,EAAgB/2E,OAAM,YAAYD,EAAO4C,MAKjG,IAFA,IAAMs0E,EAAe,IAAIv1E,MAAc3B,EAAO4C,MAC1Cu0E,EAAoB,EACfv5E,EAAI,EAAGA,EAAIo5E,EAAgB/2E,SAAUrC,EAAG,CAC/C,IAAMyoB,EAASrmB,EAAOnB,IAAIm4E,EAAgBp5E,IAC1C,IAAKyoB,EACH,MAAM,IAAIjiB,MAAM,8BAA8B7F,KAAI,KAEpD24E,EAAaC,KAAuB9wD,EAGtCrmB,EAASk3E,EAKX,GAAK9oE,KAAK6L,QAAQy7D,iBAA2D,IAAxCtnE,KAAK6L,QAAQy7D,gBAAgBz1E,QAAiBmO,KAAK6L,QAAQ07D,gBACrD,IAAvCvnE,KAAK6L,QAAQ07D,eAAe11E,OAqB9BmO,KAAKgpE,wBAAwBhpE,KAAK6L,QAAQ07D,eAAgB31E,GAAQ,OArBtB,CAC5C,IAAMq3E,EAAoBjpE,KAAK0nE,OAAO/xD,MAAMuzD,kBACtCC,EAAcnpE,KAAK0nE,OAAO/xD,MAAMuwC,YAEhCqhB,EAAiB,IAAIh0E,MAA6B01E,EAAkBp3E,QAE1E,IAASrC,EAAI,EAAGA,EAAIy5E,EAAkBp3E,SAAUrC,EAAG,CACjD,IAAM45E,EAAaD,EAAYF,EAAkBz5E,IACjD+3E,EAAe/3E,GAAK45E,EAAW10E,KAAMa,MAAMxD,KAI3CiO,KAAK6L,QAAQy7D,gBAAiBvrE,KAAKqtE,EAAW10E,KAAM0D,YACpD4H,KAAK6L,QAAQ07D,eAAgBxrE,KAAKnK,EAAOpC,GAAGuC,MAG9CiO,KAAKgpE,wBAAwBzB,EAAgB31E,GAAQ,GAWvD,OAFAoO,KAAKqpE,yBAAyBrpE,KAAK6L,QAAQy7D,gBAAkB11E,GAEtDA,GAGD,YAAAy3E,yBAAR,SAAiC/B,EAAoCgC,GACnE,IAAK,IAAI95E,EAAI,EAAGA,EAAI85E,EAAYz3E,OAAQrC,IAAK,CAC3C,IAAM+5E,EAAejC,EAAgB93E,GAC/Bg6E,EAAaF,EAAY95E,GAAGkF,KAClC,GAAI60E,IAAiBC,EACnB,MAAM,IAAIxzE,MAAM,gBAAgBxG,EAAC,kCAAkC+5E,EAAY,aAAaC,KAK1F,YAAAR,wBAAR,SACIzB,EAA8C+B,EAAuBG,GACvE,IAAK,IAAIj6E,EAAI,EAAGA,EAAI85E,EAAYz3E,OAAQrC,IAAK,CAC3C,IAAMk6E,EAAenC,EAAe/3E,GAC9Bm6E,EAAaL,EAAY95E,GAAGuC,KAClC,IAAKiO,KAAK4pE,kBAAkBF,EAAcC,EAAYF,GACpD,MAAM,IAAIzzE,MAAM,gBAAgBxG,EAAC,oCAAoCk6E,EAAa1wD,KAAK,KAAI,eACvF2wD,EAAW3wD,KAAK,KAAI,OAKtB,YAAA4wD,kBAAR,SACIF,EAAqCC,EAAmCF,GAC1E,GAAIC,EAAa73E,SAAW83E,EAAW93E,OACrC,OAAO,EAGT,IAAK,IAAIrC,EAAI,EAAGA,EAAIk6E,EAAa73E,SAAUrC,EACzC,GAAIk6E,EAAal6E,KAAOm6E,EAAWn6E,MAAQi6E,GAAwC,IAApBC,EAAal6E,IAE1E,OAAO,EAIX,OAAO,GAGD,YAAAm5E,aAAR,SAAqBD,GACnB,IAAMmB,EAAmB7pE,KAAK0nE,OAAO/xD,MAAMm0D,iBAC3C,GAAIpB,EAAc72E,SAAWg4E,EAAiBh4E,OAC5C,MAAM,IAAImE,MAAM,uEAIlB,IADA,IAAMiO,EAAS,IAAI6hD,IACVt2D,EAAI,EAAGA,EAAIq6E,EAAiBh4E,SAAUrC,EAC7CyU,EAAOtP,IAAIk1E,EAAiBr6E,GAAIk5E,EAAcl5E,IAGhD,OAAOyU,GAGD,YAAAkkE,cAAR,SAAsBxyD,GACpB,IAAMrJ,EAAQqJ,EAAMo0D,WACpB/pE,KAAKsoE,KAAO,IAAI/0E,MAAM+Y,EAAMza,QAE5B,IAAK,IAAIrC,EAAI,EAAGA,EAAI8c,EAAMza,OAAQrC,IAChCwQ,KAAKsoE,KAAK94E,GAAKwQ,KAAKynE,eAAe5/D,QAAQyE,EAAM9c,GAAIwQ,KAAK0nE,OAAOhvD,OAAQ/C,IAe/E,EA9NA,GAAa,EAAA6wD,Y,0CC3Bb,YAqBA,IAAIwD,EAA4B15E,OAAO05E,2BACrC,SAAmC56D,GAGjC,IAFA,IAAI7B,EAAOjd,OAAOid,KAAK6B,GACnB66D,EAAc,GACTz6E,EAAI,EAAGA,EAAI+d,EAAK1b,OAAQrC,IAC/By6E,EAAY18D,EAAK/d,IAAMc,OAAO45E,yBAAyB96D,EAAK7B,EAAK/d,IAEnE,OAAOy6E,GAGPE,EAAe,WACnBh7E,EAAQ6qC,OAAS,SAAShnB,GACxB,IAAKjE,EAASiE,GAAI,CAEhB,IADA,IAAIo3D,EAAU,GACL56E,EAAI,EAAGA,EAAIkvB,UAAU7sB,OAAQrC,IACpC46E,EAAQruE,KAAK6iB,EAAQF,UAAUlvB,KAEjC,OAAO46E,EAAQpxD,KAAK,KAGlBxpB,EAAI,EAmBR,IAnBA,IACIggC,EAAO9Q,UACP7K,EAAM2b,EAAK39B,OACXoP,EAAM+N,OAAOgE,GAAG+P,QAAQonD,GAAc,SAASrwE,GACjD,GAAU,OAANA,EAAY,MAAO,IACvB,GAAItK,GAAKqkB,EAAK,OAAO/Z,EACrB,OAAQA,GACN,IAAK,KAAM,OAAOkV,OAAOwgB,EAAKhgC,MAC9B,IAAK,KAAM,OAAO4L,OAAOo0B,EAAKhgC,MAC9B,IAAK,KACH,IACE,OAAOg4D,KAAKC,UAAUj4B,EAAKhgC,MAC3B,MAAO66E,GACP,MAAO,aAEX,QACE,OAAOvwE,MAGJA,EAAI01B,EAAKhgC,GAAIA,EAAIqkB,EAAK/Z,EAAI01B,IAAOhgC,GACpC86E,EAAOxwE,KAAOmV,EAASnV,GACzBmH,GAAO,IAAMnH,EAEbmH,GAAO,IAAM2d,EAAQ9kB,GAGzB,OAAOmH,GAOT9R,EAAQunD,UAAY,SAASlhB,EAAI+0C,GAC/B,QAAuB,IAAZ37D,IAAqD,IAA1BA,EAAQ47D,cAC5C,OAAOh1C,EAIT,QAAuB,IAAZ5mB,EACT,OAAO,WACL,OAAOzf,EAAQunD,UAAUlhB,EAAI+0C,GAAKjtD,MAAMtd,KAAM0e,YAIlD,IAAI+rD,GAAS,EAeb,OAdA,WACE,IAAKA,EAAQ,CACX,GAAI77D,EAAQ87D,iBACV,MAAM,IAAI10E,MAAMu0E,GACP37D,EAAQ+7D,iBACjBhmE,QAAQimE,MAAML,GAEd5lE,QAAQM,MAAMslE,GAEhBE,GAAS,EAEX,OAAOj1C,EAAGlY,MAAMtd,KAAM0e,aAO1B,IACImsD,EADAC,EAAS,GA6Bb,SAASlsD,EAAQxP,EAAK27D,GAEpB,IAAIpnC,EAAM,CACRqnC,KAAM,GACNC,QAASC,GAkBX,OAfIxsD,UAAU7sB,QAAU,IAAG8xC,EAAI07B,MAAQ3gD,UAAU,IAC7CA,UAAU7sB,QAAU,IAAG8xC,EAAIwnC,OAASzsD,UAAU,IAC9C0sD,EAAUL,GAEZpnC,EAAI0nC,WAAaN,EACRA,GAET57E,EAAQm8E,QAAQ3nC,EAAKonC,GAGnBQ,EAAY5nC,EAAI0nC,cAAa1nC,EAAI0nC,YAAa,GAC9CE,EAAY5nC,EAAI07B,SAAQ17B,EAAI07B,MAAQ,GACpCkM,EAAY5nC,EAAIwnC,UAASxnC,EAAIwnC,QAAS,GACtCI,EAAY5nC,EAAI6nC,iBAAgB7nC,EAAI6nC,eAAgB,GACpD7nC,EAAIwnC,SAAQxnC,EAAIsnC,QAAUQ,GACvBC,EAAY/nC,EAAKv0B,EAAKu0B,EAAI07B,OAoCnC,SAASoM,EAAiBxqE,EAAK0qE,GAC7B,IAAIC,EAAQhtD,EAAQitD,OAAOF,GAE3B,OAAIC,EACK,KAAYhtD,EAAQusD,OAAOS,GAAO,GAAK,IAAM3qE,EAC7C,KAAY2d,EAAQusD,OAAOS,GAAO,GAAK,IAEvC3qE,EAKX,SAASiqE,EAAejqE,EAAK0qE,GAC3B,OAAO1qE,EAeT,SAASyqE,EAAY/nC,EAAK9yC,EAAOi7E,GAG/B,GAAInoC,EAAI6nC,eACJ36E,GACAk7E,EAAWl7E,EAAM+tB,UAEjB/tB,EAAM+tB,UAAYzvB,EAAQyvB,WAExB/tB,EAAMuP,aAAevP,EAAMuP,YAAY5O,YAAcX,GAAQ,CACjE,IAAIuuB,EAAMvuB,EAAM+tB,QAAQktD,EAAcnoC,GAItC,OAHK50B,EAASqQ,KACZA,EAAMssD,EAAY/nC,EAAKvkB,EAAK0sD,IAEvB1sD,EAIT,IAAI4sD,EA+FN,SAAyBroC,EAAK9yC,GAC5B,GAAI06E,EAAY16E,GACd,OAAO8yC,EAAIsnC,QAAQ,YAAa,aAClC,GAAIl8D,EAASle,GAAQ,CACnB,IAAIo7E,EAAS,IAAOzkB,KAAKC,UAAU52D,GAAOkyB,QAAQ,SAAU,IAClBA,QAAQ,KAAM,OACdA,QAAQ,OAAQ,KAAO,IACjE,OAAO4gB,EAAIsnC,QAAQgB,EAAQ,UAE7B,GAAIC,EAASr7E,GACX,OAAO8yC,EAAIsnC,QAAQ,GAAKp6E,EAAO,UACjC,GAAIu6E,EAAUv6E,GACZ,OAAO8yC,EAAIsnC,QAAQ,GAAKp6E,EAAO,WAEjC,GAAIy5E,EAAOz5E,GACT,OAAO8yC,EAAIsnC,QAAQ,OAAQ,QA9GbkB,CAAgBxoC,EAAK9yC,GACrC,GAAIm7E,EACF,OAAOA,EAIT,IAAIz+D,EAAOjd,OAAOid,KAAK1c,GACnBu7E,EApCN,SAAqBrqE,GACnB,IAAIqO,EAAO,GAMX,OAJArO,EAAMzE,SAAQ,SAAS4c,EAAKwmB,GAC1BtwB,EAAK8J,IAAO,KAGP9J,EA6BWi8D,CAAY9+D,GAQ9B,GANIo2B,EAAI0nC,aACN99D,EAAOjd,OAAOg8E,oBAAoBz7E,IAKhC07E,EAAQ17E,KACJ0c,EAAKzR,QAAQ,YAAc,GAAKyR,EAAKzR,QAAQ,gBAAkB,GACrE,OAAO0wE,EAAY37E,GAIrB,GAAoB,IAAhB0c,EAAK1b,OAAc,CACrB,GAAIk6E,EAAWl7E,GAAQ,CACrB,IAAIV,EAAOU,EAAMV,KAAO,KAAOU,EAAMV,KAAO,GAC5C,OAAOwzC,EAAIsnC,QAAQ,YAAc96E,EAAO,IAAK,WAE/C,GAAIs8E,EAAS57E,GACX,OAAO8yC,EAAIsnC,QAAQ/uC,OAAO1qC,UAAU+P,SAASxR,KAAKc,GAAQ,UAE5D,GAAI67E,EAAO77E,GACT,OAAO8yC,EAAIsnC,QAAQ/kE,KAAK1U,UAAU+P,SAASxR,KAAKc,GAAQ,QAE1D,GAAI07E,EAAQ17E,GACV,OAAO27E,EAAY37E,GAIvB,IA2CIoT,EA3CA0oE,EAAO,GAAI5qE,GAAQ,EAAO6qE,EAAS,CAAC,IAAK,MAGzCzsE,EAAQtP,KACVkR,GAAQ,EACR6qE,EAAS,CAAC,IAAK,MAIbb,EAAWl7E,MAEb87E,EAAO,cADC97E,EAAMV,KAAO,KAAOU,EAAMV,KAAO,IACf,KAkB5B,OAdIs8E,EAAS57E,KACX87E,EAAO,IAAMzwC,OAAO1qC,UAAU+P,SAASxR,KAAKc,IAI1C67E,EAAO77E,KACT87E,EAAO,IAAMzmE,KAAK1U,UAAUq7E,YAAY98E,KAAKc,IAI3C07E,EAAQ17E,KACV87E,EAAO,IAAMH,EAAY37E,IAGP,IAAhB0c,EAAK1b,QAAkBkQ,GAAyB,GAAhBlR,EAAMgB,OAItCi6E,EAAe,EACbW,EAAS57E,GACJ8yC,EAAIsnC,QAAQ/uC,OAAO1qC,UAAU+P,SAASxR,KAAKc,GAAQ,UAEnD8yC,EAAIsnC,QAAQ,WAAY,YAInCtnC,EAAIqnC,KAAKjvE,KAAKlL,GAIZoT,EADElC,EAsCN,SAAqB4hC,EAAK9yC,EAAOi7E,EAAcM,EAAa7+D,GAE1D,IADA,IAAItJ,EAAS,GACJzU,EAAI,EAAGK,EAAIgB,EAAMgB,OAAQrC,EAAIK,IAAKL,EACrCiC,EAAeZ,EAAOme,OAAOxf,IAC/ByU,EAAOlI,KAAK+wE,EAAenpC,EAAK9yC,EAAOi7E,EAAcM,EACjDp9D,OAAOxf,IAAI,IAEfyU,EAAOlI,KAAK,IAShB,OANAwR,EAAKjQ,SAAQ,SAASnM,GACfA,EAAI0tB,MAAM,UACb5a,EAAOlI,KAAK+wE,EAAenpC,EAAK9yC,EAAOi7E,EAAcM,EACjDj7E,GAAK,OAGN8S,EArDI8oE,CAAYppC,EAAK9yC,EAAOi7E,EAAcM,EAAa7+D,GAEnDA,EAAKxV,KAAI,SAAS5G,GACzB,OAAO27E,EAAenpC,EAAK9yC,EAAOi7E,EAAcM,EAAaj7E,EAAK4Q,MAItE4hC,EAAIqnC,KAAKx4E,MA6GX,SAA8ByR,EAAQ0oE,EAAMC,GAQ1C,GANa3oE,EAAOzI,QAAO,SAASwxE,EAAMx9B,GAGxC,OADIA,EAAI1zC,QAAQ,OAAS,GAAGmxE,EACrBD,EAAOx9B,EAAIzsB,QAAQ,kBAAmB,IAAIlxB,OAAS,IACzD,GAEU,GACX,OAAO+6E,EAAO,IACG,KAATD,EAAc,GAAKA,EAAO,OAC3B,IACA1oE,EAAO+U,KAAK,SACZ,IACA4zD,EAAO,GAGhB,OAAOA,EAAO,GAAKD,EAAO,IAAM1oE,EAAO+U,KAAK,MAAQ,IAAM4zD,EAAO,GA5H1DM,CAAqBjpE,EAAQ0oE,EAAMC,IAxBjCA,EAAO,GAAKD,EAAOC,EAAO,GA+CrC,SAASJ,EAAY37E,GACnB,MAAO,IAAMmF,MAAMxE,UAAU+P,SAASxR,KAAKc,GAAS,IAwBtD,SAASi8E,EAAenpC,EAAK9yC,EAAOi7E,EAAcM,EAAaj7E,EAAK4Q,GAClE,IAAI5R,EAAM8Q,EAAKksE,EAsCf,IArCAA,EAAO78E,OAAO45E,yBAAyBr5E,EAAOM,IAAQ,CAAEN,MAAOA,EAAMM,KAC5DV,IAELwQ,EADEksE,EAAKx4E,IACDgvC,EAAIsnC,QAAQ,kBAAmB,WAE/BtnC,EAAIsnC,QAAQ,WAAY,WAG5BkC,EAAKx4E,MACPsM,EAAM0iC,EAAIsnC,QAAQ,WAAY,YAG7Bx5E,EAAe26E,EAAaj7E,KAC/BhB,EAAO,IAAMgB,EAAM,KAEhB8P,IACC0iC,EAAIqnC,KAAKlvE,QAAQqxE,EAAKt8E,OAAS,GAE/BoQ,EADEqpE,EAAOwB,GACHJ,EAAY/nC,EAAKwpC,EAAKt8E,MAAO,MAE7B66E,EAAY/nC,EAAKwpC,EAAKt8E,MAAOi7E,EAAe,IAE5ChwE,QAAQ,OAAS,IAErBmF,EADEc,EACId,EAAItE,MAAM,MAAM5E,KAAI,SAASmnD,GACjC,MAAO,KAAOA,KACblmC,KAAK,MAAMgD,OAAO,GAEf,KAAO/a,EAAItE,MAAM,MAAM5E,KAAI,SAASmnD,GACxC,MAAO,MAAQA,KACdlmC,KAAK,OAIZ/X,EAAM0iC,EAAIsnC,QAAQ,aAAc,YAGhCM,EAAYp7E,GAAO,CACrB,GAAI4R,GAAS5Q,EAAI0tB,MAAM,SACrB,OAAO5d,GAET9Q,EAAOq3D,KAAKC,UAAU,GAAKt2D,IAClB0tB,MAAM,iCACb1uB,EAAOA,EAAK6rB,OAAO,EAAG7rB,EAAK0B,OAAS,GACpC1B,EAAOwzC,EAAIsnC,QAAQ96E,EAAM,UAEzBA,EAAOA,EAAK4yB,QAAQ,KAAM,OACdA,QAAQ,OAAQ,KAChBA,QAAQ,WAAY,KAChC5yB,EAAOwzC,EAAIsnC,QAAQ96E,EAAM,WAI7B,OAAOA,EAAO,KAAO8Q,EA2BvB,SAASd,EAAQitE,GACf,OAAO75E,MAAM4M,QAAQitE,GAIvB,SAAShC,EAAU7xD,GACjB,MAAsB,kBAARA,EAIhB,SAAS+wD,EAAO/wD,GACd,OAAe,OAARA,EAST,SAAS2yD,EAAS3yD,GAChB,MAAsB,iBAARA,EAIhB,SAASxK,EAASwK,GAChB,MAAsB,iBAARA,EAShB,SAASgyD,EAAYhyD,GACnB,YAAe,IAARA,EAIT,SAASkzD,EAASY,GAChB,OAAOp+D,EAASo+D,IAA8B,oBAAvBC,EAAeD,GAIxC,SAASp+D,EAASsK,GAChB,MAAsB,iBAARA,GAA4B,OAARA,EAIpC,SAASmzD,EAAOx8E,GACd,OAAO+e,EAAS/e,IAA4B,kBAAtBo9E,EAAep9E,GAIvC,SAASq8E,EAAQrkE,GACf,OAAO+G,EAAS/G,KACW,mBAAtBolE,EAAeplE,IAA2BA,aAAalS,OAI9D,SAAS+1E,EAAWxyD,GAClB,MAAsB,mBAARA,EAgBhB,SAAS+zD,EAAej9E,GACtB,OAAOC,OAAOkB,UAAU+P,SAASxR,KAAKM,GAIxC,SAASyK,EAAIzJ,GACX,OAAOA,EAAI,GAAK,IAAMA,EAAEkQ,SAAS,IAAMlQ,EAAEkQ,SAAS,IApbpDpS,EAAQo+E,SAAW,SAAS54E,GAI1B,GAHI42E,EAAYV,KACdA,EAAej8D,EAAQ+gB,IAAI69C,YAAc,IAC3C74E,EAAMA,EAAIolC,eACL+wC,EAAOn2E,GACV,GAAI,IAAIunC,OAAO,MAAQvnC,EAAM,MAAO,KAAKslC,KAAK4wC,GAAe,CAC3D,IAAI4C,EAAM7+D,EAAQ6+D,IAClB3C,EAAOn2E,GAAO,WACZ,IAAI41E,EAAMp7E,EAAQ6qC,OAAO1c,MAAMnuB,EAASuvB,WACxC/Z,QAAQM,MAAM,YAAatQ,EAAK84E,EAAKlD,SAGvCO,EAAOn2E,GAAO,aAGlB,OAAOm2E,EAAOn2E,IAoChBxF,EAAQyvB,QAAUA,EAIlBA,EAAQusD,OAAS,CACf,KAAS,CAAC,EAAG,IACb,OAAW,CAAC,EAAG,IACf,UAAc,CAAC,EAAG,IAClB,QAAY,CAAC,EAAG,IAChB,MAAU,CAAC,GAAI,IACf,KAAS,CAAC,GAAI,IACd,MAAU,CAAC,GAAI,IACf,KAAS,CAAC,GAAI,IACd,KAAS,CAAC,GAAI,IACd,MAAU,CAAC,GAAI,IACf,QAAY,CAAC,GAAI,IACjB,IAAQ,CAAC,GAAI,IACb,OAAW,CAAC,GAAI,KAIlBvsD,EAAQitD,OAAS,CACf,QAAW,OACX,OAAU,SACV,QAAW,SACX,UAAa,OACb,KAAQ,OACR,OAAU,QACV,KAAQ,UAER,OAAU,OAkRZ18E,EAAQgR,QAAUA,EAKlBhR,EAAQi8E,UAAYA,EAKpBj8E,EAAQm7E,OAASA,EAKjBn7E,EAAQu+E,kBAHR,SAA2Bn0D,GACzB,OAAc,MAAPA,GAOTpqB,EAAQ+8E,SAAWA,EAKnB/8E,EAAQ4f,SAAWA,EAKnB5f,EAAQw+E,SAHR,SAAkBp0D,GAChB,MAAsB,iBAARA,GAOhBpqB,EAAQo8E,YAAcA,EAKtBp8E,EAAQs9E,SAAWA,EAKnBt9E,EAAQ8f,SAAWA,EAKnB9f,EAAQu9E,OAASA,EAMjBv9E,EAAQo9E,QAAUA,EAKlBp9E,EAAQ48E,WAAaA,EAUrB58E,EAAQy+E,YARR,SAAqBr0D,GACnB,OAAe,OAARA,GACe,kBAARA,GACQ,iBAARA,GACQ,iBAARA,GACQ,iBAARA,QACQ,IAARA,GAIhBpqB,EAAQ4qB,SAAW,EAAQ,KAY3B,IAAI8zD,EAAS,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACxD,MAAO,MAAO,OAG5B,SAASC,IACP,IAAI59E,EAAI,IAAIgW,KACR6nE,EAAO,CAACjzE,EAAI5K,EAAE89E,YACNlzE,EAAI5K,EAAE+9E,cACNnzE,EAAI5K,EAAEg+E,eAAel1D,KAAK,KACtC,MAAO,CAAC9oB,EAAEi+E,UAAWN,EAAO39E,EAAEk+E,YAAaL,GAAM/0D,KAAK,KAqCxD,SAASvnB,EAAe2d,EAAKC,GAC3B,OAAO/e,OAAOkB,UAAUC,eAAe1B,KAAKqf,EAAKC,GAjCnDlgB,EAAQoV,IAAM,WACZI,QAAQJ,IAAI,UAAWupE,IAAa3+E,EAAQ6qC,OAAO1c,MAAMnuB,EAASuvB,aAiBpEvvB,EAAQk/E,SAAW,EAAQ,KAE3Bl/E,EAAQm8E,QAAU,SAASgD,EAAQvhE,GAEjC,IAAKA,IAAQkC,EAASlC,GAAM,OAAOuhE,EAInC,IAFA,IAAI/gE,EAAOjd,OAAOid,KAAKR,GACnBvd,EAAI+d,EAAK1b,OACNrC,KACL8+E,EAAO/gE,EAAK/d,IAAMud,EAAIQ,EAAK/d,IAE7B,OAAO8+E,GAOT,IAAIC,EAA6C,oBAAX59E,OAAyBA,OAAO,8BAA2BgC,EA0DjG,SAAS67E,EAAsBzmE,EAAQs1C,GAKrC,IAAKt1C,EAAQ,CACX,IAAI0mE,EAAY,IAAIz4E,MAAM,2CAC1By4E,EAAU1mE,OAASA,EACnBA,EAAS0mE,EAEX,OAAOpxB,EAAGt1C,GAlEZ5Y,EAAQy4E,UAAY,SAAmB8G,GACrC,GAAwB,mBAAbA,EACT,MAAM,IAAIvzE,UAAU,oDAEtB,GAAIozE,GAA4BG,EAASH,GAA2B,CAClE,IAAI/4C,EACJ,GAAkB,mBADdA,EAAKk5C,EAASH,IAEhB,MAAM,IAAIpzE,UAAU,iEAKtB,OAHA7K,OAAOC,eAAeilC,EAAI+4C,EAA0B,CAClD19E,MAAO2kC,EAAIhlC,YAAY,EAAOm+E,UAAU,EAAO1wD,cAAc,IAExDuX,EAGT,SAASA,IAQP,IAPA,IAAIo5C,EAAgBC,EAChBC,EAAU,IAAIlnE,SAAQ,SAAUC,EAASC,GAC3C8mE,EAAiB/mE,EACjBgnE,EAAgB/mE,KAGd0nB,EAAO,GACFhgC,EAAI,EAAGA,EAAIkvB,UAAU7sB,OAAQrC,IACpCggC,EAAKzzB,KAAK2iB,UAAUlvB,IAEtBggC,EAAKzzB,MAAK,SAAUyO,EAAK3Z,GACnB2Z,EACFqkE,EAAcrkE,GAEdokE,EAAe/9E,MAInB,IACE69E,EAASpxD,MAAMtd,KAAMwvB,GACrB,MAAOhlB,GACPqkE,EAAcrkE,GAGhB,OAAOskE,EAQT,OALAx+E,OAAOy+E,eAAev5C,EAAIllC,OAAO0+E,eAAeN,IAE5CH,GAA0Bj+E,OAAOC,eAAeilC,EAAI+4C,EAA0B,CAChF19E,MAAO2kC,EAAIhlC,YAAY,EAAOm+E,UAAU,EAAO1wD,cAAc,IAExD3tB,OAAO2+E,iBACZz5C,EACAw0C,EAA0B0E,KAI9Bv/E,EAAQy4E,UAAUsH,OAASX,EAiD3Bp/E,EAAQggF,YAlCR,SAAqBT,GACnB,GAAwB,mBAAbA,EACT,MAAM,IAAIvzE,UAAU,oDAMtB,SAASi0E,IAEP,IADA,IAAI5/C,EAAO,GACFhgC,EAAI,EAAGA,EAAIkvB,UAAU7sB,OAAQrC,IACpCggC,EAAKzzB,KAAK2iB,UAAUlvB,IAGtB,IAAI6/E,EAAU7/C,EAAKh9B,MACnB,GAAuB,mBAAZ68E,EACT,MAAM,IAAIl0E,UAAU,8CAEtB,IAAImT,EAAOtO,KACPq9C,EAAK,WACP,OAAOgyB,EAAQ/xD,MAAMhP,EAAMoQ,YAI7BgwD,EAASpxD,MAAMtd,KAAMwvB,GAClB7nB,MAAK,SAASyX,GAAOxQ,EAAQ2gB,SAAS8tB,EAAI,KAAMj+B,MAC3C,SAASkwD,GAAO1gE,EAAQ2gB,SAASi/C,EAAuBc,EAAKjyB,MAMvE,OAHA/sD,OAAOy+E,eAAeK,EAAe9+E,OAAO0+E,eAAeN,IAC3Dp+E,OAAO2+E,iBAAiBG,EACApF,EAA0B0E,IAC3CU,K,gCC5rBThgF,EAAOD,QAAU,SAAkBoqB,GACjC,OAAOA,GAAsB,iBAARA,GACI,mBAAbA,EAAIU,MACS,mBAAbV,EAAItd,MACc,mBAAlBsd,EAAI8G,Y,cCJW,mBAAlB/vB,OAAOY,OAEhB9B,EAAOD,QAAU,SAAkBogF,EAAMC,GACvCD,EAAKE,OAASD,EACdD,EAAK/9E,UAAYlB,OAAOY,OAAOs+E,EAAUh+E,UAAW,CAClD4O,YAAa,CACXvP,MAAO0+E,EACP/+E,YAAY,EACZm+E,UAAU,EACV1wD,cAAc,MAMpB7uB,EAAOD,QAAU,SAAkBogF,EAAMC,GACvCD,EAAKE,OAASD,EACd,IAAIE,EAAW,aACfA,EAASl+E,UAAYg+E,EAAUh+E,UAC/B+9E,EAAK/9E,UAAY,IAAIk+E,EACrBH,EAAK/9E,UAAU4O,YAAcmvE,I,+xDCwDjC,IAAMI,EAAsC,IAAI7pB,IA4BhD,SAAe8pB,EAAevI,G,gHAGW,KAFjCwI,EAAa94E,KAAK45B,SAEF02C,IAiBxB,SAAmBj4D,GAEjB,IAAM/e,EAAI+e,EAGV,GACI,eAAgB/e,GAA6B,mBAAjBA,EAAEq6B,YAC9B,yBAA0Br6B,GAAuC,mBAA3BA,EAAE8wC,sBACxC,YAAa9wC,GAA0B,mBAAdA,EAAEgxC,QAE7B,OAAO,EAGT,OAAO,EA9B+CyuC,CAAUD,EAAWxI,IACpEwI,EAAWxI,GAAa0I,SAAzB,OACIp/C,EAAUk/C,EAAWxI,GAEP,iBADhB/9D,EAAOqnB,EAAQjG,eACa,SAAUphB,EACjC,GAAMA,GADX,OAJJ,M,OAKEA,EAAO,S,iBAET,GAAIA,EAEF,OADAqmE,EAAch7E,IAAI0yE,EAAa12C,GACxB,CAAP,EAAOA,G,iBAKb,MAAO,CAAP,OAAOh+B,UAvCT,mBAAsB60E,EAAQwI,G,uHACvBA,EAAD,MACK,CAAP,EAAOxI,EAAQ,CAAC,QAAS,OAAQ,S,OAE3ByI,EAAwB,iBAATD,EAAoB,CAACA,GAAQA,E,wCAExB,IAAAC,GAAK,W,sCAApB5I,EAAW,SACdtnE,EAAQ4vE,EAAcl/E,IAAI42E,IAEvB,CAAP,EAAOtnE,GAGO,GAAM6vE,EAAevI,K,OACrC,GADM12C,EAAU,SAEd,MAAO,CAAP,EAAOA,G,kMAKb,MAAM,IAAI36B,MAAM,wC,ksEChGlB,WAIA,EACE,SAAmB7B,EAAqBgY,GAArB,KAAAhY,KAAqB,KAAAgY,QAG1C,aACE,WAAoBwJ,EAAcs/C,EAAyBzzB,GAAvC,KAAA7rB,QAAuC,KAAA6rB,WACzDxhC,KAAK0qB,WAAWuqC,GAmJpB,OAhJE,YAAAvqC,WAAA,SAAWuqC,GAAX,WACEj1D,KAAKwhC,SAASj6B,MAAM,UAAW,4BAA4B,WACzD,IAAMqF,EAAa,EAAK+I,MAAMo0D,WAC9B,GAAIn9D,EAAW/a,SAAWojE,EAAIpjE,OAC5B,MAAM,IAAImE,MAAM,2CAGlB,EAAKsyE,KAAOrT,EAAIl9D,KAAI,SAAC5D,EAAI3E,GAAM,WAAI0gF,EAAS/7E,EAAIyY,EAAWpd,OAC3D,EAAK4W,QAGL,EAAK+pE,SAAW,GAChB,EAAK7H,KAAKhrE,SAAQ,SAACnJ,EAAI3E,G,QACjB4gF,GAAW,E,IACf,IAAoB,QAAAj8E,EAAGgY,KAAKva,QAAM,8BAAE,CAA/B,IAAMoM,EAAK,QACd,IACK,EAAKqyE,QAAQryE,KACsC,IAAjD,EAAK2X,MAAMuzD,kBAAkBptE,QAAQkC,GAC1C,CACAoyE,GAAW,EACX,Q,iGAGAA,GACF,EAAKD,SAASp0E,KAAKvM,UAM3B,YAAA4W,MAAA,WACEpG,KAAKqwE,QAAUrwE,KAAK2V,MAAMuwC,YAAYnuD,KAAI,SAAAvI,GAAK,OAAAA,EAAEyoB,WAGnD,YAAAwwD,QAAA,SAAQhB,EAAgC6I,GAAxC,WACE,OAAOtwE,KAAKwhC,SAASj6B,MAAM,UAAW,yBAAyB,gD,+EAS7D,GAPAvH,KAAKoG,QAGC8Q,EAAmBuwD,EAAenmC,yBAGlCivC,EAAcvwE,KAAK2V,MAAMuzD,kBAC3BoH,EAAYz+E,SAAW0+E,EAAY1+E,OACrC,MAAM,IAAImE,MAAM,kFACZs6E,EAAYz+E,OAAM,cAAc0+E,EAAY1+E,QAGlDy+E,EAAYhzE,SAAQ,SAACU,EAAOxO,GAC1B,IAAMmE,EAAQ48E,EAAY/gF,GAC1B,EAAK6gF,QAAQ18E,GAASqK,KAIlBwyE,EAAqBxwE,KAAKmwE,SAAS92E,MAAM,GAGzCo3E,EAAczwE,KAAK2V,MAAMuwC,YACzBt5C,EAAa5M,KAAK2V,MAAMo0D,WAE1B2G,EAAO,E,+EAOT,GALMC,EAAcH,EAASE,KACvBE,EAAS,EAAKtI,KAAKqI,IAIa,KADhCE,EAAYD,EAAOzkE,KAAKva,OAAOmG,KAAI,SAAAvI,GAAK,SAAK6gF,QAAQ7gF,OAC7CsM,aAAQnJ,GACpB,MAAM,IAAIqD,MAAM,kCAAkC46E,EAAOzkE,MAUxC,OANbo8D,EAAesI,EACrB,EAAAvqE,OAAOxB,QACH,WACA,aAAa8rE,EAAOzkE,KAAKhc,KAAI,KACzBo4E,EAAaxwE,KAAI,SAACjH,EAAGtB,GAAM,UAAIohF,EAAOzkE,KAAKva,OAAOpC,GAAE,MAAMsB,EAAE4D,KAAI,IAAI5D,EAAEiB,KAAKinB,KAAK,KAAI,OAAKA,KAAK,MAAK,KAExF,GAAM,EAAKwoB,SAASj6B,MAAM,OAAQqpE,EAAOzkE,KAAKhc,MAAM,gD,iCAErE,KADMgE,EAAKy8E,EAAOz8E,IACV82B,YAAYs9C,GAClB,MAAM,IAAIvyE,MAAM,gCAAgC46E,EAAOzkE,KAAKhc,MAK9D,MAAO,CAAP,EAFegE,EAAG8iB,IAAIC,EAAkBqxD,c,OAM1C,IAZMuI,EAAa,UAYJj/E,SAAW++E,EAAOzkE,KAAKsgD,QAAQ56D,OAC5C,MAAM,IAAImE,MAAM,uD,OAIlB86E,EAAWxzE,SAAQ,SAAC2G,EAAQzU,GAC1B,IAAM4F,EAAIw7E,EAAOzkE,KAAKsgD,QAAQj9D,GAC9B,GAAI,EAAK6gF,QAAQj7E,GACf,MAAM,IAAIY,MAAM,WAAWZ,EAAC,2BAA2Bw7E,EAAOzkE,KAAKhc,MAErE,EAAKkgF,QAAQj7E,GAAK6O,KAId8sE,EAAkB,IAAIvkE,IAC5BskE,EAAWxzE,SAAQ,SAAC2G,EAAQzU,G,YACpB4F,EAAIw7E,EAAOzkE,KAAKsgD,QAAQj9D,G,IAC9B,IAAyC,kBAAAihF,EAAYr7E,GAAGiqC,KAAE,8BAAE,CAAvD,IAAM2xC,EAA0B,QAC7BC,EAAwBrkE,EAAWokE,GACrCZ,GAAW,E,IACf,IAAgB,kBAAAa,EAAsBr/E,SAAM,8BAAE,CAAzC,IAAMqI,EAAC,QACV,IAAK,EAAKo2E,QAAQp2E,GAAI,CACpBm2E,GAAW,EACX,Q,iGAGAA,GACFW,EAAgBhkE,IAAIikE,I,qGAI1BR,EAASz0E,KAAI,MAAby0E,EAAQ,EAASO,I,wCA5DZL,EAAOF,EAAS3+E,O,QAAM,M,oCA2E7B,OAZMoS,EAAmB,GACzBjE,KAAK2V,MAAMu7D,mBAAmB5zE,SAAQ,SAAC6zE,EAAa3hF,GAClD,IAAM4hF,EAAY,EAAKf,QAAQc,GAC/B,QAAkBx+E,IAAdy+E,EACF,MAAM,IAAIp7E,MAAM,oBAAoBm7E,EAAW,yBAGjDC,EAAUtzE,KACVmG,EAAOlI,KAAKq1E,MAEd,EAAA9qE,OAAOxB,QAAQ,WAAY,iCAC3BoS,EAAiBmqB,UACV,CAAP,EAAOp9B,cAOb,EArJA,GAAa,EAAAokE,iB,6FCVb,WAEA,SAEA,OAEA,aAEE,cAyBF,OAvBE,YAAAH,KAAA,SAAK5nE,EAAa0nE,GAChB,IAAMqJ,EAAa,EAAAt6E,KAAKqe,WAAWzB,OAAOrT,GAE1C,GADkB,EAAA5H,SAASD,aAAa44E,EAAW97D,WACnC,EACd,MAAM,IAAIvf,MAAM,8CAGlBgK,KAAKsxE,QAAUD,EAAWh8D,YAAYtd,KAAI,SAAAvI,GACxC,MAAO,CAAC2lB,OAAQ3lB,EAAE2lB,OAAkBvR,QAAS,EAAAlL,SAASD,aAAajJ,EAAEoU,aAGvE5D,KAAKuxE,OAAS,EAAAC,MAAMrwE,KAAKkwE,EAAW17D,MAAQqyD,IAI9C,sBAAI,oBAAK,C,IAAT,WACE,OAAOhoE,KAAKuxE,Q,gCAId,sBAAI,qBAAM,C,IAAV,WACE,OAAOvxE,KAAKsxE,S,gCAEhB,EA3BA,GAAa,EAAA3J,S,kaCJb,aACA,OACA,OAiEa,EAAA6J,MAAQ,CAInBrwE,KAAM,SAACswE,EAA8Bx7D,GAAoC,WAAIy7D,EAAUD,EAAYx7D,KAGrG,iBACE,WAAYC,GACVlW,KAAK2xE,WAAQh/E,EACbqN,KAAK4xE,IAAM,GACX5xE,KAAKiY,YAAStlB,EACdqN,KAAKtL,UAAO/B,EAERujB,IACFlW,KAAKtL,KAAO,EAAA2D,UAAUH,yBAAyBge,EAAUxhB,KAAM0D,aAcrE,OATE,sBAAI,mBAAI,C,IAAR,WACE,OAAO4H,KAAK2xE,O,gCAGd,sBAAI,iBAAE,C,IAAN,WACE,OAAO3xE,KAAK4xE,K,gCAIhB,EAtBA,GAwBA,EACE,SAAYC,GACV7xE,KAAK7P,KAAO0hF,EAAW1hF,KACvB6P,KAAKkV,OAAS28D,EAAW38D,OACzBlV,KAAKpO,OAAS,GACdoO,KAAKysD,QAAU,GACfzsD,KAAK2qB,WAAa,IAAI,EAAAmnD,UAAUD,EAAWhuE,WAC3C7D,KAAK+xE,aAAc,GAWvB,aAWE,WAAYp8D,EAAyBqyD,GACnC,IAAKryD,EACH,MAAM,IAAIxa,UAAU,kBAItB6E,KAAKgyE,WAAWr8D,GAGhB3V,KAAKioE,eAAeD,GAGpBhoE,KAAKiyE,iBAuZT,OApZE,YAAA/I,gBAAA,WACE,OAAOlpE,KAAKkyE,kBAGd,YAAArJ,cAAA,WACE,OAAO7oE,KAAKmyE,gBAGd,YAAAjB,iBAAA,WACE,OAAOlxE,KAAKoyE,mBAGd,YAAAtI,eAAA,WACE,OAAO9pE,KAAKqyE,iBAGd,YAAAnsB,UAAA,WACE,OAAOlmD,KAAKsyE,UAGd,YAAAvI,SAAA,WACE,OAAO/pE,KAAKuyE,QAGN,YAAAP,WAAR,SAAmBr8D,G,4BACX68D,EAAc,IAAI1sB,IACxB9lD,KAAKsyE,SAAW,GAEhBtyE,KAAKkyE,iBAAmB,GACxBlyE,KAAKmyE,eAAiB,GAEtBnyE,KAAKoyE,kBAAoB,GACzBpyE,KAAKqyE,gBAAkB,GAEvBryE,KAAKuyE,OAAS,GAEd,IAAME,EAAe,IAAI3sB,IAGzB,IAAKnwC,EAAM3X,MACT,MAAM,IAAIhI,MAAM,uCAElB,IAAM08E,EAAkB,G,IACxB,IAAgB,QAAA/8D,EAAM3X,OAAK,8BAAE,CAAxB,IAAMxO,EAAC,QACV,GAAIgjF,EAAY1lE,IAAItd,EAAEW,MACpB,MAAM,IAAI6F,MAAM,0BAA0BxG,EAAEW,MAE9C,IAAMwiF,EAAe3yE,KAAKsyE,SAASv2E,KAAK,IAAI62E,EAAMpjF,IAAM,EACxDgjF,EAAY79E,IAAInF,EAAEW,KAAOwiF,GACzBD,EAAgB32E,KAAKvM,EAAEW,O,iGAIzB,IAAKwlB,EAAMM,YACT,MAAM,IAAIjgB,MAAM,6C,IAElB,IAAgB,QAAA2f,EAAMM,aAAW,8BAAE,CAAxBzmB,EAAC,QAAP,IACCmE,EAAQ6+E,EAAY/hF,IAAIjB,EAAEW,MAC9B,QAAcwC,IAAVgB,EAAqB,CACvB,IAAM9C,EAAQ,IAAI+hF,EAClB/hF,EAAM6D,KAAO,CACXa,MAAO,CAACxD,KAAM,EAAAsG,UAAUP,oBAAoBtI,EAAEuC,OAC9CqG,WAAY,EAAAC,UAAUxB,wBAAwBrH,EAAEuR,WAElDpN,EAAQqM,KAAKsyE,SAASv2E,KAAKlL,GAAS,EACpC2hF,EAAY79E,IAAInF,EAAEW,KAAOwD,GAE3BqM,KAAKsyE,SAAS3+E,GAAOg+E,OAAS,EAC9B3xE,KAAKsyE,SAAS3+E,GAAOskB,OAAS,EAAAxjB,OAAOoM,UAAUrR,I,iGAIjD,IAASA,EAAI,EAAGA,EAAIwQ,KAAKsyE,SAASzgF,OAAQrC,IACnCwQ,KAAKsyE,SAAS9iF,GAAGyoB,SACpBjY,KAAKkyE,iBAAiBn2E,KAAKvM,GAC3BwQ,KAAKmyE,eAAep2E,KAAK22E,EAAgBljF,KAK7C,IAAKmmB,EAAM1R,OACT,MAAM,IAAIjO,MAAM,wC,IAElB,IAAgB,QAAA2f,EAAM1R,QAAM,8BAAE,CAAnBzU,EAAC,QACV,GAAIgjF,EAAY1lE,IAAItd,EAAEW,MACpB,MAAM,IAAI6F,MAAM,2BAA2BxG,EAAEW,MAEzCwiF,EAAe3yE,KAAKsyE,SAASv2E,KAAK,IAAI62E,EAAMpjF,IAAM,EACxDgjF,EAAY79E,IAAInF,EAAEW,KAAOwiF,GACzB3yE,KAAKoyE,kBAAkBr2E,KAAK42E,GAC5B3yE,KAAKqyE,gBAAgBt2E,KAAKvM,EAAEW,O,iGAI9B,IAAKwlB,EAAMxJ,KACT,MAAM,IAAInW,MAAM,sC,IAElB,IAAwB,QAAA2f,EAAMxJ,MAAI,8BAAE,CAClC,KADS0mE,EAAS,SACH1iF,KAEb,IAAK,IAAI2iF,EAAO,GAAIA,IAAQ,CAC1B,IAAM,EAAO,WAAWD,EAAU39D,OAAM,IAAI49D,EAC5C,IAAKL,EAAa3lE,IAAI,GAAO,CAC3B+lE,EAAU1iF,KAAO,EACjB,OAKN,GAAIsiF,EAAa3lE,IAAI+lE,EAAU1iF,MAC7B,MAAM,IAAI6F,MAAM,yBAAyB68E,EAAU1iF,MAE/CwiF,EAAe3yE,KAAKuyE,OAAOx2E,KAAK,IAAIg3E,EAAKF,IAAc,EAC7DJ,EAAa99E,IAAIk+E,EAAU1iF,KAAMwiF,I,iGAInC,IAASnjF,EAAI,EAAGA,EAAIwQ,KAAKuyE,OAAO1gF,OAAQrC,IAAK,CAC3C,IAAM2c,EAAOnM,KAAKuyE,OAAO/iF,GAEzB,KADMqjF,EAAYl9D,EAAMxJ,KAAK3c,IACdyU,OACb,MAAM,IAAIjO,MAAM,4BAA4B68E,EAAU1iF,M,IAExD,IAAqB,kBAAA0iF,EAAU5uE,SAAM,8BAAE,CAAlC,IAAMA,EAAM,QAQf,QANyB,KADrB+uE,EAAYR,EAAY/hF,IAAIwT,MAE9B+uE,EAAYhzE,KAAKsyE,SAASv2E,KAAK,IAAI62E,GAAW,EAC9CJ,EAAY79E,IAAIsP,EAAQ+uE,IAE1B7mE,EAAKsgD,QAAQ1wD,KAAKi3E,QAEqBrgF,IAAnCqN,KAAKsyE,SAASU,GAAWrB,MAC3B,MAAM,IAAI37E,MAAM,4CAA4Cg9E,GAM9D,GAJAhzE,KAAKsyE,SAASU,GAAWrB,MAAQniF,EAIR,aAArBqjF,EAAU39D,OAAuB,CACnC,IAAK29D,EAAUhvE,WAA4C,IAA/BgvE,EAAUhvE,UAAUhS,SAAiBghF,EAAUhvE,UAAU,GAAG/S,EACtF,MAAM,IAAIkF,MAAM,uFAElB,IAAK68E,EAAU5uE,QAAsC,IAA5B4uE,EAAU5uE,OAAOpS,OACxC,MAAM,IAAImE,MAAM,4EAElBmW,EAAKsgD,QAAQj6D,MACb2Z,EAAK4lE,aAAc,EAEnB/xE,KAAKsyE,SAASU,GAAWrB,OAAS,EAClC3xE,KAAKsyE,SAASU,GAAW/6D,OAAS,EAAAxjB,OAAOoM,UAAUgyE,EAAUhvE,UAAU,GAAG/S,K,kGAMhF,IAAStB,EAAI,EAAGA,EAAIwQ,KAAKuyE,OAAO1gF,OAAQrC,IAAK,CAC3C,IACMqjF,EADA1mE,EAAOnM,KAAKuyE,OAAO/iF,GAGzB,KAFMqjF,EAAYl9D,EAAMxJ,KAAK3c,IAEdwO,MACb,MAAM,IAAIhI,MAAM,2BAA2B68E,EAAU1iF,M,IAEvD,IAAoB,kBAAA0iF,EAAU70E,QAAK,8BAAE,CAAhC,IACGg1E,EADGh1E,EAAK,QAEd,QAAyB,KADnBg1E,EAAYR,EAAY/hF,IAAIuN,IAEhC,MAAM,IAAIhI,MAAM,uBAAuBgI,EAAK,eAAe60E,EAAU1iF,MAEvEgc,EAAKva,OAAOmK,KAAKi3E,GAEjBhzE,KAAKsyE,SAASU,GAAWpB,IAAI71E,KAAKvM,I,kGAItC,OAAO,GAGD,YAAAyiF,eAAR,sBAEQgB,EAAwB,IAAIzmE,IAClCxM,KAAKkyE,iBAAiB50E,SAAQ,SAAA9N,GACf,EAAK8iF,SAAS9iF,GACtBoiF,IAAIt0E,SAAQ,SAAAlI,GACf69E,EAASlmE,IAAI3X,SAQjB,IAHA,IAAM89E,EAAa3/E,MAAM4N,KAAK8xE,GACxBE,EAAa,IAAI5/E,MAAcyM,KAAKuyE,OAAO1gF,QAAQoK,KAAK,S,aAG5D,IAAMm3E,EAAYF,EAAW1gF,MAEC,SAA1B2gF,EAAWC,GACbD,EAAWC,GAAa,SAGxBF,EAAWn3E,KAAKq3E,GAChBD,EAAWC,GAAa,OAExB,EAAKb,OAAOa,GAAW3mB,QAAQnvD,SAAQ,SAAC+1E,GACtC,IAAMv1E,EAAO,EAAKw0E,SAASe,GAC3B,QAA2B,IAAhBv1E,EAAKma,OACd,MAAM,IAAIjiB,MAAM,0CAElB,GAAI8H,EAAK6zE,QAAUyB,EACjB,MAAM,IAAIp9E,MAAM,iFAElB8H,EAAK8zE,IAAIt0E,SAAQ,SAACg2E,GAEhB,GAAwC,SAApCH,EAAWG,GACb,MAAM,IAAIt9E,MAAM,yBAG2B,UAApCm9E,EAAWG,IAClBJ,EAAWn3E,KAAKu3E,W,OAzBnBJ,EAAWrhF,OAAS,G,KAiCrB,YAAAo2E,eAAR,SAAuBD,GAErBhoE,KAAKuzE,yBACLvzE,KAAKwzE,wBAGDxL,GACFA,EAAiBC,eAAejoE,MAIlCA,KAAKyzE,iBASP,YAAAA,cAAA,WAGE,IAHF,I,EAAA,OACMx9E,EAAS,E,WAEJzG,GACP,IAAK,EAAK+iF,OAAO/iF,GAAGuiF,Y,OAElB97E,IAEA,EAAKs8E,OAAO/iF,GAAGi9D,QAAQnvD,SAAQ,SAAAC,GAC7B,EAAK+0E,SAAS/0E,GAAKo0E,OAAS,KAE9B,EAAKY,OAAOhgF,OAAO/C,EAAG,GACtBA,I,EATKA,EAAC,WAYJyG,EAAS,IAEX,EAAKs8E,OAAO/iF,GAAGoC,OAAO0L,SAAQ,SAAAzM,GAC5B,IAAM0M,EAAM,EAAK+0E,SAASzhF,GAAO+gF,IAAI91E,QAAQtM,EAAIyG,IACpC,IAATsH,IACF,EAAK+0E,SAASzhF,GAAO+gF,IAAIr0E,GAAO/N,MAGpC,EAAK+iF,OAAO/iF,GAAGi9D,QAAQnvD,SAAQ,SAAAzM,GACzB,EAAKyhF,SAASzhF,GAAO8gF,OAAS,EAAKW,SAASzhF,GAAO8gF,QAAWniF,EAAIyG,IACpE,EAAKq8E,SAASzhF,GAAO8gF,MAASniF,O,EAtB7BA,G,OAAAA,EAAI,EAAGA,EAAIwQ,KAAKuyE,OAAO1gF,OAAQrC,I,EAA/BA,KAAI,EA2BbyG,EAAS,E,iBAEAzG,GAEP,IAA+B,IAA3B,EAAK8iF,SAAS9iF,GAAG2R,OAA+D,IAAhD,EAAKixE,kBAAkBt2E,QAAQtM,EAAIyG,G,OACrEA,IACA,EAAKq8E,SAAS//E,OAAO/C,EAAG,GACxBA,I,EALKA,EAAC,WAQR,GAAIyG,EAAS,EAAG,CACd,IAAI,GAAO,OAGmBtD,IAA1B,EAAK2/E,SAAS9iF,GAAG2R,OAAiD,IAA3B,EAAKmxE,SAAS9iF,GAAG2R,MAE7C,KADb,EAAM,EAAKoxE,OAAO,EAAKD,SAAS9iF,GAAG2R,MAAMsrD,QAAQ3wD,QAAQtM,EAAIyG,MAE3D,EAAKs8E,OAAO,EAAKD,SAAS9iF,GAAG2R,MAAMsrD,QAAQ,GAAOj9D,IAKvC,KADb,EAAM,EAAK0iF,iBAAiBp2E,QAAQtM,EAAIyG,MAEtC,EAAKi8E,iBAAiB,GAAO1iF,GAKjC,EAAK8iF,SAAS9iF,GAAG6vC,GAAG/hC,SAAQ,SAAA6O,IAEb,KADb,EAAM,EAAKomE,OAAOpmE,GAAMva,OAAOkK,QAAQtM,EAAIyG,MAEzC,EAAKs8E,OAAOpmE,GAAMva,OAAO,GAAOpC,MAGD,IAA/B,EAAK8iF,SAAS9iF,GAAG6vC,GAAGxtC,SAGT,KADb,EAAM,EAAKugF,kBAAkBt2E,QAAQtM,EAAIyG,MAEvC,EAAKm8E,kBAAkB,GAAO5iF,G,EApC7BA,G,OAAT,IAASA,EAAI,EAAGA,EAAIwQ,KAAKsyE,SAASzgF,OAAQrC,I,EAAjCA,KAAI,GA+CP,YAAAkkF,WAAR,SAAmBN,G,QACXjnE,EAAOnM,KAAKuyE,OAAOa,GACzB,GAAIjnE,EAAKva,OAAOC,OAAS,EACvB,MAAM,IAAImE,MAAM,yDAElB,GAAImW,EAAKsgD,QAAQ56D,OAAS,EACxB,IAAK,IAAIrC,EAAI,EAAGA,EAAI2c,EAAKsgD,QAAQ56D,OAAQrC,IACvC,GAAIwQ,KAAKsyE,SAASnmE,EAAKsgD,QAAQj9D,IAAI6vC,GAAGxtC,OAAS,EAC7C,MAAM,IAAImE,MAAM,uFAMtBmW,EAAK4lE,aAAc,EACnB,IAAM4B,EAAkBxnE,EAAKva,OAAO,GAC9BgiF,EAAmBznE,EAAKsgD,QAAQ,GAChConB,EAAuB7zE,KAAKsyE,SAASsB,GAAkBv0C,GAGvDy0C,EAAW9zE,KAAKsyE,SAASqB,GAAiBt0C,GAAGvjC,QAAQs3E,GAE3D,IAAkB,IAAdU,EACF,MAAM,IAAI99E,MAAM,yEAElBgK,KAAKsyE,SAASqB,GAAiBt0C,GAAG9sC,OAAOuhF,EAAU,GAGnD9zE,KAAKsyE,SAASsB,GAAkBhC,IAAM,GAGtC,IAAMj+E,EAAQqM,KAAKoyE,kBAAkBt2E,QAAQ83E,GAM7C,IALe,IAAXjgF,IACFqM,KAAKoyE,kBAAkBz+E,GAASggF,GAI9BE,GAAwBA,EAAqBhiF,OAAS,E,IACxD,IAAwB,QAAAgiF,GAAoB,8BAAE,CAAzC,IAAM,EAAS,QACZE,EAAe/zE,KAAKuyE,OAAO,GAAW3gF,OAAOkK,QAAQ83E,GAE3D,IAAsB,IAAlBG,EACF,MAAM,IAAI/9E,MAAM,4EAElBgK,KAAKuyE,OAAO,GAAW3gF,OAAOmiF,GAAgBJ,EAC9C3zE,KAAKsyE,SAASqB,GAAiBt0C,GAAGtjC,KAAK,I,mGAK7C,YAAAy3E,sBAAA,W,QACMJ,EAAY,E,IAChB,IAAmB,QAAApzE,KAAKuyE,QAAM,8BAAE,CAA3B,IAAMpmE,EAAI,QAEb,GAAoB,YAAhBA,EAAK+I,OAAsB,CAE7B,GAA2B,IAAvB/I,EAAKva,OAAOC,OACd,MAAM,IAAImE,MAAM,iDAElB,GAA4B,IAAxBmW,EAAKsgD,QAAQ56D,QAAwC,IAAxBsa,EAAKsgD,QAAQ56D,OAC5C,MAAM,IAAImE,MAAM,wDAGlB,GAA4B,IAAxBmW,EAAKsgD,QAAQ56D,QAA8D,IAA9CmO,KAAKsyE,SAASnmE,EAAKsgD,QAAQ,IAAImlB,IAAI//E,OAClE,MAAM,IAAImE,MAAM,yEAElBgK,KAAK0zE,WAAWN,GAElBA,K,mGAIJ,YAAAG,uBAAA,W,QACMH,EAAY,E,IAChB,IAAmB,QAAApzE,KAAKuyE,QAAM,8BAAE,CAEV,aAFP,QAEJr9D,QACPlV,KAAK0zE,WAAWN,GAElBA,K,mGAGN,EA9aA,I,mgBCtHA,eACA,OAEA,OACA,OAqBA,aACE,WAAYzoD,G,QAEV,GADA3qB,KAAKg0E,YAAc,IAAIluB,IACnBn7B,QAAiD,C,IACnD,IAAmB,QAAAA,GAAU,8BAAE,CAA1B,IAAMspD,EAAI,QACbj0E,KAAKg0E,YAAYr/E,IAAIs/E,EAAK9jF,KAAO,CAAC2hF,EAAUoC,SAASD,GAAOnC,EAAUqC,QAAQF,M,iGAGhF,GAAIj0E,KAAKg0E,YAAYx/E,KAAOm2B,EAAW94B,OACrC,MAAM,IAAImE,MAAM,+BAkKxB,OA7JE,YAAArB,IAAA,SAAIxD,EAAauD,EAA0B7D,GACzCmP,KAAKg0E,YAAYr/E,IAAIxD,EAAK,CAACN,EAAO6D,KAEpC,YAAAsY,OAAA,SAAO7b,GACL6O,KAAKg0E,YAAYhnE,OAAO7b,IAE1B,YAAA05B,SAAA,SAAS15B,EAAaijF,GACpB,OAAOp0E,KAAKvP,IAAIU,EAAK,QAASijF,IAGhC,YAAAppD,OAAA,SAAO75B,EAAaijF,GAClB,OAAOp0E,KAAKvP,IAAIU,EAAK,MAAOijF,IAG9B,YAAAzoD,UAAA,SAAUx6B,EAAaijF,GACrB,OAAOp0E,KAAKvP,IAAIU,EAAK,SAAUijF,IAGjC,YAAAC,UAAA,SAAUljF,EAAaijF,GACrB,OAAOp0E,KAAKvP,IAAIU,EAAK,SAAUijF,IAGjC,YAAAj8C,UAAA,SAAUhnC,EAAaijF,GACrB,OAAOp0E,KAAKvP,IAAIU,EAAK,SAAUijF,IAGjC,YAAAxoD,QAAA,SAAQz6B,EAAaijF,GACnB,OAAOp0E,KAAKvP,IAAIU,EAAK,OAAQijF,IAG/B,YAAAE,WAAA,SAAWnjF,EAAaijF,GACtB,OAAOp0E,KAAKvP,IAAIU,EAAK,UAAWijF,IAGlC,YAAAG,WAAA,SAAWpjF,EAAaijF,GACtB,OAAOp0E,KAAKvP,IAAIU,EAAK,UAAWijF,IAG1B,YAAA3jF,IAAR,SACIU,EAAauD,EAA0B0/E,GACzC,IAAMI,EAAex0E,KAAKg0E,YAAYvjF,IAAIU,GAC1C,QAAqBwB,IAAjB6hF,EAA4B,CAC9B,QAAqB7hF,IAAjByhF,EACF,OAAOA,EAET,MAAM,IAAIp+E,MAAM,iCAAiC7E,GAEnD,GAAIqjF,EAAa,KAAO9/E,EACtB,MAAM,IAAIsB,MAAM,2BAA2BtB,EAAI,YAAY8/E,EAAa,IAE1E,OAAOA,EAAa,IAGP,EAAAL,QAAf,SAAuBF,GACrB,OAAQA,EAAKv/E,MACX,KAAK,EAAAqC,KAAKyb,eAAeqC,cAAcpd,MACrC,MAAO,QACT,KAAK,EAAAV,KAAKyb,eAAeqC,cAAc4/D,IACrC,MAAO,MACT,KAAK,EAAA19E,KAAKyb,eAAeqC,cAAcld,OACrC,MAAO,SACT,KAAK,EAAAZ,KAAKyb,eAAeqC,cAAc6/D,OACrC,MAAO,SACT,KAAK,EAAA39E,KAAKyb,eAAeqC,cAAc8/D,OACrC,MAAO,SACT,KAAK,EAAA59E,KAAKyb,eAAeqC,cAAc+/D,KACrC,MAAO,OACT,KAAK,EAAA79E,KAAKyb,eAAeqC,cAAcggE,QACrC,MAAO,UACT,KAAK,EAAA99E,KAAKyb,eAAeqC,cAAcigE,QACrC,MAAO,UACT,QACE,MAAM,IAAI9+E,MAAM,wCAAwC,EAAAe,KAAKyb,eAAeqC,cAAco/D,EAAKv/E,SAItF,EAAAw/E,SAAf,SAAwBD,GACtB,GAAIA,EAAKv/E,OAAS,EAAAqC,KAAKyb,eAAeqC,cAAckgE,OAChDd,EAAKv/E,OAAS,EAAAqC,KAAKyb,eAAeqC,cAAcmgE,OAClD,MAAM,IAAIh/E,MAAM,wCAGlB,IAAMnF,EAAQmP,KAAKi1E,gBAAgBhB,GAGnC,GAAIA,EAAKv/E,OAAS,EAAAqC,KAAKyb,eAAeqC,cAAc4/D,KAAO,UAAKz8E,OAAOnH,GACrE,OAAOA,EAAMoH,WAIf,GAAIg8E,EAAKv/E,OAAS,EAAAqC,KAAKyb,eAAeqC,cAAc+/D,KAAM,CAIxD,IAHA,IAAMx5D,EAAOvqB,EACPqkF,EAAwB,IAAI3hF,MAAc6nB,EAAIvpB,QAE3CrC,EAAI,EAAGA,EAAI4rB,EAAIvpB,OAAQrC,IAAK,CACnC,IAAM2lF,EAAY/5D,EAAI5rB,GACtB0lF,EAAY1lF,GAAK,EAAAkJ,SAASD,aAAa08E,GAGzC,OAAOD,EAIT,GAAIjB,EAAKv/E,OAAS,EAAAqC,KAAKyb,eAAeqC,cAAc6/D,OAClD,OAAO,EAAAjgF,OAAOoM,UAAUhQ,GAI1B,GAAIojF,EAAKv/E,OAAS,EAAAqC,KAAKyb,eAAeqC,cAAcigE,QAElD,OADqBjkF,EACDkH,KAAI,SAAAlH,GAAS,SAAA4D,OAAOoM,UAAUhQ,MAIpD,GAAIojF,EAAKv/E,OAAS,EAAAqC,KAAKyb,eAAeqC,cAAcld,OAAQ,CAC1D,IAAMy9E,EAAavkF,EACnB,OAAOqQ,EAAOC,KAAKi0E,EAAWh0E,OAAQg0E,EAAW/zE,WAAY+zE,EAAW9zE,YAAYC,WAItF,OAAI0yE,EAAKv/E,OAAS,EAAAqC,KAAKyb,eAAeqC,cAAcggE,QAC9BhkF,EACDkH,KACf,SAAAq9E,GAAc,OAAAl0E,EAAOC,KAAKi0E,EAAWh0E,OAAQg0E,EAAW/zE,WAAY+zE,EAAW9zE,YAAYC,cAG1F1Q,GAGM,EAAAokF,gBAAf,SAA+BhB,GAC7B,OAAQA,EAAKv/E,MACX,KAAK,EAAAqC,KAAKyb,eAAeqC,cAAcpd,MACrC,OAAOw8E,EAAKjhE,EACd,KAAK,EAAAjc,KAAKyb,eAAeqC,cAAc4/D,IACrC,OAAOR,EAAKzkF,EACd,KAAK,EAAAuH,KAAKyb,eAAeqC,cAAcld,OACrC,OAAOs8E,EAAKtiF,EACd,KAAK,EAAAoF,KAAKyb,eAAeqC,cAAc6/D,OACrC,OAAOT,EAAKnjF,EACd,KAAK,EAAAiG,KAAKyb,eAAeqC,cAAckgE,MACrC,OAAOd,EAAKtiE,EACd,KAAK,EAAA5a,KAAKyb,eAAeqC,cAAc8/D,OACrC,OAAOV,EAAKxhE,OACd,KAAK,EAAA1b,KAAKyb,eAAeqC,cAAc+/D,KACrC,OAAOX,EAAKvhE,KACd,KAAK,EAAA3b,KAAKyb,eAAeqC,cAAcggE,QACrC,OAAOZ,EAAKthE,QACd,KAAK,EAAA5b,KAAKyb,eAAeqC,cAAcigE,QACrC,OAAOb,EAAKrhE,QACd,KAAK,EAAA7b,KAAKyb,eAAeqC,cAAcmgE,OACrC,OAAOf,EAAKphE,OACd,QACE,MAAM,IAAI7c,MAAM,+BAA+B,EAAAe,KAAKyb,eAAeqC,cAAco/D,EAAKv/E,SAK9F,EA3KA,GAAa,EAAAo9E,c","file":"onnx.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 26);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport Long from 'long';\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {Graph} from './graph';\r\nimport {Tensor} from './tensor';\r\n\r\n// check the inputs shape before running an OP.\r\n// return true when the inputs pass the check\r\n// return false when the inputs do not fit the requirement\r\n// throw exception when fatal error or not implemented\r\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\r\n  if (!inputs || inputs.length !== expectedDimensions.length) {\r\n    return false;\r\n  }\r\n  for (let i = 0; i < inputs.length; i++) {\r\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport class MatMulUtil {\r\n  /**\r\n   * Fix the input shapes for MatMul operation if they need fixing\r\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\r\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\r\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\r\n   */\r\n  static preprocessInputShapes(dimsA: ReadonlyArray<number>, dimsB: ReadonlyArray<number>):\r\n      [ReadonlyArray<number>, ReadonlyArray<number>] {\r\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\r\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\r\n    // removed.\r\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\r\n\r\n    // If the second argument is 1-D, it is promoted to a matrix by appending\r\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\r\n    // removed.\r\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\r\n\r\n    return [a, b];\r\n  }\r\n\r\n  /**\r\n   * Fix the output shape computed for MatMul operation if it needs fixing\r\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\r\n   * This will be mutated.\r\n   * @param aRank The rank of tensor A.\r\n   * @param bRank The rank of tensor B.\r\n   */\r\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\r\n    // Remove prepended dimension if first input is 1d\r\n    if (aRank === 1) {\r\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\r\n      outputShape.splice(outputShape.length - 2, 1);\r\n    }\r\n    // Remove appended dimension if second input is 1d\r\n    if (bRank === 1) {\r\n      outputShape.pop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the expected shape when matrix multiplication\r\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\r\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\r\n   * @returns The expected shape of the result, or undefined if N/A\r\n   */\r\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\r\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\r\n  }\r\n}\r\n\r\nexport class BroadcastUtil {\r\n  /**\r\n   * Calculate the expected shape when broadcasting 2 tensors\r\n   * @param a The shape of tensor A. Should be an array of positive integers\r\n   * @param b The shape of tensor B. Should be an array of positive integers\r\n   * @param isMatMul Whether the operation is MatMul\r\n   * @returns The expected shape of the result, or undefined if N/A\r\n   */\r\n  static calcShape(adims: ReadonlyArray<number>, bdims: ReadonlyArray<number>, isMatMul = false):\r\n      ReadonlyArray<number>|undefined {\r\n    const arank = adims.length;\r\n    const brank = bdims.length;\r\n    if (arank === 0) {\r\n      return bdims;\r\n    }\r\n    if (brank === 0) {\r\n      return adims;\r\n    }\r\n    const crank = Math.max(adims.length, bdims.length);\r\n    const cdims = new Array<number>(crank);\r\n\r\n    // calculate the last 2 dimension if it is MatMul\r\n    if (isMatMul) {\r\n      if (arank < 2 || brank < 2) {\r\n        return undefined;\r\n      }\r\n      const cShapeMatMul =\r\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\r\n      if (cShapeMatMul === undefined) {\r\n        return undefined;\r\n      }\r\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\r\n    }\r\n\r\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\r\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\r\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\r\n\r\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\r\n        return undefined;\r\n      }\r\n      cdims[crank - i] = Math.max(aLen, bLen);\r\n    }\r\n\r\n    return cdims;\r\n  }\r\n\r\n  /**\r\n   * Given the indices of a broadcasted tensor, calculate the original indices\r\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\r\n   * @param originalShape The original shape of the tensor before broadcas\r\n   * @returns The calculated indices that maps to the original tensor.\r\n   */\r\n  static index(broadcastedIndices: ReadonlyArray<number>, originalShape: ReadonlyArray<number>): number[] {\r\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\r\n    // length as the broadcasted shape, and for each dimension the index should\r\n    // not be out of range.\r\n    const originalIndices = new Array(originalShape.length);\r\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\r\n    return originalIndices;\r\n  }\r\n\r\n  /**\r\n   * Given the indices of a broadcasted tensor, calculate the original indices\r\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\r\n   * @param originalShape The original shape of the tensor before broadcast\r\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\r\n   *     mutated).\r\n   */\r\n  static fillIndex(\r\n      broadcastedIndices: ReadonlyArray<number>, originalShape: ReadonlyArray<number>, originalIndices: number[]) {\r\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\r\n    // broadcasted shape, and for each dimension the index should not be out of range.\r\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\r\n    const dimOffset = broadcastedIndices.length - originalShape.length;\r\n    for (let i = 0; i < originalShape.length; i++) {\r\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform the broadcasting operation on the specific operator\r\n   * @param a The input tensor A\r\n   * @param b The input tensor B\r\n   * @param op The operator lambda function\r\n   * @param inplace Whether to write the result back to A.\r\n   * @returns The result tensor, or undefined if input not broadcastable.\r\n   */\r\n  static calc(\r\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\r\n      resultType?: Tensor.DataType): Tensor|undefined {\r\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\r\n\r\n    if (outputShape) {\r\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\r\n        // B is not broadcastable to A, failed to calculate inplace.\r\n        return undefined;\r\n      }\r\n\r\n      const size = ShapeUtil.size(outputShape);\r\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\r\n\r\n      // both inputs are scalars\r\n      if (outputShape.length === 0) {\r\n        c.set([], op(a.get([]), b.get([])));\r\n      }\r\n\r\n      // atleast one input is a non-scalar\r\n      else {\r\n        const outputIndices = new Array<number>(outputShape.length);\r\n        const originalIndicesA = new Array(a.dims.length);\r\n        const originalIndicesB = new Array(b.dims.length);\r\n        let valA: string|number = 0;\r\n        let valB: string|number = 0;\r\n        let isAScalar = false;\r\n        let isBScalar = false;\r\n        if (a.dims.length === 0) {\r\n          valA = a.get([]);\r\n          isAScalar = true;\r\n        }\r\n        if (b.dims.length === 0) {\r\n          valB = b.get([]);\r\n          isBScalar = true;\r\n        }\r\n        let rest: number;\r\n        for (let i = 0; i < size; i++) {\r\n          // traversal indices\r\n          rest = i;\r\n          for (let j = outputShape.length - 1; j >= 0; j--) {\r\n            outputIndices[j] = rest % outputShape[j];\r\n            rest = Math.floor(rest / outputShape[j]);\r\n          }\r\n\r\n          if (!isAScalar) {\r\n            // map outputIndices (which is actually broadcasted) to the originalIndices\r\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\r\n            valA = a.get(originalIndicesA);\r\n          }\r\n          if (!isBScalar) {\r\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\r\n            valB = b.get(originalIndicesB);\r\n          }\r\n\r\n          c.set(outputIndices, op(valA, valB));\r\n        }\r\n      }\r\n\r\n      return c;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Determine if a shape is unidirectional broadcastable to another shape\r\n   * @param shape The input shape\r\n   * @param finalShape The desired shape after broadcasting\r\n   */\r\n  static isValidBroadcast(shape: ReadonlyArray<number>, finalShape: ReadonlyArray<number>): boolean {\r\n    // align shape to the right\r\n    const inputRank = shape.length;\r\n    const finalRank = finalShape.length;\r\n    if (inputRank > finalRank) {\r\n      return false;\r\n    }\r\n    for (let i = 1; i <= inputRank; i++) {\r\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\n// copy array helper\r\n// mimics memcpy as much as possible\r\nexport function arrayCopyHelper(\r\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n    blockSize: number) {\r\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n    throw new Error(`sourceIndex out of bounds`);\r\n  }\r\n  if (targetIndex < 0 || targetIndex >= target.length) {\r\n    throw new Error(`targetIndex out of bounds`);\r\n  }\r\n  if (sourceIndex + blockSize > source.length) {\r\n    throw new Error(`source indices to be copied are outside bounds`);\r\n  }\r\n  if (targetIndex + blockSize > target.length) {\r\n    throw new Error(`target array is too small to hold result`);\r\n  }\r\n\r\n  for (let offset = 0; offset < blockSize; offset++) {\r\n    target[targetIndex + offset] = source[sourceIndex + offset];\r\n  }\r\n}\r\n\r\nexport class GemmUtil {\r\n  // will make sure input shapes are compatible for this op\r\n  // and return back the shape of the output in the form of a tuple\r\n  // will throw exception if the input shapes are not compatible\r\n  static getShapeOfGemmResult(\r\n      leftShape: ReadonlyArray<number>, transLeft: boolean, rightShape: ReadonlyArray<number>, transRight: boolean,\r\n      biasShape?: ReadonlyArray<number>): ReadonlyArray<number> {\r\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\r\n      throw new Error(`shape need to be of size 2`);\r\n    }\r\n\r\n    let M: number;\r\n    let K: number;\r\n    let N: number;\r\n\r\n    if (transLeft) {\r\n      M = leftShape[1];\r\n      K = leftShape[0];\r\n    } else {\r\n      M = leftShape[0];\r\n      K = leftShape[1];\r\n    }\r\n\r\n    let kDim = -1;\r\n\r\n    if (transRight) {\r\n      N = rightShape[0];\r\n      kDim = 1;\r\n    } else {\r\n      N = rightShape[1];\r\n      kDim = 0;\r\n    }\r\n\r\n    if (rightShape[kDim] !== K) {\r\n      throw new Error(`dimension mismatch`);\r\n    }\r\n\r\n    if (M <= 0 || N <= 0 || K <= 0) {\r\n      throw new Error(`invalid shape specified`);\r\n    }\r\n\r\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\r\n      throw new Error(`gemm: invalid bias shape for broadcast`);\r\n    }\r\n\r\n    return [M, N, K];\r\n  }\r\n}\r\n\r\nexport class ProtoUtil {\r\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType): Tensor.DataType {\r\n    switch (typeProto) {\r\n      case onnx.TensorProto.DataType.INT8:\r\n        return 'int8';\r\n      case onnx.TensorProto.DataType.UINT8:\r\n        return 'uint8';\r\n      case onnx.TensorProto.DataType.BOOL:\r\n        return 'bool';\r\n      case onnx.TensorProto.DataType.INT16:\r\n        return 'int16';\r\n      case onnx.TensorProto.DataType.UINT16:\r\n        return 'uint16';\r\n      case onnx.TensorProto.DataType.INT32:\r\n        return 'int32';\r\n      case onnx.TensorProto.DataType.UINT32:\r\n        return 'uint32';\r\n      case onnx.TensorProto.DataType.FLOAT:\r\n        return 'float32';\r\n      case onnx.TensorProto.DataType.DOUBLE:\r\n        return 'float64';\r\n      case onnx.TensorProto.DataType.STRING:\r\n        return 'string';\r\n\r\n      // For INT64/UINT64, reduce their value to 32-bits.\r\n      // Should throw exception when overflow\r\n      case onnx.TensorProto.DataType.INT64:\r\n        return 'int32';\r\n      case onnx.TensorProto.DataType.UINT64:\r\n        return 'uint32';\r\n\r\n      default:\r\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\r\n    }\r\n  }\r\n\r\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\r\n    // get rid of Long type for dims\r\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\r\n  }\r\n\r\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\r\n    return {\r\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\r\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\r\n    };\r\n  }\r\n}\r\n\r\nexport class LongUtil {\r\n  static longToNumber(n: Long|number) {\r\n    return Long.isLong(n) ? n.toNumber() : n;\r\n  }\r\n}\r\n\r\nexport class ShapeUtil {\r\n  static size(dims: ReadonlyArray<number>): number {\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\r\n  }\r\n\r\n  // `axis` inclusive\r\n  static sizeFromDimension(dims: ReadonlyArray<number>, axis: number): number {\r\n    if (axis < 0 || axis > dims.length) {\r\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\r\n    }\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\r\n  }\r\n\r\n  // `axis` exclusive\r\n  static sizeToDimension(dims: ReadonlyArray<number>, axis: number): number {\r\n    if (axis < 0 || axis > dims.length) {\r\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\r\n    }\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\r\n  }\r\n\r\n  static getSizeFromDimensionRange(dims: ReadonlyArray<number>, start: number, end: number): number {\r\n    let size = 1;\r\n    for (let i = start; i < end; i++) {\r\n      // safety check as this method is called by multiple other methods requiring size.\r\n      // size cannot be 0 or negative.\r\n      if (dims[i] <= 0) {\r\n        throw new Error(\r\n            // tslint:disable-next-line:max-line-length\r\n            `cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.`);\r\n      }\r\n      size *= dims[i];\r\n    }\r\n    return size;\r\n  }\r\n\r\n  static computeStrides(dims: ReadonlyArray<number>): ReadonlyArray<number> {\r\n    const rank = dims.length;\r\n    if (rank === 0) {\r\n      return [];\r\n    } else if (rank === 1) {\r\n      return [1];\r\n    }\r\n    const strides = new Array(rank);\r\n    strides[rank - 1] = 1;\r\n    strides[rank - 2] = dims[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * dims[i + 1];\r\n    }\r\n    return strides;\r\n  }\r\n\r\n  static transpose(dims: ReadonlyArray<number>): ReadonlyArray<number> {\r\n    const copy = dims.slice();\r\n    return copy.reverse();\r\n  }\r\n\r\n  static indicesToOffset(indices: ReadonlyArray<number>, strides: ReadonlyArray<number>, axis?: number): number {\r\n    if (axis === undefined) {\r\n      axis = indices.length;\r\n    }\r\n    let offset = 0;\r\n    for (let i = 0; i < axis; ++i) {\r\n      offset += strides[i] * indices[i];\r\n    }\r\n    return offset;\r\n  }\r\n\r\n  static offsetToIndices(offset: number, strides: ReadonlyArray<number>): ReadonlyArray<number> {\r\n    const rank = strides.length;\r\n    if (rank === 0) {\r\n      return [];\r\n    } else if (rank === 1) {\r\n      return [offset * strides[0]];\r\n    }\r\n    const indices: number[] = new Array(strides.length);\r\n    for (let i = 0; i < indices.length - 1; ++i) {\r\n      indices[i] = Math.floor(offset / strides[i]);\r\n      offset -= indices[i] * strides[i];\r\n    }\r\n    indices[indices.length - 1] = offset;\r\n    return indices;\r\n  }\r\n\r\n  /**\r\n   * normailze axis of range [-r, r) into [0, r).\r\n   */\r\n  static normalizeAxis(axis: number, tensorRank: number): number {\r\n    if (axis < -tensorRank && axis >= tensorRank) {\r\n      throw new Error('unsupported axis for this operation.');\r\n    }\r\n    return axis < 0 ? axis + tensorRank : axis;\r\n  }\r\n\r\n  static normalizeAxes(axes: ReadonlyArray<number>, tensorRank: number): number[] {\r\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\r\n  }\r\n\r\n  // Increment an index into a tensor (in lexicographic\r\n  // ordering), wrapping around the specified upper_bound.\r\n  /**\r\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\r\n   * @param index Given index to increment (Will be mutated)\r\n   * @param dims The dimensions of the tensor for which the given index corresponds to\r\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\r\n   */\r\n  static incrementIndex(index: number[], dims: ReadonlyArray<number>, axisToIncrementOn?: number) {\r\n    if (dims.length === 0 || index.length === 0) {\r\n      throw new Error(`Index incrementing unsupported for scalar Tensor`);\r\n    }\r\n    if (axisToIncrementOn === undefined) {\r\n      axisToIncrementOn = dims.length;\r\n    } else {\r\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\r\n        throw new Error(`Incorrect axis to increment on`);\r\n      }\r\n    }\r\n\r\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\r\n      index[k]++;\r\n      if (index[k] < dims[k]) {\r\n        break;\r\n      }\r\n      index[k] = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\r\n   * Used in Reshape\r\n   * @param originalDims Original Shape array\r\n   * @param shapeHints array containing values to compute the new dimensions\r\n   * For example:\r\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\r\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\r\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\r\n   * https://github.com/onnx/onnx/blob/master/docs/Operators.md#Reshape\r\n   */\r\n\r\n  static calculateReshapedDims(\r\n      originalDims: ReadonlyArray<number>,\r\n      shapeHints: number[]|ReadonlyArray<number>|Tensor.IntegerType): ReadonlyArray<number> {\r\n    // reshape to a Scalar Tensor\r\n    if (shapeHints.length === 0) {\r\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\r\n        return [];\r\n      } else {\r\n        throw new Error(`cannot reshape to a scalar Tensor`);\r\n      }\r\n    }\r\n\r\n    const nDims = shapeHints.length;\r\n    const reshapedDims = new Array<number>(nDims);\r\n    let unknownDimension = -1;\r\n    let newTensorSize = 1;\r\n    for (let i = 0; i < nDims; i++) {\r\n      if (shapeHints[i] < -1) {\r\n        throw new Error('a dimension in shape hints cannot be less than -1');\r\n      }\r\n      if (shapeHints[i] === -1) {\r\n        if (unknownDimension !== -1) {\r\n          throw new Error('at most one dimension in shape hints can be -1');\r\n        }\r\n        unknownDimension = i;\r\n      } else {\r\n        if (shapeHints[i] === 0) {\r\n          if (i >= originalDims.length) {\r\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\r\n          }\r\n          reshapedDims[i] = originalDims[i];\r\n        } else {\r\n          reshapedDims[i] = shapeHints[i];\r\n        }\r\n        newTensorSize *= reshapedDims[i];\r\n      }\r\n    }\r\n\r\n    const oldTensorSize = ShapeUtil.size(originalDims);\r\n    if (unknownDimension !== -1) {\r\n      if (oldTensorSize % newTensorSize !== 0) {\r\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\r\n            originalDims}] Output shape: [${shapeHints}]`);\r\n      }\r\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\r\n    }\r\n    // validate sizes from originalDims and reshapedDims match\r\n    else {\r\n      if (newTensorSize !== oldTensorSize) {\r\n        throw new Error(`reshapedDims and originalDims don't have matching sizes`);\r\n      }\r\n    }\r\n    return reshapedDims;\r\n  }\r\n\r\n  /**\r\n   * Sorts a given array based on the indices in the Perm array\r\n   * Used in Transpose\r\n   * @param a Array to be sorted such as dims or strides\r\n   * @param perm Perm given; if null a will be reversed\r\n   */\r\n  static sortBasedOnPerm(a: ReadonlyArray<number>, perm?: ReadonlyArray<number>): ReadonlyArray<number> {\r\n    if (perm) {\r\n      return perm.map((v) => a[v]);\r\n    } else {\r\n      return a.slice().reverse();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pads a given shape according to the padding values\r\n   * @param dims shape of the Tensor to be padded\r\n   * @param pad pad values\r\n   */\r\n  static padShape(dims: ReadonlyArray<number>, pad: ReadonlyArray<number>): ReadonlyArray<number> {\r\n    const rank = dims.length;\r\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\r\n  }\r\n\r\n  /**\r\n   * Determines if the two shapes are identical\r\n   * @param shape1\r\n   * @param shape2\r\n   */\r\n  static areEqual(shape1: ReadonlyArray<number>, shape2: ReadonlyArray<number>): boolean {\r\n    if (shape1.length !== shape2.length) {\r\n      return false;\r\n    }\r\n    return shape1.every((v, i) => v === shape2[i]);\r\n  }\r\n\r\n  /**\r\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\r\n   * @param dims - input `dims` that needs to be checked\r\n   */\r\n  static validateDimsAndCalcSize(dims: ReadonlyArray<number>): number {\r\n    if (dims.length > 6) {\r\n      throw new TypeError(`Only rank 0 to 6 is supported for tensor shape.`);\r\n    }\r\n    let size = 1;\r\n    for (const n of dims) {\r\n      if (!Number.isInteger(n)) {\r\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\r\n      }\r\n      if (n < 0 || n > 2147483647) {\r\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\r\n      }\r\n      size *= n;\r\n    }\r\n    return size;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = flatten(x, axis)\r\n   * @param dims - shape of input tensor\r\n   * @param axis - flatten axis, in the range [-r, r]\r\n   */\r\n  static flattenShape(dims: ReadonlyArray<number>, axis: number): ReadonlyArray<number> {\r\n    if (axis < 0) {\r\n      axis += dims.length;\r\n    }\r\n    const total = dims.reduce((x, y) => x * y, 1);\r\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\r\n    const outputDims = [total / right, right];\r\n\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = squeeze(x, axes)\r\n   * @param dims - shape of input tensor\r\n   * @param axes - squeeze axes\r\n   */\r\n  static squeezeShape(dims: ReadonlyArray<number>, axes: ReadonlyArray<number>): ReadonlyArray<number> {\r\n    const outputDims = new Array<number>();\r\n\r\n    // sanity check\r\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\r\n\r\n    for (let i = 0; i < dims.length; i++) {\r\n      const inSqueezeList = axes.indexOf(i) >= 0;\r\n      if (inSqueezeList && dims[i] !== 1) {\r\n        throw new Error(`squeeze an axis of size different than 1`);\r\n      }\r\n\r\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\r\n        outputDims.push(dims[i]);\r\n      }\r\n    }\r\n\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\r\n   * @param dims - shape of input tensor\r\n   * @param axes - unsqueeze axes\r\n   */\r\n  static unsqueezeShape(dims: ReadonlyArray<number>, axes: ReadonlyArray<number>): ReadonlyArray<number> {\r\n    const outputDims = new Array<number>(dims.length + axes.length);\r\n\r\n    // initialize the array elements to 0\r\n    outputDims.fill(0);\r\n\r\n    // set all axes indices to 1 in outputDims and check for duplicates\r\n    for (let i = 0; i < axes.length; i++) {\r\n      const axis = ShapeUtil.normalizeAxis(axes[i], dims.length);\r\n      if (axis >= outputDims.length) {\r\n        throw new Error(`'axes' has an out of range axis`);\r\n      }\r\n      if (outputDims[axis] !== 0) {\r\n        throw new Error(`'axes' has a duplicate axis`);\r\n      }\r\n\r\n      outputDims[axis] = 1;\r\n    }\r\n\r\n    // fill in the zero entries of outputDims with the input tensor's shape\r\n    let inputDimsIterator = 0;\r\n    for (let i = 0; i < outputDims.length; i++) {\r\n      if (outputDims[i] === 0) {\r\n        outputDims[i] = dims[inputDimsIterator++];\r\n      }\r\n    }\r\n\r\n    // sanity check assertion. 'inputDimsIterator'\r\n    // should be equal to the length of 'dims'\r\n    if (inputDimsIterator !== dims.length) {\r\n      throw new Error('the unsqueezed dimension could not be established');\r\n    }\r\n\r\n    return outputDims;\r\n  }\r\n}\r\n\r\n// bunch of helper methods that do a variety of math operations\r\nexport class MathUtil {\r\n  // y = (x*x) + y\r\n  static sqr(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error(`sourceIndex out of bounds`);\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error(`targetIndex out of bounds`);\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error(`source indices to be copied are outside bounds`);\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error(`target array is too small to hold result`);\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\r\n    }\r\n  }\r\n\r\n  // y = ax + y\r\n  static axpy(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number, alpha: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error(`sourceIndex out of bounds`);\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error(`targetIndex out of bounds`);\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error(`source indices to be copied are outside bounds`);\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error(`target array is too small to hold result`);\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\r\n    }\r\n  }\r\n\r\n  // y = pow(x, b)\r\n  static powx(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number, b: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error(`sourceIndex out of bounds`);\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error(`targetIndex out of bounds`);\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error(`source indices to be copied are outside bounds`);\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error(`target array is too small to hold result`);\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\r\n    }\r\n  }\r\n\r\n  // y = x * y\r\n  static mul(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error(`sourceIndex out of bounds`);\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error(`targetIndex out of bounds`);\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error(`source indices to be copied are outside bounds`);\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error(`target array is too small to hold result`);\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\r\n    }\r\n  }\r\n}\r\n\r\nexport class SplitUtil {\r\n  /**\r\n   * Calculates new Shapes from existing one and the splits given along the axis provides\r\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\r\n   * @param axis The dimension along which the Tensor will be split\r\n   * @param splits Offsets for the start of each split\r\n   */\r\n  static splitShape(dims: ReadonlyArray<number>, axis: number, split: number[], numOutputs?: number):\r\n      [number[][], number[]] {\r\n    if (split.length === 0) {\r\n      if (!numOutputs) {\r\n        throw new Error(`need to know number of outputs when the 'split' attribute is not specified`);\r\n      }\r\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\r\n    }\r\n\r\n    const shapes: number[][] = [];\r\n    const offsets = [0];\r\n    for (let i = 0; i < split.length; ++i) {\r\n      if (i !== 0) {\r\n        offsets.push(offsets[i - 1] + split[i - 1]);\r\n      }\r\n      const shape = dims.slice();\r\n      shape[axis] = split[i];\r\n      shapes.push(shape);\r\n    }\r\n    return [shapes, offsets];\r\n  }\r\n\r\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\r\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\r\n    if (numElementsAlongAxis % numOutputs !== 0) {\r\n      throw new Error(`cannot split tensor to equal sized parts`);\r\n    }\r\n    for (let i = 0; i < numOutputs; ++i) {\r\n      split.push(numElementsAlongAxis / numOutputs);\r\n    }\r\n  }\r\n}\r\n\r\nexport class ReduceUtil {\r\n  /**\r\n   * Perform reduce operations on the specific operator\r\n   * @param a Input tensor data\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param keepdims If set to true, the axes which are reduced are left in the\r\n   *    result as dimensions with size one.\r\n   * @param op1 The operation to be performed on each element in the tensor\r\n   * @param op2 The operation to be performed between elements in the tensor\r\n   */\r\n  static calcReduce(\r\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\r\n      op2: (a: number, b: number) => number): Tensor {\r\n    const dims = a.dims.slice(0);\r\n    // if axes is not set, perform reduce on all axes\r\n    if (axes.length === 0) {\r\n      dims.forEach((d, ind) => axes.push(ind));\r\n    }\r\n    // get a temporary broadcastable output shape\r\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\r\n\r\n    // loop through the output and calculate result one by one\r\n    const size = ShapeUtil.size(outputDims);\r\n    const y = new Tensor(outputDims, a.type);\r\n    const strides = ShapeUtil.computeStrides(outputDims);\r\n    const inputStrides = ShapeUtil.computeStrides(dims);\r\n    const indicesY = new Array(dims.length);\r\n    for (let i = 0; i < size; i++) {\r\n      const indices = ShapeUtil.offsetToIndices(i, strides);\r\n      // map index\r\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\r\n      y.set(\r\n          indices,\r\n          ReduceUtil.calcReduceByAxis(\r\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\r\n    }\r\n\r\n    if (keepdims) {\r\n      return y;\r\n    } else {\r\n      // keepdims == 0, calculate the expected shape\r\n      return new Tensor(\r\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform reduce operations on the specific operator on specific axes\r\n   * @param a Input tensor data\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param dims The input dimension.\r\n   * @param curAxisInd Index in axes specifying the current dimension along\r\n   *      which the tensor will be reduced\r\n   * @param pos The current index of element to perform operation\r\n   * @param op1 The operation to be performed on each element in the tensor\r\n   * @param op2 The operation to be performed between elements in the tensor\r\n   */\r\n  static calcReduceByAxis(\r\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\r\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\r\n    let res = 0;\r\n    if (curAxisInd >= axes.length) {\r\n      return op1(input[pos]);\r\n    }\r\n    const axis = axes[curAxisInd];\r\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\r\n    for (let i = 0; i < dims[axis]; i++) {\r\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\r\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\r\n      pos += step;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * Calculate the expected shape of a reduce operation\r\n   * @param dims The input tensor dimension\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param keepdims If set to true, the axes which are reduced are left in the\r\n   *    result as dimensions with size one.\r\n   */\r\n  static calcReduceShape(dims: ReadonlyArray<number>, axes: ReadonlyArray<number>, keepDims: boolean): number[] {\r\n    const outputDims = dims.slice();\r\n    for (let i = 0; i < axes.length; i++) {\r\n      if (keepDims) {\r\n        outputDims[axes[i]] = 1;\r\n      } else {\r\n        outputDims[axes[i]] = 0;\r\n      }\r\n    }\r\n    return outputDims.filter(dim => dim !== 0);\r\n  }\r\n}\r\n\r\nexport class PoolConvUtil {\r\n  /**\r\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\r\n   * @param isGlobalOperator If true, perform global pooling.\r\n   * @param inputDims The input tensor dimension.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param strides Stride along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   */\r\n  static adjustPoolAttributes(\r\n      isGlobalOperator: boolean, inputDims: ReadonlyArray<number>, kernelShape: number[], strides: number[],\r\n      pads: number[]) {\r\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\r\n      throw new Error(`length of specified kernel shapes should be 2 less than length of input dimensions`);\r\n    }\r\n\r\n    if (isGlobalOperator) {\r\n      // adjust kernel shape to cover the input dims\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        if (dim >= kernelShape.length) {\r\n          kernelShape.push(inputDims[dim + 2]);\r\n        } else {\r\n          kernelShape[dim] = inputDims[dim + 2];\r\n        }\r\n      }\r\n    }\r\n\r\n    // adjust strides length to match kernel shape length\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (dim < strides.length) {\r\n        if (strides[dim] < 0) {\r\n          throw new Error(`strides should be greater than or equal to 1`);\r\n        }\r\n      } else {\r\n        strides.push(1);\r\n      }\r\n    }\r\n\r\n    // adjust pads length to match 2 * kernel shape length\r\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\r\n      if (dim < pads.length) {\r\n        if (pads[dim] < 0) {\r\n          throw new Error(`pad should be greater than or equal to 1`);\r\n        }\r\n      } else {\r\n        pads.push(0);\r\n      }\r\n    }\r\n\r\n    // sanity checks for values in kernel shapes and pads\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (kernelShape[dim] <= 0) {\r\n        throw new Error(`kernel shapes need to be greater than 0`);\r\n      }\r\n\r\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\r\n        throw new Error(`pads should be smaller than kernel`);\r\n      }\r\n    }\r\n  }\r\n\r\n  // adjust pad values based on 'autoPad' attribute\r\n  static adjustPadsBasedOnAutoPad(\r\n      inputDims: ReadonlyArray<number>, strides: number[], dilations: number[], kernelShape: number[], pads: number[],\r\n      autoPad?: string) {\r\n    if (!autoPad) {\r\n      return;\r\n    }\r\n\r\n    if (pads.length !== 2 * (inputDims.length - 2)) {\r\n      throw new Error('length of pads should be twice the length of data dimensions');\r\n    }\r\n\r\n    if (strides.length !== (inputDims.length - 2)) {\r\n      throw new Error('length of strides should be the length of data dimensions');\r\n    }\r\n\r\n    if (kernelShape.length !== (inputDims.length - 2)) {\r\n      throw new Error('length of kernel shapes should be the length of data dimensions');\r\n    }\r\n\r\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n      PoolConvUtil.adjustPadAndReturnShape(\r\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\r\n          autoPad);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\r\n   * @param isGlobalOperator If true, perform global pooling.\r\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\r\n   * @param strides Stride along each axis.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\r\n   */\r\n  static computePoolOutputShape(\r\n      isGlobalOperator: boolean, inputDims: ReadonlyArray<number>, strides: number[], kernelShape: number[],\r\n      pads: number[], autoPad?: string): number[] {\r\n    if (inputDims.length <= 0) {\r\n      throw new Error(`input shape must be of size greater than 0`);\r\n    }\r\n\r\n    // Add batch size and number of channels of output\r\n    const outputDims = [inputDims[0], inputDims[1]];\r\n\r\n    // TODO: support dilations for pool operators\r\n    const dilations = new Array<number>(kernelShape.length).fill(1);\r\n\r\n    PoolConvUtil.computeShapeHelper(\r\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\r\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\r\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\r\n   * @param strides Stride along each axis.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\r\n   */\r\n  static computeConvOutputShape(\r\n      inputDims: ReadonlyArray<number>, filterDims: ReadonlyArray<number>, strides: number[], dilations: number[],\r\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\r\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\r\n      throw new Error(`invalid input tensor dims or invalid filter tensor dims`);\r\n    }\r\n\r\n    // Add batch size and number of channels of output\r\n    const outputDims = [inputDims[0], filterDims[0]];\r\n\r\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\r\n    return outputDims;\r\n  }\r\n\r\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\r\n  // called by computePoolOutputShape() and computeConvOutputShape()\r\n  // adjust pads based on 'autoPad' attribute prior to shape computation\r\n  private static computeShapeHelper(\r\n      isGlobalOperator: boolean, inputDims: ReadonlyArray<number>, outputDims: number[], strides: ReadonlyArray<number>,\r\n      dilations: ReadonlyArray<number>, kernelShape: ReadonlyArray<number>, pads: number[], autoPad?: string) {\r\n    if (isGlobalOperator) {\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        outputDims.push(1);\r\n      }\r\n    } else {\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\r\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\r\n            autoPad));\r\n      }\r\n    }\r\n  }\r\n\r\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\r\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\r\n  private static adjustPadAndReturnShape(\r\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\r\n      padTailIndex: number, autoPad?: string): number {\r\n    const dkernel = dilation * (kernel - 1) + 1;\r\n    if (autoPad && autoPad !== 'NOTSET') {\r\n      switch (autoPad) {\r\n        case 'VALID':\r\n          pads[padHeadIndex] = 0;\r\n          pads[padTailIndex] = 0;\r\n          return Math.floor(((inSize - dkernel) / stride) + 1);\r\n        case 'SAME_LOWER':\r\n        case 'SAME_UPPER':\r\n          if (dilation !== 1) {\r\n            throw new Error(`Dilation not supported for SAME_UPPER or SAME_LOWER`);\r\n          }\r\n          const legacyTargetSize = (inSize + stride - 1) / stride;\r\n          const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\r\n          pads[padHeadIndex] = (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\r\n          pads[padTailIndex] = padNeeded - pads[padHeadIndex];\r\n          return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\r\n        default:\r\n          throw new Error(`Unsupported AutoPad type`);\r\n      }\r\n    } else {\r\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport Long from 'long';\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {ProtoUtil, ShapeUtil} from './util';\r\n\r\nexport declare namespace Tensor {\r\n  export interface DataTypeMap {\r\n    bool: Uint8Array;\r\n    float32: Float32Array;\r\n    float64: Float64Array;\r\n    string: string[];\r\n    int8: Int8Array;\r\n    uint8: Uint8Array;\r\n    int16: Int16Array;\r\n    uint16: Uint16Array;\r\n    int32: Int32Array;\r\n    uint32: Uint32Array;\r\n  }\r\n\r\n  export type DataType = keyof DataTypeMap;\r\n\r\n  export type StringType = Tensor.DataTypeMap['string'];\r\n  export type BooleanType = Tensor.DataTypeMap['bool'];\r\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\r\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\r\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\r\n  export type NumberType = BooleanType|IntegerType|FloatType;\r\n\r\n  export interface Id {\r\n    // this field helps typescript to perform type check, comparing to use `Id` as an alias of object.\r\n    _tensorDataId_unused?: never;\r\n  }\r\n}\r\n\r\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\r\n\r\ntype DataProvider = (id: Tensor.Id) => TensorData;\r\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\r\n\r\nexport class Tensor {\r\n  /**\r\n   * get the underlying tensor data\r\n   */\r\n  get data(): TensorData {\r\n    if (this.cache === undefined) {\r\n      const data = this.dataProvider!(this.dataId);\r\n      if (data.length !== this.size) {\r\n        throw new Error(`Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.`);\r\n      }\r\n      this.cache = data;\r\n    }\r\n    return this.cache;\r\n  }\r\n\r\n  /**\r\n   * get the underlying string tensor data. Should only use when type is STRING\r\n   */\r\n  get stringData() {\r\n    if (this.type !== 'string') {\r\n      throw new TypeError(`data type is not string`);\r\n    }\r\n\r\n    return this.data as Tensor.StringType;\r\n  }\r\n\r\n  /**\r\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\r\n   * INT16, INT32, UINT32, BOOL)\r\n   */\r\n  get integerData() {\r\n    switch (this.type) {\r\n      case 'uint8':\r\n      case 'int8':\r\n      case 'uint16':\r\n      case 'int16':\r\n      case 'int32':\r\n      case 'uint32':\r\n      case 'bool':\r\n        return this.data as Tensor.IntegerType;\r\n\r\n      default:\r\n        throw new TypeError(`data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\r\n   */\r\n  get floatData() {\r\n    switch (this.type) {\r\n      case 'float32':\r\n      case 'float64':\r\n        return this.data as Tensor.FloatType;\r\n\r\n      default:\r\n        throw new TypeError(`data type is not float (float32, float64)`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\r\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\r\n   */\r\n  get numberData() {\r\n    if (this.type !== 'string') {\r\n      return this.data as Tensor.NumberType;\r\n    }\r\n    throw new TypeError(`type cannot be non-number (string)`);\r\n  }\r\n\r\n  /**\r\n   * get value of an element at the given indices\r\n   */\r\n  get(indices: ReadonlyArray<number>): Tensor.DataTypeMap[Tensor.DataType][number] {\r\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\r\n  }\r\n\r\n  /**\r\n   * set value of an element at the given indices\r\n   */\r\n  set(indices: ReadonlyArray<number>, value: Tensor.DataTypeMap[Tensor.DataType][number]) {\r\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\r\n  }\r\n\r\n  /**\r\n   * get the underlying tensor data asynchronously\r\n   */\r\n  async getData(): Promise<TensorData> {\r\n    // TBD: This function is designed for usage when any backend data provider offers a way to retrieve data in an\r\n    //      asynchronous way. should implement this function when enabling webgl async read data.\r\n\r\n    if (this.cache === undefined) {\r\n      this.cache = await this.asyncDataProvider!(this.dataId);\r\n    }\r\n    return this.cache;\r\n  }\r\n\r\n  /**\r\n   * get the number of elements in the tensor\r\n   */\r\n  public readonly size: number;\r\n\r\n  private _strides: ReadonlyArray<number>;\r\n  /**\r\n   * get the strides for each dimension\r\n   */\r\n  get strides(): ReadonlyArray<number> {\r\n    if (!this._strides) {\r\n      this._strides = ShapeUtil.computeStrides(this.dims);\r\n    }\r\n    return this._strides;\r\n  }\r\n\r\n  constructor(\r\n      /**\r\n       * get the dimensions of the tensor\r\n       */\r\n      public readonly dims: ReadonlyArray<number>,\r\n      /**\r\n       * get the type of the tensor\r\n       */\r\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\r\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\r\n      /**\r\n       * get the data ID that used to map to a tensor data\r\n       */\r\n      public readonly dataId: Tensor.Id = {}) {\r\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\r\n    const size = this.size;\r\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\r\n\r\n    if (cache !== undefined) {\r\n      if (cache.length !== size) {\r\n        throw new RangeError(`Input dims doesn't match data length.`);\r\n      }\r\n    }\r\n\r\n    if (type === 'string') {\r\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\r\n        throw new TypeError(`cache should be a string array`);\r\n      }\r\n\r\n      if (empty) {\r\n        cache = new Array<string>(size);\r\n      }\r\n    } else {\r\n      if (cache !== undefined) {\r\n        const constructor = dataviewConstructor(type);\r\n        if (!(cache instanceof constructor)) {\r\n          throw new TypeError(`cache should be type ${constructor.name}`);\r\n        }\r\n      }\r\n\r\n      if (empty) {\r\n        const buf = new ArrayBuffer(size * sizeof(type));\r\n        this.cache = createView(buf, type);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Construct new Tensor from a ONNX Tensor object\r\n   * @param tensorProto the ONNX Tensor\r\n   */\r\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\r\n    if (!tensorProto) {\r\n      throw new Error('cannot construct Value from an empty tensor');\r\n    }\r\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\r\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\r\n\r\n    const value = new Tensor(dims, type);\r\n\r\n    if (type === 'string') {\r\n      // When it's STRING type, the value should always be stored in field\r\n      // 'stringData'\r\n      tensorProto.stringData!.forEach((str, i) => {\r\n        const buf = Buffer.from(str.buffer, str.byteOffset, str.byteLength);\r\n        value.data[i] = buf.toString();\r\n      });\r\n\r\n    } else if (\r\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\r\n        tensorProto.rawData.byteLength > 0) {\r\n      // NOT considering segment for now (IMPORTANT)\r\n\r\n      // populate value from rawData\r\n      const dataDest = value.data;\r\n      const dataSource =\r\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\r\n      const elementSize = sizeofProto(tensorProto.dataType!);\r\n      const length = tensorProto.rawData.byteLength / elementSize;\r\n\r\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\r\n        throw new Error(`invalid buffer length`);\r\n      }\r\n      if (dataDest.length !== length) {\r\n        throw new Error(`buffer length mismatch`);\r\n      }\r\n\r\n      for (let i = 0; i < length; i++) {\r\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\r\n        dataDest[i] = n;\r\n      }\r\n    } else {\r\n      // populate value from array\r\n      let array: Array<number|Long>;\r\n      switch (tensorProto.dataType) {\r\n        case onnx.TensorProto.DataType.FLOAT:\r\n          array = tensorProto.floatData!;\r\n          break;\r\n        case onnx.TensorProto.DataType.INT32:\r\n        case onnx.TensorProto.DataType.INT16:\r\n        case onnx.TensorProto.DataType.UINT16:\r\n        case onnx.TensorProto.DataType.INT8:\r\n        case onnx.TensorProto.DataType.UINT8:\r\n        case onnx.TensorProto.DataType.BOOL:\r\n          array = tensorProto.int32Data!;\r\n          break;\r\n        case onnx.TensorProto.DataType.INT64:\r\n          array = tensorProto.int64Data!;\r\n          break;\r\n        case onnx.TensorProto.DataType.DOUBLE:\r\n          array = tensorProto.doubleData!;\r\n          break;\r\n        case onnx.TensorProto.DataType.UINT32:\r\n        case onnx.TensorProto.DataType.UINT64:\r\n          array = tensorProto.uint64Data!;\r\n          break;\r\n        default:\r\n          // should never run here\r\n          throw new Error('unspecific error');\r\n      }\r\n\r\n      if (array === null || array === undefined) {\r\n        throw new Error('failed to populate data from a tensorproto value');\r\n      }\r\n\r\n      const data = value.data;\r\n      if (data.length !== array.length) {\r\n        throw new Error(`array length mismatch`);\r\n      }\r\n\r\n      for (let i = 0; i < array.length; i++) {\r\n        const element = array[i];\r\n        if (Long.isLong(element)) {\r\n          data[i] = longToNumber(element, tensorProto.dataType);\r\n        } else {\r\n          data[i] = element;\r\n        }\r\n      }\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Construct new Tensor from raw data\r\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\r\n   * for other types of tensor.\r\n   * @param dims the dimensions of the tensor\r\n   * @param type the type of the tensor\r\n   */\r\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: ReadonlyArray<number>, type: Tensor.DataType) {\r\n    return new Tensor(dims, type, undefined, undefined, data);\r\n  }\r\n}\r\n\r\nfunction sizeof(type: Tensor.DataType): number {\r\n  switch (type) {\r\n    case 'bool':\r\n    case 'int8':\r\n    case 'uint8':\r\n      return 1;\r\n    case 'int16':\r\n    case 'uint16':\r\n      return 2;\r\n    case 'int32':\r\n    case 'uint32':\r\n    case 'float32':\r\n      return 4;\r\n    case 'float64':\r\n      return 8;\r\n    default:\r\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\r\n  }\r\n}\r\n\r\nfunction sizeofProto(type: onnx.TensorProto.DataType): number {\r\n  switch (type) {\r\n    case onnx.TensorProto.DataType.UINT8:\r\n    case onnx.TensorProto.DataType.INT8:\r\n    case onnx.TensorProto.DataType.BOOL:\r\n      return 1;\r\n    case onnx.TensorProto.DataType.UINT16:\r\n    case onnx.TensorProto.DataType.INT16:\r\n      return 2;\r\n    case onnx.TensorProto.DataType.FLOAT:\r\n    case onnx.TensorProto.DataType.INT32:\r\n    case onnx.TensorProto.DataType.UINT32:\r\n      return 4;\r\n    case onnx.TensorProto.DataType.INT64:\r\n    case onnx.TensorProto.DataType.DOUBLE:\r\n    case onnx.TensorProto.DataType.UINT64:\r\n      return 8;\r\n    default:\r\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n}\r\n\r\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\r\n  return new (dataviewConstructor(type))(dataBuffer);\r\n}\r\n\r\nfunction dataviewConstructor(type: Tensor.DataType) {\r\n  switch (type) {\r\n    case 'bool':\r\n    case 'uint8':\r\n      return Uint8Array;\r\n    case 'int8':\r\n      return Int8Array;\r\n    case 'int16':\r\n      return Int16Array;\r\n    case 'uint16':\r\n      return Uint16Array;\r\n    case 'int32':\r\n      return Int32Array;\r\n    case 'uint32':\r\n      return Uint32Array;\r\n    case 'float32':\r\n      return Float32Array;\r\n    case 'float64':\r\n      return Float64Array;\r\n    default:\r\n      // should never run to here\r\n      throw new Error('unspecified error');\r\n  }\r\n}\r\n\r\n// convert a long number to a 32-bit integer (cast-down)\r\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType): number {\r\n  // INT64, UINT32, UINT64\r\n  if (type === onnx.TensorProto.DataType.INT64) {\r\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\r\n      throw new TypeError('int64 is not supported');\r\n    }\r\n  } else if (type === onnx.TensorProto.DataType.UINT32 || type === onnx.TensorProto.DataType.UINT64) {\r\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\r\n      throw new TypeError('uint64 is not supported');\r\n    }\r\n  } else {\r\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n\r\n  return i.toNumber();\r\n}\r\n\r\n// read one value from TensorProto\r\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType, byteOffset: number): number {\r\n  switch (type) {\r\n    case onnx.TensorProto.DataType.BOOL:\r\n    case onnx.TensorProto.DataType.UINT8:\r\n      return view.getUint8(byteOffset);\r\n    case onnx.TensorProto.DataType.INT8:\r\n      return view.getInt8(byteOffset);\r\n    case onnx.TensorProto.DataType.UINT16:\r\n      return view.getUint16(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT16:\r\n      return view.getInt16(byteOffset, true);\r\n    case onnx.TensorProto.DataType.FLOAT:\r\n      return view.getFloat32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT32:\r\n      return view.getInt32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.UINT32:\r\n      return view.getUint32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT64:\r\n      return longToNumber(\r\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\r\n    case onnx.TensorProto.DataType.DOUBLE:\r\n      return view.getFloat64(byteOffset, true);\r\n    case onnx.TensorProto.DataType.UINT64:\r\n      return longToNumber(\r\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\r\n    default:\r\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * represent a version irrelevant abstraction of for GLSL source code\r\n */\r\nexport interface Glsl {\r\n  readonly version: string;\r\n  readonly attribute: string;\r\n  readonly varyingVertex: string;\r\n  readonly varyingFrag: string;\r\n  readonly texture2D: string;\r\n  readonly output: string;\r\n  readonly outputDeclaration: string;\r\n}\r\n\r\nconst GLSL_ES_2_0: Glsl = {\r\n  version: '',\r\n  attribute: 'attribute',\r\n  varyingVertex: 'varying',\r\n  varyingFrag: 'varying',\r\n  texture2D: 'texture2D',\r\n  output: 'gl_FragColor',\r\n  outputDeclaration: '',\r\n};\r\nconst GLSL_ES_3_0: Glsl = {\r\n  version: '#version 300 es',\r\n  attribute: 'in',\r\n  varyingVertex: 'out',\r\n  varyingFrag: 'in',\r\n  texture2D: 'texture',\r\n  output: 'outputColor',\r\n  outputDeclaration: 'out vec4 outputColor;',\r\n};\r\n\r\nexport function getGlsl(version: 1|2) {\r\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\r\n}\r\n\r\nexport function getVertexShaderSource(version: 1|2): string {\r\n  const glsl = getGlsl(version);\r\n  return `${glsl.version}\r\n      precision highp float;\r\n      ${glsl.attribute} vec3 position;\r\n      ${glsl.attribute} vec2 textureCoord;\r\n\r\n      ${glsl.varyingVertex} vec2 TexCoords;\r\n\r\n      void main()\r\n      {\r\n          gl_Position = vec4(position, 1.0);\r\n          TexCoords = textureCoord;\r\n      }`;\r\n}\r\n\r\nexport function getFragShaderPreamble(version: 1|2): string {\r\n  const glsl = getGlsl(version);\r\n  return `${glsl.version}\r\n    precision highp float;\r\n    precision highp int;\r\n    precision highp sampler2D;\r\n    ${glsl.varyingFrag} vec2 TexCoords;\r\n    ${glsl.outputDeclaration}\r\n\r\n    `;\r\n}\r\n\r\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\r\n  const glsl = getGlsl(version);\r\n  return `\r\n  void main() {\r\n    int indices[${outputShapeLength}];\r\n    toVec(TexCoords, indices);\r\n    vec4 result = vec4(process(indices));\r\n    ${glsl.output} = result;\r\n  }\r\n  `;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport declare namespace Logger {\r\n  export interface SeverityTypeMap {\r\n    verbose: 'v';\r\n    info: 'i';\r\n    warning: 'w';\r\n    error: 'e';\r\n  }\r\n\r\n  export type Severity = keyof SeverityTypeMap;\r\n\r\n  export type Provider = 'none'|'console';\r\n\r\n  /**\r\n   * Logging config that used to control the behavior of logger\r\n   */\r\n  export interface Config {\r\n    /**\r\n     * Specify the logging provider. 'console' by default\r\n     */\r\n    provider?: Provider;\r\n    /**\r\n     * Specify the minimal logger serverity. 'info' by default\r\n     */\r\n    minimalSeverity?: Logger.Severity;\r\n    /**\r\n     * Whether to output date time in log. true by default\r\n     */\r\n    logDateTime?: boolean;\r\n    /**\r\n     * Whether to output source information (Not yet supported). false by default\r\n     */\r\n    logSourceLocation?: boolean;\r\n  }\r\n\r\n  export interface CategorizedLogger {\r\n    verbose(content: string): void;\r\n    info(content: string): void;\r\n    warning(content: string): void;\r\n    error(content: string): void;\r\n  }\r\n}\r\n\r\nexport interface Logger {\r\n  (category: string): Logger.CategorizedLogger;\r\n\r\n  verbose(content: string): void;\r\n  verbose(category: string, content: string): void;\r\n  info(content: string): void;\r\n  info(category: string, content: string): void;\r\n  warning(content: string): void;\r\n  warning(category: string, content: string): void;\r\n  error(content: string): void;\r\n  error(category: string, content: string): void;\r\n\r\n  /**\r\n   * Reset the logger configuration.\r\n   * @param config specify an optional default config\r\n   */\r\n  reset(config?: Logger.Config): void;\r\n  /**\r\n   * Set the logger's behavior on the given category\r\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\r\n   * '' is specified, the default behavior will be updated.\r\n   * @param config the config object to indicate the logger's behavior\r\n   */\r\n  set(category: string, config: Logger.Config): void;\r\n}\r\n\r\ninterface LoggerProvider {\r\n  log(severity: Logger.Severity, content: string, category?: string): void;\r\n}\r\nclass NoOpLoggerProvider implements LoggerProvider {\r\n  log(severity: Logger.Severity, content: string, category?: string) {\r\n    // do nothing\r\n  }\r\n}\r\nclass ConsoleLoggerProvider implements LoggerProvider {\r\n  log(severity: Logger.Severity, content: string, category?: string) {\r\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\r\n  }\r\n\r\n  private color(severity: Logger.Severity) {\r\n    switch (severity) {\r\n      case 'verbose':\r\n        return '\\x1b[34;40mv\\x1b[0m';\r\n      case 'info':\r\n        return '\\x1b[32mi\\x1b[0m';\r\n      case 'warning':\r\n        return '\\x1b[30;43mw\\x1b[0m';\r\n      case 'error':\r\n        return '\\x1b[31;40me\\x1b[0m';\r\n      default:\r\n        throw new Error(`unsupported severity: ${severity}`);\r\n    }\r\n  }\r\n}\r\n\r\nconst SEVERITY_VALUE = {\r\n  verbose: 1000,\r\n  info: 2000,\r\n  warning: 4000,\r\n  error: 5000\r\n};\r\n\r\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\r\n  ['none']: new NoOpLoggerProvider(),\r\n  ['console']: new ConsoleLoggerProvider()\r\n};\r\nconst LOGGER_DEFAULT_CONFIG = {\r\n  provider: 'console',\r\n  minimalSeverity: 'info',\r\n  logDateTime: true,\r\n  logSourceLocation: false\r\n};\r\nlet LOGGER_CONFIG_MAP:\r\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\r\n\r\nfunction log(category: string): Logger.CategorizedLogger;\r\nfunction log(severity: Logger.Severity, content: string): void;\r\nfunction log(severity: Logger.Severity, category: string, content: string): void;\r\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\r\nfunction log(\r\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\r\n  if (arg1 === undefined) {\r\n    // log(category: string): Logger.CategorizedLogger;\r\n    return createCategorizedLogger(arg0);\r\n  } else if (arg2 === undefined) {\r\n    // log(severity, content);\r\n    logInternal(arg0 as Logger.Severity, arg1, 1);\r\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\r\n    // log(severity, content, stack)\r\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\r\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\r\n    // log(severity, category, content)\r\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\r\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\r\n    // log(severity, category, content, stack)\r\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\r\n  } else {\r\n    throw new TypeError('input is valid');\r\n  }\r\n}\r\n\r\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\r\n  return {\r\n    verbose: log.verbose.bind(null, category),\r\n    info: log.info.bind(null, category),\r\n    warning: log.warning.bind(null, category),\r\n    error: log.error.bind(null, category)\r\n  };\r\n}\r\n\r\n// NOTE: argument 'category' is put the last parameter beacause typescript\r\n// doesn't allow optional argument put in front of required argument. This\r\n// order is different from a usual logging API.\r\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\r\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\r\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\r\n    return;\r\n  }\r\n\r\n  if (config.logDateTime) {\r\n    content = `${new Date().toISOString()}|${content}`;\r\n  }\r\n\r\n  if (config.logSourceLocation) {\r\n    // TODO: calculate source location from 'stack'\r\n  }\r\n\r\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\r\n}\r\n\r\n// tslint:disable-next-line:no-namespace\r\nnamespace log {\r\n  export function verbose(content: string): void;\r\n  export function verbose(category: string, content: string): void;\r\n  export function verbose(arg0: string, arg1?: string) {\r\n    log('verbose', arg0, arg1);\r\n  }\r\n  export function info(content: string): void;\r\n  export function info(category: string, content: string): void;\r\n  export function info(arg0: string, arg1?: string) {\r\n    log('info', arg0, arg1);\r\n  }\r\n  export function warning(content: string): void;\r\n  export function warning(category: string, content: string): void;\r\n  export function warning(arg0: string, arg1?: string) {\r\n    log('warning', arg0, arg1);\r\n  }\r\n  export function error(content: string): void;\r\n  export function error(category: string, content: string): void;\r\n  export function error(arg0: string, arg1?: string) {\r\n    log('error', arg0, arg1);\r\n  }\r\n\r\n  export function reset(config?: Logger.Config): void {\r\n    LOGGER_CONFIG_MAP = {};\r\n    // tslint:disable-next-line:no-backbone-get-set-outside-model\r\n    set('', config || {});\r\n  }\r\n  export function set(category: string, config: Logger.Config): void {\r\n    if (category === '*') {\r\n      reset(config);\r\n    } else {\r\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\r\n      LOGGER_CONFIG_MAP[category] = {\r\n        provider: config.provider || previousConfig.provider,\r\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\r\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\r\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\r\n                                                                      config.logSourceLocation\r\n      };\r\n    }\r\n\r\n    // TODO: we want to support wildcard or regex?\r\n  }\r\n}\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const Logger: Logger = log;\r\n\r\nexport declare namespace Profiler {\r\n  export interface Config {\r\n    maxNumberEvents?: number;\r\n    flushBatchSize?: number;\r\n    flushIntervalInMilliseconds?: number;\r\n  }\r\n\r\n  export type EventCategory = 'session'|'node'|'op'|'backend';\r\n\r\n  export interface Event {\r\n    end(): void;\r\n  }\r\n}\r\n\r\nclass Event implements Profiler.Event {\r\n  constructor(\r\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\r\n      private endCallback: (e: Event) => void) {}\r\n\r\n  end() {\r\n    this.endCallback(this);\r\n  }\r\n}\r\n\r\nclass EventRecord {\r\n  constructor(\r\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\r\n}\r\n\r\nexport class Profiler {\r\n  static create(config?: Profiler.Config): Profiler {\r\n    if (config === undefined) {\r\n      return new this();\r\n    }\r\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\r\n  }\r\n\r\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\r\n    this._started = false;\r\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\r\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\r\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\r\n  }\r\n\r\n  // start profiling\r\n  start() {\r\n    this._started = true;\r\n    this._timingEvents = [];\r\n    this._flushTime = now();\r\n    this._flushPointer = 0;\r\n  }\r\n\r\n  // stop profiling\r\n  stop() {\r\n    this._started = false;\r\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\r\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\r\n    }\r\n  }\r\n\r\n  // create an event scope for the specific function\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T): T;\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>): Promise<T>;\r\n\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>): T|Promise<T> {\r\n    const event = this._started ? this.begin(category, name) : undefined;\r\n    let isPromise = false;\r\n\r\n    try {\r\n      const res = func();\r\n\r\n      // we consider a then-able object is a promise\r\n      if (res && typeof (res as Promise<T>).then === 'function') {\r\n        isPromise = true;\r\n        return new Promise<T>((resolve, reject) => {\r\n          (res as Promise<T>)\r\n              .then(\r\n                  value => {  // fulfilled\r\n                    resolve(value);\r\n                    if (event) {\r\n                      event.end();\r\n                    }\r\n                  },\r\n                  reason => {  // rejected\r\n                    reject(reason);\r\n                    if (event) {\r\n                      event.end();\r\n                    }\r\n                  });\r\n        });\r\n      }\r\n\r\n      return res;\r\n\r\n    } finally {\r\n      if (!isPromise && event) {\r\n        event.end();\r\n      }\r\n    }\r\n  }\r\n\r\n  // begin an event\r\n  begin(category: Profiler.EventCategory, name: string): Event {\r\n    if (!this._started) {\r\n      throw new Error('profiler is not started yet');\r\n    }\r\n    const startTime = now();\r\n    this.flush(startTime);\r\n    return new Event(category, name, startTime, e => this.end(e));\r\n  }\r\n\r\n  // end the specific event\r\n  private end(event: Event) {\r\n    if (this._timingEvents.length < this._maxNumberEvents) {\r\n      const endTime = now();\r\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\r\n      this.flush(endTime);\r\n    }\r\n  }\r\n\r\n  private logOneEvent(event: EventRecord) {\r\n    Logger.verbose(\r\n        `Profiler.${event.category}`,\r\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\r\n  }\r\n\r\n  private flush(currentTime: number) {\r\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\r\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\r\n      // should flush when either batch size accumlated or interval elepsed\r\n\r\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\r\n           this._flushPointer < this._timingEvents.length;\r\n           this._flushPointer++) {\r\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\r\n      }\r\n\r\n      this._flushTime = now();\r\n    }\r\n  }\r\n\r\n  get started() {\r\n    return this._started;\r\n  }\r\n  private _started = false;\r\n  private _timingEvents: EventRecord[];\r\n\r\n  private readonly _maxNumberEvents: number;\r\n\r\n  private readonly _flushBatchSize: number;\r\n  private readonly _flushIntervalInMilliseconds: number;\r\n\r\n  private _flushTime: number;\r\n  private _flushPointer = 0;\r\n}\r\n\r\n/**\r\n * returns a number to represent the current timestamp in a resolution as high as possible.\r\n */\r\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Logger} from './instrument';\r\nimport * as bindingCore from './wasm-binding-core';\r\nimport {WasmCallArgument} from './wasm-binding-core';\r\n\r\nexport {WasmCallArgument} from './wasm-binding-core';\r\n\r\ninterface PerformanceData extends bindingCore.PerformanceData {\r\n  startTimeWorker?: number;\r\n  endTimeWorker?: number;\r\n}\r\n\r\nlet workers: Worker[];\r\nlet WORKER_NUMBER: number;\r\n\r\n// complete callback after\r\ntype CompleteCallbackType = (buffer: ArrayBuffer, perfData: PerformanceData) => void;\r\nlet completeCallbacks: CompleteCallbackType[][];\r\n\r\nlet initialized = false;\r\nlet initializing = false;\r\n\r\n/**\r\n * initialize the WASM instance.\r\n *\r\n * this function should be called before any other calls to methods in WasmBinding.\r\n */\r\nexport function init(numWorkers: number, initTimeout: number): Promise<void> {\r\n  if (initialized) {\r\n    return Promise.resolve();\r\n  }\r\n  if (initializing) {\r\n    throw new Error(`multiple calls to 'init()' detected.`);\r\n  }\r\n\r\n  initializing = true;\r\n  return new Promise<void>((resolve, reject) => {\r\n    // the timeout ID that used as a guard for rejecting binding init.\r\n    // we set the type of this variable to unknown because the return type of function 'setTimeout' is different\r\n    // in node.js (type Timeout) and browser (number)\r\n    let waitForBindingInitTimeoutId: unknown;\r\n    const clearWaitForBindingInit = () => {\r\n      if (waitForBindingInitTimeoutId !== undefined) {\r\n        // tslint:disable-next-line:no-any\r\n        clearTimeout(waitForBindingInitTimeoutId as any);\r\n        waitForBindingInitTimeoutId = undefined;\r\n      }\r\n    };\r\n\r\n    const onFulfilled = () => {\r\n      clearWaitForBindingInit();\r\n      resolve();\r\n      initializing = false;\r\n      initialized = true;\r\n    };\r\n    const onRejected = (err: unknown) => {\r\n      clearWaitForBindingInit();\r\n      reject(err);\r\n      initializing = false;\r\n    };\r\n\r\n    const bindingInitTask = bindingCore.init();\r\n    // a promise that gets rejected after 5s to work around the fact that\r\n    // there is an unrejected promise in the wasm glue logic file when\r\n    // it has some problem instantiating the wasm file\r\n    const rejectAfterTimeOutPromise = new Promise((resolve, reject) => {\r\n      waitForBindingInitTimeoutId = setTimeout(() => {\r\n        reject('Wasm init promise failed to be resolved within set timeout');\r\n      }, initTimeout);\r\n    });\r\n\r\n    // user requests positive number of workers\r\n    if (numWorkers > 0) {\r\n      Logger.verbose('WebAssembly-Workers', `User has requested ${numWorkers} Workers.`);\r\n      // check if environment supports usage of workers\r\n      if (areWebWorkersSupported()) {\r\n        Logger.verbose(\r\n            'WebAssembly-Workers', `Environment supports usage of Workers. Will spawn ${numWorkers} Workers`);\r\n        WORKER_NUMBER = numWorkers;\r\n      } else {\r\n        Logger.error('WebAssembly-Workers', 'Environment does not support usage of Workers. Will not spawn workers.');\r\n        WORKER_NUMBER = 0;\r\n      }\r\n    }\r\n\r\n    // user explicitly disables workers\r\n    else {\r\n      Logger.verbose('WebAssembly-Workers', 'User has disabled usage of Workers. Will not spawn workers.');\r\n      WORKER_NUMBER = 0;\r\n    }\r\n\r\n    const workerInitTasks = new Array<Promise<void>>(WORKER_NUMBER);\r\n    workers = new Array(WORKER_NUMBER);\r\n    completeCallbacks = new Array(WORKER_NUMBER);\r\n\r\n    for (let workerId = 0; workerId < WORKER_NUMBER; workerId++) {\r\n      const workerInitTask = new Promise<void>((resolveWorkerInit, rejectWorkerInit) => {\r\n        // tslint:disable-next-line\r\n        const worker = require('worker-loader?filename=onnx-worker.js!./worker/worker-main').default() as Worker;\r\n        workers[workerId] = worker;\r\n        completeCallbacks[workerId] = [];\r\n        worker.onerror = e => {\r\n          Logger.error('WebAssembly-Workers', `worker-${workerId} ERR: ${e}`);\r\n          if (initialized) {\r\n            // TODO: we need error-handling logic\r\n          } else {\r\n            rejectWorkerInit();\r\n          }\r\n        };\r\n        worker.onmessage = e => {\r\n          if (e && e.data && e.data.type) {\r\n            if (e.data.type === 'init-success') {\r\n              resolveWorkerInit();\r\n            } else if (e.data.type === 'ccall') {\r\n              const perfData = e.data.perfData as PerformanceData;\r\n              completeCallbacks[workerId].shift()!(e.data.buffer as ArrayBuffer, perfData);\r\n            } else {\r\n              throw new Error(`unknown message type from worker: ${e.data.type}`);\r\n            }\r\n          } else {\r\n            throw new Error(`missing message type from worker`);\r\n          }\r\n        };\r\n      });\r\n      workerInitTasks[workerId] = workerInitTask;\r\n    }\r\n\r\n    // TODO: Fix this hack to work-around the fact that the Wasm binding instantiate promise\r\n    // is unrejected incase there is a fatal exception (missing wasm file for example)\r\n    // we impose a healthy timeout (should not affect core framework performance)\r\n    Promise.race([bindingInitTask, rejectAfterTimeOutPromise])\r\n        .then(\r\n            () => {\r\n              // Wasm init promise resolved\r\n              Promise.all(workerInitTasks)\r\n                  .then(\r\n                      // Wasm AND Web-worker init promises resolved. SUCCESS!!\r\n                      onFulfilled,\r\n                      // Wasm init promise resolved. Some (or all) web-worker init promises failed to be resolved.\r\n                      // PARTIAL SUCCESS. Use Wasm backend with no web-workers (best-effort).\r\n                      (e) => {\r\n                        Logger.warning(\r\n                            'WebAssembly-Workers',\r\n                            `Unable to get all requested workers initialized. Will use Wasm backend with 0 workers. ERR: ${\r\n                                e}`);\r\n                        // TODO: need house-keeping logic to cull exisitng successfully initialized workers\r\n                        WORKER_NUMBER = 0;\r\n                        onFulfilled();\r\n                      });\r\n            },\r\n            // Wasm init promise failed to be resolved. COMPLETE FAILURE. Reject this init promise.\r\n            onRejected);\r\n  });\r\n}\r\n\r\n// Extending the WasmBinding class to deal with web-worker specific logic here\r\nexport class WasmBinding extends bindingCore.WasmBinding {\r\n  protected static instance?: WasmBinding;\r\n  static getInstance(): WasmBinding {\r\n    if (!WasmBinding.instance) {\r\n      WasmBinding.instance = new WasmBinding();\r\n    }\r\n    return WasmBinding.instance;\r\n  }\r\n  static get workerNumber() {\r\n    return WORKER_NUMBER;\r\n  }\r\n  ccallRemote(workerId: number, functionName: string, ...params: WasmCallArgument[]): Promise<PerformanceData> {\r\n    if (!initialized) {\r\n      throw new Error(`wasm not initialized. please ensure 'init()' is called.`);\r\n    }\r\n\r\n    if (workerId < 0 || workerId >= WORKER_NUMBER) {\r\n      throw new Error(`invalid worker ID ${workerId}. should be in range [0, ${WORKER_NUMBER})`);\r\n    }\r\n\r\n    const offset: number[] = [];\r\n    const size = WasmBinding.calculateOffsets(offset, params);\r\n    const buffer = new ArrayBuffer(size);\r\n    WasmBinding.ccallSerialize(new Uint8Array(buffer), offset, params);\r\n\r\n    const startTime = bindingCore.now();\r\n    workers[workerId].postMessage({type: 'ccall', func: functionName, buffer}, [buffer]);\r\n\r\n    return new Promise<PerformanceData>((resolve, reject) => {\r\n      completeCallbacks[workerId].push((buffer, perf) => {\r\n        perf.startTimeWorker = perf.startTime;\r\n        perf.endTimeWorker = perf.endTime;\r\n        perf.startTime = startTime;\r\n        perf.endTime = bindingCore.now();\r\n\r\n        WasmBinding.ccallDeserialize(new Uint8Array(buffer), offset, params);\r\n        resolve(perf);\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nfunction areWebWorkersSupported(): boolean {\r\n  // very simplistic check to make sure the environment supports usage of workers\r\n  // tslint:disable-next-line:no-any\r\n  if (typeof window !== 'undefined' && typeof (window as any).Worker !== 'undefined') {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from './attribute';\r\nimport {InferenceHandler} from './backend';\r\nimport {Graph} from './graph';\r\nimport {Tensor} from './tensor';\r\n\r\nexport interface Operator {\r\n  initialize(attributes: Attribute, node: Graph.Node, graph: Graph): void;\r\n  checkInputs(inputs: Tensor[]): boolean;\r\n  run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n}\r\n\r\nexport const NUMBER_TYPES: ReadonlyArray<Tensor.DataType> =\r\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\r\nexport const INT_TYPES: ReadonlyArray<Tensor.DataType> = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\r\nexport const FLOAT_TYPES: ReadonlyArray<Tensor.DataType> = ['float32', 'float64'];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {ProgramInfo} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\nexport enum FunctionType {\r\n  ValueBased,\r\n  Positional\r\n}\r\nexport interface GlslFunction<T extends FunctionType> {\r\n  body: string;\r\n  name: string;\r\n  type: T;\r\n}\r\nexport interface GlslValueFunction extends GlslFunction<FunctionType.ValueBased> {}\r\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\r\n  inputShape: ReadonlyArray<number>;\r\n  outputShape: ReadonlyArray<number>;\r\n}\r\n\r\nexport class GlslContext {\r\n  constructor(public glContext: WebGLContext, public programInfo: ProgramInfo) {}\r\n}\r\nexport abstract class GlslLib {\r\n  constructor(public context: GlslContext) {}\r\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\r\n  abstract getCustomTypes(): {[name: string]: string};\r\n}\r\n\r\n// abstraction to represent a GLSL library routine and it's dependencies\r\nexport class GlslLibRoutine {\r\n  constructor(public routineBody: string, public dependencies?: string[]) {}\r\n}\r\n\r\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\r\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\r\nexport class GlslLibRoutineNode {\r\n  dependencies: GlslLibRoutineNode[];\r\n  routineBody: string;\r\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\r\n    if (dependencies) {\r\n      this.dependencies = dependencies;\r\n    } else {\r\n      this.dependencies = [];\r\n    }\r\n\r\n    if (routineBody) {\r\n      this.routineBody = routineBody;\r\n    }\r\n  }\r\n  addDependency(node: GlslLibRoutineNode) {\r\n    if (node) {\r\n      this.dependencies.push(node);\r\n    }\r\n  }\r\n}\r\n\r\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\r\nexport class TopologicalSortGlslRoutines {\r\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\r\n    if (!nodes || nodes.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    if (nodes.length === 1) {\r\n      return nodes;\r\n    }\r\n\r\n    const cycleCheck = new Set<string>();\r\n    const alreadyTraversed = new Set<string>();\r\n    const result = new Array<GlslLibRoutineNode>();\r\n\r\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\r\n    return result;\r\n  }\r\n\r\n  private static createOrderedNodes(\r\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\r\n      result: GlslLibRoutineNode[]) {\r\n    for (let i = 0; i < graphNodes.length; ++i) {\r\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\r\n    }\r\n  }\r\n\r\n  private static dfsTraverse(\r\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\r\n    // if this root has already been traversed return\r\n    if (!root || alreadyTraversed.has(root.name)) {\r\n      return;\r\n    }\r\n\r\n    // cyclic dependency has been detected\r\n    if (cycleCheck.has(root.name)) {\r\n      throw new Error(`Cyclic dependency detected. Can't topologically sort routines needed for shader.`);\r\n    }\r\n\r\n    // hold this node to detect cycles if any\r\n    cycleCheck.add(root.name);\r\n\r\n    // traverse children in a dfs fashion\r\n    const dependencies = root.dependencies;\r\n    if (dependencies && dependencies.length > 0) {\r\n      for (let i = 0; i < dependencies.length; ++i) {\r\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\r\n      }\r\n    }\r\n\r\n    // add to result holder\r\n    result.push(root);\r\n\r\n    // mark this node as traversed so that we don't traverse from this again\r\n    alreadyTraversed.add(root.name);\r\n\r\n    // release the hold\r\n    cycleCheck.delete(root.name);\r\n  }\r\n}\r\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n// global object reference\nutil.global = typeof window !== \"undefined\" && window\n           || typeof global !== \"undefined\" && global\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n * @const\n */\nutil.isNode = Boolean(util.global.process && util.global.process.versions && util.global.process.versions.node);\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION=5 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION\"] = 5;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorName = reader.string();\n                    break;\n                case 2:\n                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                        message.quantParameterTensorNames = [];\n                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                        message.quantizationAnnotation = [];\n                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 13:\n                    if (!(message.externalData && message.externalData.length))\n                        message.externalData = [];\n                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.dataLocation = reader.int32();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {string}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denotation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Reshape} from '../../../ops/reshape';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {TextureLayout} from '../types';\r\nimport {getPackedShape} from '../utils';\r\n\r\nexport class WebGLReshape extends Reshape {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\r\n    const reshapedTensor = reshape(inferenceHandler, inputs[0], reshapedDims);\r\n    return [reshapedTensor];\r\n  }\r\n}\r\n\r\nexport function reshape(\r\n    inferenceHandler: WebGLInferenceHandler, input: Tensor, reshapedDims: ReadonlyArray<number>): Tensor {\r\n  const inputTD = inferenceHandler.getOrCreateTextureData(input);\r\n  let packedShape = reshapedDims;\r\n  if (inputTD.channels === 4) {\r\n    packedShape = getPackedShape(reshapedDims);\r\n  }\r\n  const newTextureLayout: TextureLayout = {\r\n    channels: inputTD.channels,\r\n    height: inputTD.height,\r\n    width: inputTD.width,\r\n    // handle reshaping into scalar Tensors\r\n    shape: packedShape.length !== 0 ? packedShape : [1],\r\n    strides: ShapeUtil.computeStrides(packedShape),\r\n    unpackedShape: reshapedDims,\r\n  };\r\n\r\n  const newTextureData = inferenceHandler.createSharedTextureData(newTextureLayout, input.type, inputTD.texture, {});\r\n  return newTextureData.tensor;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Graph} from './graph';\r\nimport {Operator} from './operators';\r\n\r\nexport interface OpSet {\r\n  domain: string;\r\n  version: number;\r\n}\r\n\r\nexport declare namespace OpSet {\r\n  interface OperatorConstructor {\r\n    (node: Graph.Node): Operator;\r\n  }\r\n\r\n  /**\r\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\r\n   */\r\n  type Domain = ''|'ai.onnx.ml';\r\n\r\n  /**\r\n   * A resolve rule consists of 4 items: opType, opSetDomain, versionSelector and operatorConstructor\r\n   */\r\n  type ResolveRule = [string, Domain, string, OperatorConstructor];\r\n}\r\n\r\nexport function resolveOperator(\r\n    node: Graph.Node, opsets: ReadonlyArray<OpSet>, rules: ReadonlyArray<OpSet.ResolveRule>) {\r\n  for (const rule of rules) {\r\n    const opType = rule[0];\r\n    const domain = rule[1];\r\n    const versionSelector = rule[2];\r\n    const opConstructor = rule[3];\r\n\r\n    if (node.opType === opType) {  // operator type matches\r\n      for (const opset of opsets) {\r\n        // opset '' and 'ai.onnx' are considered the same.\r\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\r\n          if (matchSelector(opset.version, versionSelector)) {\r\n            return opConstructor(node);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\r\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\r\n}\r\n\r\nfunction matchSelector(version: number, selector: string): boolean {\r\n  if (selector.endsWith('+')) {\r\n    // minimum version match ('7+' expects version>=7)\r\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\r\n    return !isNaN(rangeStart) && rangeStart <= version;\r\n  } else if (selector.split('-').length === 2) {\r\n    // range match ('6-8' expects 6<=version<=8)\r\n    const pair = selector.split('-');\r\n    const rangeStart = Number.parseInt(pair[0], 10);\r\n    const rangeEnd = Number.parseInt(pair[1], 10);\r\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\r\n  } else {\r\n    // exact match ('7' expects version===7)\r\n    return Number.parseInt(selector, 10) === version;\r\n  }\r\n}\r\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\n// currently this operator supports ONLY 'test' mode\r\n// inputs/outputs and parameters will reflect that\r\n// the operator implementation only supports test mode\r\nexport abstract class BatchNormalization implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.epsilon = attributes.getFloat('epsilon', 1e-5);\r\n    this.momentum = attributes.getFloat('momentum', 0.9);\r\n    this.spatial = attributes.getInt('spatial', 1);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 5) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    const X = inputs[0];\r\n    const scale = inputs[1];\r\n    const B = inputs[2];\r\n    const mean = inputs[3];\r\n    const var_ = inputs[4];\r\n\r\n    // input should atleast have three dimensions - N,C,dim1,...,dimn\r\n    // other inputs can have only one dimensions\r\n    if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\r\n        var_.dims.length !== 1) {\r\n      return false;\r\n    }\r\n    if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\r\n        var_.dims[0] !== X.dims[1]) {\r\n      return false;\r\n    }\r\n    if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\r\n        (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\r\n        (var_.type !== 'float32' && var_.type !== 'float64')) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  protected epsilon: number;\r\n  protected momentum: number;\r\n  protected spatial: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class BinaryOp implements Operator {\r\n  constructor(\r\n      protected typeConstraint: ReadonlyArray<Tensor.DataType>, protected opType?: string,\r\n      protected resultType?: Tensor.DataType) {}\r\n\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 2) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (this.typeConstraint.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n    if (inputs[0].type !== inputs[1].type) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Conv implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\r\n    this.autoPad = attributes.getString('auto_pad', 'NOTSET');\r\n    this.dilations = attributes.getInts('dilations', [1, 1]);\r\n    this.group = attributes.getInt('group', 1);\r\n    this.kernelShape = attributes.getInts('kernel_shape', []);\r\n    this.pads = attributes.getInts('pads', [0, 0, 0, 0]);\r\n    this.strides = attributes.getInts('strides', [1, 1]);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    // Refer to the below link for all input checks\r\n    // https://github.com/onnx/onnx/blob/master/docs/Operators.md#Conv\r\n    if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\r\n      return false;\r\n    }\r\n\r\n    // TODO : Need to add support for multi-dimensional conv\r\n    // currently only support 2-dimensional conv\r\n    if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\r\n      return false;\r\n    }\r\n\r\n    // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\r\n    const dataChannel = inputs[0].dims[1];\r\n    const filterInChannel = inputs[1].dims[1] * this.group;\r\n    if (dataChannel !== filterInChannel) {\r\n      return false;\r\n    }\r\n\r\n    // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\r\n    if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\r\n      return false;\r\n    }\r\n\r\n    const spatialRank = inputs[0].dims.length - 2;\r\n    // wrong dilations dimension\r\n    if (this.dilations.length !== spatialRank) {\r\n      return false;\r\n    }\r\n\r\n    // Wrong strides dimension\r\n    if (this.strides.length !== spatialRank) {\r\n      return false;\r\n    }\r\n\r\n    // Wrong pads dimension\r\n    if (this.pads.length !== spatialRank * 2) {\r\n      return false;\r\n    }\r\n\r\n    // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\r\n    // (the first 2 dims are batch_size and channels)\r\n    if (this.kernelShape.length !== 0 && this.kernelShape.length !== inputs[1].dims.length - 2) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    // TODO : Need to add support for float64\r\n    if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\r\n      return false;\r\n    }\r\n\r\n    if (inputs.length === 3 && inputs[2].type !== 'float32') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected autoPad: string;\r\n  protected dilations: number[];\r\n  protected group: number;\r\n  protected kernelShape: number[];\r\n  protected pads: number[];\r\n  protected strides: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {MatMul} from '../../../ops/matmul';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, MatMulUtil, ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuMatMul extends MatMul {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = matMul(inputs[0], inputs[1]);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function matMul(a: Tensor, b: Tensor) {\r\n  const [dimsA, dimsB] = MatMulUtil.preprocessInputShapes(a.dims, b.dims);\r\n  const mat2dShape = [dimsA[dimsA.length - 2], dimsB[dimsB.length - 1]];\r\n  const shape = BroadcastUtil.calcShape(dimsA, dimsB, true);\r\n  if (!shape) {\r\n    // the inputs cannot broadcast or cannot multiply\r\n    throw new Error(`input dimensions do not match the requirement`);\r\n  }\r\n  const size = ShapeUtil.size(shape);\r\n  const num2dMatrices = size / (mat2dShape[0] * mat2dShape[1]);\r\n\r\n  const y = new Tensor(shape, a.type === 'float64' || b.type === 'float64' ? 'float64' : 'float32');\r\n  let offsetY = 0;\r\n  const indices = new Array<number>(shape.length);\r\n  const indicesA = new Array<number>(a.dims.length);\r\n  const indicesB = new Array<number>(b.dims.length);\r\n  for (let i = 0; i < num2dMatrices; i++) {\r\n    // traverse nd array at 2d level\r\n    indices[shape.length - 2] = 0;\r\n    indices[shape.length - 1] = 0;\r\n    let rest = i;\r\n    for (let j = shape.length - 3; j >= 0; j--) {\r\n      indices[j] = rest % shape[j];\r\n      rest = Math.floor(rest / shape[j]);\r\n    }\r\n    // map the \"broadcasted\" index to original index\r\n    BroadcastUtil.fillIndex(indices, a.dims, indicesA);\r\n    BroadcastUtil.fillIndex(indices, b.dims, indicesB);\r\n    // calculate subarrays offset for A and B\r\n    const offsetA = indicesA.length <= 2 ? 0 : ShapeUtil.indicesToOffset(indicesA, a.strides, shape.length - 2);\r\n    const offsetB = indicesB.length <= 2 ? 0 : ShapeUtil.indicesToOffset(indicesB, b.strides, shape.length - 2);\r\n    // multiply like conventional matrices\r\n    matMul2d(\r\n        a.floatData.subarray(offsetA), b.floatData.subarray(offsetB), y.floatData.subarray(offsetY), false, false, 1, 0,\r\n        mat2dShape[0], mat2dShape[1], dimsA[dimsA.length - 1]);\r\n    offsetY += mat2dShape[0] * mat2dShape[1];\r\n  }\r\n  return y;\r\n}\r\n\r\n/**\r\n * perform matrix multiply on C = alpha * A * B + beta * C\r\n * @param A data of tensor A, whose shape is [M,K] or [K,M] (if transA)\r\n * @param B data of tensor B, whose shape is [K,N] or [N,K] (if transB)\r\n * @param C data of tensor C, whose shape is [M,N]\r\n */\r\nexport function matMul2d(\r\n    A: Float32Array|Float64Array, B: Float32Array|Float64Array, C: Float32Array|Float64Array, transA: boolean,\r\n    transB: boolean, alpha: number, beta: number, M: number, N: number, K: number) {\r\n  if (transA && transB) {\r\n    return matMul2d_tAtB(A, B, C, alpha, beta, M, N, K);\r\n  } else if (transA) {\r\n    return matMul2d_tA(A, B, C, alpha, beta, M, N, K);\r\n  } else if (transB) {\r\n    return matMul2d_tB(A, B, C, alpha, beta, M, N, K);\r\n  } else {\r\n    return matMul2d_(A, B, C, alpha, beta, M, N, K);\r\n  }\r\n}\r\n\r\nfunction matMul2d_(\r\n    A: Float32Array|Float64Array, B: Float32Array|Float64Array, C: Float32Array|Float64Array, alpha: number,\r\n    beta: number, M: number, N: number, K: number) {\r\n  let offsetA = 0, offsetB = 0, offsetC = 0;\r\n  for (let mm = 0; mm < M; mm++) {\r\n    for (let nn = 0; nn < N; nn++) {\r\n      let sum = 0;\r\n      for (let kk = 0; kk < K; kk++) {\r\n        sum += A[offsetA] * B[offsetB];\r\n        offsetA += 1;\r\n        offsetB += N;\r\n      }\r\n      offsetA -= K;\r\n      offsetB -= N * K;\r\n      C[offsetC] = alpha * sum + beta * C[offsetC];\r\n      offsetC++;\r\n      offsetB++;\r\n    }\r\n    offsetB -= N;\r\n    offsetA += K;\r\n  }\r\n}\r\n\r\nfunction matMul2d_tA(\r\n    A: Float32Array|Float64Array, B: Float32Array|Float64Array, C: Float32Array|Float64Array, alpha: number,\r\n    beta: number, M: number, N: number, K: number) {\r\n  let offsetA = 0, offsetB = 0, offsetC = 0;\r\n  for (let mm = 0; mm < M; mm++) {\r\n    for (let nn = 0; nn < N; nn++) {\r\n      let sum = 0;\r\n      for (let kk = 0; kk < K; kk++) {\r\n        sum += A[offsetA] * B[offsetB];\r\n        offsetA += M;\r\n        offsetB += N;\r\n      }\r\n      offsetA -= M * K;\r\n      offsetB -= N * K;\r\n      C[offsetC] = alpha * sum + beta * C[offsetC];\r\n      offsetC++;\r\n      offsetB++;\r\n    }\r\n    offsetB -= N;\r\n    offsetA++;\r\n  }\r\n}\r\n\r\nfunction matMul2d_tB(\r\n    A: Float32Array|Float64Array, B: Float32Array|Float64Array, C: Float32Array|Float64Array, alpha: number,\r\n    beta: number, M: number, N: number, K: number) {\r\n  let offsetA = 0, offsetB = 0, offsetC = 0;\r\n  for (let mm = 0; mm < M; mm++) {\r\n    for (let nn = 0; nn < N; nn++) {\r\n      let sum = 0;\r\n      for (let kk = 0; kk < K; kk++) {\r\n        sum += A[offsetA] * B[offsetB];\r\n        offsetA += 1;\r\n        offsetB += 1;\r\n      }\r\n      offsetA -= K;\r\n      offsetB -= K;\r\n      C[offsetC] = alpha * sum + beta * C[offsetC];\r\n      offsetC++;\r\n      offsetB += K;\r\n    }\r\n    offsetB -= N * K;\r\n    offsetA += K;\r\n  }\r\n}\r\n\r\nfunction matMul2d_tAtB(\r\n    A: Float32Array|Float64Array, B: Float32Array|Float64Array, C: Float32Array|Float64Array, alpha: number,\r\n    beta: number, M: number, N: number, K: number) {\r\n  let offsetA = 0, offsetB = 0, offsetC = 0;\r\n  for (let mm = 0; mm < M; mm++) {\r\n    for (let nn = 0; nn < N; nn++) {\r\n      let sum = 0;\r\n      for (let kk = 0; kk < K; kk++) {\r\n        sum += A[offsetA] * B[offsetB];\r\n        offsetA += M;\r\n        offsetB += 1;\r\n      }\r\n      offsetA -= M * K;\r\n      offsetB -= K;\r\n      C[offsetC] = alpha * sum + beta * C[offsetC];\r\n      offsetC++;\r\n      offsetB += K;\r\n    }\r\n    offsetB -= N * K;\r\n    offsetA++;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class MatMul implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 2) {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[0].type !== inputs[1].type) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Gemm implements Operator {\r\n  constructor(isOptionalC: boolean) {\r\n    this.isOptionalC = isOptionalC;\r\n  }\r\n\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.transA = attributes.getInt('transA', 0) !== 0;\r\n    this.transB = attributes.getInt('transB', 0) !== 0;\r\n    this.alpha = attributes.getFloat('alpha', 1);\r\n    this.beta = attributes.getFloat('beta', 1);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs) {\r\n      return false;\r\n    }\r\n    if (this.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\r\n      return false;\r\n    }\r\n    if (!this.isOptionalC && inputs.length !== 3) {\r\n      return false;\r\n    }\r\n\r\n    // 'C' can be of dimensionality 1 or 2 only\r\n    if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\r\n        (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\r\n        (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\r\n      return false;\r\n    }\r\n\r\n    if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected transA: boolean;\r\n  protected transB: boolean;\r\n  protected alpha: number;\r\n  protected beta: number;\r\n\r\n  protected isOptionalC: boolean;  // in opset 11, C becomes optional\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class InstanceNormalization implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.epsilon = attributes.getFloat('epsilon', 1e-5);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 3) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    const X = inputs[0];\r\n    const scale = inputs[1];\r\n    const B = inputs[2];\r\n\r\n    // input should atleast have three dimensions - N,C,dim1,...,dimn\r\n    // other inputs can have only one dimensions\r\n    if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\r\n      return false;\r\n    }\r\n    if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\r\n      return false;\r\n    }\r\n    if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\r\n        (B.type !== 'float32' && B.type !== 'float64')) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  protected epsilon: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nclass PoolBase {\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected autoPad: string;\r\n  protected ceilMode: number;\r\n  protected countIncludePad: boolean;\r\n  protected kernelShape: number[];\r\n  protected strides: number[];\r\n  protected pads: number[];\r\n}\r\n\r\nexport abstract class AveragePool extends PoolBase implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.autoPad = attributes.getString('auto_pad', 'NOTSET');\r\n    this.kernelShape = attributes.getInts('kernel_shape');\r\n    this.strides = attributes.getInts('strides', []);\r\n    this.pads = attributes.getInts('pads', []);\r\n    this.countIncludePad = (attributes.getInt('count_include_pad', 0) === 0 ? false : true);\r\n    this.ceilMode = attributes.getInt('ceil_mode', 0);\r\n\r\n    // TODO: support attribute 'ceil_mode'\r\n    if (this.ceilMode !== 0) {\r\n      throw new Error(`using ceil() in shape computation is not yet supported for AveragePool`);\r\n    }\r\n  }\r\n}\r\n\r\nexport abstract class GlobalAveragePool extends PoolBase implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.countIncludePad = (attributes.getInt('count_include_pad', 0) === 0 ? false : true);\r\n  }\r\n}\r\n\r\nexport abstract class MaxPool extends PoolBase implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.autoPad = attributes.getString('auto_pad', 'NOTSET');\r\n    this.kernelShape = attributes.getInts('kernel_shape');\r\n    this.strides = attributes.getInts('strides', []);\r\n    this.pads = attributes.getInts('pads', []);\r\n    this.ceilMode = attributes.getInt('ceil_mode', 0);\r\n    this.storageOrder = attributes.getInt('storage_order', 0);\r\n\r\n    // TODO: support attribute 'ceil_mode' and 'storage_order'\r\n    if (this.storageOrder !== 0) {\r\n      throw new Error(`column major storage order is not yet supported for MaxPool`);\r\n    }\r\n    if (this.ceilMode !== 0) {\r\n      throw new Error(`using ceil() in shape computation is not yet supported for MaxPool`);\r\n    }\r\n  }\r\n\r\n  protected storageOrder: number;\r\n}\r\n\r\nexport abstract class GlobalMaxPool extends PoolBase implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {}\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Softmax implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axis = attributes.getInt('axis', 1);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axis: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Sum implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length === 0) {\r\n      return false;\r\n    }\r\n\r\n    const length = inputs[0].dims.length;\r\n    for (let i = 1; i < inputs.length; i++) {\r\n      if (length !== inputs[i].dims.length) {\r\n        return false;\r\n      }\r\n\r\n      for (let j = 0; j < length; j++) {\r\n        if (inputs[0].dims[j] !== inputs[i].dims[j]) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n    for (let i = 1; i < inputs.length; i++) {\r\n      if (inputs[0].type !== inputs[i].type) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","import * as platform from 'platform';\r\n\r\nimport * as onnx from './api';\r\nimport {Backend, Environment, Onnx} from './api';\r\n\r\ninterface ENV extends Environment {\r\n  readonly onnx: Onnx;\r\n  readonly backend: Backend;\r\n  readonly platform: Platform;\r\n}\r\n\r\nclass EnvironmentImpl implements ENV {\r\n  public readonly onnx = onnx;\r\n  public readonly backend = onnx.backend;\r\n  public readonly platform = platform;\r\n\r\n  public debug = false;\r\n}\r\n\r\nexport const env: ENV = new EnvironmentImpl();\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Onnx} from './onnx';\r\nimport * as onnxImpl from './onnx-impl';\r\n\r\n// get or create the onnx object in the global context\r\nconst onnxGlobal = ((typeof window !== 'undefined') ? window : global) as {onnx?: Onnx};\r\nconst onnx: Onnx = onnxImpl;\r\nonnxGlobal.onnx = onnx;\r\n\r\n// set module exported object to global.onnx\r\nexport = onnxImpl;\r\n\r\n// declaration of object global.onnx\r\ndeclare global {\r\n  /**\r\n   * the global onnxjs exported object\r\n   */\r\n  const onnx: Onnx;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {FLOAT_TYPES, NUMBER_TYPES} from '../../operators';\r\nimport {OpSet} from '../../opset';\r\n\r\nimport {CpuArgMax} from './ops/argMax';\r\nimport {CpuBatchNormalization} from './ops/batch-normalization';\r\nimport {CpuBinaryOp} from './ops/binary-op';\r\nimport {CpuCast} from './ops/cast';\r\nimport {CpuConcat} from './ops/concat';\r\nimport {CpuConv} from './ops/conv';\r\nimport {CpuDropout} from './ops/dropout';\r\nimport {CpuExpand} from './ops/expand';\r\nimport {CpuFlatten} from './ops/flatten';\r\nimport {CpuGather} from './ops/gather';\r\nimport {CpuGemm} from './ops/gemm';\r\nimport {CpuImageScaler} from './ops/image-scaler';\r\nimport {CpuInstanceNormalization} from './ops/instance-normalization';\r\nimport {CpuLrn} from './ops/lrn';\r\nimport {CpuMatMul} from './ops/matmul';\r\nimport {CpuPad} from './ops/pad';\r\nimport {CpuAveragePool, CpuGlobalAveragePool, CpuGlobalMaxPool, CpuMaxPool} from './ops/pool';\r\nimport * as cpuReduce from './ops/reduce';\r\nimport {CpuReshape} from './ops/reshape';\r\nimport {CpuShape} from './ops/shape';\r\nimport {CpuSlice, CpuSliceV10} from './ops/slice';\r\nimport {CpuSoftmax} from './ops/softmax';\r\nimport {CpuSqueeze} from './ops/squeeze';\r\nimport {CpuSum} from './ops/sum';\r\nimport {CpuTile} from './ops/tile';\r\nimport {CpuTranspose} from './ops/transpose';\r\nimport * as unaryOps from './ops/unary-op';\r\nimport {CpuUnaryOp} from './ops/unary-op';\r\nimport {CpuUnsqueeze} from './ops/unsqueeze';\r\nimport {CpuUpsample, CpuUpsampleV9} from './ops/upsample';\r\n\r\nexport const CPU_OP_RESOLVE_RULES: ReadonlyArray<OpSet.ResolveRule> = [\r\n  ['Abs', '', '6+', () => new CpuUnaryOp(NUMBER_TYPES, unaryOps.abs)],\r\n  ['Acos', '', '7+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.acos)],\r\n  ['Acosh', '', '9+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.acosh)],\r\n  ['Add', '', '7+', () => new CpuBinaryOp(NUMBER_TYPES, (e1, e2) => (e1 + e2))],\r\n  ['And', '', '7+', () => new CpuBinaryOp(['bool'], (e1, e2) => (e1 && e2))],\r\n  ['ArgMax', '', '1-11', () => new CpuArgMax()],\r\n  ['Asin', '', '7+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.asin)],\r\n  ['Asinh', '', '9+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.asinh)],\r\n  ['Atan', '', '7+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.atan)],\r\n  ['Atanh', '', '9+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.atanh)],\r\n  ['AveragePool', '', '7-10', () => new CpuAveragePool()],  // TODO: support new attributes for AveragePool-10\r\n  ['BatchNormalization', '', '7+', () => new CpuBatchNormalization()],\r\n  ['Cast', '', '6+', () => new CpuCast()],\r\n  ['Ceil', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.ceil)],\r\n  ['Clip', '', '6-10', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.clip, unaryOps.clipInitializer)],\r\n  ['Concat', '', '4+', () => new CpuConcat()],\r\n  ['Conv', '', '1+', () => new CpuConv()],\r\n  ['Cos', '', '7+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.cos)],\r\n  ['Cosh', '', '9+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.cosh)],\r\n  ['Div', '', '7+', () => new CpuBinaryOp(NUMBER_TYPES, (e1, e2) => (e1 / e2))],\r\n  ['Dropout', '', '7+', () => new CpuDropout()],\r\n  ['Elu', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.elu, unaryOps.eluInitializer)],\r\n  ['Exp', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.exp)],\r\n  ['Expand', '', '8+', () => new CpuExpand()],\r\n  ['Flatten', '', '1+', () => new CpuFlatten()],\r\n  ['Floor', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.floor)],\r\n  ['Gather', '', '1+', () => new CpuGather()],\r\n  ['Gemm', '', '7-10', () => new CpuGemm(false)],\r\n  ['Gemm', '', '11+', () => new CpuGemm(true)],\r\n  ['GlobalAveragePool', '', '1+', () => new CpuGlobalAveragePool()],\r\n  ['GlobalMaxPool', '', '1+', () => new CpuGlobalMaxPool()],\r\n  ['ImageScaler', '', '1+', () => new CpuImageScaler()],\r\n  ['InstanceNormalization', '', '6+', () => new CpuInstanceNormalization()],\r\n  ['IsNaN', '', '9+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.isNan, undefined, 'bool')],\r\n  ['LeakyRelu', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.leakyRelu, unaryOps.leakyReluInitializer)],\r\n  ['Less', '', '7+', () => new CpuBinaryOp(NUMBER_TYPES, (a, b) => a < b ? 1 : 0, undefined, 'bool')],\r\n  ['Log', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.log)],\r\n  ['LRN', '', '1+', () => new CpuLrn()],\r\n  ['MatMul', '', '1+', () => new CpuMatMul()],\r\n  ['MaxPool', '', '1-9', () => new CpuMaxPool()],  // TODO: support new attributes for MaxPool-8 and MaxPool-10\r\n  ['Mul', '', '7+', () => new CpuBinaryOp(NUMBER_TYPES, (e1, e2) => (e1 * e2))],\r\n  ['Neg', '', '6+', () => new CpuUnaryOp(NUMBER_TYPES, unaryOps.neg)],\r\n  ['Not', '', '1+', () => new CpuUnaryOp(['bool'], unaryOps.not, undefined, 'bool')],\r\n  ['Or', '', '7+', () => new CpuBinaryOp(['bool'], (e1, e2) => (e1 || e2))],\r\n  ['PRelu', '', '7+', () => new CpuBinaryOp(NUMBER_TYPES, (e1, e2) => (e1 >= 0 ? e1 : e1 * e2))],\r\n  ['Pad', '', '2-10', () => new CpuPad()],\r\n  ['Pow', '', '7+', () => new CpuBinaryOp(NUMBER_TYPES, (e1, e2) => (e1 ** e2))],\r\n  ['Reciprocal', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.reciprocal)],\r\n  ['ReduceLogSum', '', '1+', () => new cpuReduce.CpuReduceLogSum()],\r\n  ['ReduceMax', '', '1+', () => new cpuReduce.CpuReduceMax()],\r\n  ['ReduceMean', '', '1+', () => new cpuReduce.CpuReduceMean()],\r\n  ['ReduceMin', '', '1+', () => new cpuReduce.CpuReduceMin()],\r\n  ['ReduceProd', '', '1+', () => new cpuReduce.CpuReduceProd()],\r\n  ['ReduceSum', '', '1+', () => new cpuReduce.CpuReduceSum()],\r\n  ['ReduceSumSquare', '', '1+', () => new cpuReduce.CpuReduceSumSquare()],\r\n  ['Relu', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.relu)],\r\n  ['Reshape', '', '5+', () => new CpuReshape()],\r\n  ['Shape', '', '1+', () => new CpuShape()],\r\n  ['Sigmoid', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.sigmoid)],\r\n  ['Sign', '', '9+', () => new CpuUnaryOp(NUMBER_TYPES, unaryOps.sign)],\r\n  ['Sin', '', '7+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.sin)],\r\n  ['Sinh', '', '9+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.sinh)],\r\n  ['Slice', '', '10+', () => new CpuSliceV10()],  // TODO: support 'steps' for Slice-10\r\n  ['Slice', '', '1-9', () => new CpuSlice()],\r\n  ['Softmax', '', '1+', () => new CpuSoftmax()],\r\n  ['Sqrt', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.sqrt)],\r\n  ['Squeeze', '', '1+', () => new CpuSqueeze()],\r\n  ['Sub', '', '7+', () => new CpuBinaryOp(NUMBER_TYPES, (e1, e2) => (e1 - e2))],\r\n  ['Sum', '', '6+', () => new CpuSum()],  // TODO: support multidirectional broadcast for Sum-8\r\n  ['Tan', '', '7+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.tan)],\r\n  ['Tanh', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.tanh)],\r\n  ['Tile', '', '6+', () => new CpuTile()],\r\n  ['Transpose', '', '1+', () => new CpuTranspose()],\r\n  ['Unsqueeze', '', '1+', () => new CpuUnsqueeze()],\r\n  ['Upsample', '', '7-8', () => new CpuUpsample()],\r\n  ['Upsample', '', '9', () => new CpuUpsampleV9()],\r\n  ['Xor', '', '7+', () => new CpuBinaryOp(['bool'], (e1, e2) => (e1 ^ e2))],\r\n];\r\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Concat implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axis = attributes.getInt('axis');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length < 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    const inputType = inputs[0].type;\r\n    const inputDimensionality = inputs[0].dims.length;\r\n\r\n    // TODO: Support string concat\r\n    if (inputType === 'string') {\r\n      return false;\r\n    }\r\n\r\n    for (const input of inputs) {\r\n      // make sure types of all inputs match\r\n      if (input.type !== inputType) {\r\n        return false;\r\n      }\r\n\r\n      // make sure the dimensionality of all inputs are the same\r\n      if (input.dims.length !== inputDimensionality) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axis: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Dropout implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.ratio = attributes.getFloat('ratio', 0.5);\r\n    this.testMode = true;  // this is a hack to reflect that test mode is hardcoded\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected ratio: number;\r\n  protected testMode: boolean;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Flatten implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axis = attributes.getInt('axis', 1);  // default axis is 1\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    const r = inputs[0].dims.length;\r\n    if (r === 0) {\r\n      return false;  // scalar tensor is not supported\r\n    }\r\n\r\n    if (this.axis < -r || this.axis > r) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    // TODO: Support string type\r\n    if (inputs[0].type === 'string') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axis: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {NUMBER_TYPES, Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Gather implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axis = attributes.getInt('axis', 0);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 2) {\r\n      return false;\r\n    }\r\n    const tensorRank = inputs[0].dims.length;\r\n    if (tensorRank < 1) {\r\n      return false;\r\n    }\r\n    if (this.axis < -tensorRank || this.axis > tensorRank - 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n    if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  protected axis: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class ImageScaler implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.scale = attributes.getFloat('scale');\r\n    this.bias = attributes.getFloats('bias');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[0].dims.length !== 4) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected scale: number;\r\n  protected bias: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Pad implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.mode = attributes.getString('mode', 'constant');\r\n    this.value = attributes.getFloat('value', 0.0);\r\n    this.pads = attributes.getInts('pads');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected mode: string;\r\n  protected pads: number[];\r\n  protected value: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {NUMBER_TYPES, Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class ReduceBase implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axes = attributes.getInts('axes', []);\r\n    this.keepDims = attributes.getInt('keepdims', 1) === 1;\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axes: number[];\r\n  protected keepDims: boolean;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {NUMBER_TYPES, Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Reshape implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 2 || inputs[1].dims.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[1].type !== 'int32') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {NUMBER_TYPES, Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Slice implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.starts = attributes.getInts('starts');\r\n    this.ends = attributes.getInts('ends');\r\n    this.axes = attributes.getInts('axes', []);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  protected axes: number[];\r\n  protected ends: number[];\r\n  protected starts: number[];\r\n}\r\n\r\nexport abstract class SliceV10 implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length < 3 || inputs.length > 5) {\r\n      return false;\r\n    }\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\r\n      return false;\r\n    }\r\n    if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\r\n      return false;\r\n    }\r\n    if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\r\n      return false;\r\n    }\r\n    if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Squeeze implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axes = attributes.getInts('axes');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    // TODO: Support string type\r\n    if (inputs[0].type === 'string') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axes: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {NUMBER_TYPES, Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Tile implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 2) {\r\n      return false;\r\n    }\r\n    if (inputs[1].dims.length !== 1) {\r\n      return false;\r\n    }\r\n    if (inputs[1].dims[0] !== inputs[0].dims.length) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n    if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Transpose implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.perm = attributes.getInts('perm', []);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected perm: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../../../attribute';\r\nimport {UnaryOp} from '../../../ops/unary-op';\r\nimport {Tensor} from '../../../tensor';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\ntype UnaryOpCoreFunction<T> = (input: Tensor.NumberType, output: Tensor.NumberType, attributes?: T) => void;\r\n\r\nexport class CpuUnaryOp<T = unknown> extends UnaryOp {\r\n  private attributes?: T;\r\n\r\n  constructor(\r\n      typeConstraint: ReadonlyArray<Tensor.DataType>, private func: UnaryOpCoreFunction<T>,\r\n      private attributesInitializer?: (attributes: Attribute) => T, resultType?: Tensor.DataType) {\r\n    super(typeConstraint, resultType);\r\n  }\r\n\r\n  initialize(attributes: Attribute) {\r\n    if (this.attributesInitializer) {\r\n      this.attributes = this.attributesInitializer(attributes);\r\n    }\r\n  }\r\n\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    // TODO:  use webpack + ts-loader + CustomTransformer\r\n    // tslint:disable-next-line:max-line-length\r\n    // https://github.com/TypeStrong/ts-loader#getcustomtransformers-----before-transformerfactory-after-transformerfactory--\r\n    const output = unaryOp(inputs[0], this.func, this.attributes, this.resultType);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function unaryOp<T>(\r\n    x: Tensor, func: UnaryOpCoreFunction<T>, attributes: T, resultType?: Tensor.DataType): Tensor {\r\n  const output = new Tensor(x.dims, resultType ? resultType : x.type);\r\n  const inputNumberData = x.data as Tensor.NumberType;\r\n  const outputNumberData = output.data as Tensor.NumberType;\r\n  func(inputNumberData, outputNumberData, attributes);\r\n  return output;\r\n}\r\n\r\n// specific implementations pertaining to each unary-op.\r\n// although this can be accomplished with an op lambda\r\n// that approach was found to be detrimental to performance\r\n// so we use this approach which involves slight code duplication\r\n\r\nexport function abs(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.abs(input[i]);\r\n  }\r\n}\r\n\r\nexport function acos(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.acos(input[i]);\r\n  }\r\n}\r\n\r\nexport function acosh(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.acosh(input[i]);\r\n  }\r\n}\r\n\r\nexport function asin(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.asin(input[i]);\r\n  }\r\n}\r\n\r\nexport function asinh(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.asinh(input[i]);\r\n  }\r\n}\r\n\r\nexport function atan(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.atan(input[i]);\r\n  }\r\n}\r\n\r\nexport function atanh(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.atanh(input[i]);\r\n  }\r\n}\r\n\r\nexport function ceil(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.ceil(input[i]);\r\n  }\r\n}\r\n\r\nexport function clipInitializer(attributes: Attribute) {\r\n  return {\r\n    min: attributes.getFloat('min', -3.4028234663852886e+38),\r\n    max: attributes.getFloat('max', 3.4028234663852886e+38)\r\n  };\r\n}\r\n\r\nexport function clip(input: Tensor.NumberType, output: Tensor.NumberType, attributes: {min: number, max: number}) {\r\n  const min = attributes.min;\r\n  const max = attributes.max;\r\n  for (let i = 0; i < input.length; i++) {\r\n    const value = input[i];\r\n    output[i] = (value < min) ? min : (value > max) ? max : value;\r\n  }\r\n}\r\n\r\nexport function cos(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.cos(input[i]);\r\n  }\r\n}\r\n\r\nexport function cosh(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.cosh(input[i]);\r\n  }\r\n}\r\n\r\nexport function eluInitializer(attributes: Attribute) {\r\n  return attributes.getFloat('alpha', 1.0);\r\n}\r\n\r\nexport function elu(input: Tensor.NumberType, output: Tensor.NumberType, attributes: number) {\r\n  const alpha = attributes;\r\n  for (let i = 0; i < input.length; i++) {\r\n    const value = input[i];\r\n    output[i] = value >= 0 ? value : alpha * (Math.exp(value) - 1.0);\r\n  }\r\n}\r\n\r\nexport function exp(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.exp(input[i]);\r\n  }\r\n}\r\n\r\nexport function floor(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.floor(input[i]);\r\n  }\r\n}\r\n\r\nexport function isNan(input: Tensor.NumberType, output: Tensor.BooleanType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Number.isNaN(input[i]) ? 1 : 0;\r\n  }\r\n}\r\n\r\nexport function leakyReluInitializer(attributes: Attribute) {\r\n  return attributes.getFloat('alpha', 0.01);\r\n}\r\n\r\nexport function leakyRelu(input: Tensor.NumberType, output: Tensor.NumberType, attributes: number) {\r\n  const alpha = attributes;\r\n  for (let i = 0; i < input.length; i++) {\r\n    const value = input[i];\r\n    output[i] = value >= 0 ? value : alpha * value;\r\n  }\r\n}\r\n\r\nexport function log(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.log(input[i]);\r\n  }\r\n}\r\n\r\nexport function neg(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = -input[i];\r\n  }\r\n}\r\n\r\nexport function not(input: Tensor.BooleanType, output: Tensor.BooleanType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = input[i] ? 0 : 1;\r\n  }\r\n}\r\n\r\nexport function reciprocal(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = 1.0 / input[i];\r\n  }\r\n}\r\n\r\nexport function relu(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.max(0, input[i]);\r\n  }\r\n}\r\n\r\nexport function sigmoid(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = (1 / (1 + Math.exp(-input[i])));\r\n  }\r\n}\r\n\r\nexport function sign(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = input[i] > 0 ? 1 : input[i] < 0 ? -1 : 0;\r\n  }\r\n}\r\n\r\nexport function sin(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.sin(input[i]);\r\n  }\r\n}\r\n\r\nexport function sinh(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.sinh(input[i]);\r\n  }\r\n}\r\n\r\nexport function sqrt(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.sqrt(input[i]);\r\n  }\r\n}\r\n\r\nexport function tan(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.tan(input[i]);\r\n  }\r\n}\r\n\r\nexport function tanh(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.tanh(input[i]);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class UnaryOp implements Operator {\r\n  constructor(protected typeConstraint: ReadonlyArray<Tensor.DataType>, protected resultType?: Tensor.DataType) {}\r\n\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (this.typeConstraint.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Unsqueeze implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axes = attributes.getInts('axes');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    // TODO: Support string type\r\n    if (inputs[0].type === 'string') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axes: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Upsample implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.mode = attributes.getString('mode', 'nearest');\r\n    this.scales = attributes.getFloats('scales');\r\n\r\n    if (this.mode !== 'nearest' && this.mode !== 'linear') {\r\n      throw new Error(`unrecognized mode: ${this.mode}`);\r\n    }\r\n\r\n    if (this.mode === 'linear' && this.scales.length !== 2 && this.scales.length !== 4) {\r\n      throw new Error(`only support 2-D or 4-D upsampling for linear mode`);\r\n    }\r\n\r\n    this.roi = new Array<number>(this.scales.length * 2).fill(0);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[0].dims.length !== this.scales.length) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type === 'string') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected mode: string;\r\n  protected scales: number[];\r\n  protected roi: number[];\r\n}\r\n\r\nexport abstract class UpsampleV9 implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.mode = attributes.getString('mode', 'nearest');\r\n\r\n    if (this.mode !== 'nearest' && this.mode !== 'linear') {\r\n      throw new Error(`unrecognized mode: ${this.mode}`);\r\n    }\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 2) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type === 'string') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected mode: string;\r\n}\r\n","/*!\n * Platform.js v1.3.6\n * Copyright 2014-2020 Benjamin Tan\n * Copyright 2011-2013 John-David Dalton\n * Available under MIT license\n */\n;(function() {\n  'use strict';\n\n  /** Used to determine if values are of the language type `Object`. */\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n\n  /** Used as a reference to the global object. */\n  var root = (objectTypes[typeof window] && window) || this;\n\n  /** Backup possible global object. */\n  var oldRoot = root;\n\n  /** Detect free variable `exports`. */\n  var freeExports = objectTypes[typeof exports] && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\n\n  /** Detect free variable `global` from Node.js or Browserified code and use it as `root`. */\n  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  /**\n   * Used as the maximum length of an array-like object.\n   * See the [ES6 spec](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength)\n   * for more details.\n   */\n  var maxSafeInteger = Math.pow(2, 53) - 1;\n\n  /** Regular expression to detect Opera. */\n  var reOpera = /\\bOpera/;\n\n  /** Possible global object. */\n  var thisBinding = this;\n\n  /** Used for native method references. */\n  var objectProto = Object.prototype;\n\n  /** Used to check for own properties of an object. */\n  var hasOwnProperty = objectProto.hasOwnProperty;\n\n  /** Used to resolve the internal `[[Class]]` of values. */\n  var toString = objectProto.toString;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Capitalizes a string value.\n   *\n   * @private\n   * @param {string} string The string to capitalize.\n   * @returns {string} The capitalized string.\n   */\n  function capitalize(string) {\n    string = String(string);\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n\n  /**\n   * A utility function to clean up the OS name.\n   *\n   * @private\n   * @param {string} os The OS name to clean up.\n   * @param {string} [pattern] A `RegExp` pattern matching the OS name.\n   * @param {string} [label] A label for the OS.\n   */\n  function cleanupOS(os, pattern, label) {\n    // Platform tokens are defined at:\n    // http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx\n    // http://web.archive.org/web/20081122053950/http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx\n    var data = {\n      '10.0': '10',\n      '6.4':  '10 Technical Preview',\n      '6.3':  '8.1',\n      '6.2':  '8',\n      '6.1':  'Server 2008 R2 / 7',\n      '6.0':  'Server 2008 / Vista',\n      '5.2':  'Server 2003 / XP 64-bit',\n      '5.1':  'XP',\n      '5.01': '2000 SP1',\n      '5.0':  '2000',\n      '4.0':  'NT',\n      '4.90': 'ME'\n    };\n    // Detect Windows version from platform tokens.\n    if (pattern && label && /^Win/i.test(os) && !/^Windows Phone /i.test(os) &&\n        (data = data[/[\\d.]+$/.exec(os)])) {\n      os = 'Windows ' + data;\n    }\n    // Correct character case and cleanup string.\n    os = String(os);\n\n    if (pattern && label) {\n      os = os.replace(RegExp(pattern, 'i'), label);\n    }\n\n    os = format(\n      os.replace(/ ce$/i, ' CE')\n        .replace(/\\bhpw/i, 'web')\n        .replace(/\\bMacintosh\\b/, 'Mac OS')\n        .replace(/_PowerPC\\b/i, ' OS')\n        .replace(/\\b(OS X) [^ \\d]+/i, '$1')\n        .replace(/\\bMac (OS X)\\b/, '$1')\n        .replace(/\\/(\\d)/, ' $1')\n        .replace(/_/g, '.')\n        .replace(/(?: BePC|[ .]*fc[ \\d.]+)$/i, '')\n        .replace(/\\bx86\\.64\\b/gi, 'x86_64')\n        .replace(/\\b(Windows Phone) OS\\b/, '$1')\n        .replace(/\\b(Chrome OS \\w+) [\\d.]+\\b/, '$1')\n        .split(' on ')[0]\n    );\n\n    return os;\n  }\n\n  /**\n   * An iteration utility for arrays and objects.\n   *\n   * @private\n   * @param {Array|Object} object The object to iterate over.\n   * @param {Function} callback The function called per iteration.\n   */\n  function each(object, callback) {\n    var index = -1,\n        length = object ? object.length : 0;\n\n    if (typeof length == 'number' && length > -1 && length <= maxSafeInteger) {\n      while (++index < length) {\n        callback(object[index], index, object);\n      }\n    } else {\n      forOwn(object, callback);\n    }\n  }\n\n  /**\n   * Trim and conditionally capitalize string values.\n   *\n   * @private\n   * @param {string} string The string to format.\n   * @returns {string} The formatted string.\n   */\n  function format(string) {\n    string = trim(string);\n    return /^(?:webOS|i(?:OS|P))/.test(string)\n      ? string\n      : capitalize(string);\n  }\n\n  /**\n   * Iterates over an object's own properties, executing the `callback` for each.\n   *\n   * @private\n   * @param {Object} object The object to iterate over.\n   * @param {Function} callback The function executed per own property.\n   */\n  function forOwn(object, callback) {\n    for (var key in object) {\n      if (hasOwnProperty.call(object, key)) {\n        callback(object[key], key, object);\n      }\n    }\n  }\n\n  /**\n   * Gets the internal `[[Class]]` of a value.\n   *\n   * @private\n   * @param {*} value The value.\n   * @returns {string} The `[[Class]]`.\n   */\n  function getClassOf(value) {\n    return value == null\n      ? capitalize(value)\n      : toString.call(value).slice(8, -1);\n  }\n\n  /**\n   * Host objects can return type values that are different from their actual\n   * data type. The objects we are concerned with usually return non-primitive\n   * types of \"object\", \"function\", or \"unknown\".\n   *\n   * @private\n   * @param {*} object The owner of the property.\n   * @param {string} property The property to check.\n   * @returns {boolean} Returns `true` if the property value is a non-primitive, else `false`.\n   */\n  function isHostType(object, property) {\n    var type = object != null ? typeof object[property] : 'number';\n    return !/^(?:boolean|number|string|undefined)$/.test(type) &&\n      (type == 'object' ? !!object[property] : true);\n  }\n\n  /**\n   * Prepares a string for use in a `RegExp` by making hyphens and spaces optional.\n   *\n   * @private\n   * @param {string} string The string to qualify.\n   * @returns {string} The qualified string.\n   */\n  function qualify(string) {\n    return String(string).replace(/([ -])(?!$)/g, '$1?');\n  }\n\n  /**\n   * A bare-bones `Array#reduce` like utility function.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} callback The function called per iteration.\n   * @returns {*} The accumulated result.\n   */\n  function reduce(array, callback) {\n    var accumulator = null;\n    each(array, function(value, index) {\n      accumulator = callback(accumulator, value, index, array);\n    });\n    return accumulator;\n  }\n\n  /**\n   * Removes leading and trailing whitespace from a string.\n   *\n   * @private\n   * @param {string} string The string to trim.\n   * @returns {string} The trimmed string.\n   */\n  function trim(string) {\n    return String(string).replace(/^ +| +$/g, '');\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Creates a new platform object.\n   *\n   * @memberOf platform\n   * @param {Object|string} [ua=navigator.userAgent] The user agent string or\n   *  context object.\n   * @returns {Object} A platform object.\n   */\n  function parse(ua) {\n\n    /** The environment context object. */\n    var context = root;\n\n    /** Used to flag when a custom context is provided. */\n    var isCustomContext = ua && typeof ua == 'object' && getClassOf(ua) != 'String';\n\n    // Juggle arguments.\n    if (isCustomContext) {\n      context = ua;\n      ua = null;\n    }\n\n    /** Browser navigator object. */\n    var nav = context.navigator || {};\n\n    /** Browser user agent string. */\n    var userAgent = nav.userAgent || '';\n\n    ua || (ua = userAgent);\n\n    /** Used to flag when `thisBinding` is the [ModuleScope]. */\n    var isModuleScope = isCustomContext || thisBinding == oldRoot;\n\n    /** Used to detect if browser is like Chrome. */\n    var likeChrome = isCustomContext\n      ? !!nav.likeChrome\n      : /\\bChrome\\b/.test(ua) && !/internal|\\n/i.test(toString.toString());\n\n    /** Internal `[[Class]]` value shortcuts. */\n    var objectClass = 'Object',\n        airRuntimeClass = isCustomContext ? objectClass : 'ScriptBridgingProxyObject',\n        enviroClass = isCustomContext ? objectClass : 'Environment',\n        javaClass = (isCustomContext && context.java) ? 'JavaPackage' : getClassOf(context.java),\n        phantomClass = isCustomContext ? objectClass : 'RuntimeObject';\n\n    /** Detect Java environments. */\n    var java = /\\bJava/.test(javaClass) && context.java;\n\n    /** Detect Rhino. */\n    var rhino = java && getClassOf(context.environment) == enviroClass;\n\n    /** A character to represent alpha. */\n    var alpha = java ? 'a' : '\\u03b1';\n\n    /** A character to represent beta. */\n    var beta = java ? 'b' : '\\u03b2';\n\n    /** Browser document object. */\n    var doc = context.document || {};\n\n    /**\n     * Detect Opera browser (Presto-based).\n     * http://www.howtocreate.co.uk/operaStuff/operaObject.html\n     * http://dev.opera.com/articles/view/opera-mini-web-content-authoring-guidelines/#operamini\n     */\n    var opera = context.operamini || context.opera;\n\n    /** Opera `[[Class]]`. */\n    var operaClass = reOpera.test(operaClass = (isCustomContext && opera) ? opera['[[Class]]'] : getClassOf(opera))\n      ? operaClass\n      : (opera = null);\n\n    /*------------------------------------------------------------------------*/\n\n    /** Temporary variable used over the script's lifetime. */\n    var data;\n\n    /** The CPU architecture. */\n    var arch = ua;\n\n    /** Platform description array. */\n    var description = [];\n\n    /** Platform alpha/beta indicator. */\n    var prerelease = null;\n\n    /** A flag to indicate that environment features should be used to resolve the platform. */\n    var useFeatures = ua == userAgent;\n\n    /** The browser/environment version. */\n    var version = useFeatures && opera && typeof opera.version == 'function' && opera.version();\n\n    /** A flag to indicate if the OS ends with \"/ Version\" */\n    var isSpecialCasedOS;\n\n    /* Detectable layout engines (order is important). */\n    var layout = getLayout([\n      { 'label': 'EdgeHTML', 'pattern': 'Edge' },\n      'Trident',\n      { 'label': 'WebKit', 'pattern': 'AppleWebKit' },\n      'iCab',\n      'Presto',\n      'NetFront',\n      'Tasman',\n      'KHTML',\n      'Gecko'\n    ]);\n\n    /* Detectable browser names (order is important). */\n    var name = getName([\n      'Adobe AIR',\n      'Arora',\n      'Avant Browser',\n      'Breach',\n      'Camino',\n      'Electron',\n      'Epiphany',\n      'Fennec',\n      'Flock',\n      'Galeon',\n      'GreenBrowser',\n      'iCab',\n      'Iceweasel',\n      'K-Meleon',\n      'Konqueror',\n      'Lunascape',\n      'Maxthon',\n      { 'label': 'Microsoft Edge', 'pattern': '(?:Edge|Edg|EdgA|EdgiOS)' },\n      'Midori',\n      'Nook Browser',\n      'PaleMoon',\n      'PhantomJS',\n      'Raven',\n      'Rekonq',\n      'RockMelt',\n      { 'label': 'Samsung Internet', 'pattern': 'SamsungBrowser' },\n      'SeaMonkey',\n      { 'label': 'Silk', 'pattern': '(?:Cloud9|Silk-Accelerated)' },\n      'Sleipnir',\n      'SlimBrowser',\n      { 'label': 'SRWare Iron', 'pattern': 'Iron' },\n      'Sunrise',\n      'Swiftfox',\n      'Vivaldi',\n      'Waterfox',\n      'WebPositive',\n      { 'label': 'Yandex Browser', 'pattern': 'YaBrowser' },\n      { 'label': 'UC Browser', 'pattern': 'UCBrowser' },\n      'Opera Mini',\n      { 'label': 'Opera Mini', 'pattern': 'OPiOS' },\n      'Opera',\n      { 'label': 'Opera', 'pattern': 'OPR' },\n      'Chromium',\n      'Chrome',\n      { 'label': 'Chrome', 'pattern': '(?:HeadlessChrome)' },\n      { 'label': 'Chrome Mobile', 'pattern': '(?:CriOS|CrMo)' },\n      { 'label': 'Firefox', 'pattern': '(?:Firefox|Minefield)' },\n      { 'label': 'Firefox for iOS', 'pattern': 'FxiOS' },\n      { 'label': 'IE', 'pattern': 'IEMobile' },\n      { 'label': 'IE', 'pattern': 'MSIE' },\n      'Safari'\n    ]);\n\n    /* Detectable products (order is important). */\n    var product = getProduct([\n      { 'label': 'BlackBerry', 'pattern': 'BB10' },\n      'BlackBerry',\n      { 'label': 'Galaxy S', 'pattern': 'GT-I9000' },\n      { 'label': 'Galaxy S2', 'pattern': 'GT-I9100' },\n      { 'label': 'Galaxy S3', 'pattern': 'GT-I9300' },\n      { 'label': 'Galaxy S4', 'pattern': 'GT-I9500' },\n      { 'label': 'Galaxy S5', 'pattern': 'SM-G900' },\n      { 'label': 'Galaxy S6', 'pattern': 'SM-G920' },\n      { 'label': 'Galaxy S6 Edge', 'pattern': 'SM-G925' },\n      { 'label': 'Galaxy S7', 'pattern': 'SM-G930' },\n      { 'label': 'Galaxy S7 Edge', 'pattern': 'SM-G935' },\n      'Google TV',\n      'Lumia',\n      'iPad',\n      'iPod',\n      'iPhone',\n      'Kindle',\n      { 'label': 'Kindle Fire', 'pattern': '(?:Cloud9|Silk-Accelerated)' },\n      'Nexus',\n      'Nook',\n      'PlayBook',\n      'PlayStation Vita',\n      'PlayStation',\n      'TouchPad',\n      'Transformer',\n      { 'label': 'Wii U', 'pattern': 'WiiU' },\n      'Wii',\n      'Xbox One',\n      { 'label': 'Xbox 360', 'pattern': 'Xbox' },\n      'Xoom'\n    ]);\n\n    /* Detectable manufacturers. */\n    var manufacturer = getManufacturer({\n      'Apple': { 'iPad': 1, 'iPhone': 1, 'iPod': 1 },\n      'Alcatel': {},\n      'Archos': {},\n      'Amazon': { 'Kindle': 1, 'Kindle Fire': 1 },\n      'Asus': { 'Transformer': 1 },\n      'Barnes & Noble': { 'Nook': 1 },\n      'BlackBerry': { 'PlayBook': 1 },\n      'Google': { 'Google TV': 1, 'Nexus': 1 },\n      'HP': { 'TouchPad': 1 },\n      'HTC': {},\n      'Huawei': {},\n      'Lenovo': {},\n      'LG': {},\n      'Microsoft': { 'Xbox': 1, 'Xbox One': 1 },\n      'Motorola': { 'Xoom': 1 },\n      'Nintendo': { 'Wii U': 1,  'Wii': 1 },\n      'Nokia': { 'Lumia': 1 },\n      'Oppo': {},\n      'Samsung': { 'Galaxy S': 1, 'Galaxy S2': 1, 'Galaxy S3': 1, 'Galaxy S4': 1 },\n      'Sony': { 'PlayStation': 1, 'PlayStation Vita': 1 },\n      'Xiaomi': { 'Mi': 1, 'Redmi': 1 }\n    });\n\n    /* Detectable operating systems (order is important). */\n    var os = getOS([\n      'Windows Phone',\n      'KaiOS',\n      'Android',\n      'CentOS',\n      { 'label': 'Chrome OS', 'pattern': 'CrOS' },\n      'Debian',\n      { 'label': 'DragonFly BSD', 'pattern': 'DragonFly' },\n      'Fedora',\n      'FreeBSD',\n      'Gentoo',\n      'Haiku',\n      'Kubuntu',\n      'Linux Mint',\n      'OpenBSD',\n      'Red Hat',\n      'SuSE',\n      'Ubuntu',\n      'Xubuntu',\n      'Cygwin',\n      'Symbian OS',\n      'hpwOS',\n      'webOS ',\n      'webOS',\n      'Tablet OS',\n      'Tizen',\n      'Linux',\n      'Mac OS X',\n      'Macintosh',\n      'Mac',\n      'Windows 98;',\n      'Windows '\n    ]);\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Picks the layout engine from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected layout engine.\n     */\n    function getLayout(guesses) {\n      return reduce(guesses, function(result, guess) {\n        return result || RegExp('\\\\b' + (\n          guess.pattern || qualify(guess)\n        ) + '\\\\b', 'i').exec(ua) && (guess.label || guess);\n      });\n    }\n\n    /**\n     * Picks the manufacturer from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An object of guesses.\n     * @returns {null|string} The detected manufacturer.\n     */\n    function getManufacturer(guesses) {\n      return reduce(guesses, function(result, value, key) {\n        // Lookup the manufacturer by product or scan the UA for the manufacturer.\n        return result || (\n          value[product] ||\n          value[/^[a-z]+(?: +[a-z]+\\b)*/i.exec(product)] ||\n          RegExp('\\\\b' + qualify(key) + '(?:\\\\b|\\\\w*\\\\d)', 'i').exec(ua)\n        ) && key;\n      });\n    }\n\n    /**\n     * Picks the browser name from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected browser name.\n     */\n    function getName(guesses) {\n      return reduce(guesses, function(result, guess) {\n        return result || RegExp('\\\\b' + (\n          guess.pattern || qualify(guess)\n        ) + '\\\\b', 'i').exec(ua) && (guess.label || guess);\n      });\n    }\n\n    /**\n     * Picks the OS name from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected OS name.\n     */\n    function getOS(guesses) {\n      return reduce(guesses, function(result, guess) {\n        var pattern = guess.pattern || qualify(guess);\n        if (!result && (result =\n              RegExp('\\\\b' + pattern + '(?:/[\\\\d.]+|[ \\\\w.]*)', 'i').exec(ua)\n            )) {\n          result = cleanupOS(result, pattern, guess.label || guess);\n        }\n        return result;\n      });\n    }\n\n    /**\n     * Picks the product name from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected product name.\n     */\n    function getProduct(guesses) {\n      return reduce(guesses, function(result, guess) {\n        var pattern = guess.pattern || qualify(guess);\n        if (!result && (result =\n              RegExp('\\\\b' + pattern + ' *\\\\d+[.\\\\w_]*', 'i').exec(ua) ||\n              RegExp('\\\\b' + pattern + ' *\\\\w+-[\\\\w]*', 'i').exec(ua) ||\n              RegExp('\\\\b' + pattern + '(?:; *(?:[a-z]+[_-])?[a-z]+\\\\d+|[^ ();-]*)', 'i').exec(ua)\n            )) {\n          // Split by forward slash and append product version if needed.\n          if ((result = String((guess.label && !RegExp(pattern, 'i').test(guess.label)) ? guess.label : result).split('/'))[1] && !/[\\d.]+/.test(result[0])) {\n            result[0] += ' ' + result[1];\n          }\n          // Correct character case and cleanup string.\n          guess = guess.label || guess;\n          result = format(result[0]\n            .replace(RegExp(pattern, 'i'), guess)\n            .replace(RegExp('; *(?:' + guess + '[_-])?', 'i'), ' ')\n            .replace(RegExp('(' + guess + ')[-_.]?(\\\\w)', 'i'), '$1 $2'));\n        }\n        return result;\n      });\n    }\n\n    /**\n     * Resolves the version using an array of UA patterns.\n     *\n     * @private\n     * @param {Array} patterns An array of UA patterns.\n     * @returns {null|string} The detected version.\n     */\n    function getVersion(patterns) {\n      return reduce(patterns, function(result, pattern) {\n        return result || (RegExp(pattern +\n          '(?:-[\\\\d.]+/|(?: for [\\\\w-]+)?[ /-])([\\\\d.]+[^ ();/_-]*)', 'i').exec(ua) || 0)[1] || null;\n      });\n    }\n\n    /**\n     * Returns `platform.description` when the platform object is coerced to a string.\n     *\n     * @name toString\n     * @memberOf platform\n     * @returns {string} Returns `platform.description` if available, else an empty string.\n     */\n    function toStringPlatform() {\n      return this.description || '';\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Convert layout to an array so we can add extra details.\n    layout && (layout = [layout]);\n\n    // Detect Android products.\n    // Browsers on Android devices typically provide their product IDS after \"Android;\"\n    // up to \"Build\" or \") AppleWebKit\".\n    // Example:\n    // \"Mozilla/5.0 (Linux; Android 8.1.0; Moto G (5) Plus) AppleWebKit/537.36\n    // (KHTML, like Gecko) Chrome/70.0.3538.80 Mobile Safari/537.36\"\n    if (/\\bAndroid\\b/.test(os) && !product &&\n        (data = /\\bAndroid[^;]*;(.*?)(?:Build|\\) AppleWebKit)\\b/i.exec(ua))) {\n      product = trim(data[1])\n        // Replace any language codes (eg. \"en-US\").\n        .replace(/^[a-z]{2}-[a-z]{2};\\s*/i, '')\n        || null;\n    }\n    // Detect product names that contain their manufacturer's name.\n    if (manufacturer && !product) {\n      product = getProduct([manufacturer]);\n    } else if (manufacturer && product) {\n      product = product\n        .replace(RegExp('^(' + qualify(manufacturer) + ')[-_.\\\\s]', 'i'), manufacturer + ' ')\n        .replace(RegExp('^(' + qualify(manufacturer) + ')[-_.]?(\\\\w)', 'i'), manufacturer + ' $2');\n    }\n    // Clean up Google TV.\n    if ((data = /\\bGoogle TV\\b/.exec(product))) {\n      product = data[0];\n    }\n    // Detect simulators.\n    if (/\\bSimulator\\b/i.test(ua)) {\n      product = (product ? product + ' ' : '') + 'Simulator';\n    }\n    // Detect Opera Mini 8+ running in Turbo/Uncompressed mode on iOS.\n    if (name == 'Opera Mini' && /\\bOPiOS\\b/.test(ua)) {\n      description.push('running in Turbo/Uncompressed mode');\n    }\n    // Detect IE Mobile 11.\n    if (name == 'IE' && /\\blike iPhone OS\\b/.test(ua)) {\n      data = parse(ua.replace(/like iPhone OS/, ''));\n      manufacturer = data.manufacturer;\n      product = data.product;\n    }\n    // Detect iOS.\n    else if (/^iP/.test(product)) {\n      name || (name = 'Safari');\n      os = 'iOS' + ((data = / OS ([\\d_]+)/i.exec(ua))\n        ? ' ' + data[1].replace(/_/g, '.')\n        : '');\n    }\n    // Detect Kubuntu.\n    else if (name == 'Konqueror' && /^Linux\\b/i.test(os)) {\n      os = 'Kubuntu';\n    }\n    // Detect Android browsers.\n    else if ((manufacturer && manufacturer != 'Google' &&\n        ((/Chrome/.test(name) && !/\\bMobile Safari\\b/i.test(ua)) || /\\bVita\\b/.test(product))) ||\n        (/\\bAndroid\\b/.test(os) && /^Chrome/.test(name) && /\\bVersion\\//i.test(ua))) {\n      name = 'Android Browser';\n      os = /\\bAndroid\\b/.test(os) ? os : 'Android';\n    }\n    // Detect Silk desktop/accelerated modes.\n    else if (name == 'Silk') {\n      if (!/\\bMobi/i.test(ua)) {\n        os = 'Android';\n        description.unshift('desktop mode');\n      }\n      if (/Accelerated *= *true/i.test(ua)) {\n        description.unshift('accelerated');\n      }\n    }\n    // Detect UC Browser speed mode.\n    else if (name == 'UC Browser' && /\\bUCWEB\\b/.test(ua)) {\n      description.push('speed mode');\n    }\n    // Detect PaleMoon identifying as Firefox.\n    else if (name == 'PaleMoon' && (data = /\\bFirefox\\/([\\d.]+)\\b/.exec(ua))) {\n      description.push('identifying as Firefox ' + data[1]);\n    }\n    // Detect Firefox OS and products running Firefox.\n    else if (name == 'Firefox' && (data = /\\b(Mobile|Tablet|TV)\\b/i.exec(ua))) {\n      os || (os = 'Firefox OS');\n      product || (product = data[1]);\n    }\n    // Detect false positives for Firefox/Safari.\n    else if (!name || (data = !/\\bMinefield\\b/i.test(ua) && /\\b(?:Firefox|Safari)\\b/.exec(name))) {\n      // Escape the `/` for Firefox 1.\n      if (name && !product && /[\\/,]|^[^(]+?\\)/.test(ua.slice(ua.indexOf(data + '/') + 8))) {\n        // Clear name of false positives.\n        name = null;\n      }\n      // Reassign a generic name.\n      if ((data = product || manufacturer || os) &&\n          (product || manufacturer || /\\b(?:Android|Symbian OS|Tablet OS|webOS)\\b/.test(os))) {\n        name = /[a-z]+(?: Hat)?/i.exec(/\\bAndroid\\b/.test(os) ? os : data) + ' Browser';\n      }\n    }\n    // Add Chrome version to description for Electron.\n    else if (name == 'Electron' && (data = (/\\bChrome\\/([\\d.]+)\\b/.exec(ua) || 0)[1])) {\n      description.push('Chromium ' + data);\n    }\n    // Detect non-Opera (Presto-based) versions (order is important).\n    if (!version) {\n      version = getVersion([\n        '(?:Cloud9|CriOS|CrMo|Edge|Edg|EdgA|EdgiOS|FxiOS|HeadlessChrome|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|SamsungBrowser|Silk(?!/[\\\\d.]+$)|UCBrowser|YaBrowser)',\n        'Version',\n        qualify(name),\n        '(?:Firefox|Minefield|NetFront)'\n      ]);\n    }\n    // Detect stubborn layout engines.\n    if ((data =\n          layout == 'iCab' && parseFloat(version) > 3 && 'WebKit' ||\n          /\\bOpera\\b/.test(name) && (/\\bOPR\\b/.test(ua) ? 'Blink' : 'Presto') ||\n          /\\b(?:Midori|Nook|Safari)\\b/i.test(ua) && !/^(?:Trident|EdgeHTML)$/.test(layout) && 'WebKit' ||\n          !layout && /\\bMSIE\\b/i.test(ua) && (os == 'Mac OS' ? 'Tasman' : 'Trident') ||\n          layout == 'WebKit' && /\\bPlayStation\\b(?! Vita\\b)/i.test(name) && 'NetFront'\n        )) {\n      layout = [data];\n    }\n    // Detect Windows Phone 7 desktop mode.\n    if (name == 'IE' && (data = (/; *(?:XBLWP|ZuneWP)(\\d+)/i.exec(ua) || 0)[1])) {\n      name += ' Mobile';\n      os = 'Windows Phone ' + (/\\+$/.test(data) ? data : data + '.x');\n      description.unshift('desktop mode');\n    }\n    // Detect Windows Phone 8.x desktop mode.\n    else if (/\\bWPDesktop\\b/i.test(ua)) {\n      name = 'IE Mobile';\n      os = 'Windows Phone 8.x';\n      description.unshift('desktop mode');\n      version || (version = (/\\brv:([\\d.]+)/.exec(ua) || 0)[1]);\n    }\n    // Detect IE 11 identifying as other browsers.\n    else if (name != 'IE' && layout == 'Trident' && (data = /\\brv:([\\d.]+)/.exec(ua))) {\n      if (name) {\n        description.push('identifying as ' + name + (version ? ' ' + version : ''));\n      }\n      name = 'IE';\n      version = data[1];\n    }\n    // Leverage environment features.\n    if (useFeatures) {\n      // Detect server-side environments.\n      // Rhino has a global function while others have a global object.\n      if (isHostType(context, 'global')) {\n        if (java) {\n          data = java.lang.System;\n          arch = data.getProperty('os.arch');\n          os = os || data.getProperty('os.name') + ' ' + data.getProperty('os.version');\n        }\n        if (rhino) {\n          try {\n            version = context.require('ringo/engine').version.join('.');\n            name = 'RingoJS';\n          } catch(e) {\n            if ((data = context.system) && data.global.system == context.system) {\n              name = 'Narwhal';\n              os || (os = data[0].os || null);\n            }\n          }\n          if (!name) {\n            name = 'Rhino';\n          }\n        }\n        else if (\n          typeof context.process == 'object' && !context.process.browser &&\n          (data = context.process)\n        ) {\n          if (typeof data.versions == 'object') {\n            if (typeof data.versions.electron == 'string') {\n              description.push('Node ' + data.versions.node);\n              name = 'Electron';\n              version = data.versions.electron;\n            } else if (typeof data.versions.nw == 'string') {\n              description.push('Chromium ' + version, 'Node ' + data.versions.node);\n              name = 'NW.js';\n              version = data.versions.nw;\n            }\n          }\n          if (!name) {\n            name = 'Node.js';\n            arch = data.arch;\n            os = data.platform;\n            version = /[\\d.]+/.exec(data.version);\n            version = version ? version[0] : null;\n          }\n        }\n      }\n      // Detect Adobe AIR.\n      else if (getClassOf((data = context.runtime)) == airRuntimeClass) {\n        name = 'Adobe AIR';\n        os = data.flash.system.Capabilities.os;\n      }\n      // Detect PhantomJS.\n      else if (getClassOf((data = context.phantom)) == phantomClass) {\n        name = 'PhantomJS';\n        version = (data = data.version || null) && (data.major + '.' + data.minor + '.' + data.patch);\n      }\n      // Detect IE compatibility modes.\n      else if (typeof doc.documentMode == 'number' && (data = /\\bTrident\\/(\\d+)/i.exec(ua))) {\n        // We're in compatibility mode when the Trident version + 4 doesn't\n        // equal the document mode.\n        version = [version, doc.documentMode];\n        if ((data = +data[1] + 4) != version[1]) {\n          description.push('IE ' + version[1] + ' mode');\n          layout && (layout[1] = '');\n          version[1] = data;\n        }\n        version = name == 'IE' ? String(version[1].toFixed(1)) : version[0];\n      }\n      // Detect IE 11 masking as other browsers.\n      else if (typeof doc.documentMode == 'number' && /^(?:Chrome|Firefox)\\b/.test(name)) {\n        description.push('masking as ' + name + ' ' + version);\n        name = 'IE';\n        version = '11.0';\n        layout = ['Trident'];\n        os = 'Windows';\n      }\n      os = os && format(os);\n    }\n    // Detect prerelease phases.\n    if (version && (data =\n          /(?:[ab]|dp|pre|[ab]\\d+pre)(?:\\d+\\+?)?$/i.exec(version) ||\n          /(?:alpha|beta)(?: ?\\d)?/i.exec(ua + ';' + (useFeatures && nav.appMinorVersion)) ||\n          /\\bMinefield\\b/i.test(ua) && 'a'\n        )) {\n      prerelease = /b/i.test(data) ? 'beta' : 'alpha';\n      version = version.replace(RegExp(data + '\\\\+?$'), '') +\n        (prerelease == 'beta' ? beta : alpha) + (/\\d+\\+?/.exec(data) || '');\n    }\n    // Detect Firefox Mobile.\n    if (name == 'Fennec' || name == 'Firefox' && /\\b(?:Android|Firefox OS|KaiOS)\\b/.test(os)) {\n      name = 'Firefox Mobile';\n    }\n    // Obscure Maxthon's unreliable version.\n    else if (name == 'Maxthon' && version) {\n      version = version.replace(/\\.[\\d.]+/, '.x');\n    }\n    // Detect Xbox 360 and Xbox One.\n    else if (/\\bXbox\\b/i.test(product)) {\n      if (product == 'Xbox 360') {\n        os = null;\n      }\n      if (product == 'Xbox 360' && /\\bIEMobile\\b/.test(ua)) {\n        description.unshift('mobile mode');\n      }\n    }\n    // Add mobile postfix.\n    else if ((/^(?:Chrome|IE|Opera)$/.test(name) || name && !product && !/Browser|Mobi/.test(name)) &&\n        (os == 'Windows CE' || /Mobi/i.test(ua))) {\n      name += ' Mobile';\n    }\n    // Detect IE platform preview.\n    else if (name == 'IE' && useFeatures) {\n      try {\n        if (context.external === null) {\n          description.unshift('platform preview');\n        }\n      } catch(e) {\n        description.unshift('embedded');\n      }\n    }\n    // Detect BlackBerry OS version.\n    // http://docs.blackberry.com/en/developers/deliverables/18169/HTTP_headers_sent_by_BB_Browser_1234911_11.jsp\n    else if ((/\\bBlackBerry\\b/.test(product) || /\\bBB10\\b/.test(ua)) && (data =\n          (RegExp(product.replace(/ +/g, ' *') + '/([.\\\\d]+)', 'i').exec(ua) || 0)[1] ||\n          version\n        )) {\n      data = [data, /BB10/.test(ua)];\n      os = (data[1] ? (product = null, manufacturer = 'BlackBerry') : 'Device Software') + ' ' + data[0];\n      version = null;\n    }\n    // Detect Opera identifying/masking itself as another browser.\n    // http://www.opera.com/support/kb/view/843/\n    else if (this != forOwn && product != 'Wii' && (\n          (useFeatures && opera) ||\n          (/Opera/.test(name) && /\\b(?:MSIE|Firefox)\\b/i.test(ua)) ||\n          (name == 'Firefox' && /\\bOS X (?:\\d+\\.){2,}/.test(os)) ||\n          (name == 'IE' && (\n            (os && !/^Win/.test(os) && version > 5.5) ||\n            /\\bWindows XP\\b/.test(os) && version > 8 ||\n            version == 8 && !/\\bTrident\\b/.test(ua)\n          ))\n        ) && !reOpera.test((data = parse.call(forOwn, ua.replace(reOpera, '') + ';'))) && data.name) {\n      // When \"identifying\", the UA contains both Opera and the other browser's name.\n      data = 'ing as ' + data.name + ((data = data.version) ? ' ' + data : '');\n      if (reOpera.test(name)) {\n        if (/\\bIE\\b/.test(data) && os == 'Mac OS') {\n          os = null;\n        }\n        data = 'identify' + data;\n      }\n      // When \"masking\", the UA contains only the other browser's name.\n      else {\n        data = 'mask' + data;\n        if (operaClass) {\n          name = format(operaClass.replace(/([a-z])([A-Z])/g, '$1 $2'));\n        } else {\n          name = 'Opera';\n        }\n        if (/\\bIE\\b/.test(data)) {\n          os = null;\n        }\n        if (!useFeatures) {\n          version = null;\n        }\n      }\n      layout = ['Presto'];\n      description.push(data);\n    }\n    // Detect WebKit Nightly and approximate Chrome/Safari versions.\n    if ((data = (/\\bAppleWebKit\\/([\\d.]+\\+?)/i.exec(ua) || 0)[1])) {\n      // Correct build number for numeric comparison.\n      // (e.g. \"532.5\" becomes \"532.05\")\n      data = [parseFloat(data.replace(/\\.(\\d)$/, '.0$1')), data];\n      // Nightly builds are postfixed with a \"+\".\n      if (name == 'Safari' && data[1].slice(-1) == '+') {\n        name = 'WebKit Nightly';\n        prerelease = 'alpha';\n        version = data[1].slice(0, -1);\n      }\n      // Clear incorrect browser versions.\n      else if (version == data[1] ||\n          version == (data[2] = (/\\bSafari\\/([\\d.]+\\+?)/i.exec(ua) || 0)[1])) {\n        version = null;\n      }\n      // Use the full Chrome version when available.\n      data[1] = (/\\b(?:Headless)?Chrome\\/([\\d.]+)/i.exec(ua) || 0)[1];\n      // Detect Blink layout engine.\n      if (data[0] == 537.36 && data[2] == 537.36 && parseFloat(data[1]) >= 28 && layout == 'WebKit') {\n        layout = ['Blink'];\n      }\n      // Detect JavaScriptCore.\n      // http://stackoverflow.com/questions/6768474/how-can-i-detect-which-javascript-engine-v8-or-jsc-is-used-at-runtime-in-androi\n      if (!useFeatures || (!likeChrome && !data[1])) {\n        layout && (layout[1] = 'like Safari');\n        data = (data = data[0], data < 400 ? 1 : data < 500 ? 2 : data < 526 ? 3 : data < 533 ? 4 : data < 534 ? '4+' : data < 535 ? 5 : data < 537 ? 6 : data < 538 ? 7 : data < 601 ? 8 : data < 602 ? 9 : data < 604 ? 10 : data < 606 ? 11 : data < 608 ? 12 : '12');\n      } else {\n        layout && (layout[1] = 'like Chrome');\n        data = data[1] || (data = data[0], data < 530 ? 1 : data < 532 ? 2 : data < 532.05 ? 3 : data < 533 ? 4 : data < 534.03 ? 5 : data < 534.07 ? 6 : data < 534.10 ? 7 : data < 534.13 ? 8 : data < 534.16 ? 9 : data < 534.24 ? 10 : data < 534.30 ? 11 : data < 535.01 ? 12 : data < 535.02 ? '13+' : data < 535.07 ? 15 : data < 535.11 ? 16 : data < 535.19 ? 17 : data < 536.05 ? 18 : data < 536.10 ? 19 : data < 537.01 ? 20 : data < 537.11 ? '21+' : data < 537.13 ? 23 : data < 537.18 ? 24 : data < 537.24 ? 25 : data < 537.36 ? 26 : layout != 'Blink' ? '27' : '28');\n      }\n      // Add the postfix of \".x\" or \"+\" for approximate versions.\n      layout && (layout[1] += ' ' + (data += typeof data == 'number' ? '.x' : /[.+]/.test(data) ? '' : '+'));\n      // Obscure version for some Safari 1-2 releases.\n      if (name == 'Safari' && (!version || parseInt(version) > 45)) {\n        version = data;\n      } else if (name == 'Chrome' && /\\bHeadlessChrome/i.test(ua)) {\n        description.unshift('headless');\n      }\n    }\n    // Detect Opera desktop modes.\n    if (name == 'Opera' &&  (data = /\\bzbov|zvav$/.exec(os))) {\n      name += ' ';\n      description.unshift('desktop mode');\n      if (data == 'zvav') {\n        name += 'Mini';\n        version = null;\n      } else {\n        name += 'Mobile';\n      }\n      os = os.replace(RegExp(' *' + data + '$'), '');\n    }\n    // Detect Chrome desktop mode.\n    else if (name == 'Safari' && /\\bChrome\\b/.exec(layout && layout[1])) {\n      description.unshift('desktop mode');\n      name = 'Chrome Mobile';\n      version = null;\n\n      if (/\\bOS X\\b/.test(os)) {\n        manufacturer = 'Apple';\n        os = 'iOS 4.3+';\n      } else {\n        os = null;\n      }\n    }\n    // Newer versions of SRWare Iron uses the Chrome tag to indicate its version number.\n    else if (/\\bSRWare Iron\\b/.test(name) && !version) {\n      version = getVersion('Chrome');\n    }\n    // Strip incorrect OS versions.\n    if (version && version.indexOf((data = /[\\d.]+$/.exec(os))) == 0 &&\n        ua.indexOf('/' + data + '-') > -1) {\n      os = trim(os.replace(data, ''));\n    }\n    // Ensure OS does not include the browser name.\n    if (os && os.indexOf(name) != -1 && !RegExp(name + ' OS').test(os)) {\n      os = os.replace(RegExp(' *' + qualify(name) + ' *'), '');\n    }\n    // Add layout engine.\n    if (layout && !/\\b(?:Avant|Nook)\\b/.test(name) && (\n        /Browser|Lunascape|Maxthon/.test(name) ||\n        name != 'Safari' && /^iOS/.test(os) && /\\bSafari\\b/.test(layout[1]) ||\n        /^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Samsung Internet|Sleipnir|SRWare Iron|Vivaldi|Web)/.test(name) && layout[1])) {\n      // Don't add layout details to description if they are falsey.\n      (data = layout[layout.length - 1]) && description.push(data);\n    }\n    // Combine contextual information.\n    if (description.length) {\n      description = ['(' + description.join('; ') + ')'];\n    }\n    // Append manufacturer to description.\n    if (manufacturer && product && product.indexOf(manufacturer) < 0) {\n      description.push('on ' + manufacturer);\n    }\n    // Append product to description.\n    if (product) {\n      description.push((/^on /.test(description[description.length - 1]) ? '' : 'on ') + product);\n    }\n    // Parse the OS into an object.\n    if (os) {\n      data = / ([\\d.+]+)$/.exec(os);\n      isSpecialCasedOS = data && os.charAt(os.length - data[0].length - 1) == '/';\n      os = {\n        'architecture': 32,\n        'family': (data && !isSpecialCasedOS) ? os.replace(data[0], '') : os,\n        'version': data ? data[1] : null,\n        'toString': function() {\n          var version = this.version;\n          return this.family + ((version && !isSpecialCasedOS) ? ' ' + version : '') + (this.architecture == 64 ? ' 64-bit' : '');\n        }\n      };\n    }\n    // Add browser/OS architecture.\n    if ((data = /\\b(?:AMD|IA|Win|WOW|x86_|x)64\\b/i.exec(arch)) && !/\\bi686\\b/i.test(arch)) {\n      if (os) {\n        os.architecture = 64;\n        os.family = os.family.replace(RegExp(' *' + data), '');\n      }\n      if (\n          name && (/\\bWOW64\\b/i.test(ua) ||\n          (useFeatures && /\\w(?:86|32)$/.test(nav.cpuClass || nav.platform) && !/\\bWin64; x64\\b/i.test(ua)))\n      ) {\n        description.unshift('32-bit');\n      }\n    }\n    // Chrome 39 and above on OS X is always 64-bit.\n    else if (\n        os && /^OS X/.test(os.family) &&\n        name == 'Chrome' && parseFloat(version) >= 39\n    ) {\n      os.architecture = 64;\n    }\n\n    ua || (ua = null);\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The platform object.\n     *\n     * @name platform\n     * @type Object\n     */\n    var platform = {};\n\n    /**\n     * The platform description.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.description = ua;\n\n    /**\n     * The name of the browser's layout engine.\n     *\n     * The list of common layout engines include:\n     * \"Blink\", \"EdgeHTML\", \"Gecko\", \"Trident\" and \"WebKit\"\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.layout = layout && layout[0];\n\n    /**\n     * The name of the product's manufacturer.\n     *\n     * The list of manufacturers include:\n     * \"Apple\", \"Archos\", \"Amazon\", \"Asus\", \"Barnes & Noble\", \"BlackBerry\",\n     * \"Google\", \"HP\", \"HTC\", \"LG\", \"Microsoft\", \"Motorola\", \"Nintendo\",\n     * \"Nokia\", \"Samsung\" and \"Sony\"\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.manufacturer = manufacturer;\n\n    /**\n     * The name of the browser/environment.\n     *\n     * The list of common browser names include:\n     * \"Chrome\", \"Electron\", \"Firefox\", \"Firefox for iOS\", \"IE\",\n     * \"Microsoft Edge\", \"PhantomJS\", \"Safari\", \"SeaMonkey\", \"Silk\",\n     * \"Opera Mini\" and \"Opera\"\n     *\n     * Mobile versions of some browsers have \"Mobile\" appended to their name:\n     * eg. \"Chrome Mobile\", \"Firefox Mobile\", \"IE Mobile\" and \"Opera Mobile\"\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.name = name;\n\n    /**\n     * The alpha/beta release indicator.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.prerelease = prerelease;\n\n    /**\n     * The name of the product hosting the browser.\n     *\n     * The list of common products include:\n     *\n     * \"BlackBerry\", \"Galaxy S4\", \"Lumia\", \"iPad\", \"iPod\", \"iPhone\", \"Kindle\",\n     * \"Kindle Fire\", \"Nexus\", \"Nook\", \"PlayBook\", \"TouchPad\" and \"Transformer\"\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.product = product;\n\n    /**\n     * The browser's user agent string.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.ua = ua;\n\n    /**\n     * The browser/environment version.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.version = name && version;\n\n    /**\n     * The name of the operating system.\n     *\n     * @memberOf platform\n     * @type Object\n     */\n    platform.os = os || {\n\n      /**\n       * The CPU architecture the OS is built for.\n       *\n       * @memberOf platform.os\n       * @type number|null\n       */\n      'architecture': null,\n\n      /**\n       * The family of the OS.\n       *\n       * Common values include:\n       * \"Windows\", \"Windows Server 2008 R2 / 7\", \"Windows Server 2008 / Vista\",\n       * \"Windows XP\", \"OS X\", \"Linux\", \"Ubuntu\", \"Debian\", \"Fedora\", \"Red Hat\",\n       * \"SuSE\", \"Android\", \"iOS\" and \"Windows Phone\"\n       *\n       * @memberOf platform.os\n       * @type string|null\n       */\n      'family': null,\n\n      /**\n       * The version of the OS.\n       *\n       * @memberOf platform.os\n       * @type string|null\n       */\n      'version': null,\n\n      /**\n       * Returns the OS string.\n       *\n       * @memberOf platform.os\n       * @returns {string} The OS string.\n       */\n      'toString': function() { return 'null'; }\n    };\n\n    platform.parse = parse;\n    platform.toString = toStringPlatform;\n\n    if (platform.version) {\n      description.unshift(version);\n    }\n    if (platform.name) {\n      description.unshift(name);\n    }\n    if (os && name && !(os == String(os).split(' ')[0] && (os == name.split(' ')[0] || product))) {\n      description.push(product ? '(' + os + ')' : 'on ' + os);\n    }\n    if (description.length) {\n      platform.description = description.join(' ');\n    }\n    return platform;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export platform.\n  var platform = parse();\n\n  // Some AMD build optimizers, like r.js, check for condition patterns like the following:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Expose platform on the global object to prevent errors when platform is\n    // loaded by a script tag in the presence of an AMD loader.\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\n    root.platform = platform;\n\n    // Define as an anonymous module so platform can be aliased through path mapping.\n    define(function() {\n      return platform;\n    });\n  }\n  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.\n  else if (freeExports && freeModule) {\n    // Export for CommonJS support.\n    forOwn(platform, function(value, key) {\n      freeExports[key] = value;\n    });\n  }\n  else {\n    // Export to the global object.\n    root.platform = platform;\n  }\n}.call(this));\n","// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Clip implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.min = attributes.getFloat('min', -3.4028234663852886e+38);\r\n    this.max = attributes.getFloat('max', 3.4028234663852886e+38);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected min: number;\r\n  protected max: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Given a non RGBA shape calculate the R version\r\n * It is assumed that the dimensions are multiples of given channels\r\n * NOTE: it is always the last dim that gets packed.\r\n * @param unpackedShape original shape to create a packed version from\r\n */\r\nexport function getPackedShape(unpackedShape: ReadonlyArray<number>): ReadonlyArray<number> {\r\n  const len = unpackedShape.length;\r\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:use-named-parameter\r\n\r\nimport {Tensor as InternalTensor} from '../tensor';\r\nimport {Tensor as TensorInterface} from './tensor';\r\n\r\nimport * as Utils from './tensor-impl-utils';\r\n\r\ntype DataType = TensorInterface.DataType;\r\ntype Type = TensorInterface.Type;\r\ntype ElementType = TensorInterface.ElementType;\r\n\r\nexport class Tensor implements TensorInterface {\r\n  internalTensor: InternalTensor;\r\n  constructor(data: DataType|number[]|boolean[], type: Type, dims?: ReadonlyArray<number>) {\r\n    const inferredDims = dims ? dims : [data.length];\r\n    // convert regular arrays to typeArrays\r\n    if (Array.isArray(data) && type !== 'string') {\r\n      if (type === 'float32') {\r\n        // convert number[] to Float32Array\r\n        this.data = Float32Array.from(data as number[]);\r\n      } else if (type === 'bool') {\r\n        // convert boolean[] to Uint8Array\r\n        // NOTE: there is a bug of Uint8Array.from() in Safari when using core-js. Use 'new Uint8Array' as workaround.\r\n        // See also: https://github.com/zloirock/core-js/issues/285\r\n        this.data = new Uint8Array(data as number[]);\r\n      } else if (type === 'int32') {\r\n        // convert number[] to Int32Array\r\n        this.data = Int32Array.from(data as number[]);\r\n      }\r\n    } else {\r\n      this.data = data as DataType;\r\n    }\r\n\r\n    this.dims = inferredDims;\r\n    this.type = type;\r\n    this.internalTensor = new InternalTensor(this.dims, this.type, undefined, undefined, this.data);\r\n    this.size = this.internalTensor.size;\r\n  }\r\n\r\n  dims: ReadonlyArray<number>;\r\n  type: Type;\r\n  size: number;\r\n  data: DataType;\r\n  get(...indices: number[]): ElementType;\r\n  get(indices: ReadonlyArray<number>): ElementType;\r\n  get(indices?: ReadonlyArray<number>|number, ...rest: number[]): ElementType {\r\n    let indexArray: ReadonlyArray<number> = [];\r\n    if (typeof indices === 'number') {\r\n      indexArray = [indices, ...rest];\r\n    } else if (indices) {\r\n      indexArray = indices;\r\n    } else {\r\n      throw new Error(`Input index array is undefined. `);\r\n    }\r\n    // check dims\r\n    Utils.validateIndices(indexArray);\r\n    if (indexArray.length !== this.dims.length) {\r\n      throw new RangeError(`Input index array dims don't match the tensor dims.`);\r\n    }\r\n    // compute the flattened index\r\n    indexArray.forEach((dim: number, idx: number) => {\r\n      if (dim >= this.dims[idx]) {\r\n        throw new RangeError(`Input index array dims don't match the tensor dims.`);\r\n      }\r\n    });\r\n    const value = this.internalTensor.get(indexArray);\r\n    if (this.type === 'bool') {\r\n      return value === 1 ? true : false;\r\n    }\r\n    return value;\r\n  }\r\n  set(value: ElementType, ...indices: number[]): void;\r\n  set(value: ElementType, indices: ReadonlyArray<number>): void;\r\n  set(value: ElementType, indices?: ReadonlyArray<number>|number, ...rest: number[]) {\r\n    Utils.matchElementType(this.type, value);\r\n    let indexArray: ReadonlyArray<number> = [];\r\n    if (typeof indices === 'number') {\r\n      indexArray = [indices, ...rest];\r\n    } else if (indices) {\r\n      indexArray = indices;\r\n    } else {\r\n      throw new Error(`Input index array is undefined.`);\r\n    }\r\n    // check dims\r\n    Utils.validateIndices(indexArray);\r\n    if (indexArray.length !== this.dims.length) {\r\n      throw new RangeError(`Input index array dims don't match the tensor dims.`);\r\n    }\r\n    // compute the flattened index\r\n    indexArray.forEach((dim: number, idx: number) => {\r\n      if (dim >= this.dims[idx]) {\r\n        throw new RangeError(`Input index array dims don't match the tensor dims.`);\r\n      }\r\n    });\r\n\r\n    if (typeof value === 'boolean') {\r\n      this.internalTensor.set(indexArray, value ? 1 : 0);\r\n    } else {\r\n      this.internalTensor.set(indexArray, value);\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Tensor as InternalTensor} from '../tensor';\r\nimport {Tensor as TensorInterface} from './tensor';\r\nimport {Tensor as ApiTensor} from './tensor-impl';\r\n\r\nexport function fromInternalTensor(internalTensor: InternalTensor): ApiTensor {\r\n  switch (internalTensor.type) {\r\n    case 'bool':\r\n      return new ApiTensor(new Uint8Array(internalTensor.integerData), 'bool', internalTensor.dims);\r\n    case 'float32':\r\n      return new ApiTensor(internalTensor.floatData as Float32Array, 'float32', internalTensor.dims);\r\n    case 'float64':\r\n      return new ApiTensor(new Float32Array(internalTensor.floatData), 'float32', internalTensor.dims);\r\n    case 'string':\r\n      return new ApiTensor(internalTensor.stringData, 'string', internalTensor.dims);\r\n    case 'int8':\r\n    case 'uint8':\r\n    case 'int16':\r\n    case 'uint16':\r\n    case 'uint32':\r\n      return new ApiTensor(new Int32Array(internalTensor.integerData), 'int32', internalTensor.dims);\r\n    case 'int32':\r\n      return new ApiTensor(internalTensor.integerData as Int32Array, 'int32', internalTensor.dims);\r\n    default:\r\n      throw new TypeError('Tensor type is not supported. ');\r\n  }\r\n}\r\n\r\nexport function toInternalTensor(tensor: ApiTensor): InternalTensor {\r\n  return new InternalTensor(tensor.dims, tensor.type, undefined, undefined, tensor.data);\r\n}\r\n\r\nexport function matchElementType(type: TensorInterface.Type, element: TensorInterface.ElementType) {\r\n  switch (typeof element) {\r\n    case 'string':\r\n      if (type !== 'string') {\r\n        throw new TypeError(`The new element type doesn't match the tensor data type.`);\r\n      }\r\n      break;\r\n    case 'number':\r\n      if (type !== 'float32' && type !== 'int32') {\r\n        throw new TypeError(`The new element type doesn't match the tensor data type.`);\r\n      }\r\n      if (type === 'float32' && Number.isInteger(element)) {\r\n        throw new TypeError(`The new element type doesn't match the tensor data type.`);\r\n      }\r\n      if (type === 'int32' && !Number.isInteger(element)) {\r\n        throw new TypeError(`The new element type doesn't match the tensor data type.`);\r\n      }\r\n      break;\r\n    case 'boolean':\r\n      if (type !== 'bool') {\r\n        throw new TypeError(`The new element type doesn't match the tensor data type.`);\r\n      }\r\n      break;\r\n    default:\r\n      throw new TypeError(`The new element type is not supported.`);\r\n  }\r\n}\r\n\r\nexport function validateIndices(indices: ReadonlyArray<number>) {\r\n  if (indices.length > 6) {\r\n    throw new RangeError(`Only rank 0 to 6 is supported for tensor shape.`);\r\n  }\r\n  for (const n of indices) {\r\n    if (!Number.isInteger(n)) {\r\n      throw new TypeError(`Invalid index: ${n} is not an integer`);\r\n    }\r\n    if (n < 0 || n > 2147483647) {\r\n      throw new TypeError(`Invalid index: length ${n} is not allowed`);\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {CpuBackend} from '../backends/backend-cpu';\r\nimport {WasmBackend} from '../backends/backend-wasm';\r\nimport {WebGLBackend} from '../backends/backend-webgl';\r\n\r\nimport {Environment} from './env';\r\nimport {envImpl} from './env-impl';\r\nimport {Backend} from './onnx';\r\n\r\nexport * from './env';\r\nexport * from './onnx';\r\nexport * from './tensor';\r\nexport * from './inference-session';\r\n\r\nexport const backend: Backend = {\r\n  cpu: new CpuBackend(),\r\n  wasm: new WasmBackend(),\r\n  webgl: new WebGLBackend()\r\n};\r\n\r\nexport const ENV: Environment = envImpl;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Backend as BackendInterface} from '../api/onnx';\r\nimport {Backend, SessionHandler} from '../backend';\r\nimport {Session} from '../session';\r\n\r\nimport {CpuSessionHandler} from './cpu/session-handler';\r\n\r\ntype CpuOptions = BackendInterface.CpuOptions;\r\n\r\nexport class CpuBackend implements Backend, CpuOptions {\r\n  disabled?: boolean;\r\n\r\n  initialize(): boolean {\r\n    return true;\r\n  }\r\n  createSessionHandler(context: Session.Context): SessionHandler {\r\n    return new CpuSessionHandler(this, context);\r\n  }\r\n  dispose(): void {}\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Backend, InferenceHandler, SessionHandler} from '../../backend';\r\nimport {Graph} from '../../graph';\r\nimport {Operator} from '../../operators';\r\nimport {OpSet, resolveOperator} from '../../opset';\r\nimport {Session} from '../../session';\r\n\r\nimport {CpuInferenceHandler} from './inference-handler';\r\nimport {CPU_OP_RESOLVE_RULES} from './op-resolve-rules';\r\n\r\nexport class CpuSessionHandler implements SessionHandler {\r\n  constructor(readonly backend: Backend, readonly context: Session.Context) {}\r\n\r\n  createInferenceHandler(): InferenceHandler {\r\n    return new CpuInferenceHandler(this, this.context.profiler);\r\n  }\r\n\r\n  dispose(): void {}\r\n\r\n  resolve(node: Graph.Node, opsets: ReadonlyArray<OpSet>, graph: Graph): Operator {\r\n    const op = resolveOperator(node, opsets, CPU_OP_RESOLVE_RULES);\r\n    op.initialize(node.attributes, node, graph);\r\n    return op;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {InferenceHandler} from '../../backend';\r\nimport {Profiler} from '../../instrument';\r\n\r\nimport {CpuSessionHandler} from './session-handler';\r\n\r\nexport class CpuInferenceHandler implements InferenceHandler {\r\n  constructor(public readonly session: CpuSessionHandler, public readonly profiler?: Readonly<Profiler>) {}\r\n\r\n  dispose(): void {}\r\n}\r\n","import {ArgMax} from '../../../ops/argMax';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, ReduceUtil, ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuArgMax extends ArgMax {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\r\n    const output = argMax(inputs[0], this.axis, this.keepDims);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function argMax(x: Tensor, axis: number, keepdims: boolean): Tensor {\r\n  const rank = x.dims ? x.dims.length : 1;\r\n  axis = ShapeUtil.normalizeAxis(axis, rank);\r\n  const outputDims = ReduceUtil.calcReduceShape(x.dims, [axis], true);\r\n  const X = x.data;\r\n  const Y = new Int32Array(ShapeUtil.size(outputDims));\r\n  const blockSize = ShapeUtil.sizeFromDimension(x.dims, axis + 1);\r\n  const strides = ShapeUtil.computeStrides(outputDims);\r\n  const inputStrides = ShapeUtil.computeStrides(x.dims);\r\n  const indicesY = new Array(x.dims.length);\r\n  for (let i = 0; i < Y.length; i++) {\r\n    const indices = ShapeUtil.offsetToIndices(i, strides);\r\n    // map index\r\n    BroadcastUtil.fillIndex(indices, x.dims, indicesY);\r\n    const offset = ShapeUtil.indicesToOffset(indicesY, inputStrides);\r\n    let max = x.data[offset];\r\n    let index = 0;\r\n    for (let j = 0; j < x.dims[axis]; ++j) {\r\n      const value = X[offset + j * blockSize];\r\n      if (value > max) {\r\n        max = value;\r\n        index = j;\r\n      }\r\n    }\r\n    Y[i] = index;\r\n  }\r\n\r\n  return new Tensor(\r\n      keepdims ? outputDims : ReduceUtil.calcReduceShape(x.dims, [axis], keepdims), 'int32', undefined, undefined, Y);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {NUMBER_TYPES, Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class ArgMax implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axis = attributes.getInt('axis', 0);\r\n    this.keepDims = attributes.getInt('keepdims', 1) === 1;\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axis: number;\r\n  protected keepDims: boolean;\r\n}\r\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {BatchNormalization} from '../../../ops/batch-normalization';\r\nimport {Tensor} from '../../../tensor';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuBatchNormalization extends BatchNormalization {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = batchNormalization(\r\n        inputs[0], inputs[1], inputs[2], inputs[3], inputs[4], this.epsilon, this.momentum, this.spatial);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function batchNormalization(\r\n    x: Tensor, scale: Tensor, b: Tensor, mean: Tensor, variance: Tensor, epsilon: number, momentum: number,\r\n    spatial: number) {\r\n  const inputDimensions = x.dims;\r\n  const N = inputDimensions[0];\r\n  const C = inputDimensions[1];\r\n\r\n  // calculate channel size (i.e.) data points per channel\r\n  let channelSize = 1;\r\n  for (let i = 2; i < inputDimensions.length; i++) {\r\n    channelSize *= inputDimensions[i];\r\n  }\r\n\r\n  const output = new Tensor(x.dims, x.type);\r\n\r\n  const X = x.floatData;\r\n  const Y = output.floatData;\r\n  const scaleData = scale.numberData;\r\n  const bData = b.numberData;\r\n  const meanData = mean.numberData;\r\n  const varianceData = variance.numberData;\r\n\r\n  for (let nc = 0; nc < N * C; nc++) {\r\n    const offset = nc * channelSize;\r\n    for (let i = 0; i < channelSize; i++) {\r\n      Y[offset + i] =\r\n          scaleData[nc % C] * ((X[offset + i] - meanData[nc % C]) / Math.sqrt(varianceData[nc % C] + epsilon)) +\r\n          bData[nc % C];\r\n    }\r\n  }\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../../../attribute';\r\nimport {BinaryOp} from '../../../ops/binary-op';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuBinaryOp extends BinaryOp {\r\n  constructor(\r\n      typeConstraint: ReadonlyArray<Tensor.DataType>, private opLambda?: (e1: number, e2: number) => number,\r\n      opType?: string, resultType?: Tensor.DataType) {\r\n    super(typeConstraint, opType, resultType);\r\n  }\r\n\r\n  // overriding the initialize() in the base class\r\n  initialize(attributes: Attribute): void {\r\n    if (!this.opType && !this.opLambda) {\r\n      throw new Error(`Both opType and opLambda cannot be missing for a binary op`);\r\n    }\r\n    // Expose functionality to construct opLambdas on the fly\r\n    // This is not costly as initialize() should be invoked only once after the model is resolved to a graph object\r\n    if (!this.opLambda) {\r\n      switch (this.opType) {\r\n        default:\r\n          throw new Error(`Binary op could not be initialized. Missing op lambda.`);\r\n      }\r\n    }\r\n  }\r\n\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = binaryOp(inputs[0], inputs[1], this.opLambda!, false, this.resultType);\r\n    return [output];\r\n  }\r\n}\r\n\r\nfunction binaryOp(\r\n    x: Tensor, y: Tensor, opLambda: (e1: number, e2: number) => number, inplace: boolean,\r\n    resultType?: Tensor.DataType): Tensor {\r\n  const result = BroadcastUtil.calc(x, y, opLambda, inplace, resultType);\r\n  if (!result) {\r\n    throw new Error('not broadcastable');\r\n  }\r\n  return result;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Cast} from '../../../ops/cast';\r\nimport {Tensor} from '../../../tensor';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\n// import { getLogger } from 'log4js';\r\n\r\nexport class CpuCast extends Cast {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return [cast(inputs[0], this.to)];\r\n  }\r\n}\r\n\r\nexport function cast(x: Tensor, to: Tensor.DataType): Tensor {\r\n  const output = new Tensor([...x.dims], to);\r\n  const inputData = x.data;\r\n  const outputData = output.data;\r\n\r\n  for (let i = 0; i < outputData.length; ++i) {\r\n    outputData[i] = inputData[i];\r\n  }\r\n\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\nimport {ProtoUtil} from '../util';\r\n\r\nexport abstract class Cast implements Operator {\r\n  protected to: Tensor.DataType;\r\n\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.to = ProtoUtil.tensorDataTypeFromProto(attributes.getInt('to'));\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type === 'string') {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Concat} from '../../../ops/concat';\r\nimport {Tensor} from '../../../tensor';\r\nimport * as Util from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuConcat extends Concat {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = concat(inputs, this.axis);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function concat(x: Tensor[], axis: number) {\r\n  const input0 = x[0];\r\n  const inputShape = input0.dims;\r\n\r\n  if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\r\n    throw new Error(`axis specified for concat doesn't match input dimensionality`);\r\n  }\r\n\r\n  if (axis < 0) {\r\n    axis = inputShape.length + axis;\r\n  }\r\n\r\n  // ensure all of the non-concatenated axes match each other\r\n  // along the way, calculate the shape of the output tensor\r\n  let concatAxisSize = inputShape[axis];\r\n  const outputShape = inputShape.slice(0);\r\n\r\n  for (let i = 1; i < x.length; i++) {\r\n    const dataN = x[i];\r\n    const dataNShape = dataN.dims;\r\n\r\n    for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\r\n      // add to the placeholder for computing output shape\r\n      if (axisIndex === axis) {\r\n        concatAxisSize += dataNShape[axisIndex];\r\n      }\r\n\r\n      // ensure all non-cancatenated axes match each other\r\n      else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\r\n        throw new Error(`non concat dimensions must match`);\r\n      }\r\n\r\n      // fill the 'outputShape' array\r\n      outputShape[axisIndex] = dataNShape[axisIndex];\r\n    }\r\n  }\r\n\r\n  // complete the 'outputShape' array\r\n  outputShape[axis] = concatAxisSize;\r\n\r\n  // main logic\r\n  const output = new Tensor(outputShape, input0.type);\r\n  const Y = output.numberData;\r\n\r\n  // the axisPitch is the number of elements to add to move\r\n  // to the next split axis in the output\r\n  let axisPitch = 1;\r\n  for (let i = outputShape.length - 1; i >= axis; i--) {\r\n    axisPitch *= outputShape[i];\r\n  }\r\n\r\n  let outputBase = 0;\r\n  for (let inputIndex = 0; inputIndex < x.length; inputIndex++) {\r\n    const dataN = x[inputIndex];\r\n\r\n    // the inputAxisPitch is the number of elements to add\r\n    // to move to the next split axis in the input\r\n    let inputAxisPitch = 1;\r\n    for (let i = dataN.dims.length - 1; i >= axis; i--) {\r\n      inputAxisPitch *= dataN.dims[i];\r\n    }\r\n\r\n    const inputData = dataN.numberData;\r\n    const inputSize = Util.ShapeUtil.size(dataN.dims);\r\n\r\n    // copy the data across.\r\n    // for every 'inputAxisPitch' values copied, we move over by\r\n    // the 'axisPitch'\r\n\r\n    let outputOffset = outputBase;\r\n\r\n    for (let i = 0, j = 0; i < inputSize; i++) {\r\n      Y[outputOffset + i] = inputData[i];\r\n      if (++j === inputAxisPitch) {\r\n        // subtract inputAxisPitch because output is being indexed by 'i'\r\n        outputOffset += (axisPitch - inputAxisPitch);\r\n        j = 0;\r\n      }\r\n    }\r\n    outputBase += inputAxisPitch;\r\n  }\r\n\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Conv} from '../../../ops/conv';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nimport {matMul2d} from './matmul';\r\n\r\nexport class CpuConv extends Conv {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const x = inputs[0];\r\n    const w = inputs[1];\r\n    const b = inputs.length === 3 ? inputs[2] : undefined;\r\n\r\n    // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\r\n    if (this.kernelShape.length === 0) {\r\n      const wDims = inputs[1].dims;\r\n      for (let i = 2; i < wDims.length; ++i) {\r\n        this.kernelShape.push(wDims[i]);\r\n      }\r\n    }\r\n\r\n    // create output Tensor after determining output size (after adjusting pads based on 'autoPad' attribute)\r\n    const outputDims = PoolConvUtil.computeConvOutputShape(\r\n        x.dims, w.dims, this.strides, this.dilations, this.kernelShape, this.pads, this.autoPad);\r\n    const y = new Tensor(outputDims, x.type);\r\n\r\n    conv2d(y, x, w, b, this.dilations, this.group, this.pads, this.strides);\r\n    return [y];\r\n  }\r\n}\r\n\r\n// tslint:disable: variable-name\r\nexport function conv2d(\r\n    Y: Tensor, X: Tensor, W: Tensor, B: Tensor|undefined, dilations: ReadonlyArray<number>, group: number,\r\n    pads: ReadonlyArray<number>, strides: ReadonlyArray<number>): void {\r\n  const input_num = X.dims[0];\r\n  const input_channels = X.dims[1];\r\n  const input_height = X.dims[2];\r\n  const input_width = X.dims[3];\r\n\r\n  const filter_num = W.dims[0];\r\n  const filter_channels = W.dims[1];\r\n  const filter_height = W.dims[2];\r\n  const filter_width = W.dims[3];\r\n  const filter_size = filter_num * filter_channels * filter_height * filter_width;\r\n  const kernel_shape = [filter_height, filter_width];\r\n\r\n  const output_num = Y.dims[0];\r\n  const output_channels = Y.dims[1];\r\n  const output_height = Y.dims[2];\r\n  const output_width = Y.dims[3];\r\n  const output_size = output_num * output_channels * output_height * output_width;\r\n\r\n  const input_image_size = input_height * input_width;\r\n  const output_image_size = output_height * output_width;\r\n  const kernel_size = kernel_shape[0] * kernel_shape[1];\r\n  const X_offset = input_channels / group * input_image_size;\r\n  const Y_offset = output_size / output_num / group;\r\n  const W_offset = filter_size / group;\r\n  const kernel_dim = input_channels / group * kernel_size;\r\n  const col_buffer_size = kernel_dim * output_image_size;\r\n\r\n  const col_buffer_data = new Float32Array(col_buffer_size);\r\n\r\n  for (let image_id = 0; image_id < input_num; ++image_id) {\r\n    let X_image_offset = 0;\r\n    let Y_image_offset = 0;\r\n    for (let group_id = 0; group_id < group; ++group_id) {\r\n      im2col(\r\n          X.floatData.subarray(X_image_offset + group_id * X_offset), col_buffer_data, input_channels / group,\r\n          input_height, input_width, kernel_shape[0], kernel_shape[1], dilations[0], dilations[1], pads[0], pads[1],\r\n          pads[2], pads[3], strides[0], strides[1]);\r\n\r\n      matMul2d(\r\n          W.floatData.subarray(group_id * W_offset), col_buffer_data,\r\n          Y.floatData.subarray(Y_image_offset + group_id * Y_offset), false, false, 1, 0, filter_num / group,\r\n          output_image_size, kernel_dim);\r\n    }\r\n\r\n    X_image_offset += X_offset * group;\r\n    Y_image_offset += Y_offset * group;\r\n  }\r\n\r\n  // Add bias if applicable\r\n  if (B) {\r\n    const biasData = B.floatData;\r\n    const outputData = Y.floatData;\r\n    const batchSize = Y.dims[0];\r\n    const outputChannels = Y.dims[1];\r\n    const channelSize = Y.dims[2] * Y.dims[3];\r\n    const dataSize = outputChannels * channelSize;\r\n    for (let batch = 0; batch < batchSize; ++batch) {\r\n      for (let channel = 0; channel < outputChannels; ++channel) {\r\n        const offset = batch * dataSize + channel * channelSize;\r\n        for (let index = 0; index < channelSize; ++index) {\r\n          outputData[offset + index] += biasData[channel];\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction im2col(\r\n    data_im: Float32Array|Float64Array, data_col: Float32Array|Float64Array, channels: number, height: number,\r\n    width: number, kernel_h: number, kernel_w: number, dilation_h: number, dilation_w: number, pad_t: number,\r\n    pad_l: number, pad_b: number, pad_r: number, stride_h: number, stride_w: number) {\r\n  const output_h = ~~((height + pad_b + pad_t - (dilation_h * (kernel_h - 1) + 1)) / stride_h) + 1;\r\n  const output_w = ~~((width + pad_l + pad_r - (dilation_w * (kernel_w - 1) + 1)) / stride_w) + 1;\r\n\r\n  // Fast path for zero padding and no dilation\r\n  // From Torch, THNN_(unfolded_copy)\r\n  if (dilation_h === 1 && dilation_w === 1 && pad_l === 0 && pad_r === 0 && pad_t === 0 && pad_b === 0) {\r\n    for (let k = 0; k < channels * kernel_h * kernel_w; k++) {\r\n      const nip = ~~(k / (kernel_h * kernel_w));\r\n      const rest = k % (kernel_h * kernel_w);\r\n      const kh = ~~(rest / kernel_w);\r\n      const kw = rest % kernel_w;\r\n      const dst_offset = nip * (kernel_h * kernel_w * output_h * output_w) + kh * (kernel_w * output_h * output_w) +\r\n          kw * (output_h * output_w);\r\n      const src_offset = nip * (height * width);\r\n      for (let y = 0; y < output_h; y++) {\r\n        const iy = y * stride_h + kh;\r\n        const ix = kw;\r\n        if (stride_w === 1) {\r\n          data_col.set(\r\n              data_im.subarray(src_offset + iy * width + ix, src_offset + iy * width + ix + output_w),\r\n              dst_offset + y * output_w);\r\n        } else {\r\n          for (let x = 0; x < output_w; x++) {\r\n            data_col[dst_offset + (y * output_w + x)] = data_im[src_offset + (iy * width + ix + x * stride_w)];\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return;\r\n  }\r\n\r\n  // Baseline\r\n  const dkernel_h = dilation_h * (kernel_h - 1) + 1;\r\n  const dkernel_w = dilation_w * (kernel_w - 1) + 1;\r\n\r\n  const height_col = ~~((height + pad_t + pad_b - dkernel_h) / stride_h) + 1;\r\n  const width_col = ~~((width + pad_l + pad_r - dkernel_w) / stride_w) + 1;\r\n\r\n  const channels_col = channels * kernel_h * kernel_w;\r\n  for (let c = 0; c < channels_col; ++c) {\r\n    const w_offset = c % kernel_w;\r\n    const h_offset = ~~(c / kernel_w) % kernel_h;\r\n    const c_im = ~~(c / (kernel_h * kernel_w));\r\n    for (let h = 0; h < height_col; ++h) {\r\n      for (let w = 0; w < width_col; ++w) {\r\n        const h_pad = h * stride_h - pad_t + h_offset * dilation_h;\r\n        const w_pad = w * stride_w - pad_l + w_offset * dilation_w;\r\n        if (h_pad >= 0 && h_pad < height && w_pad >= 0 && w_pad < width) {\r\n          data_col[(c * height_col + h) * width_col + w] = data_im[(c_im * height + h_pad) * width + w_pad];\r\n        } else {\r\n          data_col[(c * height_col + h) * width_col + w] = 0;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Dropout} from '../../../ops/dropout';\r\nimport {Tensor} from '../../../tensor';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuDropout extends Dropout {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = dropout(inputs[0], this.ratio, this.testMode);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function dropout(x: Tensor, ratio: number, isTestMode: boolean) {\r\n  if (!isTestMode) {\r\n    throw new Error('only test mode is supported');\r\n  }\r\n\r\n  const output = new Tensor(x.dims, x.type);\r\n  const X = x.floatData;\r\n  const Y = output.numberData;\r\n  Y.set(X);\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Expand} from '../../../ops/expand';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\n// import { getLogger } from 'log4js';\r\n\r\nexport class CpuExpand extends Expand {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return [expand(inputs[0], inputs[1])];\r\n  }\r\n}\r\n\r\nexport function expand(x: Tensor, shape: Tensor): Tensor {\r\n  const shapeData = shape.integerData as Int32Array;\r\n  const dimensions = [...shapeData];\r\n  const originalDimensions = x.dims;\r\n\r\n  for (let i = dimensions.length - 1; i >= dimensions.length - originalDimensions.length; --i) {\r\n    // Replace -1 with the original dimension\r\n    if (dimensions[i] === -1) {\r\n      dimensions[i] = originalDimensions[i + dimensions.length - originalDimensions.length];\r\n    }\r\n  }\r\n\r\n  const output = new Tensor(dimensions, x.type);\r\n\r\n  const result = BroadcastUtil.calc(x, output, (a, b) => a, false);\r\n  if (!result) {\r\n    throw new Error('not broadcastable');\r\n  }\r\n\r\n  return result;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {NUMBER_TYPES, Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Expand implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 2) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[1].type !== 'int32') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Flatten} from '../../../ops/flatten';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuFlatten extends Flatten {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = flatten(inputs[0], this.axis);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function flatten(x: Tensor, axis: number): Tensor {\r\n  const outputDims = ShapeUtil.flattenShape(x.dims, axis);\r\n  const output = new Tensor(outputDims, x.type);\r\n\r\n  const X = x.numberData;\r\n  const Y = output.numberData;\r\n\r\n  Y.set(X);\r\n\r\n  return output;\r\n}\r\n","import {Gather} from '../../../ops/gather';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuGather extends Gather {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\r\n    const output = gather(inputs[0], inputs[1], this.axis);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function gather(x: Tensor, indices: Tensor, axis: number): Tensor {\r\n  axis = ShapeUtil.normalizeAxis(axis, x.dims.length);\r\n  const dims = x.dims.slice();\r\n  const newDims = dims.slice();\r\n  const indicesData = indices.data;\r\n  newDims[axis] = indicesData.length;\r\n  const dimsStrides = ShapeUtil.computeStrides(dims);\r\n  const newDimsStrides = ShapeUtil.computeStrides(newDims);\r\n  const output = new Tensor(newDims, x.type);\r\n  const Y = output.numberData;\r\n  const X = x.data;\r\n  for (let i = 0; i < Y.length; ++i) {\r\n    const newLogicalIndex = ShapeUtil.offsetToIndices(i, newDimsStrides);\r\n    const oldLogicalIndex = newLogicalIndex.slice();\r\n    const idx = indicesData[newLogicalIndex[axis]] as number;\r\n    oldLogicalIndex[axis] = idx < 0 ? idx + dims[axis] : idx;\r\n    const oldOffset = ShapeUtil.indicesToOffset(oldLogicalIndex, dimsStrides);\r\n    Y[i] = X[oldOffset] as number;\r\n  }\r\n  // calculate the output dims\r\n  const outputDims = dims.slice(0, axis).concat(indices.dims).concat(dims.slice(axis + 1));\r\n  return new Tensor(outputDims, x.type, undefined, undefined, Y);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Gemm} from '../../../ops/gemm';\r\nimport {Tensor} from '../../../tensor';\r\nimport * as util from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nimport {matMul2d} from './matmul';\r\n\r\nexport class CpuGemm extends Gemm {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = gemm(\r\n        inputs[0], inputs[1], this.alpha, this.beta, this.transA, this.transB,\r\n        inputs.length === 3 ? inputs[2] : undefined);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function gemm(a: Tensor, b: Tensor, alpha: number, beta: number, transA: boolean, transB: boolean, c?: Tensor) {\r\n  const [M, N, K] = util.GemmUtil.getShapeOfGemmResult(a.dims, transA, b.dims, transB, c?.dims);\r\n\r\n  // The result will always be of the shape [M,N]\r\n  const output = new Tensor([M, N], a.type);\r\n  // broadcast and assign value from C to output\r\n  if (c && util.BroadcastUtil.calc(output, c, (a, b) => b, true) !== output) {\r\n    throw new Error(`tensor C is not broadcastable to [M,N]`);\r\n  }\r\n\r\n  matMul2d(a.floatData, b.floatData, output.floatData, transA, transB, alpha, beta, M, N, K);\r\n\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {ImageScaler} from '../../../ops/image-scaler';\r\nimport {Tensor} from '../../../tensor';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuImageScaler extends ImageScaler {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = imageScaler(inputs[0], this.bias, this.scale);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function imageScaler(x: Tensor, bias: number[], scale: number): Tensor {\r\n  const [N, C, H, W] = x.dims;\r\n  const output = new Tensor([N, C, H, W], x.type);\r\n  const X = x.floatData;\r\n  const Y = output.floatData;\r\n  for (let nc = 0; nc < N * C; nc++) {\r\n    for (let hw = 0; hw < H * W; hw++) {\r\n      const index = nc * H * W + hw;\r\n      Y[index] = X[index] * scale + bias[nc % C];\r\n    }\r\n  }\r\n\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {InstanceNormalization} from '../../../ops/instance-normalization';\r\nimport {Tensor} from '../../../tensor';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuInstanceNormalization extends InstanceNormalization {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = instanceNormalization(inputs[0], inputs[1], inputs[2], this.epsilon);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function instanceNormalization(x: Tensor, scale: Tensor, b: Tensor, epsilon: number) {\r\n  const inputDimensions = x.dims;\r\n  const N = inputDimensions[0];\r\n  const C = inputDimensions[1];\r\n\r\n  // calculate channel size (i.e.) data points per channel\r\n  let channelSize = 1;\r\n  for (let i = 2; i < inputDimensions.length; i++) {\r\n    channelSize *= inputDimensions[i];\r\n  }\r\n  const output = new Tensor(x.dims, x.type);\r\n\r\n  const X = x.floatData;\r\n  const Y = output.floatData;\r\n  const scaleData = scale.numberData;\r\n  const bData = b.numberData;\r\n\r\n  let temp: number;\r\n  let mean: number;\r\n  let variance: number;\r\n  let physicalOffset: number;\r\n  let iterEnd: number;\r\n  let currentChannel: number;\r\n\r\n  for (let nc = 0; nc < N * C; nc++) {\r\n    physicalOffset = nc * channelSize;\r\n    iterEnd = physicalOffset + channelSize;\r\n    currentChannel = nc % C;\r\n\r\n    // compute mean for this channel\r\n    temp = 0;\r\n    for (let i = physicalOffset; i < iterEnd; ++i) {\r\n      temp += X[i];\r\n    }\r\n    mean = temp / channelSize;\r\n\r\n    // compute variance for this channel\r\n    temp = 0;\r\n    for (let i = physicalOffset; i < iterEnd; ++i) {\r\n      temp += Math.pow(X[i] - mean, 2);\r\n    }\r\n    variance = temp / channelSize;\r\n\r\n    // compute normalized value for data in this channel\r\n    for (let i = physicalOffset; i < iterEnd; ++i) {\r\n      Y[i] = scaleData[currentChannel] * ((X[i] - mean) / Math.sqrt(variance + epsilon)) + bData[currentChannel];\r\n    }\r\n  }\r\n\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Lrn} from '../../../ops/lrn';\r\nimport {Tensor} from '../../../tensor';\r\nimport * as util from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuLrn extends Lrn {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = lrn(inputs[0], this.alpha, this.beta, this.bias, this.size);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function lrn(x: Tensor, alpha: number, beta: number, bias: number, size: number): Tensor {\r\n  const N = x.dims[0];\r\n  const C = x.dims[1];\r\n  const X = x.floatData;\r\n  let channelSize = 1;\r\n\r\n  for (let i = 2; i < x.dims.length; ++i) {\r\n    channelSize *= x.dims[i];\r\n  }\r\n\r\n  const tensorDataSize = channelSize * C;\r\n\r\n  // create new tensor to hold the result\r\n  const output = new Tensor(x.dims, x.type);\r\n  const Y: number[] = new Array(util.ShapeUtil.size(x.dims));\r\n\r\n  // update the output with just the bias to begin with\r\n  for (let i = 0; i < Y.length; ++i) {\r\n    Y[i] = bias;\r\n  }\r\n\r\n  // placeholder to store padded square (i.e.) intermediate data\r\n  const paddedSquareSize = (C + size - 1) * channelSize;\r\n  const paddedSquareData = new Float64Array(paddedSquareSize);\r\n\r\n  const alphaOverSize = alpha / size;\r\n  const prePad = (size - 1) / 2;\r\n\r\n  // go through the images\r\n  for (let n = 0; n < N; ++n) {\r\n    // compute the padded square\r\n    util.MathUtil.sqr(paddedSquareData, X, prePad * channelSize, tensorDataSize * n, tensorDataSize);\r\n\r\n    // create the first channel\r\n    for (let c = 0; c < size; ++c) {\r\n      util.MathUtil.axpy(Y, paddedSquareData, tensorDataSize * n, c * channelSize, channelSize, alphaOverSize);\r\n    }\r\n\r\n    for (let c = 1; c < C; ++c) {\r\n      const scaleSliceStart = n * tensorDataSize + c * channelSize;\r\n\r\n      // copy previous scale\r\n      util.arrayCopyHelper(Y, Y, scaleSliceStart, scaleSliceStart - channelSize, channelSize);\r\n\r\n      // add head\r\n      util.MathUtil.axpy(\r\n          Y, paddedSquareData, scaleSliceStart, (c + size - 1) * channelSize, channelSize, alphaOverSize);\r\n\r\n      // subtract tail\r\n      util.MathUtil.axpy(Y, paddedSquareData, scaleSliceStart, (c - 1) * channelSize, channelSize, -alphaOverSize);\r\n    }\r\n  }\r\n\r\n  util.MathUtil.powx(Y, Y, 0, 0, util.ShapeUtil.size(x.dims), -beta);\r\n\r\n  util.MathUtil.mul(Y, X, 0, 0, util.ShapeUtil.size(x.dims));\r\n\r\n  output.floatData.set(Y);\r\n\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Lrn implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.alpha = attributes.getFloat('alpha', 1E-4);\r\n    this.beta = attributes.getFloat('beta', 0.75);\r\n    this.bias = attributes.getFloat('bias', 1.0);\r\n    this.size = attributes.getInt('size');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    // input tensor must have atleast 3 dimensions\r\n    if (inputs[0].dims.length < 3) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected alpha: number;\r\n  protected beta: number;\r\n  protected bias: number;\r\n  protected size: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Pad} from '../../../ops/pad';\r\nimport {Tensor} from '../../../tensor';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n// import { getLogger } from 'log4js';\r\n\r\nexport class CpuPad extends Pad {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = pad(inputs[0], this.mode, this.value, this.pads);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function pad(x: Tensor, mode: string, value: number, pads: number[]) {\r\n  const inputDimensions = x.dims;\r\n  const outputDimensions = getPadDimension(inputDimensions, pads);\r\n\r\n  const output = new Tensor(outputDimensions, x.type);\r\n\r\n  switch (mode) {\r\n    case 'constant':\r\n      for (let ind = 0; ind < outputDimensions.reduce((acc, cur) => acc * cur, 1); ind++) {\r\n        const inx = mapToArrayIndex(ind, outputDimensions);\r\n        output.set(inx, value);\r\n      }\r\n      for (let ind = 0; ind < inputDimensions.reduce((acc, cur) => acc * cur, 1); ind++) {\r\n        const inx = mapToArrayIndex(ind, inputDimensions);\r\n        output.set(inx.map((v, i) => v + pads[i]), x.get(inx));\r\n      }\r\n      break;\r\n    case 'reflect':\r\n      for (let ind = 0; ind < outputDimensions.reduce((acc, cur) => acc * cur, 1); ind++) {\r\n        const inx = mapToArrayIndex(ind, outputDimensions);\r\n        output.set(inx, x.get(inx.map((v, i) => getReflectionIndex(v, pads[i], inputDimensions[i]))));\r\n      }\r\n      break;\r\n    case 'edge':\r\n      for (let ind = 0; ind < outputDimensions.reduce((acc, cur) => acc * cur, 1); ind++) {\r\n        const inx = mapToArrayIndex(ind, outputDimensions);\r\n        output.set(inx, x.get(inx.map((v, i) => getEdgeIndex(v, pads[i], inputDimensions[i]))));\r\n      }\r\n      break;\r\n    default:\r\n      throw Error('Illegal pad mode.');\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nfunction getReflectionIndex(index: number, offset: number, size: number) {\r\n  if (index < offset) {\r\n    const position = (offset - index - 1) % (size - 1);\r\n    const direction = Math.floor((offset - index - 1) / (size - 1)) % 2;\r\n    if (direction === 1) {\r\n      return size - position - 2;\r\n    } else {\r\n      return position + 1;\r\n    }\r\n  } else if (index < offset + size) {\r\n    return index - offset;\r\n  } else {\r\n    const position = (index - (offset + size)) % (size - 1);\r\n    const direction = Math.floor((index - (offset + size)) / (size - 1)) % 2;\r\n    if (direction === 0) {\r\n      return size - position - 2;\r\n    } else {\r\n      return position + 1;\r\n    }\r\n  }\r\n}\r\n\r\nfunction getEdgeIndex(index: number, offset: number, size: number) {\r\n  if (index < offset) {\r\n    return 0;\r\n  } else if (index < offset + size) {\r\n    return index - offset;\r\n  } else {\r\n    return size - 1;\r\n  }\r\n}\r\n\r\nfunction mapToArrayIndex(numberIndex: number, dimension: readonly number[]) {\r\n  if (numberIndex < 0 || (dimension.some(val => val < 0))) {\r\n    throw Error('Array index out of range');\r\n  }\r\n  const arrayIndex = [...dimension];\r\n  arrayIndex.reverse();\r\n  function product(array: readonly number[]) {\r\n    return array.reduce((acc, cur) => acc * cur, 1);\r\n  }\r\n  return arrayIndex.map((value, index, array) => Math.floor(numberIndex / product(array.slice(0, index))) % value)\r\n      .reverse();\r\n}\r\n\r\nfunction getPadDimension(inputDimensions: readonly number[], pads: number[]) {\r\n  const outputDimensions = Array(inputDimensions.length);\r\n  Object.assign(outputDimensions, inputDimensions);\r\n  for (let i = 0; i < inputDimensions.length; i++) {\r\n    outputDimensions[i] += pads[i] + pads[i + outputDimensions.length];\r\n  }\r\n  return outputDimensions;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {AveragePool, GlobalAveragePool, GlobalMaxPool, MaxPool} from '../../../ops/pool';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuAveragePool extends AveragePool {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output =\r\n        averagePool(inputs[0], this.autoPad, this.countIncludePad, this.kernelShape, this.pads, this.strides);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport class CpuGlobalAveragePool extends GlobalAveragePool {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\r\n    const output = globalAveragePool(inputs[0]);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport class CpuMaxPool extends MaxPool {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\r\n    const output = maxPool(inputs[0], this.autoPad, this.kernelShape, this.pads, this.strides);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport class CpuGlobalMaxPool extends GlobalMaxPool {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\r\n    const output = globalMaxPool(inputs[0]);\r\n    return [output];\r\n  }\r\n}\r\n\r\n// Functions implementing specific pooling operations\r\nexport function averagePool(\r\n    input: Tensor, autoPad: string, countIncludePad: boolean, kernelShape: number[], pads: number[],\r\n    strides: number[]): Tensor {\r\n  return pool(\r\n      false, input, autoPad, countIncludePad, kernelShape, pads, strides, 0, (a, b) => (a + b), (a, b) => (a / b));\r\n}\r\n\r\nexport function globalAveragePool(input: Tensor): Tensor {\r\n  return pool(true, input, 'NOTSET', false, [], [], [], 0, (a, b) => (a + b), (a, b) => (a / b));\r\n}\r\n\r\nexport function maxPool(\r\n    input: Tensor, autoPad: string, kernelShape: number[], pads: number[], strides: number[]): Tensor {\r\n  return pool(\r\n      false, input, autoPad, false, kernelShape, pads, strides, Number.MIN_SAFE_INTEGER, (a, b) => (Math.max(a, b)),\r\n      (a, b) => a);\r\n}\r\n\r\nexport function globalMaxPool(input: Tensor): Tensor {\r\n  return pool(\r\n      true, input, 'NOTSET', false, [], [], [], Number.MIN_SAFE_INTEGER, (a, b) => (Math.max(a, b)), (a, b) => a);\r\n}\r\n\r\n/**\r\n * Perform pooling operations based on input\r\n * @param isGlobalOperator If true, perform global pooling.\r\n * @param input The input tensor.\r\n * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID\r\n * @param countIncludePad Whether include pad pixels when calculating values for the edges.\r\n * @param kernelShape The size of the kernel along each axis.\r\n * @param pads Padding for the beginning and ending along each axis. `pads` format should be as follow [x1_begin,\r\n *       x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels added at the beginning of axis `i` and\r\n *       xi_end, the number of pixels added at the end of axis `i`.\r\n * @param strides Stride along each axis.\r\n * @param startVal The initial value to do pooling operations\r\n * @param processOp The operation to be performed on each element inside kernel\r\n * @param finalOp The operation to be performed over all elements inside kernel\r\n */\r\nexport function pool(\r\n    isGlobalOperator: boolean, input: Tensor, autoPad: string, countIncludePad: boolean, kernelShape: number[],\r\n    pads: number[], strides: number[], startVal: number, processOp: (a: number, b: number) => number,\r\n    finalOp: (a: number, b: number) => number): Tensor {\r\n  // adjust the shapes of input attributes\r\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, input.dims, kernelShape, strides, pads);\r\n\r\n  // calculate output shape based on input attributes.\r\n  const outputShape =\r\n      PoolConvUtil.computePoolOutputShape(isGlobalOperator, input.dims, strides, kernelShape, pads, autoPad);\r\n\r\n  const kernelSize = ShapeUtil.size(kernelShape);\r\n  const kernelStrides = ShapeUtil.computeStrides(kernelShape);\r\n  const stridesRank = kernelStrides.length;\r\n  const rank = outputShape.length;\r\n\r\n  const outputSize = ShapeUtil.size(outputShape);\r\n  const output = new Tensor(outputShape, input.type);\r\n  const outputStride = ShapeUtil.computeStrides(outputShape);\r\n\r\n  for (let ind = 0; ind < outputSize; ind++) {\r\n    const curInd = ShapeUtil.offsetToIndices(ind, outputStride);\r\n    const startInd = curInd.slice(0);\r\n    const x = curInd.slice(0);\r\n    // calculate the start indices of kernel corresponding to current output indices\r\n    for (let i = 0; i < stridesRank; i++) {\r\n      startInd[rank - stridesRank + i] = curInd[rank - stridesRank + i] * strides[i];\r\n    }\r\n    let value = startVal;\r\n    let pad = 0;\r\n    let isPad = false;\r\n    // loop through elements within kernel\r\n    for (let i = 0; i < kernelSize; i++) {\r\n      const offset = ShapeUtil.offsetToIndices(i, kernelStrides);\r\n      isPad = false;\r\n      // \"Shift\" the kernel by the kernel start indices to loop through the kernel mapped to current output indices\r\n      for (let j = rank - stridesRank; j < rank; j++) {\r\n        x[j] = startInd[j] + offset[j - rank + stridesRank] - pads[j - 2];\r\n        // check if current indices fall in the padding area\r\n        if (x[j] >= input.dims[j] || x[j] < 0) {\r\n          pad++;\r\n          isPad = true;\r\n          break;\r\n        }\r\n      }\r\n      value = isPad ? value : processOp(value, input.get(x) as number);\r\n    }\r\n    value = countIncludePad ? finalOp(value, kernelSize) : finalOp(value, kernelSize - pad);\r\n    output.set(curInd, value);\r\n  }\r\n\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {ReduceBase} from '../../../ops/reduce-op';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ReduceUtil, ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuReduceSum extends ReduceBase {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\r\n    const output = reduceSum(inputs[0], ShapeUtil.normalizeAxes(this.axes, inputs[0].dims.length), this.keepDims);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport class CpuReduceSumSquare extends ReduceBase {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = reduceSumSquare(inputs[0], ShapeUtil.normalizeAxes(this.axes, inputs[0].dims.length), this.keepDims);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport class CpuReduceLogSum extends ReduceBase {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = reduceLogSum(inputs[0], ShapeUtil.normalizeAxes(this.axes, inputs[0].dims.length), this.keepDims);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport class CpuReduceMax extends ReduceBase {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = reduceMax(inputs[0], ShapeUtil.normalizeAxes(this.axes, inputs[0].dims.length), this.keepDims);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport class CpuReduceMin extends ReduceBase {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = reduceMin(inputs[0], ShapeUtil.normalizeAxes(this.axes, inputs[0].dims.length), this.keepDims);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport class CpuReduceMean extends ReduceBase {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = reduceMean(inputs[0], ShapeUtil.normalizeAxes(this.axes, inputs[0].dims.length), this.keepDims);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport class CpuReduceProd extends ReduceBase {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = reduceProd(inputs[0], ShapeUtil.normalizeAxes(this.axes, inputs[0].dims.length), this.keepDims);\r\n    return [output];\r\n  }\r\n}\r\n\r\n// Functions implementing specific reduce operations\r\nexport function reduceSum(input: Tensor, axes: number[], keepDims: boolean): Tensor {\r\n  return ReduceUtil.calcReduce(input, axes, keepDims, b => b, (a, b) => a + b);\r\n}\r\n\r\nexport function reduceSumSquare(input: Tensor, axes: number[], keepDims: boolean): Tensor {\r\n  return ReduceUtil.calcReduce(input, axes, keepDims, b => b * b, (a, b) => a + b);\r\n}\r\n\r\nexport function reduceLogSum(input: Tensor, axes: number[], keepDims: boolean): Tensor {\r\n  const output = ReduceUtil.calcReduce(input, axes, keepDims, b => b, (a, b) => a + b);\r\n  const length = output.floatData.length;\r\n  for (let i = 0; i < length; i++) {\r\n    output.floatData[i] = Math.log(output.floatData[i]);\r\n  }\r\n  return output;\r\n}\r\n\r\nexport function reduceMax(input: Tensor, axes: number[], keepDims: boolean): Tensor {\r\n  return ReduceUtil.calcReduce(input, axes, keepDims, b => b, (a, b) => Math.max(a, b));\r\n}\r\n\r\nexport function reduceMin(input: Tensor, axes: number[], keepDims: boolean): Tensor {\r\n  return ReduceUtil.calcReduce(input, axes, keepDims, b => b, (a, b) => Math.min(a, b));\r\n}\r\n\r\nexport function reduceMean(input: Tensor, axes: number[], keepDims: boolean): Tensor {\r\n  const output = ReduceUtil.calcReduce(input, axes, keepDims, b => b, (a, b) => a + b);\r\n  const outputDims = ReduceUtil.calcReduceShape(input.dims as number[], axes, keepDims);\r\n  const inputSize = ShapeUtil.size(input.dims);\r\n  const outputSize = ShapeUtil.size(outputDims);\r\n  const numItems = inputSize / outputSize;\r\n  const length = output.floatData.length;\r\n  for (let i = 0; i < length; i++) {\r\n    output.floatData[i] = output.floatData[i] / numItems;\r\n  }\r\n  return output;\r\n}\r\n\r\nexport function reduceProd(input: Tensor, axes: number[], keepDims: boolean): Tensor {\r\n  return ReduceUtil.calcReduce(input, axes, keepDims, b => b, (a, b) => a * b);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Reshape} from '../../../ops/reshape';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuReshape extends Reshape {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = reshape(inputs[0], inputs[1]);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function reshape(x: Tensor, shape: Tensor): Tensor {\r\n  const reshapedDims = ShapeUtil.calculateReshapedDims(x.dims, shape.integerData);\r\n  const output = new Tensor(reshapedDims, x.type);\r\n  const Y = output.numberData;\r\n  Y.set(x.numberData);\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Shape} from '../../../ops/shape';\r\nimport {Tensor} from '../../../tensor';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\n// import { getLogger } from 'log4js';\r\n\r\nexport class CpuShape extends Shape {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return [shape(inputs[0])];\r\n  }\r\n}\r\n\r\nexport function shape(x: Tensor): Tensor {\r\n  const output = new Tensor([x.dims.length], 'int32');\r\n  const data = output.data;\r\n  for (let i = 0; i < data.length; ++i) {\r\n    data[i] = x.dims[i];\r\n  }\r\n\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Shape implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Slice, SliceV10} from '../../../ops/slice';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuSlice extends Slice {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = slice(inputs[0], this.starts, this.ends, this.axes);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport class CpuSliceV10 extends SliceV10 {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\r\n      throw new Error(`currently non-1 steps is not supported for Slice`);\r\n    }\r\n    const starts = Array.from(inputs[1].integerData);\r\n    const ends = Array.from(inputs[2].integerData);\r\n    const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\r\n    const output = slice(inputs[0], starts, ends, axes);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function slice(\r\n    x: Tensor, starts: ReadonlyArray<number>, ends: ReadonlyArray<number>, axes: ReadonlyArray<number>): Tensor {\r\n  if (axes.length === 0) {\r\n    axes = x.dims.map((val, ind) => ind);\r\n  }\r\n  axes = ShapeUtil.normalizeAxes(axes, x.dims.length);\r\n  starts = starts.map((start, ind) => {\r\n    if (start > x.dims[axes[ind]] - 1) {\r\n      return x.dims[axes[ind]];\r\n    }\r\n    return ShapeUtil.normalizeAxis(start, x.dims[axes[ind]]);\r\n  });\r\n  ends = ends.map((end, ind) => {\r\n    if (end > x.dims[axes[ind]] - 1) {\r\n      return x.dims[axes[ind]];\r\n    }\r\n    return ShapeUtil.normalizeAxis(end, x.dims[axes[ind]]);\r\n  });\r\n  const size: number[] = [];\r\n  const adjustedStarts: number[] = [];\r\n  axes.forEach((val, ind) => {\r\n    size[val] = ends[ind] - starts[ind];\r\n    adjustedStarts[val] = starts[ind];\r\n  });\r\n  for (let i = 0; i < x.dims.length; i++) {\r\n    size[i] = size[i] || x.dims[i];\r\n    adjustedStarts[i] = adjustedStarts[i] || 0;\r\n  }\r\n\r\n  const newDimsStride = ShapeUtil.computeStrides(size);\r\n  const oldDimsStride = ShapeUtil.computeStrides(x.dims ? x.dims : [x.data.length]);\r\n  const X = x.data;\r\n  const output = new Tensor(size, x.type);\r\n  const Y = output.data;\r\n  for (let i = 0; i < Y.length; ++i) {\r\n    const newLogicalIndex = ShapeUtil.offsetToIndices(i, newDimsStride);\r\n    const oldLogicalIndex = newLogicalIndex.map((idx, j) => idx + adjustedStarts[j]);\r\n    const oldOffset = ShapeUtil.indicesToOffset(oldLogicalIndex, oldDimsStride);\r\n    Y[i] = X[oldOffset];\r\n  }\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Softmax} from '../../../ops/softmax';\r\nimport {Tensor} from '../../../tensor';\r\nimport * as util from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuSoftmax extends Softmax {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = softmax(inputs[0], this.axis);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function softmax(x: Tensor, axis: number): Tensor {\r\n  const inputDimensions = x.dims;\r\n  const inputRank = inputDimensions.length;\r\n\r\n  axis = util.ShapeUtil.normalizeAxis(axis, inputRank);\r\n  const N = util.ShapeUtil.sizeToDimension(inputDimensions, axis);\r\n  const D = util.ShapeUtil.sizeFromDimension(inputDimensions, axis);\r\n\r\n  const X = x.numberData;\r\n\r\n  const output = new Tensor(x.dims, x.type);\r\n  const Y = output.numberData;\r\n\r\n  for (let i = 0; i < N; i++) {\r\n    // find row offset\r\n    const offset = i * D;\r\n\r\n    // find max of each logical row\r\n    let max = Number.MIN_VALUE;\r\n    for (let j = 0; j < D; j++) {\r\n      if (X[offset + j] > max) {\r\n        max = X[offset + j];\r\n      }\r\n    }\r\n\r\n    // find normalization scale per row\r\n    let scale = 0;\r\n    for (let j = 0; j < D; j++) {\r\n      const value = X[offset + j] - max;\r\n      Y[offset + j] = Math.exp(value);\r\n      scale += Math.exp(value);\r\n    }\r\n\r\n    // perform the softmax normalization\r\n    for (let j = 0; j < D; j++) {\r\n      if (scale === 0) {\r\n        Y[offset + j] = 0;\r\n      } else {\r\n        Y[offset + j] /= scale;\r\n      }\r\n    }\r\n  }\r\n\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Squeeze} from '../../../ops/squeeze';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuSqueeze extends Squeeze {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = squeeze(inputs[0], this.axes);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function squeeze(x: Tensor, axes: number[]): Tensor {\r\n  const outputDims = ShapeUtil.squeezeShape(x.dims, axes);\r\n  const output = new Tensor(outputDims, x.type);\r\n\r\n  const X = x.numberData;\r\n  const Y = output.numberData;\r\n\r\n  Y.set(X);\r\n\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Sum} from '../../../ops/sum';\r\nimport {Tensor} from '../../../tensor';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuSum extends Sum {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = sum(inputs);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function sum(x: Tensor[]): Tensor {\r\n  const output = new Tensor(x[0].dims, x[0].type);\r\n  const size = x[0].floatData.length;\r\n  const Y = output.floatData;\r\n  for (let i = 0; i < x.length; i++) {\r\n    const arr = x[i].floatData;\r\n    for (let j = 0; j < size; ++j) {\r\n      Y[j] += arr[j];\r\n    }\r\n  }\r\n\r\n  return output;\r\n}\r\n","import {Tile} from '../../../ops/tile';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuTile extends Tile {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\r\n    const output = tile(inputs[0], inputs[1]);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function tile(x: Tensor, repeats: Tensor): Tensor {\r\n  const dims = x.dims ? x.dims : [x.data.length];\r\n  const rank = dims.length;\r\n  const newDims = new Array(rank);\r\n  for (let i = 0; i < rank; i++) {\r\n    newDims[i] = dims[i] * repeats.numberData[i];\r\n  }\r\n  const dimsStrides = ShapeUtil.computeStrides(dims);\r\n  const newDimsStrides = ShapeUtil.computeStrides(newDims);\r\n  const output = new Tensor(newDims, x.type);\r\n  const Y = output.numberData;\r\n  // TensorTransformUtils.createTypedArray(x.type, ShapeUtil.size(newDims));\r\n  const X = x.data;\r\n  for (let i = 0; i < Y.length; ++i) {\r\n    const newLogicalIndex = ShapeUtil.offsetToIndices(i, newDimsStrides);\r\n    const oldLogicalIndex = new Array(rank);\r\n    for (let j = 0; j < rank; ++j) {\r\n      oldLogicalIndex[j] = newLogicalIndex[j] % x.dims[j];\r\n    }\r\n    const oldOffset = ShapeUtil.indicesToOffset(oldLogicalIndex, dimsStrides);\r\n    Y[i] = X[oldOffset] as number;\r\n  }\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Transpose} from '../../../ops/transpose';\r\nimport {Tensor} from '../../../tensor';\r\nimport {arrayCopyHelper, ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuTranspose extends Transpose {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = transpose(inputs[0], this.perm);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function transpose(x: Tensor, perm: number[]): Tensor {\r\n  const inputDims = x.dims;\r\n  const rank = inputDims.length;\r\n\r\n  // determine permutation to use\r\n  // if no permutation was specified in the attributes,\r\n  // the default is [rank-1, ..., 0]\r\n  let finalPerm = new Array<number>(rank);\r\n  if (perm.length === rank) {\r\n    finalPerm = perm;\r\n  } else {\r\n    for (let i = 0; i < rank; i++) {\r\n      finalPerm[i] = rank - i - 1;\r\n    }\r\n  }\r\n\r\n  const outputDims = new Array<number>(rank);\r\n  const stride = new Array<number>(rank);\r\n\r\n  // determine shape of output, as well as stride to be used\r\n  // stride[i] indicates the stride for the input-tensor dimension\r\n  // corresponding to the i-th dimension of the output\r\n  for (let i = 0; i < rank; i++) {\r\n    const inpDim = finalPerm[i];\r\n    outputDims[i] = inputDims[inpDim];\r\n    if (inpDim + 1 < rank) {\r\n      stride[i] = ShapeUtil.sizeFromDimension(inputDims, inpDim + 1);\r\n    } else {\r\n      stride[i] = 1;\r\n    }\r\n  }\r\n\r\n  const output = new Tensor(outputDims, x.type);\r\n\r\n  const X = x.floatData;\r\n  const Y = output.floatData;\r\n\r\n  // partition the permutation into a prefix and the largest suffix such that\r\n  // every axis i in the suffix is mapped to i.\r\n  let numAxesInPrefix = 0;  // number of axes in prefix\r\n  let suffixBlocksize = 1;  // product of dimensions in the suffix\r\n  let prefixBlocksize = 1;  // product of dimensions in the prefix\r\n  let isSuffix = true;\r\n  for (let i = rank - 1; i >= 0; --i) {\r\n    const inpAxis = finalPerm[i];\r\n    if (isSuffix && (inpAxis === i)) {\r\n      suffixBlocksize *= inputDims[inpAxis];\r\n    } else {\r\n      isSuffix = false;\r\n      prefixBlocksize *= inputDims[inpAxis];\r\n      ++numAxesInPrefix;\r\n    }\r\n  }\r\n\r\n  if (prefixBlocksize === 1) {\r\n    doTransposeSingleBlock(suffixBlocksize, Y, X);\r\n  } else if (suffixBlocksize === 1) {\r\n    doTransposeEltWise(numAxesInPrefix, outputDims, prefixBlocksize, stride, Y, X);\r\n  } else {\r\n    doTranspose(numAxesInPrefix, outputDims, prefixBlocksize, suffixBlocksize, stride, Y, X);\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\n// doTranspose: copies source tensor to target, transposing elements.\r\n// the stride vector indicates the transposition.\r\nfunction doTranspose(\r\n    numAxes: number, targetDims: number[], numBlocks: number, numElementsInBlock: number, stride: number[],\r\n    target: Tensor.FloatType, source: Tensor.FloatType) {\r\n  const targetIndex = new Array<number>(numAxes).fill(0);\r\n\r\n  const startSourceIndex = 0;\r\n  let startTargetIndex = 0;\r\n\r\n  for (let i = 0; i < numBlocks; ++i) {\r\n    const sizeOffset = ShapeUtil.indicesToOffset(targetIndex, stride, numAxes);\r\n    arrayCopyHelper(target, source, startTargetIndex, startSourceIndex + sizeOffset, numElementsInBlock);\r\n\r\n    ShapeUtil.incrementIndex(targetIndex, targetDims, numAxes);\r\n    startTargetIndex += numElementsInBlock;\r\n  }\r\n}\r\n\r\n// doTransposeEltWise: specialization of DoTranspose for the\r\n// num_elts_in_block=1 case. copies source tensor to target, transposing\r\n// elements. The stride vector indicates the transposition.\r\nfunction doTransposeEltWise(\r\n    numAxes: number, targetDims: number[], numBlocks: number, stride: number[], target: Tensor.FloatType,\r\n    source: Tensor.FloatType) {\r\n  const targetIndex = new Array<number>(numAxes).fill(0);\r\n\r\n  let startTargetIndex = 0;\r\n\r\n  for (let i = 0; i < numBlocks; ++i) {\r\n    const sourceOffset = ShapeUtil.indicesToOffset(targetIndex, stride, numAxes);\r\n    target[startTargetIndex++] = source[sourceOffset];\r\n    ShapeUtil.incrementIndex(targetIndex, targetDims, numAxes);\r\n  }\r\n}\r\n\r\n// doTransposeSingleBlock: specialization of DoTranspose for the num_blocks=1\r\n// case. copies source tensor to target, transposing elements. The stride\r\n// vector indicates the transposition.\r\nfunction doTransposeSingleBlock(numElementsInBlock: number, target: Tensor.FloatType, source: Tensor.FloatType) {\r\n  arrayCopyHelper(target, source, 0, 0, numElementsInBlock);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Unsqueeze} from '../../../ops/unsqueeze';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuUnsqueeze extends Unsqueeze {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = unsqueeze(inputs[0], this.axes);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function unsqueeze(x: Tensor, axes: number[]): Tensor {\r\n  const outputDims = ShapeUtil.unsqueezeShape(x.dims, axes);\r\n  const output = new Tensor(outputDims, x.type);\r\n\r\n  const X = x.numberData;\r\n  const Y = output.numberData;\r\n\r\n  Y.set(X);\r\n\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Upsample, UpsampleV9} from '../../../ops/upsample';\r\nimport {Tensor} from '../../../tensor';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuUpsample extends Upsample {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const xDims = inputs[0].dims;\r\n    const yDims = xDims.map((dim, i) => Math.floor(dim * this.scales[i]));\r\n    const y = new Tensor(yDims, inputs[0].type);\r\n    if (this.mode === 'nearest') {\r\n      upsampleNearest(inputs[0].data, y.data, xDims, yDims, this.scales);\r\n    } else {\r\n      upsampleLinear(inputs[0].data, y.data, xDims, yDims, this.scales);\r\n    }\r\n    return [y];\r\n  }\r\n}\r\n\r\nexport class CpuUpsampleV9 extends UpsampleV9 {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const scales = inputs[1].floatData;\r\n\r\n    if (this.mode === 'linear' && scales.length !== 2 && scales.length !== 4) {\r\n      throw new Error(`only support 2-D or 4-D upsampling for linear mode`);\r\n    }\r\n\r\n    const xDims = inputs[0].dims;\r\n    const yDims = xDims.map((dim, i) => Math.floor(dim * scales[i]));\r\n    const y = new Tensor(yDims, inputs[0].type);\r\n    if (this.mode === 'nearest') {\r\n      upsampleNearest(inputs[0].data, y.data, xDims, yDims, [...scales]);\r\n    } else {\r\n      upsampleLinear(inputs[0].data, y.data, xDims, yDims, [...scales]);\r\n    }\r\n    return [y];\r\n  }\r\n}\r\n\r\nfunction upsampleNearest(\r\n    xData: Tensor.DataTypeMap[Tensor.DataType], yData: Tensor.DataTypeMap[Tensor.DataType],\r\n    xDims: ReadonlyArray<number>, yDims: ReadonlyArray<number>, scales: number[]) {\r\n  const dim = xDims.length;\r\n\r\n  const inputDimCounter = new Array<number>(dim);\r\n  inputDimCounter.fill(0);\r\n  const inputDimFactor = new Array<number>(dim);\r\n  inputDimFactor[dim - 1] = 1;  // initialize dimension factor\r\n  for (let i = dim - 2; i >= 0; i--) {\r\n    inputDimFactor[i] = inputDimFactor[i + 1] * xDims[i + 1];\r\n  }\r\n  const outputDimCounter = new Array<number>(dim);\r\n  outputDimCounter.fill(0);\r\n  outputDimCounter[dim - 1] = -1;\r\n\r\n  let yIdx = 0;\r\n  let xIdx = 0;\r\n  for (; yIdx < yData.length; yIdx++) {\r\n    for (let dimIdx = dim - 1; dimIdx >= 0; dimIdx--) {\r\n      if (++outputDimCounter[dimIdx] < yDims[dimIdx]) {\r\n        let currentInputDimCounter = 0;\r\n        const originalIdx = getOriginalCoordinate(outputDimCounter[dimIdx], scales[dimIdx]);\r\n        currentInputDimCounter = Math.floor(originalIdx);\r\n        currentInputDimCounter = Math.max(0, Math.min(currentInputDimCounter, (xDims[dimIdx] - 1)));\r\n\r\n        if (currentInputDimCounter !== inputDimCounter[dimIdx]) {\r\n          xIdx += (currentInputDimCounter - inputDimCounter[dimIdx]) * inputDimFactor[dimIdx];\r\n          inputDimCounter[dimIdx] = currentInputDimCounter;\r\n        }\r\n        break;\r\n      } else {\r\n        outputDimCounter[dimIdx] = 0;\r\n        xIdx += (0 - inputDimCounter[dimIdx]) * inputDimFactor[dimIdx];\r\n        inputDimCounter[dimIdx] = 0;\r\n      }\r\n    }\r\n    yData[yIdx] = xData[xIdx];\r\n  }\r\n}\r\n\r\nfunction upsampleLinear(\r\n    xData: Tensor.DataTypeMap[Tensor.DataType], yData: Tensor.DataTypeMap[Tensor.DataType],\r\n    xDims: ReadonlyArray<number>, yDims: ReadonlyArray<number>, scales: number[]) {\r\n  const is2D = xDims.length === 2;\r\n  const batchSize = is2D ? 1 : xDims[0];\r\n  const numChannels = is2D ? 1 : xDims[1];\r\n  const inputHeight = is2D ? xDims[0] : xDims[2];\r\n  const inputWidth = is2D ? xDims[1] : xDims[3];\r\n  const outputHeight = is2D ? yDims[0] : yDims[2];\r\n  const outputWidth = is2D ? yDims[1] : yDims[3];\r\n\r\n  upsampleBilinear(\r\n      xData as Tensor.NumberType, yData as Tensor.NumberType, batchSize, numChannels, inputHeight, inputWidth,\r\n      outputHeight, outputWidth, is2D ? scales[0] : scales[2], is2D ? scales[1] : scales[3]);\r\n}\r\n\r\nfunction upsampleBilinear(\r\n    xData: Tensor.NumberType, yData: Tensor.NumberType, batchSize: number, numChannels: number, inputHeight: number,\r\n    inputWidth: number, outputHeight: number, outputWidth: number, heightScale: number, widthScale: number) {\r\n  const yOriginal: number[] = [];\r\n  const xOriginal: number[] = [];\r\n\r\n  const inputWidthMulY1 = new Array<number>(outputHeight);\r\n  const inputWidthMulY2 = new Array<number>(outputHeight);\r\n  const inX1 = new Array<number>(outputWidth);\r\n  const inX2 = new Array<number>(outputWidth);\r\n  const dy1 = new Array<number>(outputHeight);\r\n  const dy2 = new Array<number>(outputHeight);\r\n  const dx1 = new Array<number>(outputWidth);\r\n  const dx2 = new Array<number>(outputWidth);\r\n\r\n  for (let y = 0; y < outputHeight; ++y) {\r\n    let inY = getOriginalCoordinate(y, heightScale);\r\n    yOriginal.push(inY);\r\n    inY = Math.max(0, Math.min(inY, inputHeight - 1));\r\n\r\n    const inY1 = Math.min(Math.floor(inY), inputHeight - 1);\r\n    const inY2 = Math.min(inY1 + 1, inputHeight - 1);\r\n\r\n    if (inY1 === inY2) {\r\n      dy1[y] = 0.5;\r\n      dy2[y] = 0.5;\r\n    } else {\r\n      dy1[y] = Math.abs(inY - inY1);\r\n      dy2[y] = Math.abs(inY - inY2);\r\n    }\r\n\r\n    inputWidthMulY1[y] = inputWidth * inY1;\r\n    inputWidthMulY2[y] = inputWidth * inY2;\r\n  }\r\n\r\n  for (let x = 0; x < outputWidth; ++x) {\r\n    let inX = getOriginalCoordinate(x, widthScale);\r\n    xOriginal.push(inX);\r\n    inX = Math.max(0, Math.min(inX, inputWidth - 1));\r\n\r\n    inX1[x] = Math.min(Math.floor(inX), inputWidth - 1);\r\n    inX2[x] = Math.min(inX1[x] + 1, inputWidth - 1);\r\n\r\n    if (inX1[x] === inX2[x]) {\r\n      dx1[x] = 0.5;\r\n      dx2[x] = 0.5;\r\n    } else {\r\n      dx1[x] = Math.abs(inX - inX1[x]);\r\n      dx2[x] = Math.abs(inX - inX2[x]);\r\n    }\r\n  }\r\n\r\n  let xOffset = 0;\r\n  let yOffset = 0;\r\n  for (let n = 0; n < batchSize; ++n) {\r\n    for (let c = 0; c < numChannels; ++c) {\r\n      for (let y = 0; y < outputHeight; ++y) {\r\n        for (let x = 0; x < outputWidth; ++x) {\r\n          const x11 = xData[xOffset + inputWidthMulY1[y] + inX1[x]];\r\n          const x21 = xData[xOffset + inputWidthMulY1[y] + inX2[x]];\r\n          const x12 = xData[xOffset + inputWidthMulY2[y] + inX1[x]];\r\n          const x22 = xData[xOffset + inputWidthMulY2[y] + inX2[x]];\r\n\r\n          yData[yOffset + outputWidth * y + x] =\r\n              (dx2[x] * dy2[y] * x11 + dx1[x] * dy2[y] * x21 + dx2[x] * dy1[y] * x12 + dx1[x] * dy1[y] * x22);\r\n        }\r\n      }\r\n      xOffset += inputHeight * inputWidth;\r\n      yOffset += outputWidth * outputHeight;\r\n    }\r\n  }\r\n}\r\n\r\nfunction getOriginalCoordinate(xResized: number, xScale: number): number {\r\n  // Coordinate transformation mode attr was introduced in version 11, before that asymmetric mode was the only\r\n  // available transformation mode\r\n  // return ((xResized + 0.5) / xScale) - 0.5;\r\n  return xResized / xScale;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as platform from 'platform';\r\n\r\nimport {Backend as BackendInterface} from '../api/onnx';\r\nimport {Backend, SessionHandler} from '../backend';\r\nimport {Logger} from '../instrument';\r\nimport {Session} from '../session';\r\nimport * as wasmBinding from '../wasm-binding';\r\n\r\nimport {WasmSessionHandler} from './wasm/session-handler';\r\n\r\nexport let bindingInitPromise: Promise<void>|undefined;\r\n\r\ntype WasmOptions = BackendInterface.WasmOptions;\r\n\r\nexport class WasmBackend implements Backend, WasmOptions {\r\n  disabled?: boolean;\r\n  worker: number;\r\n  cpuFallback: boolean;\r\n  initTimeout: number;\r\n  constructor() {\r\n    // default parameters that users can override using the onnx global object\r\n\r\n    // by default fallback to pure JS cpu ops if not resolved in wasm backend\r\n    this.cpuFallback = true;\r\n\r\n    this.worker = defaultNumWorkers();\r\n\r\n    this.initTimeout = 5000;\r\n  }\r\n  async initialize(): Promise<boolean> {\r\n    checkIfNumWorkersIsValid(this.worker);\r\n    const init = await this.isWasmSupported();\r\n    if (!init) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  createSessionHandler(context: Session.Context): SessionHandler {\r\n    return new WasmSessionHandler(this, context, this.cpuFallback);\r\n  }\r\n  dispose(): void {}\r\n\r\n  async isWasmSupported(): Promise<boolean> {\r\n    try {\r\n      await wasmBinding.init(this.worker, this.initTimeout);\r\n      return true;\r\n    } catch (e) {\r\n      Logger.warning('WebAssembly', `Unable to initialize WebAssembly backend. ${e}`);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nfunction defaultNumWorkers(): number {\r\n  if (typeof navigator !== 'undefined' && navigator) {\r\n    // by default use ([navigator.hardwareConcurrency / 2] - 1) workers\r\n    if (typeof navigator.hardwareConcurrency === 'number') {\r\n      return Math.max(Math.ceil(navigator.hardwareConcurrency / 2) - 1, 0);\r\n    }\r\n\r\n    // if object 'navigator' exists, but 'navigator.hardwareConcurrency' does not. This may mean:\r\n    // - The environment is Safari (macOS/iOS), or\r\n    // - it's not any mainstream browser.\r\n    if (platform.name === 'Safari') {\r\n      if (platform.os && (platform.os.family === 'iOS' || platform.os.family === 'OS X')) {\r\n        return 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\nfunction checkIfNumWorkersIsValid(worker: number) {\r\n  if (!Number.isFinite(worker) || Number.isNaN(worker)) {\r\n    throw new Error(`${worker} is not valid number of workers`);\r\n  }\r\n  if (!Number.isInteger(worker)) {\r\n    throw new Error(`${worker} is not an integer and hence not valid number of workers`);\r\n  }\r\n}\r\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\ndeclare interface OnnxWasmBindingJs {\r\n  (self: OnnxWasmBindingJs): Promise<void>;\r\n\r\n  _malloc: (ptr: number) => number;\r\n  _free: (ptr: number) => void;\r\n\r\n  buffer: ArrayBuffer;\r\n\r\n  HEAP8: Int8Array;\r\n  HEAP16: Int16Array;\r\n  HEAP32: Int32Array;\r\n  HEAPU8: Uint8Array;\r\n  HEAPU16: Uint16Array;\r\n  HEAPU32: Uint32Array;\r\n  HEAPF32: Float32Array;\r\n  HEAPF64: Float64Array;\r\n}\r\n\r\n// an interface to define argument handling\r\nexport interface WasmCallArgumentTypeMap {\r\n  bool: boolean;\r\n  int32: number;\r\n  float32: number;\r\n  float64: number;\r\n  boolptr: ReadonlyArray<boolean>|Uint8Array;\r\n  int32ptr: ReadonlyArray<number>|Uint32Array|Int32Array|null;\r\n  float32ptr: ReadonlyArray<number>|Int32Array|Uint32Array|Float32Array|null;\r\n  float64ptr: ReadonlyArray<number>|Float64Array|null;\r\n}\r\n\r\n// some types related to arguments\r\nexport type WasmCallArgumentType = keyof WasmCallArgumentTypeMap;\r\nexport type WasmCallArgumentDataType = WasmCallArgumentTypeMap[WasmCallArgumentType];\r\n\r\nexport type WasmCallArgumentPass = 'in'|'out'|'inout';\r\n\r\nexport type WasmCallArgument = [WasmCallArgumentDataType, WasmCallArgumentType, WasmCallArgumentPass?];\r\n\r\n// an interface to deal with performance data related to Wasm function calls\r\nexport interface PerformanceData {\r\n  startTime?: number;\r\n  endTime?: number;\r\n\r\n  startTimeFunc?: number;\r\n  endTimeFunc?: number;\r\n}\r\n\r\n// some global parameters to deal with wasm binding initialization\r\nlet binding: OnnxWasmBindingJs|undefined;\r\nlet initialized = false;\r\nlet initializing = false;\r\n\r\n/**\r\n * initialize the WASM instance.\r\n *\r\n * this function should be called before any other calls to the WASM binding.\r\n */\r\nexport function init(): Promise<void> {\r\n  if (initialized) {\r\n    return Promise.resolve();\r\n  }\r\n  if (initializing) {\r\n    throw new Error(`multiple calls to 'init()' detected.`);\r\n  }\r\n\r\n  initializing = true;\r\n\r\n  return new Promise<void>((resolve, reject) => {\r\n    // tslint:disable-next-line:no-require-imports\r\n    binding = require('../dist/onnx-wasm') as OnnxWasmBindingJs;\r\n    binding(binding).then(\r\n        () => {\r\n          // resolve init() promise\r\n          resolve();\r\n          initializing = false;\r\n          initialized = true;\r\n        },\r\n        err => {\r\n          initializing = false;\r\n          reject(err);\r\n        });\r\n  });\r\n}\r\n\r\n// class that deals with Wasm data interop and method calling\r\nexport class WasmBinding {\r\n  protected ptr8: number;\r\n  protected numBytesAllocated: number;\r\n  protected constructor() {\r\n    this.ptr8 = 0;\r\n    this.numBytesAllocated = 0;\r\n  }\r\n\r\n  /**\r\n   * ccall in current thread\r\n   * @param functionName\r\n   * @param params\r\n   */\r\n  ccall(functionName: string, ...params: WasmCallArgument[]): PerformanceData {\r\n    if (!initialized) {\r\n      throw new Error(`wasm not initialized. please ensure 'init()' is called.`);\r\n    }\r\n    const startTime = now();\r\n\r\n    const offset: number[] = [];\r\n    const size = WasmBinding.calculateOffsets(offset, params);\r\n    if (size > this.numBytesAllocated) {\r\n      this.expandMemory(size);\r\n    }\r\n    WasmBinding.ccallSerialize(binding!.HEAPU8.subarray(this.ptr8, this.ptr8 + size), offset, params);\r\n\r\n    const startTimeFunc = now();\r\n    this.func(functionName, this.ptr8);\r\n    const endTimeFunc = now();\r\n\r\n    WasmBinding.ccallDeserialize(binding!.HEAPU8.subarray(this.ptr8, this.ptr8 + size), offset, params);\r\n    const endTime = now();\r\n\r\n    return {startTime, endTime, startTimeFunc, endTimeFunc};\r\n  }\r\n\r\n  // raw ccall method  without invoking ccallSerialize() and ccallDeserialize()\r\n  // user by ccallRemote() in the web-worker\r\n  ccallRaw(functionName: string, data: Uint8Array): PerformanceData {\r\n    if (!initialized) {\r\n      throw new Error(`wasm not initialized. please ensure 'init()' is called.`);\r\n    }\r\n    const startTime = now();\r\n\r\n    const size = data.byteLength;\r\n    if (size > this.numBytesAllocated) {\r\n      this.expandMemory(size);\r\n    }\r\n\r\n    // copy input memory (data) to WASM heap\r\n    binding!.HEAPU8.subarray(this.ptr8, this.ptr8 + size).set(data);\r\n\r\n    const startTimeFunc = now();\r\n    this.func(functionName, this.ptr8);\r\n    const endTimeFunc = now();\r\n\r\n    // copy Wasm heap to output memory (data)\r\n    data.set(binding!.HEAPU8.subarray(this.ptr8, this.ptr8 + size));\r\n    const endTime = now();\r\n\r\n    return {startTime, endTime, startTimeFunc, endTimeFunc};\r\n  }\r\n\r\n  protected func(functionName: string, ptr8: number): void {\r\n    // tslint:disable-next-line:no-any\r\n    const func = (binding as any)[functionName] as (data: number) => void;\r\n    func(ptr8);\r\n  }\r\n\r\n  static calculateOffsets(offset: number[], params: WasmCallArgument[]): number {\r\n    // calculate size and offset\r\n    let size = 4 + 4 * params.length;\r\n    for (let i = 0; i < params.length; i++) {\r\n      const param = params[i];\r\n      const paramData = param[0];\r\n      const paramType = param[1];\r\n      const paramPass = param[2];\r\n\r\n      let len = 0;\r\n      switch (paramType) {\r\n        case 'bool':\r\n        case 'int32':\r\n        case 'float32':\r\n          len = 4;\r\n          break;\r\n        case 'float64':\r\n          len = 8;\r\n          break;\r\n        case 'boolptr':\r\n          if (!paramData) {\r\n            // deal with nullptr\r\n            offset.push(0);\r\n            continue;\r\n          } else if (Array.isArray(paramData) || ArrayBuffer.isView(paramData)) {\r\n            len = 4 * Math.ceil(paramData.length / 4);\r\n          } else {\r\n            throw new Error(`boolptr requires boolean array or Uint8Array`);\r\n          }\r\n          break;\r\n        case 'int32ptr':\r\n        case 'float32ptr':\r\n          if (!paramData) {\r\n            // deal with nullptr\r\n            offset.push(0);\r\n            continue;\r\n          } else if (Array.isArray(paramData)) {\r\n            if (paramPass === 'inout' || paramPass === 'out') {\r\n              throw new TypeError(`inout/out parameters must be ArrayBufferView for ptr types.`);\r\n            }\r\n            len = paramData.length * 4;\r\n          } else if (ArrayBuffer.isView(paramData)) {\r\n            len = paramData.byteLength;\r\n          } else {\r\n            throw new TypeError(`unsupported data type in 'ccall()'`);\r\n          }\r\n          break;\r\n        default:\r\n          throw new Error(`not supported parameter type: ${paramType}`);\r\n      }\r\n\r\n      offset.push(size);\r\n      size += len;\r\n    }\r\n\r\n    return size;\r\n  }\r\n\r\n  // tranfer data parameters (in/inout) to emscripten heap for ccall()\r\n  static ccallSerialize(heapU8: Uint8Array, offset: number[], params: WasmCallArgument[]) {\r\n    const heap32 = new Int32Array(heapU8.buffer, heapU8.byteOffset);\r\n    const heapU32 = new Uint32Array(heapU8.buffer, heapU8.byteOffset);\r\n    const heapF32 = new Float32Array(heapU8.buffer, heapU8.byteOffset);\r\n\r\n    heapU32[0] = params.length;\r\n\r\n    for (let i = 0; i < params.length; i++) {\r\n      const param = params[i];\r\n      const paramData = param[0];\r\n      const paramType = param[1];\r\n      const paramPass = param[2];\r\n      const offset8 = offset[i];\r\n      const offset32 = offset8 >> 2;\r\n\r\n      heapU32[i + 1] = offset8;\r\n\r\n      if (paramPass === 'out' || offset8 === 0) {\r\n        continue;\r\n      }\r\n\r\n      switch (paramType) {\r\n        case 'bool':\r\n          heapU8[offset8] = (paramData as WasmCallArgumentTypeMap['bool']) === true ? 1 : 0;\r\n          break;\r\n        case 'int32':\r\n          heap32[offset32] = paramData as number;\r\n          break;\r\n        case 'float32':\r\n          heapF32[offset32] = paramData as number;\r\n          break;\r\n        case 'boolptr':\r\n          const boolArray = paramData as WasmCallArgumentTypeMap['boolptr'];\r\n          // This will work for both Uint8Array as well as ReadonlyArray<boolean>\r\n          heapU8.subarray(offset8, offset8 + boolArray.length).set(paramData as Uint8Array);\r\n          break;\r\n        case 'int32ptr':\r\n          const int32Array = (paramData as WasmCallArgumentTypeMap['int32ptr'])!;\r\n          heap32.subarray(offset32, offset32 + int32Array.length).set(int32Array);\r\n          break;\r\n        case 'float32ptr':\r\n          const float32Array = (paramData as WasmCallArgumentTypeMap['float32ptr'])!;\r\n          heapF32.subarray(offset32, offset32 + float32Array.length).set(float32Array);\r\n          break;\r\n        default:\r\n          throw new Error(`not supported parameter type: ${paramType}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  // retrieve data parameters (in/inout) from emscripten heap after ccall()\r\n  static ccallDeserialize(buffer: Uint8Array, offset: number[], params: WasmCallArgument[]) {\r\n    const heapF32 = new Float32Array(buffer.buffer, buffer.byteOffset);\r\n    const heapI32 = new Int32Array(buffer.buffer, buffer.byteOffset);\r\n    const heapU8 = new Uint8Array(buffer.buffer, buffer.byteOffset);\r\n\r\n    for (let i = 0; i < params.length; i++) {\r\n      const param = params[i];\r\n      const paramData = param[0];\r\n      const paramType = param[1];\r\n      const paramPass = param[2];\r\n      const offset8 = offset[i];\r\n      // const offset16 = offset8 >> 1;\r\n      const offset32 = offset8 >> 2;\r\n      // const offset64 = offset8 >> 3;\r\n\r\n      if (paramPass !== 'out' && paramPass !== 'inout') {\r\n        continue;\r\n      }\r\n\r\n      switch (paramType) {\r\n        case 'float32ptr':\r\n          const float32Array = (paramData as Float32Array);\r\n          float32Array.set(heapF32.subarray(offset32, offset32 + float32Array.length));\r\n          break;\r\n        case 'int32ptr':\r\n          const int32Array = (paramData as Int32Array);\r\n          int32Array.set(heapI32.subarray(offset32, offset32 + int32Array.length));\r\n          break;\r\n        case 'boolptr':\r\n          const boolArray = (paramData as Uint8Array);\r\n          boolArray.set(heapU8.subarray(offset8, offset8 + boolArray.length));\r\n          break;\r\n        default:\r\n          throw new Error(`not supported parameter type: ${paramType}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  // function for defining memory allocation strategy\r\n  private expandMemory(minBytesRequired: number) {\r\n    // free already held memory if applicable\r\n    if (this.ptr8 !== 0) {\r\n      binding!._free(this.ptr8);\r\n    }\r\n    // current simplistic strategy is to allocate 2 times the minimum bytes requested\r\n    this.numBytesAllocated = 2 * minBytesRequired;\r\n    this.ptr8 = binding!._malloc(this.numBytesAllocated);\r\n    if (this.ptr8 === 0) {\r\n      throw new Error('Unable to allocate requested amount of memory. Failing.');\r\n    }\r\n  }\r\n\r\n  dispose(): void {\r\n    if (!initialized) {\r\n      throw new Error(`wasm not initialized. please ensure 'init()' is called.`);\r\n    }\r\n    if (this.ptr8 !== 0) {\r\n      binding!._free(this.ptr8);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * returns a number to represent the current timestamp in a resolution as high as possible.\r\n */\r\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\r\n","\r\nvar Module = (function() {\r\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\r\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\r\n  return (\r\nfunction(Module) {\r\n  Module = Module || {};\r\n\r\nvar Module=typeof Module!==\"undefined\"?Module:{};var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram=\"./this.program\";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window===\"object\";ENVIRONMENT_IS_WORKER=typeof importScripts===\"function\";ENVIRONMENT_IS_NODE=typeof process===\"object\"&&typeof process.versions===\"object\"&&typeof process.versions.node===\"string\";ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;var nodeFS;var nodePath;if(ENVIRONMENT_IS_NODE){if(ENVIRONMENT_IS_WORKER){scriptDirectory=require(\"path\").dirname(scriptDirectory)+\"/\"}else{scriptDirectory=__dirname+\"/\"}read_=function shell_read(filename,binary){if(!nodeFS)nodeFS=require(\"fs\");if(!nodePath)nodePath=require(\"path\");filename=nodePath[\"normalize\"](filename);return nodeFS[\"readFileSync\"](filename,binary?null:\"utf8\")};readBinary=function readBinary(filename){var ret=read_(filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};if(process[\"argv\"].length>1){thisProgram=process[\"argv\"][1].replace(/\\\\/g,\"/\")}arguments_=process[\"argv\"].slice(2);process[\"on\"](\"uncaughtException\",function(ex){if(!(ex instanceof ExitStatus)){throw ex}});process[\"on\"](\"unhandledRejection\",abort);quit_=function(status){process[\"exit\"](status)};Module[\"inspect\"]=function(){return\"[Emscripten Module object]\"}}else if(ENVIRONMENT_IS_SHELL){if(typeof read!=\"undefined\"){read_=function shell_read(f){return read(f)}}readBinary=function readBinary(f){var data;if(typeof readbuffer===\"function\"){return new Uint8Array(readbuffer(f))}data=read(f,\"binary\");assert(typeof data===\"object\");return data};if(typeof scriptArgs!=\"undefined\"){arguments_=scriptArgs}else if(typeof arguments!=\"undefined\"){arguments_=arguments}if(typeof quit===\"function\"){quit_=function(status){quit(status)}}if(typeof print!==\"undefined\"){if(typeof console===\"undefined\")console={};console.log=print;console.warn=console.error=typeof printErr!==\"undefined\"?printErr:print}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf(\"/\")+1)}else{scriptDirectory=\"\"}{read_=function shell_read(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=function readBinary(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}setWindowTitle=function(title){document.title=title}}else{}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(Module[\"quit\"])quit_=Module[\"quit\"];var STACK_ALIGN=16;function dynamicAlloc(size){var ret=HEAP32[DYNAMICTOP_PTR>>2];var end=ret+size+15&-16;if(end>_emscripten_get_heap_size()){abort()}HEAP32[DYNAMICTOP_PTR>>2]=end;return ret}function getNativeTypeSize(type){switch(type){case\"i1\":case\"i8\":return 1;case\"i16\":return 2;case\"i32\":return 4;case\"i64\":return 8;case\"float\":return 4;case\"double\":return 8;default:{if(type[type.length-1]===\"*\"){return 4}else if(type[0]===\"i\"){var bits=Number(type.substr(1));assert(bits%8===0,\"getNativeTypeSize invalid bits \"+bits+\", type \"+type);return bits/8}else{return 0}}}}function warnOnce(text){if(!warnOnce.shown)warnOnce.shown={};if(!warnOnce.shown[text]){warnOnce.shown[text]=1;err(text)}}function convertJsFunctionToWasm(func,sig){if(typeof WebAssembly.Function===\"function\"){var typeNames={\"i\":\"i32\",\"j\":\"i64\",\"f\":\"f32\",\"d\":\"f64\"};var type={parameters:[],results:sig[0]==\"v\"?[]:[typeNames[sig[0]]]};for(var i=1;i<sig.length;++i){type.parameters.push(typeNames[sig[i]])}return new WebAssembly.Function(type,func)}var typeSection=[1,0,1,96];var sigRet=sig.slice(0,1);var sigParam=sig.slice(1);var typeCodes={\"i\":127,\"j\":126,\"f\":125,\"d\":124};typeSection.push(sigParam.length);for(var i=0;i<sigParam.length;++i){typeSection.push(typeCodes[sigParam[i]])}if(sigRet==\"v\"){typeSection.push(0)}else{typeSection=typeSection.concat([1,typeCodes[sigRet]])}typeSection[1]=typeSection.length-2;var bytes=new Uint8Array([0,97,115,109,1,0,0,0].concat(typeSection,[2,7,1,1,101,1,102,0,0,7,5,1,1,102,0,0]));var module=new WebAssembly.Module(bytes);var instance=new WebAssembly.Instance(module,{\"e\":{\"f\":func}});var wrappedFunc=instance.exports[\"f\"];return wrappedFunc}var freeTableIndexes=[];function addFunctionWasm(func,sig){var table=wasmTable;var ret;if(freeTableIndexes.length){ret=freeTableIndexes.pop()}else{ret=table.length;try{table.grow(1)}catch(err){if(!(err instanceof RangeError)){throw err}throw\"Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.\"}}try{table.set(ret,func)}catch(err){if(!(err instanceof TypeError)){throw err}assert(typeof sig!==\"undefined\",\"Missing signature argument to addFunction\");var wrapped=convertJsFunctionToWasm(func,sig);table.set(ret,wrapped)}return ret}function removeFunctionWasm(index){freeTableIndexes.push(index)}var funcWrappers={};function dynCall(sig,ptr,args){if(args&&args.length){return Module[\"dynCall_\"+sig].apply(null,[ptr].concat(args))}else{return Module[\"dynCall_\"+sig].call(null,ptr)}}var tempRet0=0;var setTempRet0=function(value){tempRet0=value};var wasmBinary;if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];var noExitRuntime;if(Module[\"noExitRuntime\"])noExitRuntime=Module[\"noExitRuntime\"];if(typeof WebAssembly!==\"object\"){err(\"no native wasm support detected\")}function setValue(ptr,value,type,noSafe){type=type||\"i8\";if(type.charAt(type.length-1)===\"*\")type=\"i32\";switch(type){case\"i1\":HEAP8[ptr>>0]=value;break;case\"i8\":HEAP8[ptr>>0]=value;break;case\"i16\":HEAP16[ptr>>1]=value;break;case\"i32\":HEAP32[ptr>>2]=value;break;case\"i64\":tempI64=[value>>>0,(tempDouble=value,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[ptr>>2]=tempI64[0],HEAP32[ptr+4>>2]=tempI64[1];break;case\"float\":HEAPF32[ptr>>2]=value;break;case\"double\":HEAPF64[ptr>>3]=value;break;default:abort(\"invalid type for setValue: \"+type)}}var wasmMemory;var wasmTable=new WebAssembly.Table({\"initial\":31,\"maximum\":31+0,\"element\":\"anyfunc\"});var ABORT=false;var EXITSTATUS=0;function assert(condition,text){if(!condition){abort(\"Assertion failed: \"+text)}}function getCFunc(ident){var func=Module[\"_\"+ident];assert(func,\"Cannot call unknown function \"+ident+\", make sure it is exported\");return func}function ccall(ident,returnType,argTypes,args,opts){var toC={\"string\":function(str){var ret=0;if(str!==null&&str!==undefined&&str!==0){var len=(str.length<<2)+1;ret=stackAlloc(len);stringToUTF8(str,ret,len)}return ret},\"array\":function(arr){var ret=stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}};function convertReturnValue(ret){if(returnType===\"string\")return UTF8ToString(ret);if(returnType===\"boolean\")return Boolean(ret);return ret}var func=getCFunc(ident);var cArgs=[];var stack=0;if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);ret=convertReturnValue(ret);if(stack!==0)stackRestore(stack);return ret}var ALLOC_NONE=3;var UTF8Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf8\"):undefined;function UTF8ArrayToString(u8Array,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(u8Array[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&u8Array.subarray&&UTF8Decoder){return UTF8Decoder.decode(u8Array.subarray(idx,endPtr))}else{var str=\"\";while(idx<endPtr){var u0=u8Array[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=u8Array[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=u8Array[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|u8Array[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):\"\"}function stringToUTF8Array(str,outU8Array,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;outU8Array[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;outU8Array[outIdx++]=192|u>>6;outU8Array[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;outU8Array[outIdx++]=224|u>>12;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;outU8Array[outIdx++]=240|u>>18;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}}outU8Array[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127)++len;else if(u<=2047)len+=2;else if(u<=65535)len+=3;else len+=4}return len}var UTF16Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf-16le\"):undefined;function writeArrayToMemory(array,buffer){HEAP8.set(array,buffer)}function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}var WASM_PAGE_SIZE=65536;function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module[\"HEAP8\"]=HEAP8=new Int8Array(buf);Module[\"HEAP16\"]=HEAP16=new Int16Array(buf);Module[\"HEAP32\"]=HEAP32=new Int32Array(buf);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buf);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buf);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buf);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buf);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buf)}var STACK_BASE=5248960,DYNAMIC_BASE=5248960,DYNAMICTOP_PTR=5920;var INITIAL_INITIAL_MEMORY=Module[\"INITIAL_MEMORY\"]||16777216;if(Module[\"wasmMemory\"]){wasmMemory=Module[\"wasmMemory\"]}else{wasmMemory=new WebAssembly.Memory({\"initial\":INITIAL_INITIAL_MEMORY/WASM_PAGE_SIZE})}if(wasmMemory){buffer=wasmMemory.buffer}INITIAL_INITIAL_MEMORY=buffer.byteLength;updateGlobalBufferAndViews(buffer);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback();continue}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){Module[\"dynCall_v\"](func)}else{Module[\"dynCall_vi\"](func,callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATEXIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){callRuntimeCallbacks(__ATEXIT__);runtimeExited=true}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var Math_abs=Math.abs;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_min=Math.min;var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};function abort(what){if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}what+=\"\";out(what);err(what);ABORT=true;EXITSTATUS=1;what=\"abort(\"+what+\"). Build with -s ASSERTIONS=1 for more info.\";throw new WebAssembly.RuntimeError(what)}var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return String.prototype.startsWith?filename.startsWith(dataURIPrefix):filename.indexOf(dataURIPrefix)===0}var wasmBinaryFile=\"onnx-wasm.wasm\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(){try{if(wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(wasmBinaryFile)}else{throw\"both async and sync fetching of the wasm failed\"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch===\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+wasmBinaryFile+\"'\"}return response[\"arrayBuffer\"]()}).catch(function(){return getBinary()})}return new Promise(function(resolve,reject){resolve(getBinary())})}function createWasm(){var info={\"env\":asmLibraryArg,\"wasi_snapshot_preview1\":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module[\"asm\"]=exports;removeRunDependency(\"wasm-instantiate\")}addRunDependency(\"wasm-instantiate\");function receiveInstantiatedSource(output){receiveInstance(output[\"instance\"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(receiver,function(reason){err(\"failed to asynchronously prepare wasm: \"+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming===\"function\"&&!isDataURI(wasmBinaryFile)&&typeof fetch===\"function\"){fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiatedSource,function(reason){err(\"wasm streaming compile failed: \"+reason);err(\"falling back to ArrayBuffer instantiation\");instantiateArrayBuffer(receiveInstantiatedSource)})})}else{return instantiateArrayBuffer(receiveInstantiatedSource)}}if(Module[\"instantiateWasm\"]){try{var exports=Module[\"instantiateWasm\"](info,receiveInstance);return exports}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);return false}}instantiateAsync();return{}}var tempDouble;var tempI64;__ATINIT__.push({func:function(){___wasm_call_ctors()}});function demangle(func){return func}function demangleAll(text){var regex=/\\b_Z[\\w\\d_]+/g;return text.replace(regex,function(x){var y=demangle(x);return x===y?x:y+\" [\"+x+\"]\"})}function jsStackTrace(){var err=new Error;if(!err.stack){try{throw new Error}catch(e){err=e}if(!err.stack){return\"(no stack trace available)\"}}return err.stack.toString()}function ___assert_fail(condition,filename,line,func){abort(\"Assertion failed: \"+UTF8ToString(condition)+\", at: \"+[filename?UTF8ToString(filename):\"unknown filename\",line,func?UTF8ToString(func):\"unknown function\"])}function ___cxa_allocate_exception(size){return _malloc(size)}var ___exception_infos={};var ___exception_last=0;function __ZSt18uncaught_exceptionv(){return __ZSt18uncaught_exceptionv.uncaught_exceptions>0}function ___cxa_throw(ptr,type,destructor){___exception_infos[ptr]={ptr:ptr,adjusted:[ptr],type:type,destructor:destructor,refcount:0,caught:false,rethrown:false};___exception_last=ptr;if(!(\"uncaught_exception\"in __ZSt18uncaught_exceptionv)){__ZSt18uncaught_exceptionv.uncaught_exceptions=1}else{__ZSt18uncaught_exceptionv.uncaught_exceptions++}throw ptr}function _abort(){abort()}function _emscripten_get_heap_size(){return HEAPU8.length}function _emscripten_get_sbrk_ptr(){return 5920}function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num)}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){var oldSize=_emscripten_get_heap_size();var PAGE_MULTIPLE=65536;var maxHeapSize=2147483648-PAGE_MULTIPLE;if(requestedSize>maxHeapSize){return false}var minHeapSize=16777216;for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(minHeapSize,requestedSize,overGrownHeapSize),PAGE_MULTIPLE));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}var PATH={splitPath:function(filename){var splitPathRe=/^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;return splitPathRe.exec(filename).slice(1)},normalizeArray:function(parts,allowAboveRoot){var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last===\".\"){parts.splice(i,1)}else if(last===\"..\"){parts.splice(i,1);up++}else if(up){parts.splice(i,1);up--}}if(allowAboveRoot){for(;up;up--){parts.unshift(\"..\")}}return parts},normalize:function(path){var isAbsolute=path.charAt(0)===\"/\",trailingSlash=path.substr(-1)===\"/\";path=PATH.normalizeArray(path.split(\"/\").filter(function(p){return!!p}),!isAbsolute).join(\"/\");if(!path&&!isAbsolute){path=\".\"}if(path&&trailingSlash){path+=\"/\"}return(isAbsolute?\"/\":\"\")+path},dirname:function(path){var result=PATH.splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return\".\"}if(dir){dir=dir.substr(0,dir.length-1)}return root+dir},basename:function(path){if(path===\"/\")return\"/\";var lastSlash=path.lastIndexOf(\"/\");if(lastSlash===-1)return path;return path.substr(lastSlash+1)},extname:function(path){return PATH.splitPath(path)[3]},join:function(){var paths=Array.prototype.slice.call(arguments,0);return PATH.normalize(paths.join(\"/\"))},join2:function(l,r){return PATH.normalize(l+\"/\"+r)}};var SYSCALLS={mappings:{},buffers:[null,[],[]],printChar:function(stream,curr){var buffer=SYSCALLS.buffers[stream];if(curr===0||curr===10){(stream===1?out:err)(UTF8ArrayToString(buffer,0));buffer.length=0}else{buffer.push(curr)}},varargs:undefined,get:function(){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret},getStr:function(ptr){var ret=UTF8ToString(ptr);return ret},get64:function(low,high){return low}};function _fd_close(fd){return 0}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){}function flush_NO_FILESYSTEM(){if(typeof _fflush!==\"undefined\")_fflush(0);var buffers=SYSCALLS.buffers;if(buffers[1].length)SYSCALLS.printChar(1,10);if(buffers[2].length)SYSCALLS.printChar(2,10)}function _fd_write(fd,iov,iovcnt,pnum){var num=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];for(var j=0;j<len;j++){SYSCALLS.printChar(fd,HEAPU8[ptr+j])}num+=len}HEAP32[pnum>>2]=num;return 0}function _setTempRet0($i){setTempRet0($i|0)}__ATEXIT__.push(flush_NO_FILESYSTEM);var ASSERTIONS=false;var asmLibraryArg={\"__assert_fail\":___assert_fail,\"__cxa_allocate_exception\":___cxa_allocate_exception,\"__cxa_throw\":___cxa_throw,\"abort\":_abort,\"emscripten_get_sbrk_ptr\":_emscripten_get_sbrk_ptr,\"emscripten_memcpy_big\":_emscripten_memcpy_big,\"emscripten_resize_heap\":_emscripten_resize_heap,\"fd_close\":_fd_close,\"fd_seek\":_fd_seek,\"fd_write\":_fd_write,\"memory\":wasmMemory,\"setTempRet0\":_setTempRet0,\"table\":wasmTable};var asm=createWasm();Module[\"asm\"]=asm;var ___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=function(){return(___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=Module[\"asm\"][\"__wasm_call_ctors\"]).apply(null,arguments)};var _batch_normalization_f32=Module[\"_batch_normalization_f32\"]=function(){return(_batch_normalization_f32=Module[\"_batch_normalization_f32\"]=Module[\"asm\"][\"batch_normalization_f32\"]).apply(null,arguments)};var _add_f32=Module[\"_add_f32\"]=function(){return(_add_f32=Module[\"_add_f32\"]=Module[\"asm\"][\"add_f32\"]).apply(null,arguments)};var _sub_f32=Module[\"_sub_f32\"]=function(){return(_sub_f32=Module[\"_sub_f32\"]=Module[\"asm\"][\"sub_f32\"]).apply(null,arguments)};var _mul_f32=Module[\"_mul_f32\"]=function(){return(_mul_f32=Module[\"_mul_f32\"]=Module[\"asm\"][\"mul_f32\"]).apply(null,arguments)};var _div_f32=Module[\"_div_f32\"]=function(){return(_div_f32=Module[\"_div_f32\"]=Module[\"asm\"][\"div_f32\"]).apply(null,arguments)};var _prelu_f32=Module[\"_prelu_f32\"]=function(){return(_prelu_f32=Module[\"_prelu_f32\"]=Module[\"asm\"][\"prelu_f32\"]).apply(null,arguments)};var _add_i32=Module[\"_add_i32\"]=function(){return(_add_i32=Module[\"_add_i32\"]=Module[\"asm\"][\"add_i32\"]).apply(null,arguments)};var _sub_i32=Module[\"_sub_i32\"]=function(){return(_sub_i32=Module[\"_sub_i32\"]=Module[\"asm\"][\"sub_i32\"]).apply(null,arguments)};var _mul_i32=Module[\"_mul_i32\"]=function(){return(_mul_i32=Module[\"_mul_i32\"]=Module[\"asm\"][\"mul_i32\"]).apply(null,arguments)};var _xor_u8=Module[\"_xor_u8\"]=function(){return(_xor_u8=Module[\"_xor_u8\"]=Module[\"asm\"][\"xor_u8\"]).apply(null,arguments)};var _or_u8=Module[\"_or_u8\"]=function(){return(_or_u8=Module[\"_or_u8\"]=Module[\"asm\"][\"or_u8\"]).apply(null,arguments)};var _and_u8=Module[\"_and_u8\"]=function(){return(_and_u8=Module[\"_and_u8\"]=Module[\"asm\"][\"and_u8\"]).apply(null,arguments)};var _clip_f32=Module[\"_clip_f32\"]=function(){return(_clip_f32=Module[\"_clip_f32\"]=Module[\"asm\"][\"clip_f32\"]).apply(null,arguments)};var _conv_f32=Module[\"_conv_f32\"]=function(){return(_conv_f32=Module[\"_conv_f32\"]=Module[\"asm\"][\"conv_f32\"]).apply(null,arguments)};var _gemm_f32=Module[\"_gemm_f32\"]=function(){return(_gemm_f32=Module[\"_gemm_f32\"]=Module[\"asm\"][\"gemm_f32\"]).apply(null,arguments)};var _free=Module[\"_free\"]=function(){return(_free=Module[\"_free\"]=Module[\"asm\"][\"free\"]).apply(null,arguments)};var _malloc=Module[\"_malloc\"]=function(){return(_malloc=Module[\"_malloc\"]=Module[\"asm\"][\"malloc\"]).apply(null,arguments)};var _instance_normalization_f32=Module[\"_instance_normalization_f32\"]=function(){return(_instance_normalization_f32=Module[\"_instance_normalization_f32\"]=Module[\"asm\"][\"instance_normalization_f32\"]).apply(null,arguments)};var _matmul_f32=Module[\"_matmul_f32\"]=function(){return(_matmul_f32=Module[\"_matmul_f32\"]=Module[\"asm\"][\"matmul_f32\"]).apply(null,arguments)};var _average_pool_f32=Module[\"_average_pool_f32\"]=function(){return(_average_pool_f32=Module[\"_average_pool_f32\"]=Module[\"asm\"][\"average_pool_f32\"]).apply(null,arguments)};var _max_pool_f32=Module[\"_max_pool_f32\"]=function(){return(_max_pool_f32=Module[\"_max_pool_f32\"]=Module[\"asm\"][\"max_pool_f32\"]).apply(null,arguments)};var _softmax_f32=Module[\"_softmax_f32\"]=function(){return(_softmax_f32=Module[\"_softmax_f32\"]=Module[\"asm\"][\"softmax_f32\"]).apply(null,arguments)};var _sum_f32=Module[\"_sum_f32\"]=function(){return(_sum_f32=Module[\"_sum_f32\"]=Module[\"asm\"][\"sum_f32\"]).apply(null,arguments)};var ___errno_location=Module[\"___errno_location\"]=function(){return(___errno_location=Module[\"___errno_location\"]=Module[\"asm\"][\"__errno_location\"]).apply(null,arguments)};var _fflush=Module[\"_fflush\"]=function(){return(_fflush=Module[\"_fflush\"]=Module[\"asm\"][\"fflush\"]).apply(null,arguments)};var _setThrew=Module[\"_setThrew\"]=function(){return(_setThrew=Module[\"_setThrew\"]=Module[\"asm\"][\"setThrew\"]).apply(null,arguments)};var stackSave=Module[\"stackSave\"]=function(){return(stackSave=Module[\"stackSave\"]=Module[\"asm\"][\"stackSave\"]).apply(null,arguments)};var stackAlloc=Module[\"stackAlloc\"]=function(){return(stackAlloc=Module[\"stackAlloc\"]=Module[\"asm\"][\"stackAlloc\"]).apply(null,arguments)};var stackRestore=Module[\"stackRestore\"]=function(){return(stackRestore=Module[\"stackRestore\"]=Module[\"asm\"][\"stackRestore\"]).apply(null,arguments)};var __growWasmMemory=Module[\"__growWasmMemory\"]=function(){return(__growWasmMemory=Module[\"__growWasmMemory\"]=Module[\"asm\"][\"__growWasmMemory\"]).apply(null,arguments)};var dynCall_ii=Module[\"dynCall_ii\"]=function(){return(dynCall_ii=Module[\"dynCall_ii\"]=Module[\"asm\"][\"dynCall_ii\"]).apply(null,arguments)};var dynCall_iiii=Module[\"dynCall_iiii\"]=function(){return(dynCall_iiii=Module[\"dynCall_iiii\"]=Module[\"asm\"][\"dynCall_iiii\"]).apply(null,arguments)};var dynCall_jiji=Module[\"dynCall_jiji\"]=function(){return(dynCall_jiji=Module[\"dynCall_jiji\"]=Module[\"asm\"][\"dynCall_jiji\"]).apply(null,arguments)};var dynCall_iidiiii=Module[\"dynCall_iidiiii\"]=function(){return(dynCall_iidiiii=Module[\"dynCall_iidiiii\"]=Module[\"asm\"][\"dynCall_iidiiii\"]).apply(null,arguments)};var dynCall_vii=Module[\"dynCall_vii\"]=function(){return(dynCall_vii=Module[\"dynCall_vii\"]=Module[\"asm\"][\"dynCall_vii\"]).apply(null,arguments)};var dynCall_vi=Module[\"dynCall_vi\"]=function(){return(dynCall_vi=Module[\"dynCall_vi\"]=Module[\"asm\"][\"dynCall_vi\"]).apply(null,arguments)};var dynCall_viiiiii=Module[\"dynCall_viiiiii\"]=function(){return(dynCall_viiiiii=Module[\"dynCall_viiiiii\"]=Module[\"asm\"][\"dynCall_viiiiii\"]).apply(null,arguments)};var dynCall_viiiii=Module[\"dynCall_viiiii\"]=function(){return(dynCall_viiiii=Module[\"dynCall_viiiii\"]=Module[\"asm\"][\"dynCall_viiiii\"]).apply(null,arguments)};var dynCall_viiii=Module[\"dynCall_viiii\"]=function(){return(dynCall_viiii=Module[\"dynCall_viiii\"]=Module[\"asm\"][\"dynCall_viiii\"]).apply(null,arguments)};Module[\"asm\"]=asm;var calledRun;Module[\"then\"]=function(func){if(calledRun){func(Module)}else{var old=Module[\"onRuntimeInitialized\"];Module[\"onRuntimeInitialized\"]=function(){if(old)old();func(Module)}}return Module};function ExitStatus(status){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+status+\")\";this.status=status}dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0)return;function doRun(){if(calledRun)return;calledRun=true;Module[\"calledRun\"]=true;if(ABORT)return;initRuntime();preMain();if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}}Module[\"run\"]=run;if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}run();\r\n\r\n\r\n  return Module\r\n}\r\n);\r\n})();\r\nif (typeof exports === 'object' && typeof module === 'object')\r\n      module.exports = Module;\r\n    else if (typeof define === 'function' && define['amd'])\r\n      define([], function() { return Module; });\r\n    else if (typeof exports === 'object')\r\n      exports[\"Module\"] = Module;\r\n    ","export default function() {\n  return new Worker(__webpack_public_path__ + \"onnx-worker.js\");\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Backend, InferenceHandler, SessionHandler} from '../../backend';\r\nimport {Graph} from '../../graph';\r\nimport {Operator} from '../../operators';\r\nimport {OpSet, resolveOperator} from '../../opset';\r\nimport {Session} from '../../session';\r\nimport {CPU_OP_RESOLVE_RULES} from '../cpu/op-resolve-rules';\r\n\r\nimport {WasmInferenceHandler} from './inference-handler';\r\nimport {WASM_OP_RESOLVE_RULES} from './op-resolve-rules';\r\n\r\nexport class WasmSessionHandler implements SessionHandler {\r\n  private opResolveRules: ReadonlyArray<OpSet.ResolveRule>;\r\n  constructor(readonly backend: Backend, readonly context: Session.Context, fallbackToCpuOps: boolean) {\r\n    this.opResolveRules = fallbackToCpuOps ? WASM_OP_RESOLVE_RULES.concat(CPU_OP_RESOLVE_RULES) : WASM_OP_RESOLVE_RULES;\r\n  }\r\n\r\n  createInferenceHandler(): InferenceHandler {\r\n    return new WasmInferenceHandler(this, this.context.profiler);\r\n  }\r\n\r\n  dispose(): void {}\r\n\r\n  resolve(node: Graph.Node, opsets: ReadonlyArray<OpSet>, graph: Graph): Operator {\r\n    const op = resolveOperator(node, opsets, this.opResolveRules);\r\n    op.initialize(node.attributes, node, graph);\r\n    return op;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {InferenceHandler} from '../../backend';\r\nimport {Profiler} from '../../instrument';\r\n\r\nimport {WasmSessionHandler} from './session-handler';\r\n\r\nexport class WasmInferenceHandler implements InferenceHandler {\r\n  constructor(public readonly session: WasmSessionHandler, public readonly profiler?: Readonly<Profiler>) {}\r\n\r\n  dispose(): void {}\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {OpSet} from '../../opset';\r\n\r\nimport {WasmBatchNormalization} from './ops/batch-normalization';\r\nimport {WasmBinaryOp} from './ops/binary-op';\r\nimport {WasmClip} from './ops/clip';\r\nimport {WasmConv} from './ops/conv';\r\nimport {WasmGemm} from './ops/gemm';\r\nimport {WasmInstanceNormalization} from './ops/instance-normalization';\r\nimport {WasmMatMul} from './ops/matmul';\r\nimport {WasmAveragePool, WasmGlobalAveragePool, WasmGlobalMaxPool, WasmMaxPool} from './ops/pool';\r\nimport {WasmSoftmax} from './ops/softmax';\r\nimport {WasmSum} from './ops/sum';\r\n\r\nexport const WASM_OP_RESOLVE_RULES: ReadonlyArray<OpSet.ResolveRule> = [\r\n  ['Add', '', '7+', () => new WasmBinaryOp(['float32', 'int32'], 'Add')],\r\n  ['And', '', '7+', () => new WasmBinaryOp(['bool'], 'And')],\r\n  ['AveragePool', '', '7-10', () => new WasmAveragePool()],  // TODO: support new attributes for AveragePool-10\r\n  ['BatchNormalization', '', '7+', () => new WasmBatchNormalization()],\r\n  ['Clip', '', '6-10', () => new WasmClip()],\r\n  ['Conv', '', '1+', () => new WasmConv()],\r\n  ['Div', '', '7+', () => new WasmBinaryOp(['float32'], 'Div')],\r\n  ['Gemm', '', '7-10', () => new WasmGemm(false)],\r\n  ['Gemm', '', '11+', () => new WasmGemm(true)],\r\n  ['GlobalAveragePool', '', '1+', () => new WasmGlobalAveragePool()],\r\n  ['GlobalMaxPool', '', '1+', () => new WasmGlobalMaxPool()],\r\n  ['InstanceNormalization', '', '6+', () => new WasmInstanceNormalization()],\r\n  ['MatMul', '', '1+', () => new WasmMatMul()],\r\n  ['MaxPool', '', '1-9', () => new WasmMaxPool()],  // TODO: support new attributes for MaxPool-8 and MaxPool-10\r\n  ['Mul', '', '7+', () => new WasmBinaryOp(['float32', 'int32'], 'Mul')],\r\n  ['Or', '', '7+', () => new WasmBinaryOp(['bool'], 'Or')],\r\n  ['PRelu', '', '7+', () => new WasmBinaryOp(['float32'], 'PRelu')],\r\n  ['Softmax', '', '1+', () => new WasmSoftmax()],\r\n  ['Sub', '', '7+', () => new WasmBinaryOp(['float32', 'int32'], 'Sub')],\r\n  ['Sum', '', '6+', () => new WasmSum()],  // TODO: support multidirectional broadcast for Sum-8\r\n  ['Xor', '', '7+', () => new WasmBinaryOp(['bool'], 'Xor')],\r\n];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {BatchNormalization} from '../../../ops/batch-normalization';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WasmBinding} from '../../../wasm-binding';\r\nimport {WasmInferenceHandler} from '../inference-handler';\r\n\r\nexport class WasmBatchNormalization extends BatchNormalization {\r\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const x = inputs[0];\r\n    const scale = inputs[1];\r\n    const b = inputs[2];\r\n    const mean = inputs[3];\r\n    const variance = inputs[4];\r\n\r\n    // calculate channel size (i.e.) data points per channel\r\n    let channelSize = 1;\r\n    for (let i = 2; i < x.dims.length; i++) {\r\n      channelSize *= x.dims[i];\r\n    }\r\n\r\n    // create output Tensor after determining output size\r\n    const y = new Tensor(x.dims, x.type);\r\n    WasmBinding.getInstance().ccall(\r\n        '_batch_normalization_f32', [x.floatData, 'float32ptr'], [y.floatData, 'float32ptr', 'out'],\r\n        [x.dims[0], 'int32'], [x.dims[1], 'int32'], [channelSize, 'int32'], [scale.floatData, 'float32ptr'],\r\n        [b.floatData, 'float32ptr'], [mean.floatData, 'float32ptr'], [variance.floatData, 'float32ptr'],\r\n        [this.epsilon, 'float32']);\r\n\r\n    return [y];\r\n  }\r\n\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    const X = inputs[0];\r\n    const scale = inputs[1];\r\n    const B = inputs[2];\r\n    const mean = inputs[3];\r\n    const var_ = inputs[4];\r\n\r\n    // input should atleast have three dimensions - N,C,dim1,...,dimn\r\n    // other inputs need to be one dimensional\r\n    if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\r\n        var_.dims.length !== 1) {\r\n      return false;\r\n    }\r\n    if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\r\n        var_.dims[0] !== X.dims[1]) {\r\n      return false;\r\n    }\r\n    // currently Wasm backend only supports 'float32' input type\r\n    if (X.type !== 'float32' || scale.type !== 'float32' || B.type !== 'float32' || mean.type !== 'float32' ||\r\n        var_.type !== 'float32') {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {BinaryOp} from '../../../ops/binary-op';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil} from '../../../util';\r\nimport {WasmBinding} from '../../../wasm-binding';\r\nimport {WasmInferenceHandler} from '../inference-handler';\r\n\r\nexport class WasmBinaryOp extends BinaryOp {\r\n  constructor(typeConstraint: ReadonlyArray<Tensor.DataType>, opType: string, resultType?: Tensor.DataType) {\r\n    super(typeConstraint, opType, resultType);\r\n  }\r\n\r\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const outputShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\r\n    if (!outputShape) {\r\n      throw new Error('not broadcastable');\r\n    }\r\n    let fun = '';\r\n    // TODO: Explore better ways to deal with types than current `binaryOpType` approach\r\n    let binaryOpType = '';\r\n    switch (this.opType) {\r\n      case 'Add':\r\n        if (inputs[0].type === 'float32') {\r\n          fun = '_add_f32';\r\n          binaryOpType = 'float32InFloat32Out';\r\n        } else if (inputs[0].type === 'int32') {\r\n          fun = '_add_i32';\r\n          binaryOpType = 'int32InInt32Out';\r\n        }\r\n        break;\r\n      case 'Sub':\r\n        if (inputs[0].type === 'float32') {\r\n          fun = '_sub_f32';\r\n          binaryOpType = 'float32InFloat32Out';\r\n        } else if (inputs[0].type === 'int32') {\r\n          fun = '_sub_i32';\r\n          binaryOpType = 'int32InInt32Out';\r\n        }\r\n        break;\r\n      case 'Mul':\r\n        if (inputs[0].type === 'float32') {\r\n          fun = '_mul_f32';\r\n          binaryOpType = 'float32InFloat32Out';\r\n        } else if (inputs[0].type === 'int32') {\r\n          fun = '_mul_i32';\r\n          binaryOpType = 'int32InInt32Out';\r\n        }\r\n        break;\r\n      case 'Div':\r\n        if (inputs[0].type === 'float32') {\r\n          fun = '_div_f32';\r\n          binaryOpType = 'float32InFloat32Out';\r\n        }\r\n        break;\r\n      case 'PRelu':\r\n        if (inputs[0].type === 'float32') {\r\n          fun = '_prelu_f32';\r\n          binaryOpType = 'float32InFloat32Out';\r\n        }\r\n        break;\r\n      case 'Xor':\r\n        fun = '_xor_u8';\r\n        binaryOpType = 'boolInBoolOut';\r\n        break;\r\n      case 'Or':\r\n        fun = '_or_u8';\r\n        binaryOpType = 'boolInBoolOut';\r\n        break;\r\n      case 'And':\r\n        fun = '_and_u8';\r\n        binaryOpType = 'boolInBoolOut';\r\n        break;\r\n      default:\r\n        throw Error(`unsupported binary op by the Wasm backend`);\r\n    }\r\n    let result: Tensor;\r\n    if (binaryOpType === 'float32InFloat32Out') {\r\n      result = new Tensor(outputShape, 'float32');\r\n      WasmBinding.getInstance().ccall(\r\n          fun, [inputs[0].floatData, 'float32ptr'], [inputs[0].dims.length, 'int32'], [inputs[0].dims, 'int32ptr'],\r\n          [inputs[1].floatData, 'float32ptr'], [inputs[1].dims.length, 'int32'], [inputs[1].dims, 'int32ptr'],\r\n          [result.floatData, 'float32ptr', 'out'], [result.floatData.length, 'int32'], [outputShape.length, 'int32'],\r\n          [outputShape, 'int32ptr']);\r\n    } else if (binaryOpType === 'int32InInt32Out') {\r\n      result = new Tensor(outputShape, 'int32');\r\n      WasmBinding.getInstance().ccall(\r\n          fun, [inputs[0].integerData as Int32Array, 'int32ptr'], [inputs[0].dims.length, 'int32'],\r\n          [inputs[0].dims, 'int32ptr'], [inputs[1].integerData as Int32Array, 'int32ptr'],\r\n          [inputs[1].dims.length, 'int32'], [inputs[1].dims, 'int32ptr'],\r\n          [result.integerData as Int32Array, 'int32ptr', 'out'], [result.integerData.length, 'int32'],\r\n          [outputShape.length, 'int32'], [outputShape, 'int32ptr']);\r\n    } else if (binaryOpType === 'boolInBoolOut') {\r\n      result = new Tensor(outputShape, 'bool');\r\n      WasmBinding.getInstance().ccall(\r\n          fun, [inputs[0].integerData as Uint8Array, 'boolptr'], [inputs[0].dims.length, 'int32'],\r\n          [inputs[0].dims, 'int32ptr'], [inputs[1].integerData as Uint8Array, 'boolptr'],\r\n          [inputs[1].dims.length, 'int32'], [inputs[1].dims, 'int32ptr'],\r\n          [result.integerData as Uint8Array, 'boolptr', 'out'], [result.integerData.length, 'int32'],\r\n          [outputShape.length, 'int32'], [outputShape, 'int32ptr']);\r\n    } else {\r\n      throw new Error(`Unsupported binary op format. Probably unsupported data types.`);\r\n    }\r\n    return [result];\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Clip} from '../../../ops/clip';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WasmBinding} from '../../../wasm-binding';\r\nimport {WasmInferenceHandler} from '../inference-handler';\r\n\r\nexport class WasmClip extends Clip {\r\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const result = new Tensor(inputs[0].dims, inputs[0].type);\r\n    const size = result.floatData.length;\r\n    if (inputs[0].type === 'float32') {\r\n      WasmBinding.getInstance().ccall(\r\n          '_clip_f32', [inputs[0].floatData, 'float32ptr'], [result.floatData, 'float32ptr', 'out'], [size, 'int32'],\r\n          [this.min, 'float32'], [this.max, 'float32']);\r\n    }\r\n    // Expand for differnt types supported for this specific kernel of Clip\r\n    else {\r\n      throw new Error(`Unsupported input type for Clip operator.`);\r\n    }\r\n    return [result];\r\n  }\r\n\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    // currently Wasm backend only supports 'float32' input type\r\n    if (inputs[0].type !== 'float32') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Conv} from '../../../ops/conv';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil} from '../../../util';\r\nimport {WasmBinding} from '../../../wasm-binding';\r\nimport {PerformanceData} from '../../../wasm-binding-core';\r\nimport {WasmInferenceHandler} from '../inference-handler';\r\n\r\nexport class WasmConv extends Conv {\r\n  async run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Promise<Tensor[]> {\r\n    const x = inputs[0];\r\n    const w = inputs[1];\r\n    const b = inputs.length === 3 ? inputs[2] : undefined;\r\n\r\n    // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\r\n    if (this.kernelShape.length === 0) {\r\n      const wDims = inputs[1].dims;\r\n      for (let i = 2; i < wDims.length; ++i) {\r\n        this.kernelShape.push(wDims[i]);\r\n      }\r\n    }\r\n\r\n    // create output Tensor after determining output size (after adjusting pads based on 'autoPad' attribute)\r\n    const outputDims = PoolConvUtil.computeConvOutputShape(\r\n        x.dims, w.dims, this.strides, this.dilations, this.kernelShape, this.pads, this.autoPad);\r\n    const y = new Tensor(outputDims, x.type);\r\n\r\n    // determine number of threads needed to process\r\n    const numThreads = determineNumThreads(x.dims[0], this.group, w.dims[0], WasmBinding.workerNumber);\r\n\r\n    // no multi-threading\r\n    if (numThreads === 1) {\r\n      WasmBinding.getInstance().ccall(\r\n          '_conv_f32', [x.floatData, 'float32ptr'], [x.dims, 'int32ptr'], [w.floatData, 'float32ptr'],\r\n          [w.dims, 'int32ptr'], [y.floatData, 'float32ptr', 'out'], [y.dims, 'int32ptr'],\r\n          [b ? b.floatData : null, 'float32ptr'], [this.dilations, 'int32ptr'], [this.group, 'int32'],\r\n          [this.pads, 'int32ptr'], [this.strides, 'int32ptr']);\r\n      return [y];\r\n    }\r\n\r\n    // multi-threaded using web-workers\r\n    else {\r\n      // data pre-processing\r\n      const wDimsSp = w.dims.slice(0);\r\n      wDimsSp[0] = Math.floor(w.dims[0] / numThreads);\r\n      const wSizeSp = wDimsSp[0] * wDimsSp[1] * wDimsSp[2] * wDimsSp[3];\r\n\r\n      const wDimsFinal = w.dims.slice(0);\r\n      wDimsFinal[0] = w.dims[0] - (numThreads - 1) * wDimsSp[0];\r\n\r\n      const yDimsSp = [1, wDimsSp[0], outputDims[2], outputDims[3]];\r\n      const ySizeSp = wDimsSp[0] * outputDims[2] * outputDims[3];\r\n\r\n      const yDimsFinal = [1, wDimsFinal[0], outputDims[2], outputDims[3]];\r\n\r\n      const wArray = new Array<Float32Array>(numThreads);\r\n      const yArray = new Array<Float32Array>(numThreads);\r\n      const bArray = new Array<Float32Array>(numThreads);\r\n      const workerTasks = new Array<Promise<PerformanceData>>(numThreads - 1);\r\n\r\n      // function calls\r\n      for (let i = 0; i < numThreads; ++i) {\r\n        if (i !== numThreads - 1) {\r\n          wArray[i] = w.floatData.subarray(i * wSizeSp, (i + 1) * wSizeSp) as Float32Array;\r\n          yArray[i] = y.floatData.subarray(i * ySizeSp, (i + 1) * ySizeSp) as Float32Array;\r\n          if (b) {\r\n            bArray[i] = b.floatData.subarray(i * wDimsSp[0], (i + 1) * wDimsSp[0]) as Float32Array;\r\n          }\r\n          workerTasks[i] = WasmBinding.getInstance().ccallRemote(\r\n              i, '_conv_f32', [x.floatData, 'float32ptr'], [x.dims, 'int32ptr'], [wArray[i], 'float32ptr'],\r\n              [wDimsSp, 'int32ptr'], [yArray[i], 'float32ptr', 'out'], [yDimsSp, 'int32ptr'],\r\n              [bArray.length > 0 ? bArray[i] : null, 'float32ptr'], [this.dilations, 'int32ptr'], [this.group, 'int32'],\r\n              [this.pads, 'int32ptr'], [this.strides, 'int32ptr']);\r\n        } else {\r\n          wArray[i] = w.floatData.subarray(i * wSizeSp) as Float32Array;\r\n          yArray[i] = y.floatData.subarray(i * ySizeSp) as Float32Array;\r\n          if (b) {\r\n            bArray[i] = b.floatData.subarray(i * wDimsSp[0]) as Float32Array;\r\n          }\r\n          WasmBinding.getInstance().ccall(\r\n              '_conv_f32', [x.floatData, 'float32ptr'], [x.dims, 'int32ptr'], [wArray[i], 'float32ptr'],\r\n              [wDimsFinal, 'int32ptr'], [yArray[i], 'float32ptr', 'out'], [yDimsFinal, 'int32ptr'],\r\n              [bArray.length > 0 ? bArray[i] : null, 'float32ptr'], [this.dilations, 'int32ptr'], [this.group, 'int32'],\r\n              [this.pads, 'int32ptr'], [this.strides, 'int32ptr']);\r\n        }\r\n      }\r\n\r\n      await Promise.all(workerTasks);\r\n      return [y];\r\n    }\r\n  }\r\n\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    // currently Wasm backend only supports 'float32' input type\r\n    if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\r\n      return false;\r\n    }\r\n\r\n    if (inputs.length === 3 && inputs[2].type !== 'float32') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\n// This function will determine the number of threads\r\n// The strategy to parallelize is to parallelize on number of filter maps in the kernel\r\n// (i.e.) number of output channels\r\nfunction determineNumThreads(batchSize: number, group: number, numFilterMaps: number, numWebWorkers: number): number {\r\n  // single threaded if:\r\n  // 1) batch size is not 1 (data splitting logic across threads is specific to batch size being 1)\r\n  // 2) multi-threading not supported yet for mulitple groups\r\n  // 3) if number of filter maps is 1\r\n  // 4) number of web workers is 0\r\n  if (batchSize !== 1 || group !== 1 || numFilterMaps === 1 || numWebWorkers <= 0) {\r\n    return 1;\r\n  }\r\n\r\n  // multi-threaded:\r\n  // determine number of threads\r\n  return Math.min(numFilterMaps, numWebWorkers + 1);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Gemm} from '../../../ops/gemm';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, GemmUtil} from '../../../util';\r\nimport {WasmBinding} from '../../../wasm-binding';\r\nimport {WasmInferenceHandler} from '../inference-handler';\r\n\r\nexport class WasmGemm extends Gemm {\r\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const a = inputs[0];\r\n    const b = inputs[1];\r\n    const c = inputs[2];\r\n\r\n    const [M, N] = GemmUtil.getShapeOfGemmResult(a.dims, this.transA, b.dims, this.transB, c?.dims);\r\n    const y = new Tensor([M, N], a.type);\r\n    if (c && !BroadcastUtil.calc(y, c, (a, b) => (b), true)) {\r\n      throw new Error(`c is not broadcastable to the shape of the result of the Gemm operator`);\r\n    }\r\n    WasmBinding.getInstance().ccall(\r\n        '_gemm_f32', [this.transA, 'bool'], [this.transB, 'bool'], [this.transA ? a.dims[1] : a.dims[0], 'int32'],\r\n        [this.transB ? b.dims[0] : b.dims[1], 'int32'], [this.transA ? a.dims[0] : a.dims[1], 'int32'],\r\n        [this.alpha, 'float32'], [a.floatData, 'float32ptr'], [b.floatData, 'float32ptr'], [this.beta, 'float32'],\r\n        [y.floatData, 'float32ptr', 'inout']);\r\n\r\n    return [y];\r\n  }\r\n\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    // currently Wasm backend only supports 'float32' input type\r\n    if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32' || inputs[2].type !== 'float32') {\r\n      return false;\r\n    }\r\n\r\n    if ((inputs[0].type !== inputs[1].type) || (inputs[0].type !== inputs[2].type)) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {InstanceNormalization} from '../../../ops/instance-normalization';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WasmBinding} from '../../../wasm-binding';\r\nimport {WasmInferenceHandler} from '../inference-handler';\r\n\r\nexport class WasmInstanceNormalization extends InstanceNormalization {\r\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const x = inputs[0];\r\n    const scale = inputs[1];\r\n    const b = inputs[2];\r\n\r\n    // calculate channel size (i.e.) data points per channel\r\n    let channelSize = 1;\r\n    for (let i = 2; i < x.dims.length; i++) {\r\n      channelSize *= x.dims[i];\r\n    }\r\n\r\n    // create output Tensor after determining output size\r\n    const y = new Tensor(x.dims, x.type);\r\n    WasmBinding.getInstance().ccall(\r\n        '_instance_normalization_f32', [x.floatData, 'float32ptr'], [y.floatData, 'float32ptr', 'out'],\r\n        [x.dims[0], 'int32'], [x.dims[1], 'int32'], [channelSize, 'int32'], [scale.floatData, 'float32ptr'],\r\n        [b.floatData, 'float32ptr'], [this.epsilon, 'float32']);\r\n\r\n    return [y];\r\n  }\r\n\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    const X = inputs[0];\r\n    const scale = inputs[1];\r\n    const B = inputs[2];\r\n\r\n    // input should atleast have three dimensions - N,C,dim1,...,dimn\r\n    // other inputs need to be one dimensional\r\n    if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\r\n      return false;\r\n    }\r\n    if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\r\n      return false;\r\n    }\r\n    // currently Wasm backend only supports 'float32' input type\r\n    if (X.type !== 'float32' || scale.type !== 'float32' || B.type !== 'float32') {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {MatMul} from '../../../ops/matmul';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, MatMulUtil, ShapeUtil} from '../../../util';\r\nimport {WasmBinding} from '../../../wasm-binding';\r\nimport {WasmInferenceHandler} from '../inference-handler';\r\n\r\nexport class WasmMatMul extends MatMul {\r\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const [dimsA, dimsB] = MatMulUtil.preprocessInputShapes(inputs[0].dims, inputs[1].dims);\r\n    const outputShape = BroadcastUtil.calcShape(dimsA, dimsB, true);\r\n    if (!outputShape) {\r\n      // the inputs cannot broadcast or cannot multiply\r\n      throw new Error(`input dimensions do not match the requirement`);\r\n    }\r\n\r\n    const outputSize = ShapeUtil.size(outputShape);\r\n    const resultData = new Float32Array(outputSize);\r\n    WasmBinding.getInstance().ccall(\r\n        '_matmul_f32', [inputs[0].floatData, 'float32ptr'], [inputs[0].dims, 'int32ptr'],\r\n        [inputs[0].dims.length, 'int32'], [inputs[1].floatData, 'float32ptr'], [inputs[1].dims, 'int32ptr'],\r\n        [inputs[1].dims.length, 'int32'], [resultData, 'float32ptr', 'out'], [resultData.length, 'int32'],\r\n        [outputShape, 'int32ptr'], [outputShape.length, 'int32']);\r\n    MatMulUtil.postprocessOutputShape(outputShape as number[], inputs[0].dims.length, inputs[1].dims.length);\r\n    const result = new Tensor(outputShape, inputs[0].type);\r\n    result.floatData.set(resultData);\r\n    return [result];\r\n  }\r\n\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    // currently Wasm backend only supports 'float32' input type\r\n    if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[0].type !== inputs[1].type) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {AveragePool, GlobalAveragePool, GlobalMaxPool, MaxPool} from '../../../ops/pool';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\r\nimport {WasmBinding} from '../../../wasm-binding';\r\nimport {PerformanceData} from '../../../wasm-binding-core';\r\nimport {WasmInferenceHandler} from '../inference-handler';\r\n\r\nexport class WasmAveragePool extends AveragePool {\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    return checkInputTypes(inputs);\r\n  }\r\n\r\n  async run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Promise<Tensor[]> {\r\n    return averagePool(inputs[0], this.autoPad, this.countIncludePad, this.kernelShape, this.pads, this.strides);\r\n  }\r\n}\r\n\r\nexport class WasmGlobalAveragePool extends GlobalAveragePool {\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    return checkInputTypes(inputs);\r\n  }\r\n\r\n  async run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Promise<Tensor[]> {\r\n    return globalAveragePool(inputs[0]);\r\n  }\r\n}\r\n\r\nexport class WasmMaxPool extends MaxPool {\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    return checkInputTypes(inputs);\r\n  }\r\n\r\n  async run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Promise<Tensor[]> {\r\n    return maxPool(inputs[0], this.autoPad, this.kernelShape, this.pads, this.strides);\r\n  }\r\n}\r\n\r\nexport class WasmGlobalMaxPool extends GlobalMaxPool {\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    return checkInputTypes(inputs);\r\n  }\r\n\r\n  async run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Promise<Tensor[]> {\r\n    return globalMaxPool(inputs[0]);\r\n  }\r\n}\r\n\r\n// type check function\r\nfunction checkInputTypes(inputs: Tensor[]): boolean {\r\n  // currently Wasm backend only supports 'float32' input type\r\n  if (inputs[0].type !== 'float32') {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n// functions implementing specific pooling operations\r\nasync function averagePool(\r\n    input: Tensor, autoPad: string, countIncludePad: boolean, kernelShape: number[], pads: number[],\r\n    strides: number[]): Promise<Tensor[]> {\r\n  return pool(false, 1, input, autoPad, countIncludePad, kernelShape, pads, strides);\r\n}\r\n\r\nasync function globalAveragePool(input: Tensor): Promise<Tensor[]> {\r\n  return pool(true, 1, input, 'NOTSET', false, [], [], []);\r\n}\r\n\r\nasync function maxPool(\r\n    input: Tensor, autoPad: string, kernelShape: number[], pads: number[], strides: number[]): Promise<Tensor[]> {\r\n  return pool(false, 2, input, autoPad, false, kernelShape, pads, strides);\r\n}\r\n\r\nasync function globalMaxPool(input: Tensor): Promise<Tensor[]> {\r\n  return pool(true, 2, input, 'NOTSET', false, [], [], []);\r\n}\r\n\r\n/**\r\n * Perform pooling operations based on input\r\n * @param isGlobalOperator If true, perform global pooling.\r\n * @param poolType 1 if averagepool, 2 for maxpool.\r\n * @param input The input tensor.\r\n * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID\r\n * @param countIncludePad Whether include pad pixels when calculating values for the edges.\r\n * @param kernelShape The size of the kernel along each axis.\r\n * @param pads Padding for the beginning and ending along each axis. `pads` format should be as follow [x1_begin,\r\n *       x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels added at the beginning of axis `i` and\r\n *       xi_end, the number of pixels added at the end of axis `i`.\r\n * @param strides Stride along each axis.\r\n */\r\nasync function pool(\r\n    isGlobalOperator: boolean, poolType: number, input: Tensor, autoPad: string, countIncludePad: boolean,\r\n    kernelShape: number[], pads: number[], strides: number[]): Promise<Tensor[]> {\r\n  // determine pool function name in wasm\r\n  let poolFunc = '';\r\n  switch (poolType) {\r\n    case 1:\r\n      poolFunc = '_average_pool_f32';\r\n      break;\r\n    case 2:\r\n      poolFunc = '_max_pool_f32';\r\n      break;\r\n    default:\r\n      throw new Error(`unknown pool type`);\r\n  }\r\n  // adjust the shapes of input attributes\r\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, input.dims, kernelShape, strides, pads);\r\n\r\n  // calculate output shape based on input attributes\r\n  const outputDims =\r\n      PoolConvUtil.computePoolOutputShape(isGlobalOperator, input.dims, strides, kernelShape, pads, autoPad);\r\n\r\n  // create output\r\n  const y = new Tensor(outputDims, input.type);\r\n\r\n  // determine number of threads needed to process\r\n  const numThreads = determineNumThreads(input.dims[0], input.dims[1], WasmBinding.workerNumber);\r\n\r\n  // no multi-threading\r\n  if (numThreads === 1) {\r\n    WasmBinding.getInstance().ccall(\r\n        poolFunc, [kernelShape.length, 'int32'], [isGlobalOperator, 'bool'], [input.floatData, 'float32ptr'],\r\n        [input.dims, 'int32ptr'], [y.floatData, 'float32ptr', 'out'], [y.dims, 'int32ptr'], [kernelShape, 'int32ptr'],\r\n        [pads, 'int32ptr'], [strides, 'int32ptr'], [countIncludePad, 'bool']);\r\n  }\r\n\r\n  // multi-threaded using web-workers\r\n  else {\r\n    // data pre-processing\r\n    const xDimsSp = input.dims.slice(0);\r\n    xDimsSp[1] = Math.floor(input.dims[1] / numThreads);\r\n    const xSizeSp = ShapeUtil.size(xDimsSp);\r\n\r\n    const xDimsFinal = input.dims.slice(0);\r\n    xDimsFinal[1] = input.dims[1] - (numThreads - 1) * xDimsSp[1];\r\n\r\n    const yDimsSp = outputDims.slice(0);\r\n    yDimsSp[1] = xDimsSp[1];\r\n    const ySizeSp = ShapeUtil.size(yDimsSp);\r\n\r\n    const yDimsFinal = outputDims.slice(0);\r\n    yDimsFinal[1] = xDimsFinal[1];\r\n\r\n    const workerTasks = new Array<Promise<PerformanceData>>(numThreads - 1);\r\n\r\n    const X = input.floatData;\r\n    const Y = y.floatData;\r\n\r\n    // function calls\r\n    for (let i = 0; i < numThreads; ++i) {\r\n      if (i !== numThreads - 1) {\r\n        workerTasks[i] = WasmBinding.getInstance().ccallRemote(\r\n            i, poolFunc, [kernelShape.length, 'int32'], [isGlobalOperator, 'bool'],\r\n            [X.subarray(i * xSizeSp, (i + 1) * xSizeSp), 'float32ptr'], [xDimsSp, 'int32ptr'],\r\n            [Y.subarray(i * ySizeSp, (i + 1) * ySizeSp), 'float32ptr', 'out'], [yDimsSp, 'int32ptr'],\r\n            [kernelShape, 'int32ptr'], [pads, 'int32ptr'], [strides, 'int32ptr'], [countIncludePad, 'bool']);\r\n      } else {\r\n        WasmBinding.getInstance().ccall(\r\n            poolFunc, [kernelShape.length, 'int32'], [isGlobalOperator, 'bool'],\r\n            [X.subarray((numThreads - 1) * xSizeSp), 'float32ptr'], [xDimsFinal, 'int32ptr'],\r\n            [Y.subarray((numThreads - 1) * ySizeSp), 'float32ptr', 'out'], [yDimsFinal, 'int32ptr'],\r\n            [kernelShape, 'int32ptr'], [pads, 'int32ptr'], [strides, 'int32ptr'], [countIncludePad, 'bool']);\r\n      }\r\n    }\r\n\r\n    await Promise.all(workerTasks);\r\n  }\r\n\r\n  return [y];\r\n}\r\n\r\n// this function will determine the number of threads\r\n// the strategy to parallelize is to parallelize on number of data channels\r\nfunction determineNumThreads(batchSize: number, numChannels: number, numWebWorkers: number): number {\r\n  // single threaded if:\r\n  // 1) batch size is not 1 (data splitting logic across threads is specific to batch size being 1)\r\n  // 2) if number of channels is 1\r\n  // 3) number of web workers is 0\r\n  if (batchSize !== 1 || numChannels === 1 || numWebWorkers <= 0) {\r\n    return 1;\r\n  }\r\n\r\n  // multi-threaded:\r\n  // determine number of threads\r\n  return Math.min(numChannels, numWebWorkers + 1);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Softmax} from '../../../ops/softmax';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WasmBinding} from '../../../wasm-binding';\r\nimport {WasmInferenceHandler} from '../inference-handler';\r\n\r\nexport class WasmSoftmax extends Softmax {\r\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const x = inputs[0];\r\n    const axis = ShapeUtil.normalizeAxis(this.axis, x.dims.length);\r\n    const N = ShapeUtil.sizeToDimension(x.dims, axis);\r\n    const D = ShapeUtil.sizeFromDimension(x.dims, axis);\r\n    const y = new Tensor(x.dims, x.type);\r\n    WasmBinding.getInstance().ccall(\r\n        '_softmax_f32', [x.floatData, 'float32ptr'], [y.floatData, 'float32ptr', 'out'], [N, 'int32'], [D, 'int32']);\r\n\r\n    return [y];\r\n  }\r\n\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    // currently Wasm backend only supports 'float32' input type\r\n    if (inputs[0].type !== 'float32') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Sum} from '../../../ops/sum';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WasmBinding, WasmCallArgument} from '../../../wasm-binding';\r\nimport {WasmInferenceHandler} from '../inference-handler';\r\n\r\nexport class WasmSum extends Sum {\r\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const y = new Tensor(inputs[0].dims, inputs[0].type);\r\n    const size = inputs[0].floatData.length;\r\n    const input = new Array<WasmCallArgument>(inputs.length);\r\n    for (let i = 0; i < inputs.length; i++) {\r\n      input[i] = [inputs[i].floatData, 'float32ptr'];\r\n    }\r\n    WasmBinding.getInstance().ccall(\r\n        '_sum_f32', [inputs.length, 'int32'], [size, 'int32'], [y.floatData, 'float32ptr', 'inout'], ...input);\r\n\r\n    return [y];\r\n  }\r\n\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    // currently Wasm backend only supports 'float32' input type\r\n    if (inputs[0].type !== 'float32') {\r\n      return false;\r\n    }\r\n    for (let i = 1; i < inputs.length; i++) {\r\n      if (inputs[0].type !== inputs[i].type) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Backend as BackendInterface} from '../api/onnx';\r\nimport {Backend, SessionHandler} from '../backend';\r\nimport {Logger} from '../instrument';\r\nimport {Session} from '../session';\r\n\r\nimport {WebGLSessionHandler} from './webgl/session-handler';\r\nimport {WebGLContext} from './webgl/webgl-context';\r\nimport {createWebGLContext} from './webgl/webgl-context-factory';\r\n\r\ntype WebGLOptions = BackendInterface.WebGLOptions;\r\n\r\n/**\r\n * WebGLBackend is the entry point for all WebGL opeartions\r\n * When it starts it created the WebGLRenderingContext\r\n * and other main framework components such as Program and Texture Managers\r\n */\r\nexport class WebGLBackend implements Backend, WebGLOptions {\r\n  disabled?: boolean;\r\n  glContext: WebGLContext;\r\n  contextId?: 'webgl'|'webgl2';\r\n  matmulMaxBatchSize?: number;\r\n  textureCacheMode?: 'initializerOnly'|'full';\r\n\r\n  initialize(): boolean {\r\n    try {\r\n      this.glContext = createWebGLContext(this.contextId);\r\n      if (typeof this.matmulMaxBatchSize !== 'number') {\r\n        this.matmulMaxBatchSize = 16;\r\n      }\r\n      if (typeof this.textureCacheMode !== 'string') {\r\n        this.textureCacheMode = 'full';\r\n      }\r\n      Logger.verbose('WebGLBackend', `Created WebGLContext: ${typeof this.glContext}`);\r\n      return true;\r\n    } catch (e) {\r\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\r\n      return false;\r\n    }\r\n  }\r\n  createSessionHandler(context: Session.Context): SessionHandler {\r\n    return new WebGLSessionHandler(this, context);\r\n  }\r\n  dispose(): void {\r\n    this.glContext.dispose();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {SessionHandler} from '../../backend';\r\nimport {Graph} from '../../graph';\r\nimport {Logger} from '../../instrument';\r\nimport {Operator} from '../../operators';\r\nimport {OpSet, resolveOperator} from '../../opset';\r\nimport {Session} from '../../session';\r\nimport {Tensor} from '../../tensor';\r\nimport {WebGLBackend} from '../backend-webgl';\r\n\r\nimport {WebGLInferenceHandler} from './inference-handler';\r\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\r\nimport {ProgramManager} from './program-manager';\r\nimport {AlwaysKeepOriginalSizeStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\r\nimport {TextureManager} from './texture-manager';\r\nimport {TextureData} from './types';\r\n\r\nexport class WebGLSessionHandler implements SessionHandler {\r\n  programManager: ProgramManager;\r\n  textureManager: TextureManager;\r\n  layoutStrategy: TextureLayoutStrategy;\r\n  textureDataCache: Map<Tensor.Id, TextureData>;\r\n  initializers: Set<Tensor.Id>;\r\n\r\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\r\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext);\r\n    this.layoutStrategy = new AlwaysKeepOriginalSizeStrategy(backend.glContext.maxTextureSize);\r\n    this.textureManager = new TextureManager(\r\n        backend.glContext, this.layoutStrategy, this.context.profiler,\r\n        {reuseTextures: backend.textureCacheMode === 'full'});\r\n    this.textureDataCache = new Map();\r\n  }\r\n\r\n  createInferenceHandler() {\r\n    return new WebGLInferenceHandler(this);\r\n  }\r\n  onGraphInitialized(graph: Graph): void {\r\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\r\n    this.initializers = new Set(initializers);\r\n  }\r\n  isInitializer(tensorId: Tensor.Id): boolean {\r\n    return this.initializers ? this.initializers.has(tensorId) : false;\r\n  }\r\n  getTextureData(tensorId: Tensor.Id): TextureData|undefined {\r\n    return this.textureDataCache.get(tensorId);\r\n  }\r\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData): void {\r\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\r\n    this.textureDataCache.set(tensorId, textureData);\r\n  }\r\n  dispose(): void {\r\n    this.programManager.dispose();\r\n    this.textureManager.clearActiveTextures();\r\n    this.textureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\r\n    this.textureDataCache = new Map();\r\n  }\r\n  resolve(node: Graph.Node, opsets: ReadonlyArray<OpSet>, graph: Graph): Operator {\r\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\r\n    op.initialize(node.attributes, node, graph);\r\n    return op;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {InferenceHandler} from '../../backend';\r\nimport {Logger} from '../../instrument';\r\nimport {Tensor} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\n\r\nimport {WebGLUint8Encode} from './ops/uint8-encode';\r\nimport {WebGLSessionHandler} from './session-handler';\r\nimport {Encoder} from './texture-data-encoder';\r\nimport {WidthHeightPrefs} from './texture-layout-strategy';\r\nimport {TextureData, TextureLayout, WebGLOperator} from './types';\r\nimport {getPackedShape} from './utils';\r\n\r\nexport class WebGLInferenceHandler implements InferenceHandler {\r\n  private textureDataCache: Map<Tensor.Id, TextureData>;\r\n  constructor(public session: WebGLSessionHandler) {\r\n    this.textureDataCache = new Map();\r\n  }\r\n\r\n  run(op: WebGLOperator, inputs: Tensor[]): Tensor[] {\r\n    let artifact = this.session.programManager.getArtifact(op);\r\n    if (!artifact) {\r\n      const programInfo = op.createProgramInfo(this, inputs);\r\n      artifact = this.session.programManager.build(programInfo);\r\n      this.session.programManager.setArtifact(op, artifact);\r\n    }\r\n    const runData = op.createRunData(this, artifact.programInfo, inputs);\r\n    this.session.programManager.run(artifact, runData);\r\n    return [runData.outputTextureData.tensor];\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object from a tensor.\r\n   * Usage = Encoder.Usage.UploadOnly.\r\n   * If a related texture data is found in cache, returns it;\r\n   * Otherwise:\r\n   *   Creates a new texture layout if not provided;\r\n   *   Creates WebGLTexture with the layout;\r\n   *   Upload tensor data to the texture;\r\n   *   Creates a texture data object associated with the given tensor.\r\n   * @param tensor the tensor with data to upload\r\n   */\r\n  getOrCreateTextureData(tensor: Tensor, layout?: TextureLayout) {\r\n    let td = this.getTextureData(tensor.dataId);\r\n    if (!td) {\r\n      Logger.verbose('InferenceHandler', `Creating new TextureData for dims: [${tensor.dims}]`);\r\n      if (!layout) {\r\n        layout = this.createTextureLayoutFromShape(tensor.dims.slice());\r\n      }\r\n      // graph inputs or initializers\r\n      td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\r\n    } else {\r\n      Logger.verbose('InferenceHandler', `Retrieving TextureData from cache: [${tensor.dims}]`);\r\n    }\r\n    return td;\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object from the given data type and texture layout.\r\n   * Usage = Encoder.Usage.Default.\r\n   * @param dataType the tensor data type\r\n   */\r\n  createTextureDataFromLayout(layout: TextureLayout, dataType: Tensor.DataType): TextureData {\r\n    return this.createTextureData(layout, dataType);\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object using the given data and bind to the given tensor.\r\n   * Usage = Encoder.Usage.UploadOnly.\r\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\r\n   * implementation by Graph.Transformer\r\n   * @param dataType the tensor data type\r\n   * @param data the actual data to upload\r\n   * @param tensor the tensor to bind. tensor's data is ignored.\r\n   */\r\n  createTextureDataFromLayoutBindTensor(\r\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\r\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\r\n  }\r\n\r\n  private createTextureData(\r\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\r\n      usage?: Encoder.Usage): TextureData {\r\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\r\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\r\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object, using the given texture.\r\n   * This function does not create new texture. Usually used in scenarios using texture sharing. (eg. Reshape)\r\n   * @param dataType the tensor data type\r\n   * @param texture the WebGLTexture object to share\r\n   * @param tensorId the tensor ID of the shared tensor data\r\n   */\r\n  createSharedTextureData(layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensorId: Tensor.Id):\r\n      TextureData {\r\n    return this.createTextureDataFromTexture(layout, dataType, texture, undefined, tensorId);\r\n  }\r\n\r\n  private createTextureDataFromTexture(\r\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\r\n    const textureData: TextureData = {\r\n      ...layout,\r\n      tensor: tensor ||\r\n          new Tensor(\r\n                  layout.unpackedShape, dataType,\r\n                  (id: Tensor.Id) => {\r\n                    return this.readTexture(textureData);\r\n                  },\r\n                  undefined, undefined, tensorId),\r\n      texture\r\n    };\r\n    this.setTextureData(textureData.tensor.dataId, textureData);\r\n    return textureData;\r\n  }\r\n\r\n  getTextureData(tensorId: Tensor.Id): TextureData|undefined {\r\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId) :\r\n                                                  this.textureDataCache.get(tensorId);\r\n  }\r\n  setTextureData(tensorId: Tensor.Id, td: TextureData): void {\r\n    if (this.session.isInitializer(tensorId)) {\r\n      this.session.setTextureData(tensorId, td);\r\n    } else {\r\n      this.textureDataCache.set(tensorId, td);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a TextureLayout object from a tensor. If a related texture data is found, returns the cached texture layout.\r\n   */\r\n  getOrCreateTextureLayout(tensor: Tensor, channels: 1|2|3|4 = 1, unpackedShape?: ReadonlyArray<number>):\r\n      TextureLayout {\r\n    const td = this.getTextureData(tensor.dataId);\r\n    if (td) {\r\n      return td;\r\n    }\r\n    return this.createTextureLayoutFromShape(\r\n        channels === 1 ? tensor.dims.slice() : getPackedShape(tensor.dims.slice()), channels, unpackedShape);\r\n  }\r\n  /**\r\n   * Create a TextureLayout object from shape.\r\n   */\r\n  createTextureLayoutFromShape(\r\n      shape: ReadonlyArray<number>, channels: 1|2|3|4 = 1, unpackedShape?: ReadonlyArray<number>,\r\n      prefs?: WidthHeightPrefs): TextureLayout {\r\n    const [width, height] = this.session.layoutStrategy.computeTextureWH(shape, prefs);\r\n    let inferredDims = shape;\r\n    if (shape.length === 0) {\r\n      inferredDims = [1];\r\n    }\r\n    if (channels === 1) {\r\n      // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\r\n      unpackedShape = shape;\r\n    } else if (!unpackedShape) {\r\n      throw new Error('Unpacked shape is needed when using channels > 1');\r\n    }\r\n    return {\r\n      width,\r\n      height,\r\n      channels: channels ? channels : 1,\r\n      shape: inferredDims,\r\n      strides: ShapeUtil.computeStrides(inferredDims),\r\n      unpackedShape\r\n    };\r\n  }\r\n\r\n  dispose(): void {\r\n    this.session.textureManager.clearActiveTextures();\r\n    this.textureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\r\n    this.textureDataCache = new Map();\r\n  }\r\n\r\n  readTexture(textureData: TextureData): Tensor.NumberType {\r\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\r\n      const op = new WebGLUint8Encode();\r\n      const uint8TD = op.runInternal(this, textureData);\r\n      return this.session.textureManager.readUint8TextureAsFloat(uint8TD);\r\n    }\r\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {TextureData, TextureLayout} from '../types';\r\n\r\nexport class WebGLUint8Encode {\r\n  runInternal(inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData {\r\n    const outputShape = input.shape;\r\n    const [width, height] = inferenceHandler.session.layoutStrategy.computeTextureWH(input.shape);\r\n    const outputLayout: TextureLayout = {\r\n      width,\r\n      height,\r\n      channels: 4,\r\n      shape: outputShape,\r\n      strides: ShapeUtil.computeStrides(outputShape),\r\n      unpackedShape: outputShape\r\n    };\r\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n    // TODO: remove this special script. Use graph transformer instead.\r\n    /**\r\n     * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\r\n     */\r\n    const shaderSource = `\r\n      const float FLOAT_MAX = 1.70141184e38;\r\n      const float FLOAT_MIN = 1.17549435e-38;\r\n\r\n      bool isNaN(float val) {\r\n        return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\r\n      }\r\n\r\n      highp vec4 encodeAsUint8(highp float v) {\r\n        if (isNaN(v)) {\r\n          return vec4(255, 255, 255, 255);\r\n        }\r\n\r\n        highp float av = abs(v);\r\n\r\n        if(av < FLOAT_MIN) {\r\n          return vec4(0.0, 0.0, 0.0, 0.0);\r\n        } else if(v > FLOAT_MAX) {\r\n          return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\r\n        } else if(v < -FLOAT_MAX) {\r\n          return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\r\n        }\r\n\r\n        highp vec4 c = vec4(0,0,0,0);\r\n\r\n        highp float e = floor(log2(av));\r\n        highp float m = exp2(fract(log2(av))) - 1.0;\r\n\r\n        c[2] = floor(128.0 * m);\r\n        m -= c[2] / 128.0;\r\n        c[1] = floor(32768.0 * m);\r\n        m -= c[1] / 32768.0;\r\n        c[0] = floor(8388608.0 * m);\r\n\r\n        highp float ebias = e + 127.0;\r\n        c[3] = floor(ebias / 2.0);\r\n        ebias -= c[3] * 2.0;\r\n        c[2] += floor(ebias) * 128.0;\r\n\r\n        c[3] += 128.0 * step(0.0, -v);\r\n\r\n        return c / 255.0;\r\n      }\r\n\r\n      void main() {\r\n        float value = ${glsl.texture2D}(X,TexCoords).r;\r\n        ${glsl.output} = encodeAsUint8(value);\r\n      }`;\r\n    const programInfo = {inputLayouts: [input], outputLayout, samplers: ['X'], shaderSource, hasMain: true};\r\n    const artifact = inferenceHandler.session.programManager.build(programInfo);\r\n\r\n    const encoder = inferenceHandler.session.backend.glContext.getEncoder('byte', 4);\r\n    const texture =\r\n        inferenceHandler.session.backend.glContext.allocateTexture(outputLayout.width, outputLayout.height, encoder);\r\n    const outputTextureData = inferenceHandler.createSharedTextureData(outputLayout, 'uint8', texture, {});\r\n    const runData = {inputTextureDatas: [input], outputTextureData, uniformData: {}};\r\n\r\n    inferenceHandler.session.programManager.run(artifact, runData);\r\n    return runData.outputTextureData;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {FLOAT_TYPES, NUMBER_TYPES} from '../../operators';\r\nimport {OpSet} from '../../opset';\r\n\r\nimport {WebGLBatchNormalization} from './ops/batch-normalization';\r\nimport * as binaryOps from './ops/binary-op';\r\nimport {WebGLClip} from './ops/clip';\r\nimport {WebGLConcat} from './ops/concat';\r\nimport {WebGLConv} from './ops/conv';\r\nimport {WebGLDropout} from './ops/dropout';\r\nimport {WebGLElu} from './ops/elu';\r\nimport {WebGLFlatten} from './ops/flatten';\r\nimport {WebGLGather} from './ops/gather';\r\nimport {WebGLGemm} from './ops/gemm';\r\nimport {WebGLImageScaler} from './ops/image-scaler';\r\nimport {WebGLInstanceNormalization} from './ops/instance-normalization';\r\nimport {WebGLLeakyRelu} from './ops/leaky-relu';\r\nimport {WebGLMatMul} from './ops/matmul';\r\nimport {WebGLPad} from './ops/pad';\r\nimport {WebGLAveragePool, WebGLGlobalAveragePool, WebGLGlobalMaxPool, WebGLMaxPool} from './ops/pool';\r\nimport * as reduceOps from './ops/reduce';\r\nimport {WebGLReshape} from './ops/reshape';\r\nimport {WebGLSlice, WebGLSliceV10} from './ops/slice';\r\nimport {WebGLSoftmax} from './ops/softmax';\r\nimport {WebGLSplit} from './ops/split';\r\nimport {WebGLSqueeze} from './ops/squeeze';\r\nimport {WebGLSum} from './ops/sum';\r\nimport {WebGLTile} from './ops/tile';\r\nimport {WebGLTranspose} from './ops/transpose';\r\nimport * as unaryOps from './ops/unary-op';\r\nimport {WebGLUnsqueeze} from './ops/unsqueeze';\r\nimport {WebGLUpsample} from './ops/upsample';\r\n\r\nexport const WEBGL_OP_RESOLVE_RULES: ReadonlyArray<OpSet.ResolveRule> = [\r\n  ['Abs', '', '6+', () => new unaryOps.WebGLUnaryOp(NUMBER_TYPES, unaryOps.glslAbs())],\r\n  ['Acos', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslAcos())],\r\n  ['Add', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslAdd())],\r\n  ['And', '', '7+', () => new binaryOps.WebGLBinaryOp(['bool'], binaryOps.glslAnd())],\r\n  ['Asin', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslAsin())],\r\n  ['Atan', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslAtan())],\r\n  ['AveragePool', '', '7-10', () => new WebGLAveragePool()],  // TODO: support new attributes for AveragePool-10\r\n  ['BatchNormalization', '', '7+', () => new WebGLBatchNormalization()],\r\n  ['Ceil', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslCeil())],\r\n  ['Clip', '', '6-10', () => new WebGLClip()],\r\n  ['Concat', '', '4+', () => new WebGLConcat()],\r\n  ['Conv', '', '1+', () => new WebGLConv()],\r\n  ['Cos', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslCos())],\r\n  ['Div', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslDiv())],\r\n  ['Dropout', '', '7+', () => new WebGLDropout()],\r\n  ['Equal', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslEqual(), undefined, 'bool')],\r\n  ['Elu', '', '6+', () => new WebGLElu()],\r\n  ['Exp', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslExp())],\r\n  ['Flatten', '', '1+', () => new WebGLFlatten()],\r\n  ['Floor', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslFloor())],\r\n  ['Gather', '', '1+', () => new WebGLGather()],\r\n  ['Gemm', '', '7-10', () => new WebGLGemm(false)],\r\n  ['Gemm', '', '11+', () => new WebGLGemm(true)],\r\n  ['GlobalAveragePool', '', '1+', () => new WebGLGlobalAveragePool()],\r\n  ['GlobalMaxPool', '', '1+', () => new WebGLGlobalMaxPool()],\r\n  ['Greater', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslGreater(), undefined, 'bool')],\r\n  ['Identity', '', '1+', () => new unaryOps.WebGLUnaryOp(NUMBER_TYPES, unaryOps.glslIdentity())],\r\n  ['ImageScaler', '', '1+', () => new WebGLImageScaler()],\r\n  ['InstanceNormalization', '', '6+', () => new WebGLInstanceNormalization()],\r\n  ['LeakyRelu', '', '6+', () => new WebGLLeakyRelu()],\r\n  ['Less', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslLess(), undefined, 'bool')],\r\n  ['Log', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslLog())],\r\n  ['MatMul', '', '1+', () => new WebGLMatMul()],\r\n  ['MaxPool', '', '1-9', () => new WebGLMaxPool()],  // TODO: support new attributes for MaxPool-8 and MaxPool-10\r\n  ['Mul', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslMul())],\r\n  ['Neg', '', '6+', () => new unaryOps.WebGLUnaryOp(NUMBER_TYPES, unaryOps.glslNeg())],\r\n  ['Not', '', '1+', () => new unaryOps.WebGLUnaryOp(['bool'], unaryOps.glslNot())],\r\n  ['Or', '', '7+', () => new binaryOps.WebGLBinaryOp(['bool'], binaryOps.glslOr())],\r\n  ['Pad', '', '2-10', () => new WebGLPad()],\r\n  ['Pow', '', '7+', () => new binaryOps.WebGLBinaryOp(FLOAT_TYPES, binaryOps.glslPow())],\r\n  ['PRelu', '', '7+', () => new binaryOps.WebGLBinaryOp(FLOAT_TYPES, binaryOps.glslPRelu())],\r\n  ['ReduceLogSum', '', '1+', () => new reduceOps.WebGLReduceLogSum()],\r\n  ['ReduceMax', '', '1+', () => new reduceOps.WebGLReduceMax()],\r\n  ['ReduceMean', '', '1+', () => new reduceOps.WebGLReduceMean()],\r\n  ['ReduceMin', '', '1+', () => new reduceOps.WebGLReduceMin()],\r\n  ['ReduceProd', '', '1+', () => new reduceOps.WebGLReduceProd()],\r\n  ['ReduceSum', '', '1+', () => new reduceOps.WebGLReduceSum()],\r\n  ['ReduceSumSquare', '', '1+', () => new reduceOps.WebGLReduceSumSquare()],\r\n  ['Relu', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslRelu())],\r\n  ['Reshape', '', '5+', () => new WebGLReshape()],\r\n  ['Sigmoid', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslSigmoid())],\r\n  ['Sin', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslSin())],\r\n  ['Slice', '', '10+', () => new WebGLSliceV10()],  // TODO: support 'steps' for Slice-10\r\n  ['Slice', '', '1-9', () => new WebGLSlice()],\r\n  ['Softmax', '', '1+', () => new WebGLSoftmax()],\r\n  // 'Split' operator has an optional attribute 'split'\r\n  // this attribute determines how the specified axis of input data\r\n  // is split. When the attribute is missing, we need the count of number of outputs\r\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\r\n  ['Split', '', '2+', (node) => new WebGLSplit(node.outputs.length)],\r\n  ['Sqrt', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslSqrt())],\r\n  ['Squeeze', '', '1+', () => new WebGLSqueeze()],\r\n  ['Sub', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslSub())],\r\n  ['Sum', '', '6+', () => new WebGLSum()],  // TODO: support multidirectional broadcast for Sum-8\r\n  ['Tan', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslTan())],\r\n  ['Tanh', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslTanh())],\r\n  ['Tile', '', '6+', () => new WebGLTile()],\r\n  ['Transpose', '', '1+', () => new WebGLTranspose()],\r\n  ['Upsample', '', '7-8', () => new WebGLUpsample()],\r\n  ['Unsqueeze', '', '1+', () => new WebGLUnsqueeze()],\r\n  ['Xor', '', '7+', () => new binaryOps.WebGLBinaryOp(['bool'], binaryOps.glslXor())],\r\n];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {BatchNormalization} from '../../../ops/batch-normalization';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData} from '../types';\r\n\r\nexport class WebGLBatchNormalization extends BatchNormalization {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputLayouts = inputs.map(t => handler.getOrCreateTextureLayout(t));\r\n    const outputShape = inputs[0].dims.slice();\r\n    const rank = outputShape.length;\r\n    const scale = inputLayouts[1];\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n      float process(int[${rank}] indices) {\r\n        vec2 position = offsetToCoords(indices[1], ${scale.width}, ${scale.height});\r\n        float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\r\n        float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\r\n        float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\r\n        float b = getColorAsFloat(${glsl.texture2D}(B, position));\r\n\r\n        return scale * ( (_A(indices) - mean) / sqrt(variance + float(${this.epsilon})) ) + b;\r\n      }`;\r\n    return {\r\n      inputLayouts,\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A', 'Scale', 'B', 'Mean', 'Variance'],\r\n      shaderSource\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    inputs.slice(1).forEach(t => inputTDs.push(handler.getOrCreateTextureData(t)));\r\n    const outputTD = handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type);\r\n    return {inputTextureDatas: inputTDs, outputTextureData: outputTD, uniformData: {}};\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {BinaryOp} from '../../../ops/binary-op';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\r\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLBinaryOp extends BinaryOp implements WebGLOperator {\r\n  constructor(\r\n      typeConstraint: ReadonlyArray<Tensor.DataType>, protected glslFunc: GlslValueFunction, opType?: string,\r\n      resultType?: Tensor.DataType) {\r\n    super(typeConstraint, opType, resultType);\r\n  }\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputLayouts = inputs.map(t => handler.getOrCreateTextureLayout(t));\r\n    const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\r\n    if (isBroadcast) {\r\n      const outputShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\r\n      if (!outputShape) {\r\n        throw new Error(`Can't perform binary op on the given tensors`);\r\n      }\r\n      const outputRank = outputShape.length;\r\n      const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\r\n      const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\r\n      const aBcast = inputs[0].dims.length !== 0 ? `bcastIndices_A(indices, aindices);` : `aindices[0] = 0;`;\r\n      const bBcast = inputs[1].dims.length !== 0 ? `bcastIndices_B(indices, bindices);` : `bindices[0] = 0;`;\r\n      const shaderSource = `\r\n      ${this.glslFunc.body}\r\n      float process(int indices[${outputRank}]) {\r\n        int aindices[${aRank}];\r\n        int bindices[${bRank}];\r\n        ${aBcast}\r\n        ${bBcast}\r\n        return ${this.glslFunc.name}(_A(aindices), _B(bindices));\r\n    }`;\r\n      return {\r\n        inputLayouts,\r\n        outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n        samplers: ['A', 'B'],\r\n        shaderSource,\r\n      };\r\n    }\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n    ${this.glslFunc.body}\r\n    void main() {\r\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\r\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\r\n      vec4 result = ${this.glslFunc.name}(v1, v2);\r\n      ${glsl.output} = result;\r\n    }\r\n    `;\r\n    return {\r\n      hasMain: true,\r\n      inputLayouts,\r\n      outputLayout: handler.createTextureLayoutFromShape(inputs[0].dims),\r\n      samplers: ['A', 'B'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(\r\n          programInfo.outputLayout, this.resultType ? this.resultType : inputs[0].type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\nexport function glslAdd(): GlslValueFunction {\r\n  const name = `add_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a + b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 + v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslDiv(): GlslValueFunction {\r\n  const name = `div_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a / b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 / v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslMul(): GlslValueFunction {\r\n  const name = `mul_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a * b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 * v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSub(): GlslValueFunction {\r\n  const name = `sub_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a - b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 - v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslEqual(): GlslValueFunction {\r\n  const name = `equal_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a == b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4( v1 == v2 );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslGreater(): GlslValueFunction {\r\n  const name = `greater_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a > b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4( v1.r > v2.r ,\r\n      v1.g > v2.g,\r\n      v1.b > v2.b,\r\n      v1.a > v2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslLess(): GlslValueFunction {\r\n  const name = `less_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a < b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4( v1.r < v2.r ,\r\n                v1.g < v2.g,\r\n                v1.b < v2.b,\r\n                v1.a < v2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslAnd(): GlslValueFunction {\r\n  const name = `and_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) && bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r && b2.r ,\r\n                b1.g && b2.g,\r\n                b1.b && b2.b,\r\n                b1.a && b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslOr(): GlslValueFunction {\r\n  const name = `or_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) || bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r || b2.r ,\r\n                b1.g || b2.g,\r\n                b1.b || b2.b,\r\n                b1.a || b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslXor(): GlslValueFunction {\r\n  const name = `xor_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) ^^ bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r ^^ b2.r ,\r\n                b1.g ^^ b2.g,\r\n                b1.b ^^ b2.b,\r\n                b1.a ^^ b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslPow(): GlslValueFunction {\r\n  return glslBuiltinBinary('pow');\r\n}\r\nexport function glslPRelu(): GlslValueFunction {\r\n  const name = `prelu_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a < 0.0 ? a * b: a;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4(\r\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\r\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\r\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\r\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\r\n      );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n\r\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\r\n  const name = `${fname}_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return ${fname}(a, b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return ${fname}(v1, v2);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Clip} from '../../../ops/clip';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLClip extends Clip implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape = inputs[0].dims.slice();\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n      const float min = float(${this.min});\r\n      const float max = float(${this.max});\r\n      void main() {\r\n        float v = ${glsl.texture2D}(A, TexCoords).r;\r\n        ${glsl.output} = vec4(clamp(v, min, max));\r\n      }\r\n      `;\r\n    return {\r\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n      hasMain: true,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Concat} from '../../../ops/concat';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLConcat extends Concat implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputShape = inputs[0].dims.slice();\r\n    if (this.axis >= inputShape.length || this.axis < (-1 * inputShape.length)) {\r\n      throw new Error(`axis specified for concat doesn't match input dimensionality`);\r\n    }\r\n    if (this.axis < 0) {\r\n      this.axis = inputShape.length + this.axis;\r\n    }\r\n    // ensure all of the non-concatenated axes match each other\r\n    // calculate the shape of the output tensor while we do that\r\n    const outputShape = inputShape.slice(0);\r\n    for (let i = 1; i < inputs.length; i++) {\r\n      const dataNShape = inputs[i].dims.slice();\r\n      for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\r\n        // add to the placeholder for computing output shape\r\n        if (axisIndex === this.axis) {\r\n          outputShape[this.axis] += dataNShape[axisIndex];\r\n        }\r\n        // ensure all non-cancatenated axes match each other\r\n        else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\r\n          throw new Error(`non concat dimensions must match`);\r\n        }\r\n      }\r\n    }\r\n\r\n    const rank = outputShape.length;\r\n\r\n    let getTextureIndexWhereDataResidesMethod = ``;\r\n    // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\r\n    if (inputs.length < 5) {\r\n      getTextureIndexWhereDataResidesMethod = this.getTextureIndexWhereDataResidesLinearSearch(inputs.length);\r\n    } else {\r\n      getTextureIndexWhereDataResidesMethod = this.getTextureIndexWhereDataResidesBinarySearch(inputs.length);\r\n    }\r\n\r\n    const fetchDataFromCorrectTextureMethod = this.fetchDataFromCorrectTextureMethod(inputs.length, rank);\r\n    const getValueFromArrayIndexMethod = this.getValueFromArrayIndexMethod(inputs.length);\r\n    const samplers = inputs.map((v, i) => `X${i}`);\r\n    const shaderSource = `\r\n      ${fetchDataFromCorrectTextureMethod}\r\n      ${getValueFromArrayIndexMethod}\r\n      ${getTextureIndexWhereDataResidesMethod}\r\n      float process(int indices[${rank}]) {\r\n        int textureIndex = getTextureWhereDataResides (indices[${this.axis}]);\r\n\r\n        if(textureIndex != 0) {\r\n          indices[${this.axis}] = indices[${\r\n        this.axis}] - int(getValueFromArrayIndex(sizeInConcatAxis, textureIndex-int(1)));\r\n        }\r\n\r\n        return fetchDataFromCorrectTexture(textureIndex, indices);\r\n      }`;\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers,\r\n      variables: [{name: 'sizeInConcatAxis', type: 'int', arrayLength: inputs.length}],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    const sizeInConcatAxis = new Array<number>(programInfo.inputLayouts.length);\r\n    let previousSum = 0;\r\n    for (let i = 0; i < programInfo.inputLayouts.length; ++i) {\r\n      previousSum += programInfo.inputLayouts[i].shape[this.axis];\r\n      sizeInConcatAxis[i] = previousSum;\r\n    }\r\n    const uniformData = {'sizeInConcatAxis': sizeInConcatAxis};\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData\r\n    };\r\n  }\r\n  private getTextureIndexWhereDataResidesLinearSearch(numberOfTensors: number): string {\r\n    return `int getTextureWhereDataResides(int index) {\r\n      for(int i=0; i<${numberOfTensors}; i++) {\r\n          if(index < int(sizeInConcatAxis[i])){\r\n              return i;\r\n          }\r\n        }\r\n      }`;\r\n  }\r\n\r\n  // TODO: Implement BinarySearch in GLSL\r\n  private getTextureIndexWhereDataResidesBinarySearch(numberOfTensors: number): string {\r\n    return this.getTextureIndexWhereDataResidesLinearSearch(numberOfTensors);\r\n  }\r\n\r\n  private fetchDataFromCorrectTextureMethod(numberOfTensors: number, tensorRank: number) {\r\n    const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\r\n    for (let i = 0; i < numberOfTensors; ++i) {\r\n      if (i === 0) {\r\n        codeLines.push(\r\n            `\\t` +\r\n            `if (textureIndex == ${i}) { return _X${i}(indices); }`);\r\n      } else if (i === numberOfTensors - 1) {\r\n        codeLines.push(\r\n            `\\t` +\r\n            `else { return _X${i}(indices); }`);\r\n      } else {\r\n        codeLines.push(\r\n            `\\t` +\r\n            `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\r\n      }\r\n    }\r\n    codeLines.push(\r\n        `\\t` +\r\n        `}`);\r\n    return codeLines.join('\\n');\r\n  }\r\n\r\n  private getValueFromArrayIndexMethod(arrayRank: number): string {\r\n    const codeLines: string[] = [`int getValueFromArrayIndex(int arr[${arrayRank}], int index) {`];\r\n    for (let i = 0; i < arrayRank; ++i) {\r\n      if (i === 0) {\r\n        codeLines.push(\r\n            `\\t` +\r\n            `if (index == ${i}) { return arr[${i}]; }`);\r\n      } else if (i === arrayRank - 1) {\r\n        codeLines.push(\r\n            `\\t` +\r\n            `else { return arr[${i}]; }`);\r\n      } else {\r\n        codeLines.push(\r\n            `\\t` +\r\n            `else if (index == ${i}) { return arr[${i}]; }`);\r\n      }\r\n    }\r\n    codeLines.push(\r\n        `\\t` +\r\n        `}`);\r\n\r\n    return codeLines.join('\\n');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Logger} from '../../../instrument';\r\nimport {Conv} from '../../../ops/conv';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {Artifact, ProgramInfo, RunData, TextureLayout} from '../types';\r\nimport {WebGLContext} from '../webgl-context';\r\n\r\nexport class WebGLConv extends Conv {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const programManager = inferenceHandler.session.programManager;\r\n    if (!this.artifacts) {\r\n      this.artifacts = [];\r\n      const programInfos = this.createProgramInfos(inferenceHandler, inputs);\r\n      for (let i = 0; i < programInfos.length; ++i) {\r\n        const artifact = inferenceHandler.session.programManager.build(programInfos[i]);\r\n        this.artifacts.push(artifact);\r\n      }\r\n    }\r\n    const runDatas = this.createRunDatas(inferenceHandler, this.artifacts.map(a => a.programInfo), inputs);\r\n    programManager.run(this.artifacts[0], runDatas[0]);\r\n    programManager.run(this.artifacts[1], runDatas[1]);\r\n    return [runDatas[1].outputTextureData.tensor];\r\n  }\r\n  createProgramInfos(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo[] {\r\n    const xshape = inputs[0].dims.slice();\r\n    const kshape = inputs[1].dims.slice();\r\n    // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\r\n    if (this.kernelShape.length === 0) {\r\n      const wDims = inputs[1].dims;\r\n      for (let i = 2; i < wDims.length; ++i) {\r\n        this.kernelShape.push(wDims[i]);\r\n      }\r\n    }\r\n    PoolConvUtil.adjustPadsBasedOnAutoPad(\r\n        inputs[0].dims, this.strides, this.dilations, this.kernelShape, this.pads, this.autoPad);\r\n    Logger.verbose(\r\n        'Conv',\r\n        `autpPad:${this.autoPad}, dilations:${this.dilations}, group:${this.group}, kernelShape:${\r\n            this.kernelShape}, pads:${this.pads}, strides:${this.strides}`);\r\n    const outputShape = WebGLConv.calcOutputShape(xshape, kshape, this.dilations, this.pads, this.strides);\r\n    const im2colProgramInfo = this.createIm2ColProgramInfo(inferenceHandler, inputs, outputShape);\r\n    const dotProductProgramInfo =\r\n        this.createDotProductProgramInfo(inferenceHandler, im2colProgramInfo.outputLayout, inputs, outputShape);\r\n    return [im2colProgramInfo, dotProductProgramInfo];\r\n  }\r\n  createRunDatas(inferenceHandler: WebGLInferenceHandler, programInfos: ProgramInfo[], inputs: Tensor[]): RunData[] {\r\n    const k = inputs[1];\r\n    const b = inputs.length >= 3 ? inputs[2] : undefined;\r\n    let kTD = inferenceHandler.getTextureData(k.dataId);\r\n    if (!kTD) {\r\n      Logger.verbose('Conv', 'Did not find the adjustedKernel texture in the cache. Creating rew.');\r\n      const newKernelData =\r\n          WebGLConv.prepKernelForDotProduct(k.dims.slice(), this.group, 4, k.floatData as Float32Array);\r\n      // hack: should use graph transformer to rewrite initializer K\r\n      kTD = inferenceHandler.createTextureDataFromLayoutBindTensor(\r\n          programInfos[1].inputLayouts[1], k.type, newKernelData, k);\r\n    }\r\n    const runtDataIm2Col = {\r\n      inputTextureDatas: [inferenceHandler.getOrCreateTextureData(inputs[0])],\r\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[0].outputLayout, inputs[0].type),\r\n      uniformData: {}\r\n    };\r\n    const inputTDs = [runtDataIm2Col.outputTextureData, kTD];\r\n    if (b) {\r\n      inputTDs.push(inferenceHandler.getOrCreateTextureData(b));\r\n    }\r\n    const outputTD = inferenceHandler.createTextureDataFromLayout(programInfos[1].outputLayout, inputs[0].type);\r\n    const runDataDotProduct = {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: outputTD,\r\n      uniformData: {},\r\n      draw: (glContext: WebGLContext, artifact: Artifact) => {\r\n        const gl = glContext.gl;\r\n        const sharedDim = artifact.programInfo.params!.sharedDim as number;\r\n        const sharedDimReadSize = artifact.programInfo.params!.sharedDimReadSize as number;\r\n        const sharedDimOffsetLocation = artifact.uniformLocations.find(l => l.name === 'sharedDimOffset')!.location;\r\n        let blend = false;\r\n        for (let k = 0; k < sharedDim; k += sharedDimReadSize) {\r\n          Logger.verbose('MatMul2D', `k = ${k}, sharedDim: ${sharedDim}, readSize = ${sharedDimReadSize}`);\r\n\r\n          if (k === sharedDimReadSize) {\r\n            blend = true;\r\n            gl.enable(gl.BLEND);\r\n            glContext.checkError();\r\n            gl.blendEquation(gl.FUNC_ADD);\r\n            glContext.checkError();\r\n            gl.blendFunc(gl.ONE, gl.ONE);\r\n            glContext.checkError();\r\n          }\r\n\r\n          gl.uniform1i(sharedDimOffsetLocation, k);\r\n          glContext.checkError();\r\n          glContext.draw();\r\n        }\r\n\r\n        if (blend) {\r\n          gl.disable(gl.BLEND);\r\n          glContext.checkError();\r\n        }\r\n      }\r\n    };\r\n    return [runtDataIm2Col, runDataDotProduct];\r\n  }\r\n  createIm2ColProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], outputShape: number[]):\r\n      ProgramInfo {\r\n    const xshape = inputs[0].dims.slice();\r\n    const kshape = inputs[1].dims.slice();\r\n\r\n    const rank = outputShape.length;\r\n    const im2colDims = WebGLConv.calcIm2ColDims(xshape, kshape, outputShape, 4);\r\n    const outputLayout = inferenceHandler.createTextureLayoutFromShape(\r\n        im2colDims, 4, [im2colDims[0], im2colDims[1], im2colDims[2], im2colDims[3] * 4], {breakAxis: 3});\r\n    const shaderSource = `\r\n      const int XC = ${xshape[1]};\r\n      const int XH = ${xshape[2]};\r\n      const int XW = ${xshape[3]};\r\n      const int KH = ${this.kernelShape[0]};\r\n      const int KW = ${this.kernelShape[1]};\r\n      const int dilationH = ${this.dilations[0]};\r\n      const int dilationW = ${this.dilations[1]};\r\n      const int strideH = ${this.strides[0]};\r\n      const int strideW = ${this.strides[1]};\r\n      const int padH = ${this.pads[0]};\r\n      const int padW = ${this.pads[1]};\r\n      const int KHKW = KH*KW;\r\n      const int XCKHKW = XC * KHKW;\r\n      const int outputChannels = 4;\r\n\r\n      vec4 process(int indices[${rank}]) {\r\n        int b  = indices[0]; // batch size\r\n        int oh = indices[1] * strideH - padH; //output height\r\n        int ow = indices[2] * strideW - padW; //output width\r\n        int p = indices[3] * outputChannels; //patch\r\n        vec4 v = vec4(0.0);\r\n        for(int i=0; i < outputChannels; ++i) {\r\n          if(p < XCKHKW) {\r\n            int patchC = p / KHKW;\r\n            int patchH = (p - patchC*KHKW) / KW;\r\n            int patchW = (p - patchC*KHKW) - patchH * KW;\r\n            int xh2 = oh + patchH * dilationH;\r\n            int xw2 = ow + patchW * dilationW;\r\n            int x[${xshape.length}];\r\n            x[0] = b;\r\n            x[1] = patchC;\r\n            x[2] = xh2;\r\n            x[3] = xw2;\r\n            if(xh2 >= 0 &&\r\n                xh2 < XH &&\r\n                xw2 >= 0 &&\r\n                xw2 < XW) {\r\n              v[i] = _X(x);\r\n            }\r\n          }\r\n          ++p;\r\n        }\r\n        return v;\r\n      }\r\n      `;\r\n    return {\r\n      inputLayouts: [inferenceHandler.createTextureLayoutFromShape(xshape)],\r\n      outputLayout,\r\n      samplers: ['X'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createDotProductProgramInfo(\r\n      inferenceHandler: WebGLInferenceHandler, im2colLayout: TextureLayout, inputs: Tensor[],\r\n      outputShape: number[]): ProgramInfo {\r\n    const xshape = inputs[0].dims.slice();\r\n    const kshape = inputs[1].dims.slice();\r\n    const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\r\n    const kLayout = inferenceHandler.createTextureLayoutFromShape(\r\n        adjustedKernelShape, 4, [adjustedKernelShape[0], adjustedKernelShape[1] * 4], {breakAxis: 1});\r\n\r\n    let bLayout: TextureLayout|undefined;\r\n    const rank = outputShape.length;\r\n\r\n    const inputLayouts = [im2colLayout, kLayout];\r\n    if (inputs.length === 3) {\r\n      bLayout = inferenceHandler.createTextureLayoutFromShape(inputs[2].dims.slice());\r\n      inputLayouts.push(bLayout);\r\n    }\r\n    const outputLayout = inferenceHandler.createTextureLayoutFromShape(outputShape);\r\n    const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\r\n    const sharedDim = im2colLayout.shape[3];\r\n    const blendEnabled = inferenceHandler.session.backend.glContext.isBlendSupported;\r\n    const sharedDimReadSize = blendEnabled && inferenceHandler.session.backend.matmulMaxBatchSize ?\r\n        this.calcSharedDimReadSize(inferenceHandler.session.backend.matmulMaxBatchSize, sharedDim) :\r\n        sharedDim;\r\n    const samplers = ['Im2Col', 'K'];\r\n    if (inputs.length === 3) {\r\n      samplers.push('B');\r\n    }\r\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n    float process(int indices[${rank}]) {\r\n      int b[1];\r\n      b[0] = indices[1];\r\n      int im2col[${im2colLayout.shape.length}];\r\n      im2col[0] = indices[0];\r\n      im2col[1] = indices[2];\r\n      im2col[2] = indices[3];\r\n      int im2colOffset = im2col[0] * ${im2colLayout.strides[0]} + im2col[1] * ${\r\n        im2colLayout.strides[1]} + im2col[2] * ${im2colLayout.strides[2]} + sharedDimOffset;\r\n      int kernelOffset = indices[1] * ${kLayout.strides[0]} + sharedDimOffset;\r\n      float sum = sharedDimOffset == 0 ? ${initValue} : 0.0;\r\n      for (int i = 0; i < ${sharedDimReadSize}; ++i) {\r\n        vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colLayout.width}, ${im2colLayout.height});\r\n        vec2 kernelCoords = offsetToCoords(kernelOffset, ${kLayout.width}, ${kLayout.height});\r\n        sum += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\r\n        ++im2colOffset;\r\n        ++kernelOffset;\r\n      }\r\n      return sum;\r\n    }`;\r\n    return {\r\n      inputLayouts: inputs.length === 3 ? [im2colLayout, kLayout, bLayout!] : [im2colLayout, kLayout],\r\n      outputLayout,\r\n      shaderSource,\r\n      samplers,\r\n      variables: [{name: 'sharedDimOffset', type: 'int'}],\r\n      params: {'sharedDim': sharedDim, 'sharedDimReadSize': sharedDimReadSize}\r\n    };\r\n  }\r\n  static prepKernelForDotProduct(shape: number[], group: number, channels: number, kernel: Float32Array): Float32Array {\r\n    if (group === 1 && (channels === 1 || (shape[2] * shape[3]) % channels === 0)) {\r\n      return kernel;\r\n    }\r\n    const numFeatureMaps = shape[0];\r\n    const oldRowSize = shape[1] * shape[2] * shape[3];\r\n    const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\r\n    const newSize = numFeatureMaps * newRowSize;\r\n    const buffer = new Float32Array(newSize);\r\n    for (let f = 0; f < numFeatureMaps; ++f) {\r\n      const oldOffset = f * oldRowSize;\r\n      const newOffset = f * newRowSize + f % group * oldRowSize;\r\n      buffer.set(kernel.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\r\n    }\r\n    return buffer;\r\n  }\r\n  static calcIm2ColDims(inputShape: number[], kernelShape: number[], outputShape: number[], channels = 1): number[] {\r\n    return [\r\n      outputShape[0], outputShape[2], outputShape[3],\r\n      Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)\r\n    ];\r\n  }\r\n  static calcOutputShape(\r\n      inputShape: number[], kernelShape: number[], dilations: number[], adjustPads: number[],\r\n      strides: number[]): number[] {\r\n    const batchSize = inputShape[0];\r\n    const inputSpatialShape = inputShape.slice(2);\r\n    const spatialRank = inputSpatialShape.length;\r\n    const outChannels = kernelShape[0];\r\n    const kernelSpatialShape = kernelShape.slice(2);\r\n    const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\r\n    const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\r\n    const outputSpatialShape =\r\n        inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\r\n    const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\r\n    return outputShape;\r\n  }\r\n  protected calcSharedDimReadSize(preferredBatchSize: number, sharedDim: number): number {\r\n    if (preferredBatchSize <= 0 || sharedDim < preferredBatchSize || sharedDim % preferredBatchSize !== 0) {\r\n      return sharedDim;\r\n    }\r\n    return preferredBatchSize;\r\n  }\r\n  protected calcBlockSize(outputLayout: TextureLayout): [number, number]|undefined {\r\n    const preferredRowCount = 64;\r\n    const preferredColCount = 64;\r\n    if (outputLayout.height < preferredRowCount) {\r\n      return undefined;\r\n    }\r\n    return [preferredColCount, preferredRowCount];\r\n  }\r\n  protected artifacts: Artifact[];\r\n  protected readSize = 8;\r\n  protected blockSize = 64;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Dropout} from '../../../ops/dropout';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLDropout extends Dropout implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    if (this.testMode) {\r\n      return [inputs[0]];\r\n    }\r\n    throw new Error(`Non test mode Dropout is not implemented yet`);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    throw new Error(`Non test mode Dropout is not implemented yet`);\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    throw new Error(`Non test mode Dropout is not implemented yet`);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Elu} from '../../../ops/elu';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLElu extends Elu implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape = inputs[0].dims.slice();\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n      void main() {\r\n        float v = ${glsl.texture2D}(A, TexCoords).r;\r\n        ${glsl.output} = vec4(v >= 0.0 ? v: (exp(v) - 1.0) * ${this.alpha.toExponential()}); /* float number format */\r\n      }\r\n      `;\r\n    return {\r\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n      hasMain: true,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Elu implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.alpha = attributes.getFloat('alpha', 1.0);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected alpha: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Flatten} from '../../../ops/flatten';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nimport {reshape} from './reshape';\r\n\r\nexport class WebGLFlatten extends Flatten {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const outputDims = ShapeUtil.flattenShape(inputs[0].dims, this.axis);\r\n\r\n    return [reshape(inferenceHandler, inputs[0], outputDims)];\r\n  }\r\n}\r\n","// Licensed under the MIT license.\r\n\r\nimport {Gather} from '../../../ops/gather';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLGather extends Gather implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputShape = inputs[0].dims.slice();\r\n    const indexDataShape = inputs[1].dims.slice();\r\n    const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\r\n\r\n    const axis = ShapeUtil.normalizeAxis(this.axis, inputShape.length);\r\n    const indexCopyOps: string[] = [];\r\n    for (let i = 0; i < outputShape.length; i++) {\r\n      // outputShape is divided into three parts: A, B, C\r\n      // |0        axis|  axis + indexDataShape.length |          end|\r\n      // |     A       |             B                 |      C      |\r\n      //\r\n      // inputIdx: [A, inputs[1][B], C]\r\n      if (i < axis) {  // A\r\n        outputShape[i] = inputShape[i];\r\n        indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\r\n      } else {\r\n        if (i < axis + indexDataShape.length) {  // B\r\n          outputShape[i] = indexDataShape[i - axis];\r\n          indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\r\n        } else {                                                       // C\r\n          outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\r\n          indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\r\n        }\r\n      }\r\n    }\r\n\r\n    const orank = outputShape.length || 1;\r\n    const irank = inputShape.length;\r\n    const iDrank = indexDataShape.length || 1;\r\n    const shaderSource = `\r\n      float process(int outputIdx[${orank}]) {\r\n        int inputIdx[${irank}];\r\n        int indexDataIdx[${iDrank}];\r\n        indexDataIdx[0] = 0;\r\n        ${indexCopyOps.join('\\n        ')}\r\n        int idx = int(_B(indexDataIdx));\r\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\r\n        return _A(inputIdx);\r\n      }`;\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A', 'B'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Gemm} from '../../../ops/gemm';\r\nimport {Tensor} from '../../../tensor';\r\nimport {GemmUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLGemm extends Gemm implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const aShape = inputs[0].dims.slice();\r\n    const bShape = inputs[1].dims.slice();\r\n    const [M, N] = GemmUtil.getShapeOfGemmResult(\r\n        aShape, this.transA, bShape, this.transB, inputs.length === 3 ? inputs[2].dims : undefined);\r\n    const oShape = [M, N];\r\n    if (!oShape) {\r\n      throw new Error('Can\\'t use gemm on the given tensors');\r\n    }\r\n    let sharedDim = aShape[aShape.length - 1];\r\n    let line = '';\r\n    if (this.transA) {\r\n      sharedDim = aShape[0];\r\n    }\r\n    if (this.transA && this.transB) {\r\n      line = `value += _A_T(a) * _B_T(b);`;\r\n    } else if (this.transA && !this.transB) {\r\n      line = `value += _A_T(a) * _B(b);`;\r\n    } else if (!this.transA && this.transB) {\r\n      line = `value += _A(a) * _B_T(b);`;\r\n    } else if (!this.transA && !this.transB) {\r\n      line = `value += _A(a) * _B(b);`;\r\n    }\r\n    const rank = oShape.length;\r\n    const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\r\n    const broadcastC = inputs.length === 3 ? `bcastIndices_C(indices, c);` : '';\r\n    const calculateC = inputs.length === 3 ? `value += beta * _C(c);` : '';\r\n    const shaderSource = `\r\n      float process(int indices[${rank}]) {\r\n          int a[${rank}];\r\n          int b[${rank}];\r\n          ${declareC}\r\n\r\n          copyVec(indices, a);\r\n          copyVec(indices, b);\r\n          ${broadcastC}\r\n\r\n          float value = 0.0;\r\n          for (int k=0; k<${sharedDim}; ++k) {\r\n              a[${rank - 1}] = k;\r\n              b[${rank - 2}] = k;\r\n              ${line}\r\n          }\r\n\r\n          value = value * alpha;\r\n          ${calculateC}\r\n          return value;\r\n      }`;\r\n    const inputLayouts = inputs.map(t => inferenceHandler.getOrCreateTextureLayout(t));\r\n    return {\r\n      inputLayouts,\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(oShape),\r\n      samplers: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\r\n      variables: [{name: 'alpha', type: 'float'}, {name: 'beta', type: 'float'}],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => inferenceHandler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {'alpha': this.alpha, 'beta': this.beta}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {ImageScaler} from '../../../ops/image-scaler';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLImageScaler extends ImageScaler implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape = inputs[0].dims.slice();\r\n    const rank = outputShape.length;\r\n    const getBiasMethod = this.createGetBiasMethod(this.bias.length);\r\n    const shaderSource = `\r\n      ${getBiasMethod}\r\n      float process(int indices[${rank}]) {\r\n        return _X(indices) * scale + getBias(bias, indices[1]);\r\n      }`;\r\n    return {\r\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['X'],\r\n      variables: [{name: 'bias', type: 'float', arrayLength: this.bias.length}, {name: 'scale', type: 'float'}],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {'bias': this.bias, 'scale': this.scale}\r\n    };\r\n  }\r\n  private createGetBiasMethod(numChannels: number): string {\r\n    const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\r\n    for (let i = 0; i < numChannels; ++i) {\r\n      if (i === 0) {\r\n        codeLines.push(\r\n            `\\t` +\r\n            `if (channel == ${i}) { return bias[${i}]; }`);\r\n      } else if (i === numChannels - 1) {\r\n        codeLines.push(\r\n            `\\t` +\r\n            `else { return bias[${i}]; }`);\r\n      } else {\r\n        codeLines.push(\r\n            `\\t` +\r\n            `else if (channel == ${i}) { return bias[${i}]; }`);\r\n      }\r\n    }\r\n    codeLines.push(\r\n        `\\t` +\r\n        `}`);\r\n    return codeLines.join('\\n');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {InstanceNormalization} from '../../../ops/instance-normalization';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {Artifact, ProgramInfo, RunData, TextureLayout} from '../types';\r\n\r\nexport class WebGLInstanceNormalization extends InstanceNormalization {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    if (!this.artifacts) {\r\n      this.artifacts = [];\r\n      const programInfos = this.createProgramInfos(inferenceHandler, inputs);\r\n      programInfos.forEach((pi, i) => {\r\n        const artifact = inferenceHandler.session.programManager.build(pi);\r\n        this.artifacts.push(artifact);\r\n      });\r\n    }\r\n\r\n    const runDatas = this.createRunDatas(inferenceHandler, this.artifacts.map(a => a.programInfo), inputs);\r\n    runDatas.forEach((v, i) => inferenceHandler.session.programManager.run(this.artifacts[i], v));\r\n    return [runDatas[1].outputTextureData.tensor];\r\n  }\r\n\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (!super.checkInputTypes(inputs)) {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[0].dims.length !== 4) {\r\n      // currently webgl implementation only support 4-D input.\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  createMeanAndVarianceProgramInfo(inferenceHandler: WebGLInferenceHandler, xLayout: TextureLayout): ProgramInfo {\r\n    const xDims = xLayout.shape;\r\n    const channel = xDims[1];\r\n    const channelSize = xDims[2] * xDims[3];\r\n    const outputShape = [xDims[0], channel];\r\n    const outputUnpackedShape = [xDims[0], channel * 4];\r\n\r\n    const shaderSource = `\r\n    vec4 process(int[2] indices) {\r\n      vec4 v = vec4(0.0);\r\n      int a[4];\r\n      a[0] = indices[0];\r\n      a[1] = indices[1];\r\n      float temp = 0.0;\r\n      for(int a2=0; a2<${xDims[2]}; a2++) {\r\n        a[2] = a2;\r\n        for(int a3=0; a3<${xDims[3]}; a3++) {\r\n          a[3] = a3;\r\n          float x = _X(a);\r\n          temp += x;\r\n        }\r\n      }\r\n      float mean = temp / float(${channelSize});\r\n      temp = 0.0;\r\n      for(int a2=0; a2<${xDims[2]}; a2++) {\r\n        a[2] = a2;\r\n        for(int a3=0; a3<${xDims[3]}; a3++) {\r\n          a[3] = a3;\r\n          float x = _X(a);\r\n          temp += (x - mean) * (x - mean);\r\n        }\r\n      }\r\n      v.r = mean;\r\n      v.g = temp / float(${channelSize});\r\n\r\n      return v;\r\n    }`;\r\n    return {\r\n      inputLayouts: [xLayout],\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape, 4, outputUnpackedShape),\r\n      samplers: ['X'],\r\n      shaderSource,\r\n    };\r\n  }\r\n\r\n  createComputOutputProgramInfo(\r\n      inferenceHandler: WebGLInferenceHandler, xLayout: TextureLayout, scaleLayout: TextureLayout,\r\n      bLayout: TextureLayout, meanAndVarianceLayout: TextureLayout): ProgramInfo {\r\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n    vec4 getMeanAndVariance(int[2] mv) {\r\n      int offset = indicesToOffset_MeanAndVariance(mv);\r\n      vec2 coords = offsetToCoords(offset, ${meanAndVarianceLayout.width}, ${meanAndVarianceLayout.height});\r\n      return ${glsl.texture2D}(MeanAndVariance, coords);\r\n    }\r\n\r\n    float process(int[4] indices) {\r\n\r\n          int mv[2];\r\n          mv[0] = indices[0];\r\n          mv[1] = indices[1];\r\n          vec4 mean_and_variance = getMeanAndVariance(mv);\r\n          float mean = mean_and_variance.r;\r\n          float variance = mean_and_variance.g;\r\n\r\n          int sb[1];\r\n          sb[0] = indices[1];\r\n          float scale = _Scale(sb);\r\n          float b = _B(sb);\r\n\r\n          return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\r\n        }`;\r\n    return {\r\n      inputLayouts: [xLayout, meanAndVarianceLayout, scaleLayout, bLayout],\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(xLayout.shape),\r\n      samplers: ['X', 'MeanAndVariance', 'Scale', 'B'],\r\n      variables: [{name: 'epsilon', type: 'float'}],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createProgramInfos(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo[] {\r\n    const xLayout = inferenceHandler.getOrCreateTextureLayout(inputs[0]);\r\n    const scaleLayout = inferenceHandler.getOrCreateTextureLayout(inputs[1]);\r\n    const bLayout = inferenceHandler.getOrCreateTextureLayout(inputs[2]);\r\n    const meanAndVarianceProgramInfo = this.createMeanAndVarianceProgramInfo(inferenceHandler, xLayout);\r\n    const computeOutputProgramInfo = this.createComputOutputProgramInfo(\r\n        inferenceHandler, xLayout, scaleLayout, bLayout, meanAndVarianceProgramInfo.outputLayout);\r\n\r\n    const programInfos: ProgramInfo[] = [meanAndVarianceProgramInfo, computeOutputProgramInfo];\r\n    return programInfos;\r\n  }\r\n  createRunDatas(inferenceHandler: WebGLInferenceHandler, programInfos: ProgramInfo[], inputs: Tensor[]): RunData[] {\r\n    const dataType = inputs[0].type;\r\n    const inputTD = inferenceHandler.getOrCreateTextureData(inputs[0], programInfos[0].inputLayouts[0]);\r\n    const scaleTD = inferenceHandler.getOrCreateTextureData(inputs[1], programInfos[1].inputLayouts[2]);\r\n    const bTD = inferenceHandler.getOrCreateTextureData(inputs[2], programInfos[1].inputLayouts[3]);\r\n    const runDatas: RunData[] = [];\r\n    runDatas.push({\r\n      inputTextureDatas: [inputTD],\r\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[0].outputLayout, dataType),\r\n      uniformData: {}\r\n    });\r\n    runDatas.push({\r\n      inputTextureDatas: [inputTD, runDatas[0].outputTextureData, scaleTD, bTD],\r\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[1].outputLayout, dataType),\r\n      uniformData: {'epsilon': this.epsilon}\r\n    });\r\n    return runDatas;\r\n  }\r\n  protected artifacts: Artifact[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {LeakyRelu} from '../../../ops/leaky-relu';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLLeakyRelu extends LeakyRelu implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape = inputs[0].dims.slice();\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n      void main() {\r\n        float v = ${glsl.texture2D}(A, TexCoords).r;\r\n        ${glsl.output} = vec4(v < 0.0 ? v * float(${this.alpha}) : v);\r\n      }\r\n      `;\r\n    return {\r\n      hasMain: true,\r\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class LeakyRelu implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.alpha = attributes.getFloat('alpha', 0.01);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected alpha: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {MatMul} from '../../../ops/matmul';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLMatMul extends MatMul implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const aShape = inputs[0].dims;\r\n    const bShape = inputs[1].dims;\r\n    const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\r\n    if (!outputShape) {\r\n      throw new Error('Can\\'t use matmul on the given tensors');\r\n    }\r\n    const rank = outputShape.length;\r\n    const arank = aShape.length;\r\n    const brank = bShape.length;\r\n    const sharedDim = aShape[aShape.length - 1];\r\n    const shaderSource = `\r\n      float process(int indices[${rank}]) {\r\n          int a[${arank}];\r\n          int b[${brank}];\r\n          bcastMatmulIndices_A(indices, a);\r\n          bcastMatmulIndices_B(indices, b);\r\n\r\n          float value;\r\n          for (int k=0; k<${sharedDim}; ++k) {\r\n              a[${arank - 1}] = k;\r\n              b[${brank - 2}] = k;\r\n              value += _A(a) * _B(b);\r\n          }\r\n          return value;\r\n      }`;\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A', 'B'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Pad} from '../../../ops/pad';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl, Glsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, TextureLayout, WebGLOperator} from '../types';\r\n\r\nexport class WebGLPad extends Pad implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape = ShapeUtil.padShape(inputs[0].dims.slice(), this.pads);\r\n    const rank = outputShape.length;\r\n    const alayout = inferenceHandler.getOrCreateTextureLayout(inputs[0]);\r\n    const padFunction = getPadFunction(\r\n        getGlsl(inferenceHandler.session.backend.glContext.version), 'A', alayout, this.mode, this.pads, this.value);\r\n    const shaderSource = `\r\n      ${padFunction}\r\n      float process(int[${rank}] indices) {\r\n          return padA(indices);\r\n      }`;\r\n    return {\r\n      inputLayouts: [alayout],\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\nexport function getPadFunction(\r\n    glsl: Glsl, name: string, inputLayout: TextureLayout, mode: string, pads: number[], value: number): string {\r\n  switch (mode) {\r\n    case 'constant':\r\n      return getPadConstant(\r\n          glsl, name, inputLayout.shape, inputLayout.strides, inputLayout.width, inputLayout.height, pads, value);\r\n    case 'reflect':\r\n      return getPadReflect(\r\n          glsl, name, inputLayout.shape, inputLayout.strides, inputLayout.width, inputLayout.height, pads);\r\n    case 'edge':\r\n      return getPadEdge(\r\n          glsl, name, inputLayout.shape, inputLayout.strides, inputLayout.width, inputLayout.height, pads);\r\n    default:\r\n      throw new Error('Invalid mode');\r\n  }\r\n}\r\nfunction getPadConstant(\r\n    glsl: Glsl, name: string, shape: ReadonlyArray<number>, strides: ReadonlyArray<number>, width: number,\r\n    height: number, pads: number[], value: number) {\r\n  const rank = shape.length;\r\n  let block = '';\r\n  for (let i = rank - 1; i >= 0; --i) {\r\n    block += `\r\n          k = m[${i}] - ${pads[i]};\r\n          if (k < 0)  return constant;\r\n          if (k >= ${shape[i]}) return constant;\r\n          offset += k * ${strides[i]};\r\n          `;\r\n  }\r\n  return `\r\n        float pad${name}(int m[${rank}]) {\r\n          const float constant = float(${value});\r\n          int offset = 0;\r\n          int k = 0;\r\n          ${block}\r\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n          float value = getColorAsFloat(${glsl.texture2D}(${name}, coords));\r\n          return value;\r\n        }\r\n        `;\r\n}\r\nfunction getPadReflect(\r\n    glsl: Glsl, name: string, shape: ReadonlyArray<number>, strides: ReadonlyArray<number>, width: number,\r\n    height: number, pads: number[]) {\r\n  const rank = shape.length;\r\n\r\n  let block = '';\r\n  for (let i = rank - 1; i >= 0; --i) {\r\n    block += `\r\n        k = m[${i}] - ${pads[i]};\r\n        if (k < 0) { k = -k; }\r\n        {\r\n          const int _2n_1 = ${2 * (shape[i] - 1)};\r\n          k = int( mod( float(k), float(_2n_1) ) ) ;\r\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\r\n        }\r\n        offset += k * ${strides[i]};\r\n        `;\r\n  }\r\n  return `\r\n      float pad${name}(int m[${rank}]) {\r\n        int offset = 0;\r\n        int k = 0;\r\n        ${block}\r\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n        float value = getColorAsFloat(${glsl.texture2D}(${name}, coords));\r\n        return value;\r\n      }\r\n      `;\r\n}\r\nfunction getPadEdge(\r\n    glsl: Glsl, name: string, shape: ReadonlyArray<number>, strides: ReadonlyArray<number>, width: number,\r\n    height: number, pads: number[]) {\r\n  const rank = shape.length;\r\n\r\n  let block = '';\r\n  for (let i = rank - 1; i >= 0; --i) {\r\n    block += `\r\n      k = m[${i}] - ${pads[i]};\r\n      if (k < 0)  k = 0;\r\n      if (k >= ${shape[i]}) k = ${shape[i] - 1};\r\n      offset += k * ${strides[i]};\r\n      `;\r\n  }\r\n  return `\r\n    float pad${name}(int m[${rank}]) {\r\n      int offset = 0;\r\n      int k = 0;\r\n      ${block}\r\n      vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n      float value = getColorAsFloat(${glsl.texture2D}(${name}, coords));\r\n      return value;\r\n    }\r\n    `;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {AveragePool, GlobalAveragePool, GlobalMaxPool, MaxPool} from '../../../ops/pool';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, TextureLayout, WebGLOperator} from '../types';\r\n\r\nexport class WebGLGlobalAveragePool extends GlobalAveragePool implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    return createAveragePoolProgramInfo(\r\n        inferenceHandler, inputs, true, this.kernelShape, this.autoPad, this.strides, this.pads, this.countIncludePad);\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\nexport class WebGLAveragePool extends AveragePool implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    return createAveragePoolProgramInfo(\r\n        inferenceHandler, inputs, false, this.kernelShape, this.autoPad, this.strides, this.pads, this.countIncludePad);\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\nfunction createAveragePoolProgramInfo(\r\n    inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], isGlobalOperator: boolean, kernelShape: number[] = [],\r\n    autoPad = '', strides: number[] = [], pads: number[] = [], countIncludePad: boolean): ProgramInfo {\r\n  const inputShape = inputs[0].dims.slice();\r\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, pads);\r\n  const outputShape =\r\n      PoolConvUtil.computePoolOutputShape(isGlobalOperator, inputShape, strides, kernelShape, pads, autoPad);\r\n  const kernelSize = ShapeUtil.size(kernelShape);\r\n  const op1 = `value += _X(x);`;\r\n  let op2 = ``;\r\n  if (countIncludePad) {\r\n    op2 += `value /= float(${kernelSize});`;\r\n  } else {\r\n    op2 += `value /= float(${kernelSize} - pad);`;\r\n  }\r\n  const inputLayout = inferenceHandler.getOrCreateTextureLayout(inputs[0]);\r\n  const poolingCode = GeneratePoolingCode(inputLayout, kernelShape, pads, strides, op1, op2, '0.0');\r\n  const shaderSource = `\r\n      ${poolingCode}\r\n    `;\r\n  return {\r\n    inputLayouts: [inputLayout],\r\n    outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n    samplers: ['X'],\r\n    shaderSource,\r\n  };\r\n}\r\n\r\nexport class WebGLGlobalMaxPool extends GlobalMaxPool implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    return createMaxPoolProgramInfo(\r\n        inferenceHandler, inputs, true, this.kernelShape, this.autoPad, this.strides, this.pads);\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\nexport class WebGLMaxPool extends MaxPool implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    return createMaxPoolProgramInfo(\r\n        inferenceHandler, inputs, false, this.kernelShape, this.autoPad, this.strides, this.pads);\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\nfunction createMaxPoolProgramInfo(\r\n    inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], isGlobalOperator: boolean, kernelShape: number[] = [],\r\n    autoPad = '', strides: number[] = [], pads: number[] = []): ProgramInfo {\r\n  const inputShape = inputs[0].dims.slice();\r\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, pads);\r\n  const outputShape =\r\n      PoolConvUtil.computePoolOutputShape(isGlobalOperator, inputShape, strides, kernelShape, pads, autoPad);\r\n  const op1 = `\r\n              value = max(_X(x), value);\r\n      `;\r\n  const op2 = ``;\r\n  const inputLayout = inferenceHandler.createTextureLayoutFromShape(inputShape);\r\n  const poolingCode = GeneratePoolingCode(inputLayout, kernelShape, pads, strides, op1, op2, '-1e5');\r\n  const shaderSource = `\r\n    ${poolingCode}\r\n  `;\r\n  return {\r\n    inputLayouts: [inputLayout],\r\n    outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n    samplers: ['X'],\r\n    shaderSource,\r\n  };\r\n}\r\n\r\nexport function GeneratePoolingCode(\r\n    x: TextureLayout, kernelShape: number[], pads: number[], strides: number[], op1: string, op2: string,\r\n    startVal: string): string {\r\n  const inputDims = x.shape;\r\n  const rank = x.shape.length;\r\n  if (kernelShape.length <= 2) {\r\n    const kw = kernelShape[kernelShape.length - 1];\r\n    const sw = strides[strides.length - 1];\r\n    const pwStart = pads[pads.length / 2 - 1];\r\n    const pwEnd = pads[pads.length - 1];\r\n    const dimW = inputDims[rank - 1];\r\n    let codeW = ``;\r\n    let codeH = ``;\r\n    let codeHEnd = ``;\r\n    if (pwStart + pwEnd !== 0) {\r\n      codeW = `\r\n                for (int i = 0; i < ${kw}; i++) {\r\n                  x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\r\n                  if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\r\n                    pad++;\r\n                    continue;\r\n                  }\r\n                  ${op1}\r\n                }`;\r\n    } else {\r\n      codeW = `\r\n                for (int i = 0; i < ${kw}; i++) {\r\n                  x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\r\n                  ${op1}\r\n                }`;\r\n    }\r\n\r\n    if (kernelShape.length === 2) {\r\n      const kh = kernelShape[kernelShape.length - 2];\r\n      const sh = strides[strides.length - 2];\r\n      const phStart = pads[pads.length / 2 - 2];\r\n      const phEnd = pads[pads.length - 2];\r\n      const dimH = inputDims[rank - 2];\r\n      if (phStart + phEnd !== 0) {\r\n        codeH = `\r\n              for (int j = 0; j < ${kh}; j++) {\r\n                x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\r\n                if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\r\n                  pad+= ${kw};\r\n                  continue;\r\n                }\r\n            `;\r\n      } else {\r\n        codeH = `\r\n                for (int j = 0; j < ${kh}; j++) {\r\n                  x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\r\n                `;\r\n      }\r\n      codeHEnd = `\r\n              }\r\n            `;\r\n    }\r\n\r\n    const poolingCode = `\r\n            float process(int indices[${rank}]) {\r\n              int x[${rank}];\r\n              copyVec(indices, x);\r\n\r\n              float value = ${startVal};\r\n              int pad = 0;\r\n              ${codeH}\r\n              ${codeW}\r\n              ${codeHEnd}\r\n              ${op2}\r\n              return value;\r\n            }\r\n          `;\r\n    return poolingCode;\r\n  } else {\r\n    const kernelSize = ShapeUtil.size(kernelShape);\r\n    const kernelStrides = ShapeUtil.computeStrides(kernelShape);\r\n    const stridesRank = kernelStrides.length;\r\n    const padsRank = pads.length;\r\n    const offsetToIndicesFunction = offsetToIndices(stridesRank);\r\n    const copyInputDims = copyArray(inputDims, 'inputDims');\r\n    const copyPads = copyArray(pads, 'pads');\r\n    const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\r\n    const copyStrides = copyArray(strides, 'strides');\r\n    const hasPads = pads.reduce((sum, cur) => sum + cur);\r\n    let padCode = ``;\r\n    if (hasPads) {\r\n      padCode = `\r\n                if (x[j] >= inputDims[j] || x[j] < 0) {\r\n                  pad++;\r\n                  isPad = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!isPad) {\r\n                ${op1}\r\n              }`;\r\n    } else {\r\n      padCode = `\r\n                  }\r\n                  ${op1}`;\r\n    }\r\n    const poolingCode = `\r\n            ${offsetToIndicesFunction}\r\n            float process(int indices[${rank}]) {\r\n                int x[${rank}];\r\n                copyVec(indices, x);\r\n                int offset[${stridesRank}];\r\n                int pads[${padsRank}];\r\n                int inputDims[${rank}];\r\n                int kernelStrides[${stridesRank}];\r\n                int strides[${stridesRank}];\r\n                ${copyPads}\r\n                ${copyInputDims}\r\n                ${copyStrides}\r\n                ${copyKernelStrides}\r\n\r\n                float value = ${startVal};\r\n                int pad = 0;\r\n                bool isPad = false;\r\n                for (int i = 0; i < ${kernelSize}; i++) {\r\n                    offsetToIndices(i, kernelStrides, offset);\r\n                    isPad = false;\r\n                    for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\r\n                      x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\r\n                        + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\r\n                      ${padCode}\r\n                }\r\n                ${op2}\r\n\r\n                return value;\r\n            }`;\r\n    return poolingCode;\r\n  }\r\n}\r\n\r\nexport function copyArray(array: ReadonlyArray<number>, arrayName: string): string {\r\n  let block = ``;\r\n  for (let i = 0; i < array.length; i++) {\r\n    block += `\r\n      ${arrayName}[${i}] = ${array[i]};\r\n    `;\r\n  }\r\n  return block;\r\n}\r\n\r\nexport function offsetToIndices(rank: number): string {\r\n  return `\r\n    void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\r\n      if (${rank} == 0) {\r\n        return;\r\n      }\r\n      for (int i = 0; i < ${rank} - 1; ++i) {\r\n        indices[i] = offset / strides[i];\r\n        offset -= indices[i] * strides[i];\r\n      }\r\n      indices[${rank} - 1] = offset;\r\n    }`;\r\n}\r\n","// Licensed under the MIT license.\r\n\r\nimport {ReduceBase} from '../../../ops/reduce-op';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nabstract class WebGLGenericReduce extends ReduceBase implements WebGLOperator {\r\n  abstract getOps(inputs: Tensor[], axes: number[]): string[];\r\n\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape: number[] = [];\r\n    const iRank = inputs[0].dims.length || 1;\r\n\r\n    const idxCopy = [];  // copy output indexes to input indexes\r\n\r\n    const axes = ShapeUtil.normalizeAxes(this.axes, inputs[0].dims.length);\r\n    const ops = this.getOps(inputs, axes);  // [init ops, reduce ops, final ops]\r\n    let reduceOps = ops[1];\r\n\r\n    for (let k = 0; k < inputs[0].dims.length; k++) {\r\n      // if this axis is reduced\r\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n        if (this.keepDims) {\r\n          outputShape.push(1);\r\n        }  // else { remove the axis from outputShape; }\r\n\r\n        // loop over the d-th axis\r\n        reduceOps = `\r\n        for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\r\n          inputIdx[${k}] = j${k};\r\n          ${reduceOps}\r\n        }\r\n        `;\r\n      } else {\r\n        idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\r\n\r\n        outputShape.push(inputs[0].dims[k]);\r\n      }\r\n    }\r\n\r\n    const oRank = outputShape.length || 1;\r\n\r\n    const shaderSource = `\r\n      float process(int outputIdx[${oRank}]) {\r\n        float value;                 // final result\r\n        int inputIdx[${iRank}];      // addressing input data\r\n        ${idxCopy.join('\\n')}\r\n        ${ops[0]}       // init ops for reduce max/min\r\n        ${reduceOps}\r\n        ${ops[2]}       // final computation for reduce mean\r\n        return value;\r\n      }`;\r\n\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\nexport class WebGLReduceSum extends WebGLGenericReduce {\r\n  getOps(inputs: Tensor[]): string[] {\r\n    return ['value = 0.0;', 'value += _A(inputIdx);', ''];\r\n  }\r\n}\r\n\r\nexport class WebGLReduceMean extends WebGLGenericReduce {\r\n  getOps(inputs: Tensor[], axes: number[]): string[] {\r\n    let size = 1.0;\r\n    for (let k = 0; k < inputs[0].dims.length; k++) {\r\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n        size *= inputs[0].dims[k];\r\n      }\r\n    }\r\n\r\n    return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\r\n  }\r\n}\r\n\r\nexport class WebGLReduceMax extends WebGLGenericReduce {\r\n  getOps(inputs: Tensor[], axes: number[]): string[] {\r\n    const idxZero = [];\r\n    for (let k = 0; k < inputs[0].dims.length; k++) {\r\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n        idxZero.push(`inputIdx[${k}] = 0;`);  // first element\r\n      }\r\n    }\r\n\r\n    return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\r\n  }\r\n}\r\n\r\nexport class WebGLReduceMin extends WebGLGenericReduce {\r\n  getOps(inputs: Tensor[], axes: number[]): string[] {\r\n    const idxZero = [];\r\n    for (let k = 0; k < inputs[0].dims.length; k++) {\r\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n        idxZero.push(`inputIdx[${k}] = 0;`);  // first element\r\n      }\r\n    }\r\n\r\n    return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\r\n  }\r\n}\r\n\r\nexport class WebGLReduceProd extends WebGLGenericReduce {\r\n  getOps(inputs: Tensor[]): string[] {\r\n    return ['value = 1.0;', 'value *= _A(inputIdx);', ''];\r\n  }\r\n}\r\n\r\nexport class WebGLReduceLogSum extends WebGLGenericReduce {\r\n  getOps(inputs: Tensor[]): string[] {\r\n    return ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\r\n  }\r\n}\r\n\r\nexport class WebGLReduceSumSquare extends WebGLGenericReduce {\r\n  getOps(inputs: Tensor[]): string[] {\r\n    return ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\r\n  }\r\n}\r\n","// Licensed under the MIT license.\r\n\r\nimport {Slice, SliceV10} from '../../../ops/slice';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLSlice extends Slice implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    return createProgramInfo(handler, inputs[0], this.starts, this.ends, this.axes);\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    return createRunData(handler, programInfo, inputs);\r\n  }\r\n}\r\n\r\nexport class WebGLSliceV10 extends SliceV10 implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    if (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId) ||\r\n        (inputs.length >= 4 && !handler.session.isInitializer(inputs[3].dataId)) ||\r\n        (inputs.length >= 5 && !handler.session.isInitializer(inputs[4].dataId))) {\r\n      throw new Error(`dynamic slice attributes are not allowed`);\r\n    }\r\n    if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\r\n      throw new Error(`currently non-1 steps is not supported for Slice`);\r\n    }\r\n    const starts = Array.from(inputs[1].integerData);\r\n    const ends = Array.from(inputs[2].integerData);\r\n    const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\r\n\r\n    return createProgramInfo(handler, inputs[0], starts, ends, axes);\r\n  }\r\n\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    return createRunData(handler, programInfo, inputs);\r\n  }\r\n}\r\n\r\nfunction createProgramInfo(\r\n    handler: WebGLInferenceHandler, x: Tensor, starts: ReadonlyArray<number>, ends: ReadonlyArray<number>,\r\n    axes: ReadonlyArray<number>): ProgramInfo {\r\n  if (axes.length === 0) {\r\n    axes = x.dims.slice(0).map((val, ind) => ind);\r\n  }\r\n  axes = ShapeUtil.normalizeAxes(axes, x.dims.length);\r\n  starts = starts.map((start, ind) => {\r\n    if (start > x.dims[axes[ind]] - 1) {\r\n      return x.dims[axes[ind]];\r\n    }\r\n    return ShapeUtil.normalizeAxis(start, x.dims[axes[ind]]);\r\n  });\r\n  ends = ends.map((end, ind) => {\r\n    if (end > x.dims[axes[ind]] - 1) {\r\n      return x.dims[axes[ind]];\r\n    }\r\n    return ShapeUtil.normalizeAxis(end, x.dims[axes[ind]]);\r\n  });\r\n\r\n  const outputShape = x.dims.slice();\r\n\r\n  const sliceOps: string[] = [];\r\n  for (let i = 0; i < axes.length; i++) {\r\n    outputShape[axes[i]] = ends[i] - starts[i];\r\n    if (starts[i] > 0) {\r\n      sliceOps.push(`outputIdx[${axes[i]}] += ${starts[i]};`);\r\n    }  // else { sliceOps.push(`outputIdx[${axes[i]}] += 0;`); }\r\n  }\r\n\r\n  const rank = outputShape.length;\r\n  const shaderSource = `\r\n      float process(int outputIdx[${rank}]) {\r\n        ${sliceOps.join('\\n      ')}\r\n        return _A(outputIdx);\r\n      }`;\r\n  return {\r\n    inputLayouts: [handler.getOrCreateTextureLayout(x)],\r\n    outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n    samplers: ['A'],\r\n    shaderSource,\r\n  };\r\n}\r\n\r\nfunction createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n  const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n  return {\r\n    inputTextureDatas: inputTDs,\r\n    outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n    uniformData: {}\r\n  };\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Softmax} from '../../../ops/softmax';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {Artifact, ProgramInfo, RunData, TextureLayout} from '../types';\r\n\r\nexport class WebGLSoftmax extends Softmax {\r\n  constructor() {\r\n    super();\r\n  }\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    if (!this.artifacts) {\r\n      this.artifacts = [];\r\n      const programInfos = this.createProgramInfos(inferenceHandler, inputs);\r\n      programInfos.forEach((pi, i) => {\r\n        const artifact = inferenceHandler.session.programManager.build(pi);\r\n        this.artifacts.push(artifact);\r\n      });\r\n    }\r\n\r\n    const runDatas = this.createRunDatas(inferenceHandler, this.artifacts.map(a => a.programInfo), inputs);\r\n    runDatas.forEach((v, i) => inferenceHandler.session.programManager.run(this.artifacts[i], v));\r\n    // return only the last output\r\n    return [runDatas[runDatas.length - 1].outputTextureData.tensor];\r\n  }\r\n  createSoftMaxProgramInfo(\r\n      inferenceHandler: WebGLInferenceHandler, input: Tensor, N: number, D: number,\r\n      maxElementPerLogicalRow: TextureLayout, normalizationPerLogicalRow: TextureLayout): ProgramInfo {\r\n    const inputShape = input.dims.slice();\r\n    const inputLayout = inferenceHandler.createTextureLayoutFromShape(inputShape);\r\n    const outputShape = inputShape;\r\n    const rank = outputShape.length;\r\n    const textureWidth = inputLayout.width;\r\n    const textureHeight = inputLayout.height;\r\n\r\n    if (N < 1 || D < 1) {\r\n      throw new Error(`Logical row count N and feature count D must be greater than or equal to 1`);\r\n    }\r\n\r\n    if (maxElementPerLogicalRow.shape.length !== 1 || normalizationPerLogicalRow.shape.length !== 1) {\r\n      throw new Error(`Dimensionality of the intermediate results should be 1`);\r\n    }\r\n\r\n    if (maxElementPerLogicalRow.shape[0] !== N || normalizationPerLogicalRow.shape[0] !== N) {\r\n      throw new Error(`Shape of the intermediate results should be equal to logical row count`);\r\n    }\r\n\r\n    const shaderSource = `\r\n    float process(int[${rank}] indices) {\r\n\r\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\r\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\r\n\r\n      //determine the logical row for this index\r\n      int logical_row_index[1];\r\n      logical_row_index[0] = offset / ${D};\r\n\r\n      float norm_factor = _Norm(logical_row_index);\r\n\r\n      // avoid possible division by 0\r\n      // if norm_facor is 0, all elements are zero\r\n      // if so, return 0\r\n      if(norm_factor == 0.0)\r\n        return 0.0;\r\n\r\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\r\n    }`;\r\n    return {\r\n      inputLayouts: [inputLayout, maxElementPerLogicalRow, normalizationPerLogicalRow],\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A', 'Max', 'Norm'],\r\n      shaderSource,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create a texture that contains the normalization factor for each of the 'N' rows\r\n   */\r\n  createComputScaleProgramInfo(\r\n      inferenceHandler: WebGLInferenceHandler, x: Tensor, N: number, D: number, maxElementPerLogicalRow: TextureLayout,\r\n      outputShape: number[]): ProgramInfo {\r\n    const xlayout = inferenceHandler.createTextureLayoutFromShape(x.dims.slice());\r\n    const rank = outputShape.length;\r\n    const textureWidth = xlayout.width;\r\n    const textureHeight = xlayout.height;\r\n\r\n    if (N < 1 || D < 1) {\r\n      throw new Error(`Logical row count N and feature count D must be greater than or equal to 1`);\r\n    }\r\n\r\n    if (outputShape.length !== 1) {\r\n      throw new Error(`Dimensionality of the output should be 1`);\r\n    }\r\n\r\n    if (outputShape[0] !== N) {\r\n      throw new Error(`Shape of the output should be equal to logical row count`);\r\n    }\r\n\r\n    if (maxElementPerLogicalRow.shape.length !== 1) {\r\n      throw new Error(`Dimensionality of the intermediate results should be 1`);\r\n    }\r\n\r\n    if (maxElementPerLogicalRow.shape[0] !== N) {\r\n      throw new Error(`Shape of the intermediate results should be equal to logical row count`);\r\n    }\r\n\r\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n    float process(int[${rank}] indices) {\r\n\r\n      int logical_row_start_offset = indices[0] * ${D};\r\n\r\n      float norm_factor = 0.0;\r\n      float max = _Max(indices);\r\n      for(int i=0; i<${D}; ++i)\r\n      {\r\n        norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i, ${\r\n        textureWidth}, ${textureHeight}))) - max);\r\n      }\r\n\r\n      return norm_factor;\r\n    }`;\r\n    return {\r\n      inputLayouts: [xlayout, maxElementPerLogicalRow],\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A', 'Max'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  /**\r\n   * Create a texture that contains the maximum value of each of the 'N' rows\r\n   */\r\n  createComputeMaxProgramInfo(\r\n      inferenceHandler: WebGLInferenceHandler, x: Tensor, N: number, D: number, outputShape: number[]): ProgramInfo {\r\n    const xlayout = inferenceHandler.createTextureLayoutFromShape(x.dims.slice());\r\n    const rank = outputShape.length;\r\n    const textureWidth = xlayout.width;\r\n    const textureHeight = xlayout.height;\r\n\r\n    if (N < 1 || D < 1) {\r\n      throw new Error(`Logical row count N and feature count D must be greater than or equal to 1`);\r\n    }\r\n\r\n    if (outputShape.length !== 1) {\r\n      throw new Error(`Dimensionality of the output should be 1`);\r\n    }\r\n\r\n    if (outputShape[0] !== N) {\r\n      throw new Error(`Shape of the output should be equal to logical row count`);\r\n    }\r\n\r\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n        float process(int[${rank}] indices) {\r\n\r\n          int logical_row_start_offset = indices[0] * ${D};\r\n\r\n          float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth}, ${\r\n        textureHeight} )));\r\n          for(int i=1; i<${D}; ++i)\r\n          {\r\n            float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i, ${\r\n        textureWidth}, ${textureHeight})));\r\n            if(current > max)\r\n              max = current;\r\n          }\r\n\r\n          return max;\r\n        }`;\r\n    return {\r\n      inputLayouts: [xlayout],\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createProgramInfos(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo[] {\r\n    const inputShape = inputs[0].dims.slice();\r\n    const axis = ShapeUtil.normalizeAxis(this.axis, inputShape.length);\r\n    const N = ShapeUtil.sizeToDimension(inputShape, axis);\r\n    const D = ShapeUtil.sizeFromDimension(inputShape, axis);\r\n    const computeMaxProgramInfo = this.createComputeMaxProgramInfo(inferenceHandler, inputs[0], N, D, [N]);\r\n    const computeScaleProgramInfo =\r\n        this.createComputScaleProgramInfo(inferenceHandler, inputs[0], N, D, computeMaxProgramInfo.outputLayout, [N]);\r\n    const softMaxProgramInfo = this.createSoftMaxProgramInfo(\r\n        inferenceHandler, inputs[0], N, D, computeMaxProgramInfo.outputLayout, computeScaleProgramInfo.outputLayout);\r\n\r\n    const programInfos: ProgramInfo[] = [computeMaxProgramInfo, computeScaleProgramInfo, softMaxProgramInfo];\r\n    return programInfos;\r\n  }\r\n  createRunDatas(inferenceHandler: WebGLInferenceHandler, programInfos: ProgramInfo[], inputs: Tensor[]): RunData[] {\r\n    const dataType = inputs[0].type;\r\n    const inputTD = inferenceHandler.getOrCreateTextureData(inputs[0], programInfos[0].inputLayouts[0]);\r\n    const runDatas: RunData[] = [];\r\n    runDatas.push({\r\n      inputTextureDatas: [inputTD],\r\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[0].outputLayout, dataType),\r\n      uniformData: {}\r\n    });\r\n    for (let i = 1; i < programInfos.length; ++i) {\r\n      runDatas.push({\r\n        inputTextureDatas: [...runDatas[i - 1].inputTextureDatas, runDatas[i - 1].outputTextureData],\r\n        outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[i].outputLayout, dataType),\r\n        uniformData: {}\r\n      });\r\n    }\r\n    return runDatas;\r\n  }\r\n  protected artifacts: Artifact[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Split} from '../../../ops/split';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil, SplitUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {Artifact, ProgramInfo, RunData} from '../types';\r\n\r\nexport class WebGLSplit extends Split {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    if (!this.artifacts) {\r\n      this.artifacts = [];\r\n      const axis = ShapeUtil.normalizeAxis(this.axis, inputs[0].dims.length);\r\n      const count = this.getProgramCount(inferenceHandler, inputs, axis);\r\n      for (let i = 0; i < count; ++i) {\r\n        const programInfo = this.createProgramInfo(inferenceHandler, inputs[0], axis, i);\r\n        const artifact = inferenceHandler.session.programManager.build(programInfo);\r\n        this.artifacts.push(artifact);\r\n      }\r\n    }\r\n    const results: Tensor[] = [];\r\n\r\n    this.artifacts.forEach(artifact => {\r\n      const rundata = this.createRunData(inferenceHandler, artifact.programInfo, inputs);\r\n      inferenceHandler.session.programManager.run(artifact, rundata);\r\n      results.push(rundata.outputTextureData.tensor);\r\n    });\r\n    return results;\r\n  }\r\n  getProgramCount(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): number {\r\n    const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, this.split, this.numOutputs);\r\n    return offsets.length;\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, input: Tensor, axis: number, index: number): ProgramInfo {\r\n    const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, this.split, this.numOutputs);\r\n    const offset = offsets[index];\r\n    const outputShape = shapes[index];\r\n    const rank = outputShape.length;\r\n    const shaderSource = `\r\n      float process(int indices[${rank}]) {\r\n        indices[${axis}] += ${offset};\r\n        return _A(indices);\r\n      }`;\r\n    return {\r\n      inputLayouts: [inferenceHandler.getOrCreateTextureLayout(input)],\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n  protected artifacts: Artifact[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Split implements Operator {\r\n  constructor(protected numOutputs?: number) {}\r\n\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axis = attributes.getInt('axis', 0);\r\n    this.split = attributes.getInts('split', []);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\r\n        inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\r\n        inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected split: number[];\r\n  protected axis: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Squeeze} from '../../../ops/squeeze';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {reshape} from './reshape';\r\n\r\nexport class WebGLSqueeze extends Squeeze {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const outputDims = ShapeUtil.squeezeShape(inputs[0].dims, this.axes);\r\n    return [reshape(inferenceHandler, inputs[0], outputDims)];\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Sum} from '../../../ops/sum';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLSum extends Sum implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const outputShape = inputs[0].dims.slice();\r\n    const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\r\n    const samplers = inputs.map((v, i) => `X${i}`);\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers,\r\n      shaderSource: `\r\n      void main() {\r\n        vec4 result = ${sumLine};\r\n        ${glsl.output} = result;\r\n      }`,\r\n      hasMain: true\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Licensed under the MIT license.\r\n\r\nimport {Tile} from '../../../ops/tile';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLTile extends Tile implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputShape = inputs[0].dims.slice();\r\n    const outputShape = new Array(inputShape.length);  // inputs[0].dims.slice();\r\n\r\n    const tileOps: string[] = [];\r\n    for (let i = 0; i < inputShape.length; i++) {\r\n      outputShape[i] = inputShape[i] * inputs[1].numberData[i];\r\n      tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\r\n    }\r\n\r\n    const rank = outputShape.length;\r\n    const shaderSource = `\r\n    float process(int outputIdx[${rank}]) {\r\n      int inputIdx[${rank}];\r\n      ${tileOps.join('\\n')}\r\n      return _A(inputIdx);\r\n    }`;\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Transpose} from '../../../ops/transpose';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {FunctionType, GlslPositionalFunction} from '../glsl-definitions';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLTranspose extends Transpose implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  getOutputShape(inputShapes: Array<ReadonlyArray<number>>): ReadonlyArray<number> {\r\n    const perm = this.getAdjustedPerm(inputShapes[0]);\r\n    return ShapeUtil.sortBasedOnPerm(inputShapes[0], perm);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputShapes = inputs.map(t => t.dims.slice());\r\n    const perm = this.getAdjustedPerm(inputShapes[0]);\r\n    const unpackedOutputShape = this.getOutputShape(inputShapes);\r\n    const rank = inputs[0].dims.length;\r\n    // A dims=[${inputs[0].dims.toString()}]\r\n    // out Dims=[${unpackedOutputShape.toString()}]\r\n    // based on perm=[${perm.toString()}]\r\n    const shaderSource = `\r\n      ${this.getPermFunctionBody('perm', perm, rank)}\r\n      float process(int indices[${rank}]) {\r\n        int a[${rank}];\r\n        perm(a, indices);\r\n        return _A(a);\r\n      }`;\r\n    const outputLayout = handler.createTextureLayoutFromShape(unpackedOutputShape, 1, unpackedOutputShape);\r\n    return {inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])], outputLayout, samplers: ['A'], shaderSource};\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n  getPositionalFunction(handler: WebGLInferenceHandler, inputShape: number[], name?: string): GlslPositionalFunction {\r\n    const outputShape = this.getOutputShape([inputShape]);\r\n    if (!name) {\r\n      name = 'perm';\r\n    }\r\n    return {\r\n      name,\r\n      body: this.getPermFunctionBody(name, this.getAdjustedPerm(inputShape), outputShape.length),\r\n      type: FunctionType.Positional,\r\n      inputShape,\r\n      outputShape\r\n    };\r\n  }\r\n  protected getAdjustedPerm(inputShape: ReadonlyArray<number>): number[] {\r\n    let perm = this.perm;\r\n    if (perm && perm.length !== inputShape.length) {\r\n      perm = [...(inputShape.keys())].reverse();\r\n    }\r\n    return perm;\r\n  }\r\n  protected getPermFunctionBody(name: string, perm: number[], rank: number): string {\r\n    const reverseFunc = [];\r\n    reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\r\n    for (let i = 0; i < rank; ++i) {\r\n      reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\r\n    }\r\n    reverseFunc.push('\\t}');\r\n    return reverseFunc.join('\\n');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {UnaryOp} from '../../../ops/unary-op';\r\nimport {Tensor} from '../../../tensor';\r\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLUnaryOp extends UnaryOp implements WebGLOperator {\r\n  constructor(protected typeConstraint: ReadonlyArray<Tensor.DataType>, protected glslFunc: GlslValueFunction) {\r\n    super(typeConstraint);\r\n  }\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape = inputs[0].dims.slice();\r\n    const inputLayout = handler.getOrCreateTextureLayout(inputs[0]);\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n      ${this.glslFunc.body}\r\n      void main() {\r\n        vec4 v = ${glsl.texture2D}(A, TexCoords);\r\n        v = ${this.glslFunc.name}(v);\r\n        ${glsl.output} = v;\r\n      }\r\n      `;\r\n    const outputLayout = handler.createTextureLayoutFromShape(outputShape);\r\n    return {inputLayouts: [inputLayout], outputLayout, samplers: ['A'], shaderSource, hasMain: true};\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\nexport function glslAbs(): GlslValueFunction {\r\n  return glslBuiltinUnary('abs');\r\n}\r\nexport function glslAcos(): GlslValueFunction {\r\n  return glslBuiltinUnary('acos');\r\n}\r\nexport function glslAsin(): GlslValueFunction {\r\n  return glslBuiltinUnary('asin');\r\n}\r\nexport function glslAtan(): GlslValueFunction {\r\n  return glslBuiltinUnary('atan');\r\n}\r\nexport function glslCeil(): GlslValueFunction {\r\n  return glslBuiltinUnary('ceil');\r\n}\r\nexport function glslCos(): GlslValueFunction {\r\n  return glslBuiltinUnary('cos');\r\n}\r\nexport function glslExp(): GlslValueFunction {\r\n  return glslBuiltinUnary('exp');\r\n}\r\nexport function glslFloor(): GlslValueFunction {\r\n  return glslBuiltinUnary('floor');\r\n}\r\nexport function glslIdentity(): GlslValueFunction {\r\n  const name = `indentity_`;\r\n  const body = `\r\n  float ${name}(float a) {\r\n    return a;\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    return v;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslLog(): GlslValueFunction {\r\n  return glslBuiltinUnary('log');\r\n}\r\nexport function glslNeg(): GlslValueFunction {\r\n  const name = `neg_`;\r\n  const body = `\r\n  float ${name}(float a) {\r\n    return -a;\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    return -v;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslNot(): GlslValueFunction {\r\n  const name = `not_`;\r\n  const body = `\r\n  float ${name}(float a) {\r\n    return float( ! bool(a) );\r\n  }\r\n  bool ${name}(bool a) {\r\n    return !a;\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\r\n  }\r\n  bvec4 ${name}(bvec4 v) {\r\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSin(): GlslValueFunction {\r\n  return glslBuiltinUnary('sin');\r\n}\r\nexport function glslRelu(): GlslValueFunction {\r\n  const name = `relu_`;\r\n  const body = `\r\n  float ${name}(float a) {\r\n    return max( a, 0.0 );\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    return max( v, 0.0 );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSigmoid(): GlslValueFunction {\r\n  const name = `sigmoid_`;\r\n  const body = `\r\n  float ${name}(float a) {\r\n    return 1.0 / (1.0 + exp(-a));\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    return 1.0 / (1.0 + exp(-v));\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSqrt(): GlslValueFunction {\r\n  return glslBuiltinUnary('sqrt');\r\n}\r\nexport function glslTan(): GlslValueFunction {\r\n  return glslBuiltinUnary('tan');\r\n}\r\nexport function glslTanh(): GlslValueFunction {\r\n  const name = `tanh_`;\r\n  const body = `\r\n  float ${name}(float a) {\r\n    a = clamp(a, -10., 10.);\r\n    a = exp(2.*a);\r\n    return (a - 1.) / (a + 1.);\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    v = clamp(v, -10., 10.);\r\n    v = exp(2.*v);\r\n    return (v - 1.) / (v + 1.);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nfunction glslBuiltinUnary(fname: string): GlslValueFunction {\r\n  const name = `${fname}_`;\r\n  const body = `\r\n  float ${name}(float a) {\r\n    return ${fname}(a);\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    return ${fname}(v);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Unsqueeze} from '../../../ops/unsqueeze';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {reshape} from './reshape';\r\n\r\nexport class WebGLUnsqueeze extends Unsqueeze {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const outputDims = ShapeUtil.unsqueezeShape(inputs[0].dims, this.axes);\r\n    return [reshape(inferenceHandler, inputs[0], outputDims)];\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Upsample} from '../../../ops/upsample';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLUpsample extends Upsample implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputLayout = handler.getOrCreateTextureLayout(inputs[0]);\r\n    const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * this.scales[i]));\r\n    const outputLayout = handler.createTextureLayoutFromShape(outputShape);\r\n    const dim = outputShape.length;\r\n\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n\r\n    const outputPitches = new Array<number>(dim);\r\n    const inputPitches = new Array<number>(dim);\r\n    let precalculatedPitches = `\r\n      int output_pitches[${dim}];\r\n      int input_pitches[${dim}];\r\n      `;\r\n    for (let d = dim - 1; d >= 0; d--) {\r\n      outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\r\n      inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\r\n\r\n      precalculatedPitches += `\r\n      output_pitches[${d}] = ${outputPitches[d]};\r\n      input_pitches[${d}] = ${inputPitches[d]};\r\n      `;\r\n    }\r\n    const getInputFloatFunction = `\r\n    float getInputFloat(int index) {\r\n      vec2 coords = offsetToCoords(index, ${inputLayout.width}, ${inputLayout.height});\r\n      float value = getColorAsFloat(${glsl.texture2D}(X, coords));\r\n      return value;\r\n    }\r\n    `;\r\n\r\n    const shaderSource = this.mode === 'nearest' ?\r\n        // nearest\r\n        `\r\n      ${getInputFloatFunction}\r\n      float process(int indices[${dim}]) {\r\n        int input_index = 0;\r\n        int output_index = coordsToOffset(TexCoords, ${outputLayout.width}, ${outputLayout.height});\r\n\r\n        ${precalculatedPitches}\r\n\r\n        int d, m;\r\n        for (int dim = 0; dim < ${dim}; ++dim) {\r\n          d = output_index / output_pitches[dim];\r\n          m = output_index - d * output_pitches[dim];\r\n          output_index = m;\r\n\r\n          if (scales[dim] != 1 && d > 0) {\r\n            int d2 = d / scales[dim];\r\n            m = d - d2 * scales[dim];\r\n            d = d2;\r\n          }\r\n          input_index += input_pitches[dim] * d;\r\n        }\r\n\r\n        return getInputFloat(input_index);\r\n      }` :\r\n        dim === 4 ?\r\n        // bilinear 4D\r\n            `\r\n      ${getInputFloatFunction}\r\n      float process(int indices[4]) {\r\n        int input_index = 0;\r\n        int output_index = coordsToOffset(TexCoords, ${outputLayout.width}, ${outputLayout.height});\r\n\r\n        ${precalculatedPitches}\r\n\r\n        int m;\r\n        int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\r\n        index_of_dim0 = output_index / output_pitches[0];\r\n        m = output_index - index_of_dim0 * output_pitches[0];\r\n        index_of_dim1 = m / output_pitches[1];\r\n        m = m - index_of_dim1 * output_pitches[1];\r\n        index_of_dim2 = m / output_pitches[2];\r\n        m = m - index_of_dim2 * output_pitches[2];\r\n        index_of_dim3 = m;\r\n\r\n        int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\r\n        index_of_input_dim2 = index_of_dim2 / scales[2];\r\n        y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\r\n        index_of_input_dim3 = index_of_dim3 / scales[3];\r\n        x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\r\n\r\n        input_index = index_of_dim0 * input_pitches[0] +\r\n                      index_of_dim1 * input_pitches[1] +\r\n                      index_of_input_dim2 * input_pitches[2] +\r\n                      index_of_input_dim3;\r\n\r\n        float x00 = getInputFloat(input_index);\r\n        float x10, x01, x11;\r\n\r\n        bool end_of_dim2 = false;\r\n        if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\r\n          // It's the end in dimension 2\r\n          x01 = x00;\r\n          end_of_dim2 = true;\r\n        } else {\r\n          x01 = getInputFloat(input_index + input_pitches[2]);\r\n        }\r\n\r\n        if (index_of_input_dim3 == (input_pitches[2] - 1)) {\r\n          // It's the end in dimension 3\r\n          x10 = x00;\r\n          x11 = x01;\r\n        }\r\n        else {\r\n          x10 = getInputFloat(input_index + 1);\r\n          x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\r\n        }\r\n\r\n        float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\r\n        float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\r\n        return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\r\n      }` :\r\n            // bilinear 2D\r\n            `\r\n      ${getInputFloatFunction}\r\n      float process(int indices[2]) {\r\n        int input_index = 0;\r\n        int output_index = coordsToOffset(TexCoords, ${outputLayout.width}, ${outputLayout.height});\r\n\r\n        ${precalculatedPitches}\r\n\r\n        int m;\r\n        int index_of_dim0, index_of_dim1;\r\n        index_of_dim0 = output_index / output_pitches[0];\r\n        m = output_index - index_of_dim0 * output_pitches[0];\r\n        index_of_dim1 = m;\r\n\r\n        int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\r\n        index_of_input_dim0 = index_of_dim0 / scales[0];\r\n        y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\r\n        index_of_input_dim1 = index_of_dim1 / scales[1];\r\n        x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\r\n\r\n        input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\r\n\r\n        float x00 = getInputFloat(input_index);\r\n        float x10, x01, x11;\r\n\r\n        bool end_of_dim0 = false;\r\n        if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\r\n          // It's the end in dimension 0\r\n          x01 = x00;\r\n          end_of_dim0 = true;\r\n        } else {\r\n          x01 = getInputFloat(input_index + input_pitches[0]);\r\n        }\r\n\r\n        if (index_of_input_dim1 == (input_pitches[0] - 1)) {\r\n          // It's the end in dimension 1\r\n          x10 = x00;\r\n          x11 = x01;\r\n        }\r\n        else {\r\n          x10 = getInputFloat(input_index + 1);\r\n          x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\r\n        }\r\n\r\n        float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\r\n        float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\r\n        return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\r\n      }`;\r\n    return {\r\n      inputLayouts: [inputLayout],\r\n      outputLayout,\r\n      samplers: ['X'],\r\n      shaderSource,\r\n      variables: [{name: 'scales', type: 'int', arrayLength: this.scales.length}]\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {scales: this.scales.map(x => Math.ceil(x))}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {env} from '../../env';\r\nimport {Logger, Profiler} from '../../instrument';\r\n\r\nimport {GlslPreprocessor} from './glsl-preprocessor';\r\nimport {getVertexShaderSource} from './glsl-source';\r\nimport {Artifact, ProgramInfo, RunData, TextureData, UniformData, VariableInfo} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\n/**\r\n * ProgramManager is the main class behind running computations\r\n * It builds ProgramInfo's into Artifacts\r\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\r\n * Uses the artifact to run the computation by calling Draw on\r\n * the WebGL drawing buffer\r\n * ProgramManager automatically maps (binds) input variables to their\r\n * corresponding Location's in the binary program\r\n */\r\nexport class ProgramManager {\r\n  repo: Map<{}, Artifact>;  // this should be per-session object\r\n  vertexShader: WebGLShader;\r\n  attributesBound: boolean;\r\n\r\n  constructor(public profiler: Readonly<Profiler>, public glContext: WebGLContext) {\r\n    this.repo = new Map();\r\n    this.attributesBound = false;\r\n  }\r\n  getArtifact(key: {}): Artifact|undefined {\r\n    return this.repo.get(key);\r\n  }\r\n  setArtifact(key: {}, artifact: Artifact): void {\r\n    this.repo.set(key, artifact);\r\n  }\r\n  run(buildArtifact: Artifact, runData: RunData): void {\r\n    this.profiler.event('backend', 'ProgramManager.run', () => {\r\n      const gl = this.glContext.gl;\r\n      const program = buildArtifact.program;\r\n      gl.useProgram(program);\r\n      try {\r\n        this.bindOutput(runData.outputTextureData);\r\n        if (!this.attributesBound) {\r\n          this.bindAttributes(buildArtifact.attribLocations);\r\n        }\r\n        this.bindUniforms(buildArtifact.uniformLocations, runData.uniformData, runData.inputTextureDatas);\r\n      } catch (err) {\r\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\r\n        throw err;\r\n      }\r\n      this.profiler.event('backend', 'GlContext.draw()', () => {\r\n        this.doDraw(buildArtifact, runData);\r\n        gl.flush();\r\n      });\r\n    });\r\n  }\r\n  dispose(): void {\r\n    if (this.vertexShader) {\r\n      this.glContext.deleteShader(this.vertexShader);\r\n    }\r\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\r\n  }\r\n  build(programInfo: ProgramInfo): Artifact {\r\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\r\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo);\r\n      const fragScript = preprocessor.preprocess();\r\n      const program = this.compile(fragScript);\r\n      const artifact = {\r\n        programInfo,\r\n        program,\r\n        uniformLocations: this.getUniformLocations(\r\n            program, preprocessor.context.programInfo.samplers, preprocessor.context.programInfo.variables),\r\n        attribLocations: this.getAttribLocations(program)\r\n      };\r\n      return artifact;\r\n    });\r\n  }\r\n  protected doDraw(artifact: Artifact, runData: RunData): void {\r\n    if (runData.draw) {\r\n      Logger.verbose('ProgramManager', 'Custom draw function');\r\n      runData.draw(this.glContext, artifact);\r\n    } else {\r\n      this.glContext.draw();\r\n    }\r\n  }\r\n  protected compile(fragShaderScript: string): WebGLProgram {\r\n    if (!this.vertexShader) {\r\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\r\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\r\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\r\n    }\r\n    if (env.debug) {\r\n      Logger.verbose('ProrgramManager', `FragShader:\r\n${fragShaderScript}\r\n`);\r\n    }\r\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\r\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\r\n    this.glContext.deleteShader(fragShader);\r\n    return program;\r\n  }\r\n  bindOutput(td: TextureData): void {\r\n    Logger.verbose(\r\n        'ProrgramManager',\r\n        `Binding output texture to Framebuffer: w/h=${td.width}/${td.height}, shape=${td.shape}, type=${\r\n            td.tensor.type}`);\r\n    this.glContext.attachFramebuffer(td.texture, td.width, td.height);\r\n  }\r\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\r\n    const positionHandle = attribLocations.position;\r\n    const textureCoordHandle = attribLocations.textureCoord;\r\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\r\n    this.attributesBound = true;\r\n  }\r\n  bindUniforms(uniformLocations: Artifact.UniformLocations, uniformData: UniformData, textures: TextureData[]): void {\r\n    const gl = this.glContext.gl;\r\n    let texturePosition = 0;\r\n    for (const {name, type, location, arrayLength} of uniformLocations) {\r\n      switch (type) {\r\n        case 'sampler2D':\r\n          this.bindTexture(textures[texturePosition], location, texturePosition);\r\n          texturePosition++;\r\n          break;\r\n        case 'float':\r\n          if (arrayLength) {\r\n            gl.uniform1fv(location, uniformData[name] as number[]);\r\n          } else {\r\n            gl.uniform1f(location, uniformData[name] as number);\r\n          }\r\n          break;\r\n        case 'int':\r\n          if (arrayLength) {\r\n            gl.uniform1iv(location, uniformData[name] as number[]);\r\n          } else {\r\n            gl.uniform1i(location, uniformData[name] as number);\r\n          }\r\n          break;\r\n        default:\r\n          throw new Error(`Uniform not implemented: ${type}`);\r\n      }\r\n    }\r\n  }\r\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\r\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\r\n  }\r\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\r\n    return {\r\n      position: this.getAttribLocation(program, 'position'),\r\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\r\n    };\r\n  }\r\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\r\n      Artifact.UniformLocations {\r\n    const uniformLocations: Artifact.UniformLocations = [];\r\n    if (samplers) {\r\n      for (const sampler of samplers) {\r\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\r\n      }\r\n    }\r\n    if (variables) {\r\n      for (const variable of variables) {\r\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\r\n      }\r\n    }\r\n    return uniformLocations;\r\n  }\r\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\r\n    const gl = this.glContext.gl;\r\n    const reference = gl.getUniformLocation(program, name);\r\n    if (reference === null) {\r\n      throw new Error(`Uniform ${name} not found.`);\r\n    }\r\n    return reference;\r\n  }\r\n  getAttribLocation(program: WebGLProgram, name: string): number {\r\n    const gl = this.glContext.gl;\r\n    const attributeLocation: number = gl.getAttribLocation(program, name);\r\n    return attributeLocation;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\r\nimport {replaceInlines} from './glsl-function-inliner';\r\nimport {glslRegistry} from './glsl-registered-libs';\r\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\r\nimport {ProgramInfo, VariableInfo} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\n/**\r\n * Preprocessor for the additions to the GLSL language\r\n * It deals with:\r\n *  @include directives\r\n *  @inline\r\n *  Loop unrolling (not implemented)\r\n *  Macro resolution (not implemented)\r\n */\r\nexport class GlslPreprocessor {\r\n  readonly context: GlslContext;\r\n  readonly libs: {[name: string]: GlslLib} = {};\r\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\r\n\r\n  constructor(glContext: WebGLContext, programInfo: ProgramInfo) {\r\n    this.context = new GlslContext(glContext, programInfo);\r\n\r\n    // construct GlslLibs\r\n    Object.keys(glslRegistry).forEach((name: string) => {\r\n      const lib = new glslRegistry[name](this.context);\r\n      this.libs[name] = lib;\r\n    });\r\n\r\n    // construct GlslRoutineDependencyGraph\r\n    const map = this.glslLibRoutineDependencyGraph;\r\n    for (const libName in this.libs) {\r\n      const lib = this.libs[libName];\r\n      const routinesInLib = lib.getFunctions();\r\n      for (const routine in routinesInLib) {\r\n        const key = libName + '.' + routine;\r\n        let currentNode: GlslLibRoutineNode;\r\n        if (map[key]) {\r\n          currentNode = map[key];\r\n          currentNode.routineBody = routinesInLib[routine].routineBody;\r\n        } else {\r\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\r\n          map[key] = currentNode;\r\n        }\r\n        const dependencies = routinesInLib[routine].dependencies;\r\n        if (dependencies) {\r\n          for (let i = 0; i < dependencies.length; ++i) {\r\n            if (!map[dependencies[i]]) {\r\n              const node = new GlslLibRoutineNode(dependencies[i]);\r\n              map[dependencies[i]] = node;\r\n              currentNode.addDependency(node);\r\n            } else {\r\n              currentNode.addDependency(map[dependencies[i]]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  preprocess(): string {\r\n    const programInfo = this.context.programInfo;\r\n    let source = programInfo.shaderSource;\r\n\r\n    // append main() function\r\n    if (!this.context.programInfo.hasMain) {\r\n      source = `${source}\r\n      ${getDefaultFragShaderMain(this.context.glContext.version, programInfo.outputLayout.shape.length)}`;\r\n    }\r\n    // replace inlines\r\n    source = replaceInlines(source);\r\n\r\n    // concat final source string\r\n    return `${getFragShaderPreamble(this.context.glContext.version)}\r\n    ${this.getUniforms(programInfo.samplers, programInfo.variables)}\r\n    ${this.getImports(source)}\r\n    ${source}`;\r\n  }\r\n\r\n  protected getImports(script: string): string {\r\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\r\n\r\n    if (routinesIncluded.length === 0) {\r\n      return '';\r\n    }\r\n\r\n    let routines = ``;\r\n    for (let i = 0; i < routinesIncluded.length; ++i) {\r\n      if (routinesIncluded[i].routineBody) {\r\n        routines += routinesIncluded[i].routineBody + `\\n`;\r\n      } else {\r\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\r\n      }\r\n    }\r\n\r\n    return routines;\r\n  }\r\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\r\n    const nodes: GlslLibRoutineNode[] = [];\r\n\r\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\r\n      const routine = classAndRoutine.split('.')[1];\r\n      if (script.indexOf(routine) !== -1) {\r\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\r\n      }\r\n    });\r\n\r\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\r\n  }\r\n\r\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\r\n    const uniformLines: string[] = [];\r\n    if (samplers) {\r\n      for (const sampler of samplers) {\r\n        uniformLines.push(`uniform sampler2D ${sampler};`);\r\n      }\r\n    }\r\n    if (variables) {\r\n      for (const variable of variables) {\r\n        uniformLines.push(\r\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\r\n      }\r\n    }\r\n    return uniformLines.join('\\n');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nconst INLINE_FUNC_DEF_REGEX: RegExp =\r\n    /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\r\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\r\n/**\r\n * GLSL preprocessor responsible for resolving @inline directives\r\n */\r\nexport function replaceInlines(script: string): string {\r\n  const inlineDefs: {[name: string]: {params: Array<{type: string, name: string}|null>, body: string}} = {};\r\n  let match;\r\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\r\n    const params = match[3]\r\n                       .split(',')\r\n                       .map(s => {\r\n                         const tokens = s.trim().split(' ');\r\n                         if (tokens && tokens.length === 2) {\r\n                           return {type: tokens[0], name: tokens[1]};\r\n                         }\r\n                         return null;\r\n                       })\r\n                       .filter(v => v !== null);\r\n    inlineDefs[match[2]] = {params, body: match[4]};\r\n  }\r\n  for (const name in inlineDefs) {\r\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\r\n    const regex = new RegExp(regexString, 'gm');\r\n    while ((match = regex.exec(script)) !== null) {\r\n      const type = match[1];\r\n      const variable = match[2];\r\n      const params = match[3].split(',');\r\n      const declLine = (type) ? `${type} ${variable};` : '';\r\n      let newBody: string = inlineDefs[name].body;\r\n      let paramRedecLine = '';\r\n      inlineDefs[name].params.forEach((v, i) => {\r\n        if (v) {\r\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\r\n        }\r\n      });\r\n      newBody = `${paramRedecLine}\\n ${newBody}`;\r\n      newBody = newBody.replace('return', `${variable} = `);\r\n      const replacement = `\r\n      ${declLine}\r\n      {\r\n        ${newBody}\r\n      }\r\n      `;\r\n      script = script.replace(match[0], replacement);\r\n    }\r\n  }\r\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\r\n  return script;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\r\nimport {GlslContext, GlslLib} from './glsl-definitions';\r\nimport {EncodingGlslLib} from './glsl-encoding-lib';\r\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\r\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\r\nimport {VecGlslLib} from './glsl-vec-lib';\r\n\r\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\r\n  'encoding': EncodingGlslLib,\r\n  'fragcolor': FragColorGlslLib,\r\n  'vec': VecGlslLib,\r\n  'shapeUtils': ShapeUtilsGlslLib,\r\n  'coordinates': CoordsGlslLib,\r\n  //  'arrays': ArrayGlslSLib\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\nimport {getGlsl} from './glsl-source';\r\n\r\n/**\r\n * GLSL Library responsible for data types and routines for manipulating\r\n * coordinates and mapping to/from tensor indices\r\n */\r\nexport class CoordsGlslLib extends GlslLib {\r\n  returnType: string;\r\n\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine;} {\r\n    return {...this.offsetToCoords(), ...this.coordsToOffset(), ...this.toVec(), ...this.valueFrom()};\r\n  }\r\n  getCustomTypes() {\r\n    return {};\r\n  }\r\n  /**\r\n   * Produces a function that can map from\r\n   * 2D normalzied coordinates (s,t) to a flat offset\r\n   */\r\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\r\n    const funcName = `offsetToCoords`;\r\n    return {\r\n      offsetToCoords: new GlslLibRoutine(`\r\n      vec2 ${funcName}(int offset, int width, int height) {\r\n        int t = offset / width;\r\n        int s = offset - t*width;\r\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\r\n        return coords;\r\n      }\r\n      `)\r\n    };\r\n  }\r\n  /**\r\n   * Produces a function that can map from\r\n   * 2D normalzied coordinates (s,t) to a flat offset\r\n   */\r\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\r\n    const funcName = `coordsToOffset`;\r\n    return {\r\n      coordsToOffset: new GlslLibRoutine(`\r\n      int ${funcName}(vec2 coords, int width, int height) {\r\n        float s = coords.s * float(width);\r\n        float t = coords.t * float(height);\r\n        int offset = int(t) * width + int(s);\r\n        return offset;\r\n      }\r\n      `)\r\n    };\r\n  }\r\n  /**\r\n   * This is the main function to map from the given texture coordiantes (s,t)\r\n   * to logical indices for the output\r\n   * There will only be one single variation of this\r\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\r\n   */\r\n  protected toVec(): {[name: string]: GlslLibRoutine;} {\r\n    const output = this.context.programInfo.outputLayout;\r\n    const rank = output.shape.length;\r\n    const strides = output.strides;\r\n    const xScale = output.width;\r\n    const yScale = output.height;\r\n\r\n    const stridesBlock = [];\r\n    for (let i = 0; i < rank - 1; ++i) {\r\n      stridesBlock.push(`\r\n        c[${i}] = offset / ${strides[i]};`);\r\n      stridesBlock.push(`\r\n        offset -= c[${i}] * ${strides[i]};`);\r\n    }\r\n    stridesBlock.push(`\r\n        c[${rank - 1}] = offset;`);\r\n    const body = `\r\n      void toVec(vec2 texCoords, out int c[${rank}]) {\r\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\r\n        ${stridesBlock.join('')}\r\n      }\r\n      void toVec(int offset, out int c[${rank}]) {\r\n        ${stridesBlock.join('')}\r\n      }\r\n    `;\r\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\r\n  }\r\n  /**\r\n   * These are value getter functions generated for each input\r\n   * Each function is hardwired to the name and dimensions of the input\r\n   * An '_T' variation is also produced which accesses values as if the\r\n   * input was transposed\r\n   */\r\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\r\n    const programInfo = this.context.programInfo;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.samplers.forEach((name, i) => {\r\n      const layout = programInfo.inputLayouts[i];\r\n      const shape = layout.shape;\r\n      const rank = shape.length;\r\n      let funcName = `_${name}`;\r\n      result[funcName] = new GlslLibRoutine(\r\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\r\n          [`shapeUtils.indicesToOffset${funcName}`, `coordinates.offsetToCoords`, `fragcolor.getColorAsFloat`]);\r\n      funcName = funcName + '_T';\r\n      result[funcName] = new GlslLibRoutine(\r\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\r\n          [`shapeUtils.indicesToOffset${funcName}`, `coordinates.offsetToCoords`, `fragcolor.getColorAsFloat`]);\r\n    });\r\n    return result;\r\n  }\r\n  /**\r\n   * Produces one value getter function for the name and rank given\r\n   * If a transpose is set proper offsetToCoords mapping will be used\r\n   * @param name name of the function\r\n   * @param rank rank of the input\r\n   * @param transpose whether or not should generate a transpose variation\r\n   */\r\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\r\n      string {\r\n    let name = `_${varName}`;\r\n    if (transpose) {\r\n      name = name + '_T';\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    return `\r\n        float ${name}(int m[${rank}]) {\r\n          int offset = indicesToOffset${name}(m);\r\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\r\n          return value;\r\n        }\r\n        `;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * This GLSL library handles routines converting\r\n * float32 to/from Unsigned byte or float 16\r\n */\r\nexport class EncodingGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine;} {\r\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\r\n  }\r\n  getCustomTypes(): {[name: string]: string;} {\r\n    return {};\r\n  }\r\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\r\n        return vec4(f, 0.0, 0.0, 0.0);\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\r\n        return rgba.r;\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\r\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\r\n   */\r\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\r\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\r\n    return {\r\n      encode: new GlslLibRoutine(`\r\n      highp vec4 encode(highp float f) {\r\n        highp float F = abs(f);\r\n        highp float Sign = step(0.0,-f);\r\n        highp float Exponent = floor(log2(F));\r\n        highp float Mantissa = (exp2(- Exponent) * F);\r\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\r\n        highp vec4 rgba;\r\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\r\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\r\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\r\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\r\n        ${endianness}\r\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\r\n        return rgba;\r\n    }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * returns the routine to encode a vec4 of unsigned bytes to float32\r\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\r\n   */\r\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\r\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\r\n    return {\r\n      decode: new GlslLibRoutine(`\r\n        highp float decode(highp vec4 rgba) {\r\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\r\n          ${endianness}\r\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\r\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\r\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\r\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\r\n          return Result;\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * Determines if the machine is little endian or not\r\n   * @credit: https://gist.github.com/TooTallNate/4750953\r\n   */\r\n  static isLittleEndian(): boolean {\r\n    const b = new ArrayBuffer(4);\r\n    const a = new Uint32Array(b);\r\n    const c = new Uint8Array(b);\r\n    a[0] = 0xdeadbeef;\r\n    if (c[0] === 0xef) {\r\n      return true;\r\n    }\r\n    if (c[0] === 0xde) {\r\n      return false;\r\n    }\r\n    throw new Error('unknown endianness');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\nimport {getGlsl} from './glsl-source';\r\n\r\n/**\r\n * This GLSL library handles routines around reading a texlet and writing to it\r\n * Reading and writing could be more than just dealing with one channel\r\n * It may require encoding/decoding to/from 4 channels into one\r\n */\r\nexport class FragColorGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine;} {\r\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\r\n  }\r\n  getCustomTypes(): {[name: string]: string;} {\r\n    return {};\r\n  }\r\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    return {\r\n      setFragColor: new GlslLibRoutine(\r\n          `\r\n        void setFragColor(float value) {\r\n            ${glsl.output} = encode(value);\r\n        }\r\n        `,\r\n          ['encoding.encode'])\r\n    };\r\n  }\r\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      getColorAsFloat: new GlslLibRoutine(\r\n          `\r\n        float getColorAsFloat(vec4 color) {\r\n            return decode(color);\r\n        }\r\n        `,\r\n          ['encoding.decode'])\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * GLSL Library responsible for data types and routines for manipulating\r\n * coordinates and mapping to/from tensor indices\r\n */\r\nexport class ShapeUtilsGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine;} {\r\n    return {\r\n      ...this.bcastIndex(),\r\n      ...this.bcastMatmulIndex(),\r\n      ...this.offsetToIndices(),\r\n      ...this.indicesToOffset(),\r\n      ...this.incrementIndices()\r\n    };\r\n  }\r\n  getCustomTypes() {\r\n    return {};\r\n  }\r\n  protected bcastIndex(): {[name: string]: GlslLibRoutine;} {\r\n    const programInfo = this.context.programInfo;\r\n    const outputRank = programInfo.outputLayout.shape.length;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.samplers.forEach((name, i) => {\r\n      const shape = programInfo.inputLayouts[i].shape;\r\n      if (shape.length <= outputRank) {\r\n        const rank = shape.length;\r\n        const dimOffset = outputRank - rank;\r\n        const funcName = `bcastIndices_${name}`;\r\n        let block = '';\r\n        for (let i = 0; i < rank; ++i) {\r\n          block += `\r\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\r\n          `;\r\n        }\r\n        const body = `\r\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\r\n          ${block}\r\n        }\r\n        `;\r\n        result[funcName] = new GlslLibRoutine(body);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine;} {\r\n    const programInfo = this.context.programInfo;\r\n    const outputRank = programInfo.outputLayout.shape.length;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.samplers.forEach((name, i) => {\r\n      const shape = programInfo.inputLayouts[i].shape;\r\n      if (!(shape.length < 2 || shape.length > outputRank)) {\r\n        const rank = shape.length;\r\n        const dimOffset = outputRank - rank;\r\n        const funcName = `bcastMatmulIndices_${name}`;\r\n        let block = '';\r\n        for (let i = 0; i < rank - 2; ++i) {\r\n          block += `\r\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\r\n          `;\r\n        }\r\n        const body = `\r\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\r\n          ${block}\r\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\r\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\r\n        }\r\n        `;\r\n        result[funcName] = new GlslLibRoutine(body);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine;} {\r\n    const programInfo = this.context.programInfo;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.samplers.forEach((name, i) => {\r\n      const shape = programInfo.inputLayouts[i].shape;\r\n      const strides = programInfo.inputLayouts[i].strides;\r\n      const rank = shape.length;\r\n      let funcName = `indicesToOffset_${name}`;\r\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\r\n      funcName = `indicesToOffset_${name}_T`;\r\n      result[funcName] =\r\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\r\n    });\r\n    return result;\r\n  }\r\n  static indexToOffsetSingle(name: string, rank: number, strides: ReadonlyArray<number>): string {\r\n    let block = '';\r\n    for (let i = rank - 1; i >= 0; --i) {\r\n      block += `\r\n        offset += indices[${i}] * ${strides[i]};\r\n        `;\r\n    }\r\n    return `\r\n      int ${name}(int indices[${rank}]) {\r\n        int offset = 0;\r\n        ${block}\r\n        return offset;\r\n      }\r\n      `;\r\n  }\r\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine;} {\r\n    const programInfo = this.context.programInfo;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.samplers.forEach((name, i) => {\r\n      const shape = programInfo.inputLayouts[i].shape;\r\n      const strides = programInfo.inputLayouts[i].strides;\r\n      const rank = shape.length;\r\n      let funcName = `offsetToIndices_${name}`;\r\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\r\n      funcName = `offsetToIndices_${name}_T`;\r\n      result[funcName] =\r\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\r\n    });\r\n    return result;\r\n  }\r\n  static offsetToIndicesSingle(name: string, rank: number, strides: ReadonlyArray<number>): string {\r\n    const stridesBlock = [];\r\n    for (let i = 0; i < rank - 1; ++i) {\r\n      stridesBlock.push(`\r\n      indices[${i}] = offset / ${strides[i]};`);\r\n      stridesBlock.push(`\r\n        offset -= indices[${i}] * ${strides[i]};`);\r\n    }\r\n    stridesBlock.push(`\r\n      indices[${rank - 1}] = offset;`);\r\n    return `\r\n      void ${name}(int offset, out int indices[${rank}]) {\r\n        ${stridesBlock.join('')}\r\n      }\r\n      `;\r\n  }\r\n  protected incrementIndices(): {[name: string]: GlslLibRoutine;} {\r\n    const programInfo = this.context.programInfo;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.samplers.forEach((name, i) => {\r\n      const shape = programInfo.inputLayouts[i].shape;\r\n      const rank = shape.length;\r\n      const funcName = `incrementIndices_${name}`;\r\n      let shapeInit = '';\r\n      for (let i = 0; i < rank; ++i) {\r\n        shapeInit += `\r\n        shape[${i}] = ${shape[i]};`;\r\n      }\r\n      const body = `\r\n        void ${funcName}(int axis, out int indices[${rank}]) {\r\n          int shape[${rank}];\r\n          ${shapeInit};\r\n          for(int i = ${rank} -1 ; i >= 0; --i) {\r\n            if(i > axis) continue;\r\n            indices[i] += 1;\r\n            if(indices[i] < shape[i]) {\r\n              break;\r\n            }\r\n            indices[i] = 0;\r\n          }\r\n        }\r\n        `;\r\n      result[funcName] = new GlslLibRoutine(body);\r\n    });\r\n    return result;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * GLSL Library responsible for vec routines\r\n * Vec is an varible length int array. The length is fixed at the time of\r\n * generating the library functions from the dimensions of the output.\r\n */\r\nexport class VecGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getCustomTypes(): {[name: string]: string;} {\r\n    return {};\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine;} {\r\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\r\n  }\r\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine;} {\r\n    const outputLayout = this.context.programInfo.outputLayout;\r\n    const rank = outputLayout.shape.length;\r\n    const nameOp: {[name: string]: string;} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\r\n    const result: {[name: string]: GlslLibRoutine;} = {};\r\n    for (const name in nameOp) {\r\n      const fname = `${name}Vec`;\r\n      let assignmentBlock = '';\r\n      for (let i = 0; i < rank; ++i) {\r\n        assignmentBlock += `\r\n          dest[${i}] ${nameOp[name]} src[${i}];\r\n          `;\r\n      }\r\n      const body = `\r\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\r\n          ${assignmentBlock}\r\n        }\r\n        `;\r\n      result[fname] = new GlslLibRoutine(body);\r\n    }\r\n\r\n    return result;\r\n  }\r\n  protected copyVec(): {[name: string]: GlslLibRoutine;} {\r\n    const outputLayout = this.context.programInfo.outputLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let assignmentBlock = '';\r\n    for (let i = 0; i < rank; ++i) {\r\n      assignmentBlock += `\r\n        dest[${i}] = src[${i}];\r\n        `;\r\n    }\r\n    const body = `\r\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\r\n        ${assignmentBlock}\r\n      }\r\n      `;\r\n    return {copyVec: new GlslLibRoutine(body)};\r\n  }\r\n\r\n  protected setVecItem(): {[name: string]: GlslLibRoutine;} {\r\n    const outputLayout = this.context.programInfo.outputLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let block = `\r\n        if(index < 0)\r\n            index =${rank} + index;\r\n        if (index == 0)\r\n            m[0] = value;\r\n        `;\r\n    for (let i = 1; i < rank - 1; ++i) {\r\n      block += `\r\n        else if (index == ${i})\r\n            m[${i}] = value;\r\n            `;\r\n    }\r\n    block += `\r\n        else\r\n            m[${rank - 1}] = value;\r\n        `;\r\n    const body = `\r\n      void setVecItem(out int m[${rank}], int index, int value) {\r\n        ${block}\r\n      }\r\n        `;\r\n    return {setVecItem: new GlslLibRoutine(body)};\r\n  }\r\n  protected getVecItem(): {[name: string]: GlslLibRoutine;} {\r\n    const outputLayout = this.context.programInfo.outputLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let block = `\r\n        if(index < 0)\r\n            index = ${rank} + index;\r\n        if (index == 0)\r\n            return m[0];\r\n      `;\r\n    for (let i = 1; i < rank - 1; ++i) {\r\n      block += `\r\n        else if (index == ${i})\r\n            return m[${i}];\r\n      `;\r\n    }\r\n    block += `\r\n        else\r\n            return m[${rank - 1}];\r\n        `;\r\n    const body = `\r\n      int getVecItem(int m[${rank}], int index) {\r\n        ${block}\r\n      }\r\n    `;\r\n    return {getVecItem: new GlslLibRoutine(body)};\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Logger} from '../../instrument';\r\n\r\n/** Layout preferences */\r\nexport interface WidthHeightPrefs {\r\n  breakAxis: number;\r\n}\r\n/**\r\n * TextureLayoutStrategy is an abstraction for different plans\r\n * for mapping n-dimensional arrays to 2D textures (and back)\r\n */\r\nexport interface TextureLayoutStrategy {\r\n  computeTextureWH(shape: ReadonlyArray<number>, prefs?: WidthHeightPrefs): [number, number];\r\n}\r\n\r\n/**\r\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\r\n */\r\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\r\n  constructor(public maxTextureSize: number) {}\r\n  computeTextureWH(shape: ReadonlyArray<number>, prefs?: WidthHeightPrefs): [number, number] {\r\n    // scalar tensor\r\n    if (shape.length === 0) {\r\n      return [1, 1];\r\n    }\r\n    const maxTextureSize = this.maxTextureSize;\r\n    if (prefs) {\r\n      // check to see if dims fit\r\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\r\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\r\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\r\n        // ignore preferences\r\n        // continue with default layout\r\n        Logger.verbose(\r\n            'TextureLayout',\r\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\r\n      } else {\r\n        return [wsize, hsize];\r\n      }\r\n    }\r\n    const totalSize = shape.reduce((a, b) => a * b);\r\n\r\n    let width = Math.floor(Math.sqrt(totalSize));\r\n\r\n    for (; width < maxTextureSize && width < totalSize; width++) {\r\n      if (totalSize % width === 0) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (width >= maxTextureSize || totalSize % width !== 0) {\r\n      throw new Error(`The given dimensions are outside this GPU\\'s boundaries: ${shape}`);\r\n    }\r\n    return [width, totalSize / width];\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Logger, Profiler} from '../../instrument';\r\nimport {Tensor} from '../../tensor';\r\n\r\nimport {Encoder} from './texture-data-encoder';\r\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\r\nimport {TextureData, TextureLayout} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\nexport interface TextureManagerConfig {\r\n  reuseTextures?: boolean;\r\n}\r\n\r\n/**\r\n * TextureManager is the mainly responsible for caching Textures\r\n * Textures are cached in 2 levels:\r\n *   1. the texures which are associated with a dataId (from Tensor)\r\n *    Caching these is crucial to performance. These are In-use Textures\r\n *   2. textures which are not in use by any current ProgramInfo/Tensor\r\n *     These are called Free Textures\r\n * TextureManager is also used to help creating textures. For this it\r\n * uses WebGLContext and TextureLayoutStrategy\r\n */\r\nexport class TextureManager {\r\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\r\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\r\n  private readonly textureLookup: Map<WebGLTexture, string>;\r\n\r\n  constructor(\r\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\r\n      private config: TextureManagerConfig) {\r\n    if (config.reuseTextures) {\r\n      this.inUseTextures = new Map();\r\n      this.idleTextures = new Map();\r\n      this.textureLookup = new Map();\r\n    }\r\n  }\r\n  createTextureFromLayout(\r\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\r\n    const textureDataType = this.toEncoderType(dataType);\r\n\r\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\r\n\r\n    let key: string|undefined;\r\n    let inUseTextures: WebGLTexture[]|undefined;\r\n    if (this.config.reuseTextures) {\r\n      key = `${layout.width}x${layout.height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\r\n      inUseTextures = this.inUseTextures.get(key);\r\n      if (!inUseTextures) {\r\n        inUseTextures = [];\r\n        this.inUseTextures.set(key, inUseTextures);\r\n      }\r\n\r\n      const idleTextures = this.idleTextures.get(key);\r\n      if (idleTextures && idleTextures.length > 0) {\r\n        const texture = idleTextures.pop()!;\r\n        inUseTextures.push(texture);\r\n        if (usage === Encoder.Usage.UploadOnly) {\r\n          this.glContext.updateTexture(\r\n              texture, layout.width, layout.height, encoder, this.toTextureData(dataType, data)!);\r\n        }\r\n        return texture;\r\n      }\r\n    }\r\n\r\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\r\n    const texture =\r\n        this.glContext.allocateTexture(layout.width, layout.height, encoder, this.toTextureData(dataType, data));\r\n\r\n    if (this.config.reuseTextures) {\r\n      inUseTextures!.push(texture);\r\n      this.textureLookup.set(texture, key!);\r\n    }\r\n    return texture;\r\n  }\r\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\r\n    if (!channels) {\r\n      channels = 1;\r\n    }\r\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\r\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\r\n      const data = this.glContext.readTexture(\r\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\r\n      return this.toTensorData(dataType, data);\r\n    });\r\n  }\r\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\r\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\r\n      const dataSize = td.shape.reduce((a, b) => a * b);\r\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\r\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\r\n    });\r\n  }\r\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\r\n    let key: string|undefined;\r\n    if (this.config.reuseTextures) {\r\n      key = this.textureLookup.get(textureData.texture);\r\n      if (key) {\r\n        if (deleteTexture) {\r\n          this.textureLookup.delete(key);\r\n        }\r\n        const inUseTextures = this.inUseTextures.get(key);\r\n        if (inUseTextures) {\r\n          const index = inUseTextures.indexOf(textureData.texture);\r\n          if (index !== -1) {\r\n            inUseTextures.splice(index, 1);\r\n            let idleTextures = this.idleTextures.get(key);\r\n            if (!idleTextures) {\r\n              idleTextures = [];\r\n              this.idleTextures.set(key, idleTextures);\r\n            }\r\n            idleTextures.push(textureData.texture);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!key || deleteTexture) {\r\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\r\n      this.glContext.deleteTexture(textureData.texture);\r\n    }\r\n  }\r\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\r\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\r\n    /*\r\n    switch (dataType) {\r\n      case 'int16':\r\n        return new Int16Array(data);\r\n      case 'int32':\r\n        return new Int32Array(data);\r\n      case 'int8':\r\n        return new Int8Array(data);\r\n      case 'uint16':\r\n        return new Uint16Array(data);\r\n      case 'uint32':\r\n        return data as Uint32Array;\r\n      case 'uint8':\r\n      case 'bool':\r\n        return data as Uint8Array;\r\n      case 'float32':\r\n        return data as Float32Array;\r\n      case 'float64':\r\n        return new Float64Array(data);\r\n      default:\r\n        throw new Error(`TensorData type ${dataType} is not supported`);\r\n    }\r\n    */\r\n  }\r\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\r\n    if (!data) {\r\n      return undefined;\r\n    }\r\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\r\n    /*\r\n    switch (dataType) {\r\n      case 'int16':\r\n      case 'int32':\r\n      case 'uint16':\r\n      case 'uint32':\r\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\r\n      case 'int8':\r\n      case 'uint8':\r\n      case 'bool':\r\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\r\n      case 'float32':\r\n      case 'float64':\r\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\r\n      default:\r\n        throw new Error(`TensorData type ${dataType} is not supported`);\r\n    }\r\n    */\r\n  }\r\n  toEncoderType(dataType: Tensor.DataType): Encoder.DataType {\r\n    return 'float';\r\n    // switch (dataType) {\r\n    //   case 'int16':\r\n    //   case 'int32':\r\n    //   case 'uint16':\r\n    //   case 'uint32':\r\n    //     return 'int';\r\n    //   case 'uint8':\r\n    //   case 'bool':\r\n    //     return 'byte';\r\n    //   case 'float32':\r\n    //   case 'float64':\r\n    //     return 'float';\r\n    //   default:\r\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\r\n    // }\r\n  }\r\n  clearActiveTextures(): void {\r\n    this.glContext.clearActiveTextures();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Logger} from '../../instrument';\r\n\r\nimport {WebGLContext} from './webgl-context';\r\n\r\nconst cache: {[contextId: string]: WebGLContext} = {};\r\n\r\n/**\r\n * This factory function creates proper WebGLRenderingContext based on\r\n * the current browsers capabilities\r\n * The order is from higher/most recent versions to most basic\r\n */\r\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\r\n  let context: WebGLContext|undefined;\r\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\r\n    context = cache.webgl2;\r\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\r\n    context = cache.webgl;\r\n  }\r\n\r\n  context = context || createNewWebGLContext(contextId);\r\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\r\n  const gl = context.gl;\r\n\r\n  cache[contextId] = context;\r\n\r\n  if (gl.isContextLost()) {\r\n    delete cache[contextId];\r\n    return createWebGLContext(contextId);\r\n  }\r\n\r\n  gl.disable(gl.DEPTH_TEST);\r\n  gl.disable(gl.STENCIL_TEST);\r\n  gl.disable(gl.BLEND);\r\n  gl.disable(gl.DITHER);\r\n  gl.disable(gl.POLYGON_OFFSET_FILL);\r\n  gl.disable(gl.SAMPLE_COVERAGE);\r\n  gl.enable(gl.SCISSOR_TEST);\r\n  gl.enable(gl.CULL_FACE);\r\n  gl.cullFace(gl.BACK);\r\n\r\n  return context;\r\n}\r\n\r\nexport function createNewWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\r\n  const canvas = createCanvas();\r\n  const contextAttributes: WebGLContextAttributes = {\r\n    alpha: false,\r\n    depth: false,\r\n    antialias: false,\r\n    stencil: false,\r\n    preserveDrawingBuffer: false,\r\n    premultipliedAlpha: false,\r\n    failIfMajorPerformanceCaveat: false\r\n  };\r\n  let gl: WebGLRenderingContext|null;\r\n  const ca = contextAttributes;\r\n  if (!contextId || contextId === 'webgl2') {\r\n    gl = canvas.getContext('webgl2', ca);\r\n    if (gl) {\r\n      try {\r\n        return new WebGLContext(gl, 2);\r\n      } catch (err) {\r\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\r\n      }\r\n    }\r\n  }\r\n  if (!contextId || contextId === 'webgl') {\r\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\r\n    if (gl) {\r\n      try {\r\n        return new WebGLContext(gl, 1);\r\n      } catch (err) {\r\n        Logger.warning(\r\n            'GlContextFactory',\r\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new Error('WebGL is not supported');\r\n}\r\n\r\nfunction createCanvas(): HTMLCanvasElement {\r\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\r\n  canvas.width = 1;\r\n  canvas.height = 1;\r\n  return canvas;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {env} from '../../env';\r\n\r\nimport * as DataEncoders from './texture-data-encoder';\r\nimport {DataEncoder, Encoder} from './texture-data-encoder';\r\n\r\n/**\r\n * Abstraction and wrapper around WebGLRenderingContext and its operations\r\n */\r\nexport class WebGLContext {\r\n  gl: WebGLRenderingContext;\r\n  version: 1|2;\r\n\r\n  private vertexbuffer: WebGLBuffer;\r\n  private framebuffer: WebGLFramebuffer;\r\n\r\n  // WebGL flags and vital parameters\r\n  private isFloatTextureAttachableToFrameBuffer: boolean;\r\n  isFloat32DownloadSupported: boolean;\r\n  isRenderFloat32Supported: boolean;\r\n  isBlendSupported: boolean;\r\n  maxTextureSize: number;\r\n  // private maxCombinedTextureImageUnits: number;\r\n  private maxTextureImageUnits: number;\r\n  // private maxCubeMapTextureSize: number;\r\n  // private shadingLanguageVersion: string;\r\n  // private webglVendor: string;\r\n  // private webglVersion: string;\r\n\r\n  // WebGL2 flags and vital parameters\r\n  // private max3DTextureSize: number;\r\n  // private maxArrayTextureLayers: number;\r\n  // private maxColorAttachments: number;\r\n  // private maxDrawBuffers: number;\r\n\r\n  // WebGL extensions\r\n  textureFloatExtension: OES_texture_float|null;\r\n  textureHalfFloatExtension: OES_texture_half_float|null;\r\n\r\n  // WebGL2 extensions\r\n  colorBufferFloatExtension: {}|null;\r\n\r\n  private disposed: boolean;\r\n  private frameBufferBound = false;\r\n\r\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\r\n    this.gl = gl;\r\n    this.version = version;\r\n\r\n    this.getExtensions();\r\n    this.vertexbuffer = this.createVertexbuffer();\r\n    this.framebuffer = this.createFramebuffer();\r\n    this.queryVitalParameters();\r\n  }\r\n\r\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\r\n    const gl = this.gl;\r\n    // create the texture\r\n    const texture = gl.createTexture();\r\n    // bind the texture so the following methods effect this texture.\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    const buffer = data ? encoder.encode(data, width * height) : null;\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n        0,  // Level of detail.\r\n        encoder.internalFormat, width, height,\r\n        0,  // Always 0 in OpenGL ES.\r\n        encoder.format, encoder.textureType, buffer);\r\n    this.checkError();\r\n    return texture as WebGLTexture;\r\n  }\r\n  updateTexture(\r\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\r\n    const gl = this.gl;\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    const buffer = encoder.encode(data, width * height);\r\n    gl.texSubImage2D(\r\n        gl.TEXTURE_2D,\r\n        0,  // level\r\n        0,  // xoffset\r\n        0,  // yoffset\r\n        width, height, encoder.format, encoder.textureType, buffer);\r\n    this.checkError();\r\n  }\r\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\r\n    const gl = this.gl;\r\n    // Make it the target for framebuffer operations - including rendering.\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\r\n    gl.framebufferTexture2D(\r\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\r\n        0);  // 0, we aren't using MIPMAPs\r\n    this.checkError();\r\n    gl.viewport(0, 0, width, height);\r\n    gl.scissor(0, 0, width, height);\r\n  }\r\n  readTexture(\r\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\r\n      channels: number): Encoder.DataArrayType {\r\n    const gl = this.gl;\r\n    if (!channels) {\r\n      channels = 1;\r\n    }\r\n    if (!this.frameBufferBound) {\r\n      this.attachFramebuffer(texture, width, height);\r\n    }\r\n    const encoder = this.getEncoder(dataType, channels);\r\n    const buffer = encoder.allocate(width * height);\r\n    // bind texture to framebuffer\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.framebufferTexture2D(\r\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\r\n        0);  // 0, we aren't using MIPMAPs\r\n    // TODO: Check if framebuffer is ready\r\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\r\n    this.checkError();\r\n    // unbind FB\r\n    return encoder.decode(buffer, dataSize);\r\n  }\r\n  isFramebufferReady(): boolean {\r\n    // TODO: Implement logic to check if the framebuffer is ready\r\n    return true;\r\n  }\r\n  getActiveTexture(): string {\r\n    const gl = this.gl;\r\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\r\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\r\n  }\r\n  getTextureBinding(): WebGLTexture {\r\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\r\n  }\r\n  getFramebufferBinding(): WebGLFramebuffer {\r\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\r\n  }\r\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\r\n    const gl = this.gl;\r\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\r\n    gl.enableVertexAttribArray(positionHandle);\r\n    if (textureCoordHandle !== -1) {\r\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\r\n      gl.enableVertexAttribArray(textureCoordHandle);\r\n    }\r\n    this.checkError();\r\n  }\r\n  createProgram(\r\n      vertexShader: WebGLShader,\r\n      fragShader: WebGLShader,\r\n      ): WebGLProgram {\r\n    const gl = this.gl;\r\n    const program = gl.createProgram()!;\r\n\r\n    // the program consists of our shaders\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragShader);\r\n    gl.linkProgram(program);\r\n    return program;\r\n  }\r\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\r\n    const gl = this.gl;\r\n    const shader = gl.createShader(shaderType);\r\n    if (!shader) {\r\n      throw new Error(`createShader() returned null with type ${shaderType}`);\r\n    }\r\n\r\n    gl.shaderSource(shader, shaderSource);\r\n    gl.compileShader(shader);\r\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\r\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}`);\r\n    }\r\n    return shader;\r\n  }\r\n  deleteShader(shader: WebGLShader): void {\r\n    this.gl.deleteShader(shader);\r\n  }\r\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\r\n    const gl = this.gl;\r\n    gl.activeTexture(gl.TEXTURE0 + position);\r\n    this.checkError();\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    this.checkError();\r\n    gl.uniform1i(uniformHandle, position);\r\n    this.checkError();\r\n  }\r\n  draw(): void {\r\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\r\n    this.checkError();\r\n  }\r\n  checkError(): void {\r\n    if (env.debug) {\r\n      const gl = this.gl;\r\n      const error = gl.getError();\r\n      let label = '';\r\n      switch (error) {\r\n        case (gl.NO_ERROR):\r\n          return;\r\n        case (gl.INVALID_ENUM):\r\n          label = 'INVALID_ENUM';\r\n          break;\r\n        case (gl.INVALID_VALUE):\r\n          label = 'INVALID_VALUE';\r\n          break;\r\n        case (gl.INVALID_OPERATION):\r\n          label = 'INVALID_OPERATION';\r\n          break;\r\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\r\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\r\n          break;\r\n        case (gl.OUT_OF_MEMORY):\r\n          label = 'OUT_OF_MEMORY';\r\n          break;\r\n        case (gl.CONTEXT_LOST_WEBGL):\r\n          label = 'CONTEXT_LOST_WEBGL';\r\n          break;\r\n        default:\r\n          label = 'Unknown WebGL Error: ' + error.toString(16);\r\n      }\r\n      throw new Error(label);\r\n    }\r\n  }\r\n  deleteTexture(texture: WebGLTexture): void {\r\n    this.gl.deleteTexture(texture);\r\n  }\r\n  deleteProgram(program: WebGLProgram): void {\r\n    this.gl.deleteProgram(program);\r\n  }\r\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\r\n    if (this.version === 2) {\r\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\r\n    }\r\n\r\n    switch (dataType) {\r\n      case 'float':\r\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\r\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\r\n        } else {\r\n          return new DataEncoders.RGBAFloatDataEncoder(\r\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\r\n        }\r\n      case 'int':\r\n        throw new Error('not implemented');\r\n      case 'byte':\r\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\r\n      default:\r\n        throw new Error(`Invalid dataType: ${dataType}`);\r\n    }\r\n  }\r\n  clearActiveTextures(): void {\r\n    const gl = this.gl;\r\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\r\n      gl.activeTexture(gl.TEXTURE0 + unit);\r\n      gl.bindTexture(gl.TEXTURE_2D, null);\r\n    }\r\n  }\r\n  dispose(): void {\r\n    if (this.disposed) {\r\n      return;\r\n    }\r\n    const gl = this.gl;\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    gl.deleteFramebuffer(this.framebuffer);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n    gl.deleteBuffer(this.vertexbuffer);\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n    gl.finish();\r\n    this.disposed = true;\r\n  }\r\n\r\n  private createDefaultGeometry(): Float32Array {\r\n    // Sets of x,y,z(=0),s,t coordinates.\r\n    return new Float32Array([\r\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\r\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\r\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\r\n      1.0,  -1.0, 0.0, 1.0, 0.0\r\n    ]);  // lower right\r\n  }\r\n  private createVertexbuffer(): WebGLBuffer {\r\n    const gl = this.gl;\r\n    const buffer = gl.createBuffer();\r\n    if (!buffer) {\r\n      throw new Error('createBuffer() returned null');\r\n    }\r\n    const geometry = this.createDefaultGeometry();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\r\n    this.checkError();\r\n    return buffer;\r\n  }\r\n  private createFramebuffer(): WebGLFramebuffer {\r\n    const fb = this.gl.createFramebuffer();\r\n    if (!fb) {\r\n      throw new Error('createFramebuffer returned null');\r\n    }\r\n    return fb;\r\n  }\r\n\r\n  private queryVitalParameters(): void {\r\n    const gl = this.gl;\r\n\r\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\r\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\r\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\r\n\r\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\r\n      throw new Error(`both float32 and float16 TextureType are not supported`);\r\n    }\r\n\r\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\r\n\r\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\r\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\r\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\r\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\r\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\r\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\r\n    // this.webglVersion = gl.getParameter(gl.VERSION);\r\n\r\n    if (this.version === 2) {\r\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\r\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\r\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\r\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\r\n    }\r\n  }\r\n  private getExtensions(): void {\r\n    if (this.version === 2) {\r\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\r\n    } else {\r\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\r\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\r\n    }\r\n  }\r\n\r\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\r\n    // test whether Float32 texture is supported:\r\n    // STEP.1 create a float texture\r\n    const gl = this.gl;\r\n    const texture = gl.createTexture();\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\r\n    // STEP.2 bind a frame buffer\r\n    const frameBuffer = gl.createFramebuffer();\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n    // STEP.3 attach texture to framebuffer\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n    // STEP.4 test whether framebuffer is complete\r\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\r\n    gl.bindTexture(gl.TEXTURE_2D, null);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    gl.deleteTexture(texture);\r\n    gl.deleteFramebuffer(frameBuffer);\r\n    return isComplete;\r\n  }\r\n\r\n  private checkRenderFloat32(): boolean {\r\n    if (this.version === 2) {\r\n      if (!this.colorBufferFloatExtension) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (!this.textureFloatExtension) {\r\n        return false;\r\n      }\r\n    }\r\n    return this.isFloatTextureAttachableToFrameBuffer;\r\n  }\r\n\r\n  private checkFloat32Download(): boolean {\r\n    if (this.version === 2) {\r\n      if (!this.colorBufferFloatExtension) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (!this.textureFloatExtension) {\r\n        return false;\r\n      }\r\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\r\n        return false;\r\n      }\r\n    }\r\n    return this.isFloatTextureAttachableToFrameBuffer;\r\n  }\r\n\r\n  /**\r\n   * Check whether GL_BLEND is supported\r\n   */\r\n  private checkFloat32Blend(): boolean {\r\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\r\n    // https://github.com/microsoft/onnxjs/issues/145\r\n\r\n    const gl = this.gl;\r\n\r\n    let texture: WebGLTexture|null|undefined;\r\n    let frameBuffer: WebGLFramebuffer|null|undefined;\r\n    let vertexShader: WebGLShader|null|undefined;\r\n    let fragmentShader: WebGLShader|null|undefined;\r\n    let program: WebGLProgram|null|undefined;\r\n\r\n    try {\r\n      texture = gl.createTexture();\r\n      frameBuffer = gl.createFramebuffer();\r\n      gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\r\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\r\n\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n\r\n      gl.enable(gl.BLEND);\r\n\r\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\r\n      if (!vertexShader) {\r\n        return false;\r\n      }\r\n      gl.shaderSource(vertexShader, 'void main(){}');\r\n      gl.compileShader(vertexShader);\r\n\r\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n      if (!fragmentShader) {\r\n        return false;\r\n      }\r\n      gl.shaderSource(fragmentShader, `precision highp float;void main(){gl_FragColor=vec4(0.5);}`);\r\n      gl.compileShader(fragmentShader);\r\n\r\n      program = gl.createProgram();\r\n      if (!program) {\r\n        return false;\r\n      }\r\n      gl.attachShader(program, vertexShader);\r\n      gl.attachShader(program, fragmentShader);\r\n      gl.linkProgram(program);\r\n      gl.useProgram(program);\r\n\r\n      gl.drawArrays(gl.POINTS, 0, 1);\r\n      return gl.getError() === gl.NO_ERROR;\r\n\r\n    } finally {\r\n      gl.disable(gl.BLEND);\r\n\r\n      if (program) {\r\n        gl.deleteProgram(program);\r\n      }\r\n      if (vertexShader) {\r\n        gl.deleteShader(vertexShader);\r\n      }\r\n      if (fragmentShader) {\r\n        gl.deleteShader(fragmentShader);\r\n      }\r\n      if (frameBuffer) {\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        gl.deleteFramebuffer(frameBuffer);\r\n      }\r\n      if (texture) {\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n        gl.deleteTexture(texture);\r\n      }\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Logger} from '../../instrument';\r\n\r\nexport declare namespace Encoder {\r\n  export interface DataTypeMap {\r\n    float: Float32Array;\r\n    byte: Uint8Array;\r\n    int: Uint32Array;\r\n  }\r\n  export type DataType = keyof DataTypeMap;\r\n  type DataArrayType = DataTypeMap[DataType];\r\n\r\n  export const enum Usage {\r\n    Default = 0,\r\n    UploadOnly,\r\n    Download4BytesAsFloat32,\r\n  }\r\n}\r\n\r\n/**\r\n * Abstraction for mapping data types to texture texlets\r\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\r\n * Decoding means how a texlet's channels are mapped to a resulting Float32\r\n */\r\nexport interface DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\r\n  allocate(size: number): Encoder.DataArrayType;\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\r\n}\r\n/**\r\n * WebGL2 data encoder\r\n * Uses R32F as the format for texlet\r\n */\r\nexport class RedFloat32DataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\r\n    if (channels === 1) {\r\n      this.internalFormat = gl.R32F;\r\n      this.format = gl.RED;\r\n      this.textureType = gl.FLOAT;\r\n      this.channelSize = channels;\r\n    } else if (channels === 4) {\r\n      this.internalFormat = gl.RGBA32F;\r\n      this.format = gl.RGBA;\r\n      this.textureType = gl.FLOAT;\r\n      this.channelSize = channels;\r\n    } else {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n  }\r\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\r\n    let result: Float32Array;\r\n    let source: Float32Array;\r\n    if (src.constructor !== Float32Array) {\r\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\r\n      source = new Float32Array(src);\r\n    }\r\n    if (textureSize * this.channelSize > src.length) {\r\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\r\n      source = src as Float32Array;\r\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\r\n      source.forEach((v, i) => result[i] = v);\r\n    } else {\r\n      source = src as Float32Array;\r\n      result = source;\r\n    }\r\n    return result;\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Float32Array(size * 4);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\r\n    if (this.channelSize === 1) {\r\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\r\n      return filteredData;\r\n    }\r\n    return buffer.subarray(0, dataSize) as Float32Array;\r\n  }\r\n}\r\n/**\r\n * Data encoder for WebGL 1 with support for floating point texture\r\n */\r\nexport class RGBAFloatDataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\r\n    if (channels !== 1 && channels !== 4) {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n    this.internalFormat = gl.RGBA;\r\n    this.format = gl.RGBA;\r\n    this.channelSize = channels;\r\n    this.textureType = textureType || gl.FLOAT;\r\n  }\r\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\r\n    let dest = src;\r\n    if (this.channelSize === 1) {\r\n      Logger.verbose('Encoder', 'Exploding into a larger array');\r\n      dest = this.allocate(textureSize) as Float32Array;\r\n      src.forEach((v, i) => dest[i * 4] = v);\r\n    }\r\n    return dest;\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Float32Array(size * 4);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\r\n    if (this.channelSize === 1) {\r\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\r\n      return filteredData;\r\n    }\r\n    return buffer.subarray(0, dataSize) as Float32Array;\r\n  }\r\n}\r\n\r\nexport class Uint8DataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize = 4;\r\n  constructor(gl: WebGLRenderingContext, channels = 1) {\r\n    if (channels === 1) {\r\n      this.internalFormat = gl.ALPHA;\r\n      this.format = gl.ALPHA;  // not tested\r\n      this.textureType = gl.UNSIGNED_BYTE;\r\n      this.channelSize = channels;\r\n    } else if (channels === 4) {\r\n      this.internalFormat = gl.RGBA;\r\n      this.format = gl.RGBA;\r\n      this.textureType = gl.UNSIGNED_BYTE;\r\n      this.channelSize = channels;\r\n    } else {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n  }\r\n  encode(src: Uint8Array, textureSize: number): Encoder.DataArrayType {\r\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Uint8Array(size * this.channelSize);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\r\n    if (buffer instanceof Uint8Array) {\r\n      return buffer.subarray(0, dataSize);\r\n    }\r\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {env} from '../env';\r\n\r\nimport {Environment} from './env';\r\n\r\nclass ENV implements Environment {\r\n  public set debug(value: boolean) {\r\n    env.debug = value;\r\n  }\r\n  public get debug(): boolean {\r\n    return env.debug;\r\n  }\r\n}\r\n\r\nexport const envImpl = new ENV();\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * represent a tensor with specified dimensions and data type.\r\n */\r\nexport interface Tensor {\r\n  /**\r\n   * get the dimensions of the tensor\r\n   */\r\n  readonly dims: ReadonlyArray<number>;\r\n\r\n  /**\r\n   * get the data type of the tensor\r\n   */\r\n  readonly type: Tensor.Type;\r\n\r\n  /**\r\n   * get the number of elements in the tensor\r\n   */\r\n  readonly size: number;\r\n\r\n  /**\r\n   * get the underlying data of the tensor\r\n   */\r\n  readonly data: Tensor.DataType;\r\n\r\n  /**\r\n   * get value of an element\r\n   * @param indices the indices to the element\r\n   * @returns value of the element\r\n   */\r\n  get(...indices: number[]): Tensor.ElementType;\r\n\r\n  /**\r\n   * get value of an element\r\n   * @param indices the indices to the element\r\n   * @returns value of the element\r\n   */\r\n  get(indices: ReadonlyArray<number>): Tensor.ElementType;\r\n\r\n  /**\r\n   * set value of an element\r\n   * @param value the value to set\r\n   * @param indices the indices to the element\r\n   */\r\n  set(value: Tensor.ElementType, ...indices: number[]): void;\r\n\r\n  /**\r\n   * set value of an element\r\n   * @param value the value to set\r\n   * @param indices the indices to the element\r\n   */\r\n  set(value: Tensor.ElementType, indices: ReadonlyArray<number>): void;\r\n}\r\n\r\nexport declare namespace Tensor {\r\n  interface DataTypeMap {\r\n    bool: Uint8Array;\r\n    float32: Float32Array;\r\n    int32: Int32Array;\r\n    string: string[];\r\n  }\r\n\r\n  interface ElementTypeMap {\r\n    bool: boolean;\r\n    float32: number;\r\n    int32: number;\r\n    string: string;\r\n  }\r\n\r\n  type DataType = DataTypeMap[Type];\r\n  type ElementType = ElementTypeMap[Type];\r\n\r\n  /**\r\n   * represent the data type of a tensor\r\n   */\r\n  export type Type = keyof DataTypeMap;\r\n}\r\n\r\nexport interface TensorConstructor {\r\n  /**\r\n   * Create a Tensor with provided data, dimension, and type\r\n   * @param data The value of the tensor. It could a flat array or a TypedArray.\r\n   * @param type The data type. Should match the value of the tensor, else throw\r\n   *     TypeError exception.\r\n   * @param dims Optional. Should match the length of the value provided. If not\r\n   *     specified, dims will be inferred as a 1d tensor.\r\n   */\r\n  new(data: Tensor.DataType|boolean[]|number[], type: Tensor.Type, dims?: ReadonlyArray<number>): Tensor;\r\n}\r\n\r\nexport interface TensorConstructor {\r\n  // Tensor factory functions\r\n}\r\n\r\nexport interface Tensor {\r\n  // Tensor utilities\r\n}\r\n\r\nimport * as TensorImpl from './tensor-impl';\r\nexport const Tensor: TensorConstructor = TensorImpl.Tensor;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Tensor} from './tensor';\r\n\r\n/**\r\n * represent a runtime instance of an ONNX model\r\n */\r\nexport interface InferenceSession {\r\n  //#region loadModel\r\n\r\n  /**\r\n   * load an ONNX model asynchronously\r\n   * @param uri the URI of the model to load\r\n   */\r\n  loadModel(uri: string): Promise<void>;\r\n  /**\r\n   * load an ONNX model\r\n   * @param blob a Blob object representation of an ONNX model\r\n   */\r\n  loadModel(blob: Blob): Promise<void>;\r\n  /**\r\n   * load an ONNX model\r\n   * @param buffer an ArrayBuffer representation of an ONNX model\r\n   */\r\n  loadModel(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Promise<void>;\r\n  /**\r\n   * load an ONNX model\r\n   * @param buffer an Uint8Array representation of an ONNX model\r\n   */\r\n  loadModel(buffer: Uint8Array): Promise<void>;\r\n\r\n  //#endregion loadModel\r\n\r\n  /**\r\n   * execute the model asynchronously with the given inputs, output names and options\r\n   * @param inputs representation of the model input. It can be a string-to-tensor Map object or a plain object,\r\n   *     with all required inputs present with their names as keys; it can be a tensor array as well, with input\r\n   *     tensors inside in the order defined by the model.\r\n   * @param options Optional. A set of options that controls the behavior of model inference\r\n   * @returns a Promise object representing the result of the execution. Resolve to a string-to-tensor Map object\r\n   *     for the model output, or reject to any runtime error.\r\n   */\r\n  run(inputs: InferenceSession.InputType, options?: InferenceSession.RunOptions): Promise<InferenceSession.OutputType>;\r\n\r\n  /**\r\n   * start profiling for the session\r\n   */\r\n  startProfiling(): void;\r\n  /**\r\n   * end profiling for the session and flush data\r\n   */\r\n  endProfiling(): void;\r\n}\r\n\r\nexport declare namespace InferenceSession {\r\n  type TensorsMapType = ReadonlyMap<string, Tensor>;\r\n  type TensorsIndexType = {readonly [name: string]: Tensor};\r\n  type TensorsArrayType = ReadonlyArray<Tensor>;\r\n  type InputType = TensorsMapType|TensorsIndexType|TensorsArrayType;\r\n  type OutputType = TensorsMapType;\r\n\r\n  export namespace Config {\r\n    /**\r\n     * represent the configuration of the profiler that used in an inference session\r\n     */\r\n    export interface Profiler {\r\n      /**\r\n       * the max number of events to be recorded\r\n       */\r\n      maxNumberEvents?: number;\r\n      /**\r\n       * the maximum size of a batch to flush\r\n       */\r\n      flushBatchSize?: number;\r\n      /**\r\n       * the maximum interval in milliseconds to flush\r\n       */\r\n      flushIntervalInMilliseconds?: number;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * configuration for creating a new inference session\r\n   */\r\n  export interface Config {\r\n    /**\r\n     * specify a hint of the preferred backend. If not set, the backend will be determined by the platform and\r\n     * environment.\r\n     */\r\n    backendHint?: string;\r\n\r\n    /**\r\n     * specify the configuration of the profiler that used in an inference session\r\n     */\r\n    profiler?: Config.Profiler;\r\n  }\r\n\r\n  /**\r\n   * options for running inference\r\n   */\r\n  export interface RunOptions {\r\n    /**\r\n     * represent a list of output names as an array of string. This must be a subset of the output list defined by the\r\n     * model. If not specified, use the model's output list.\r\n     */\r\n    outputNames?: ReadonlyArray<string>;\r\n  }\r\n}\r\n\r\nexport interface InferenceSessionConstructor {\r\n  /**\r\n   * construct a new inference session\r\n   * @param config specify configuration for creating a new inference session\r\n   */\r\n  new(config?: InferenceSession.Config): InferenceSession;\r\n}\r\n\r\nimport * as InferenceSessionImpl from './inference-session-impl';\r\nexport const InferenceSession: InferenceSessionConstructor = InferenceSessionImpl.InferenceSession;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Session} from '../session';\r\nimport {Tensor as InternalTensor} from '../tensor';\r\n\r\nimport {InferenceSession as InferenceSessionInterface} from './inference-session';\r\nimport * as TensorInterface from './tensor';\r\nimport {Tensor as ApiTensor} from './tensor-impl';\r\nimport * as tensorUtils from './tensor-impl-utils';\r\n\r\ntype InputType = InferenceSessionInterface.InputType;\r\ntype RunOptions = InferenceSessionInterface.RunOptions;\r\ntype OutputType = InferenceSessionInterface.OutputType;\r\n\r\nexport class InferenceSession implements InferenceSessionInterface {\r\n  session: Session;\r\n  constructor(config?: InferenceSessionInterface.Config) {\r\n    this.session = new Session(config);\r\n  }\r\n  loadModel(uri: string): Promise<void>;\r\n  loadModel(blob: Blob): Promise<void>;\r\n  loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\r\n  loadModel(buffer: Uint8Array): Promise<void>;\r\n  loadModel(arg0: string|Blob|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\r\n    if (typeof arg0 === 'string') {\r\n      return this.session.loadModel(arg0);\r\n    } else if (typeof Blob !== 'undefined' && (arg0 instanceof Blob)) {\r\n      // create a url from Blob\r\n      const url = URL.createObjectURL(arg0);\r\n      return this.session.loadModel(url);\r\n    } else if (arg0 instanceof ArrayBuffer) {\r\n      // load model from array buffer\r\n      return this.session.loadModel(arg0, byteOffset, length);\r\n    } else if (ArrayBuffer.isView(arg0)) {\r\n      // load model from Uint8array\r\n      return this.session.loadModel(arg0);\r\n    } else {\r\n      throw new Error('Model type is not supported.');\r\n    }\r\n  }\r\n\r\n  async run(inputFeed: InputType, options?: RunOptions): Promise<OutputType> {\r\n    let output = new Map<string, InternalTensor>();\r\n    if (inputFeed instanceof Map) {\r\n      const modelInputFeed = new Map<string, InternalTensor>();\r\n      inputFeed.forEach((value: ApiTensor, key: string) => {\r\n        modelInputFeed.set(key, value.internalTensor);\r\n      });\r\n      output = await this.session.run(modelInputFeed);\r\n    } else if (Array.isArray(inputFeed)) {\r\n      const modelInputFeed: InternalTensor[] = [];\r\n      inputFeed.forEach((value) => {\r\n        modelInputFeed.push(value.internalTensor);\r\n      });\r\n      output = await this.session.run(modelInputFeed);\r\n    } else {\r\n      const modelInputFeed = new Map<string, InternalTensor>();\r\n      for (const name in inputFeed) {\r\n        modelInputFeed.set(name, (inputFeed as {readonly [name: string]: ApiTensor})[name].internalTensor);\r\n      }\r\n    }\r\n    const convertedOutput: Map<string, TensorInterface.Tensor> = new Map<string, TensorInterface.Tensor>();\r\n    output.forEach((value, key) => {\r\n      convertedOutput.set(key, tensorUtils.fromInternalTensor(value));\r\n    });\r\n    return convertedOutput;\r\n  }\r\n  startProfiling(): void {\r\n    this.session.startProfiling();\r\n  }\r\n  endProfiling(): void {\r\n    this.session.endProfiling();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {readFile} from 'fs';\r\nimport {promisify} from 'util';\r\n\r\nimport {Backend, SessionHandlerType} from './backend';\r\nimport {ExecutionPlan} from './execution-plan';\r\nimport {Graph} from './graph';\r\nimport {Profiler} from './instrument';\r\nimport {Model} from './model';\r\nimport {Operator} from './operators';\r\nimport {Tensor} from './tensor';\r\n\r\nexport declare namespace Session {\r\n  export interface Config {\r\n    backendHint?: string;\r\n    profiler?: Profiler.Config;\r\n  }\r\n\r\n  export interface Context {\r\n    profiler: Readonly<Profiler>;\r\n    graphInputTypes?: Tensor.DataType[];\r\n    graphInputDims?: Array<ReadonlyArray<number>>;\r\n  }\r\n}\r\n\r\nexport class Session {\r\n  constructor(config: Session.Config = {}) {\r\n    this._initialized = false;\r\n    this.backendHint = config.backendHint;\r\n    this.profiler = Profiler.create(config.profiler);\r\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\r\n  }\r\n\r\n  startProfiling() {\r\n    this.profiler.start();\r\n  }\r\n\r\n  endProfiling() {\r\n    this.profiler.stop();\r\n  }\r\n\r\n  async loadModel(uri: string): Promise<void>;\r\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\r\n  async loadModel(buffer: Uint8Array): Promise<void>;\r\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\r\n    await this.profiler.event('session', 'Session.loadModel', async () => {\r\n      // resolve backend and session handler\r\n      const backend = await Backend(this.backendHint);\r\n      this.sessionHandler = backend.createSessionHandler(this.context);\r\n\r\n      this._model = new Model();\r\n      if (typeof arg === 'string') {\r\n        if (typeof fetch === 'undefined') {\r\n          // node\r\n          const buf = await promisify(readFile)(arg);\r\n          this.initialize(Buffer.from(buf));\r\n        } else {\r\n          // browser\r\n          const response = await fetch(arg);\r\n          const buf = await response.arrayBuffer();\r\n          this.initialize(Buffer.from(buf));\r\n        }\r\n      } else if (!ArrayBuffer.isView(arg)) {\r\n        // load model from ArrayBuffer\r\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\r\n        this.initialize(Buffer.from(arr));\r\n      } else {\r\n        // load model from Uint8array\r\n        this.initialize(Buffer.from(arg));\r\n      }\r\n    });\r\n  }\r\n\r\n  private initialize(modelProtoBlob: Buffer): void {\r\n    if (this._initialized) {\r\n      throw new Error('already initialized');\r\n    }\r\n\r\n    this.profiler.event('session', 'Session.initialize', () => {\r\n      // load graph\r\n      const graphInitializer =\r\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\r\n      this._model.load(modelProtoBlob, graphInitializer);\r\n\r\n      // graph is completely initialzied at this stage , let the interested handlers know\r\n      if (this.sessionHandler.onGraphInitialized) {\r\n        this.sessionHandler.onGraphInitialized(this._model.graph);\r\n      }\r\n      // initialize each operator in the graph\r\n      this.initializeOps(this._model.graph);\r\n\r\n      // instantiate an ExecutionPlan object to be used by the Session object\r\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\r\n    });\r\n\r\n    this._initialized = true;\r\n  }\r\n\r\n  run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\r\n    if (!this._initialized) {\r\n      throw new Error('session not initialized yet');\r\n    }\r\n\r\n    return this.profiler.event('session', 'Session.run', async () => {\r\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\r\n\r\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\r\n\r\n      return this.createOutput(outputTensors);\r\n    });\r\n  }\r\n\r\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\r\n    const modelInputNames = this._model.graph.getInputNames();\r\n\r\n    // normalize inputs\r\n    // inputs: Tensor[]\r\n    if (Array.isArray(inputs)) {\r\n      if (inputs.length !== modelInputNames.length) {\r\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\r\n      }\r\n    }\r\n    // convert map to array\r\n    // inputs: Map<string, Tensor>\r\n    else {\r\n      if (inputs.size !== modelInputNames.length) {\r\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\r\n      }\r\n\r\n      const sortedInputs = new Array<Tensor>(inputs.size);\r\n      let sortedInputsIndex = 0;\r\n      for (let i = 0; i < modelInputNames.length; ++i) {\r\n        const tensor = inputs.get(modelInputNames[i]);\r\n        if (!tensor) {\r\n          throw new Error(`missing input tensor for: '${name}'`);\r\n        }\r\n        sortedInputs[sortedInputsIndex++] = tensor;\r\n      }\r\n\r\n      inputs = sortedInputs;\r\n    }\r\n\r\n    // validate dims requirements\r\n    // First session run - graph input data is not cached for the session\r\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\r\n        this.context.graphInputDims.length === 0) {\r\n      const modelInputIndices = this._model.graph.getInputIndices();\r\n      const modelValues = this._model.graph.getValues();\r\n\r\n      const graphInputDims = new Array<ReadonlyArray<number>>(modelInputIndices.length);\r\n\r\n      for (let i = 0; i < modelInputIndices.length; ++i) {\r\n        const graphInput = modelValues[modelInputIndices[i]];\r\n        graphInputDims[i] = graphInput.type!.shape.dims;\r\n\r\n        // cached for second and subsequent runs.\r\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\r\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\r\n        this.context.graphInputDims!.push(inputs[i].dims);\r\n      }\r\n\r\n      this.validateInputTensorDims(graphInputDims, inputs, true);\r\n    }\r\n\r\n    // Second and subsequent session runs - graph input data is cached for the session\r\n    else {\r\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\r\n    }\r\n\r\n    // validate types requirement\r\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\r\n\r\n    return inputs;\r\n  }\r\n\r\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\r\n    for (let i = 0; i < givenInputs.length; i++) {\r\n      const expectedType = graphInputTypes[i];\r\n      const actualType = givenInputs[i].type;\r\n      if (expectedType !== actualType) {\r\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private validateInputTensorDims(\r\n      graphInputDims: Array<ReadonlyArray<number>>, givenInputs: Tensor[], noneDimSupported: boolean) {\r\n    for (let i = 0; i < givenInputs.length; i++) {\r\n      const expectedDims = graphInputDims[i];\r\n      const actualDims = givenInputs[i].dims;\r\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\r\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\r\n            actualDims.join(',')}]`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private compareTensorDims(\r\n      expectedDims: ReadonlyArray<number>, actualDims: ReadonlyArray<number>, noneDimSupported: boolean): boolean {\r\n    if (expectedDims.length !== actualDims.length) {\r\n      return false;\r\n    }\r\n\r\n    for (let i = 0; i < expectedDims.length; ++i) {\r\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\r\n        // data shape mis-match AND not a 'None' dimension.\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\r\n    const modelOutputNames = this._model.graph.getOutputNames();\r\n    if (outputTensors.length !== modelOutputNames.length) {\r\n      throw new Error(`expected number of outputs do not match number of generated outputs`);\r\n    }\r\n\r\n    const output = new Map<string, Tensor>();\r\n    for (let i = 0; i < modelOutputNames.length; ++i) {\r\n      output.set(modelOutputNames[i], outputTensors[i]);\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  private initializeOps(graph: Graph): void {\r\n    const nodes = graph.getNodes();\r\n    this._ops = new Array(nodes.length);\r\n\r\n    for (let i = 0; i < nodes.length; i++) {\r\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\r\n    }\r\n  }\r\n\r\n  private _model: Model;\r\n  private _initialized: boolean;\r\n\r\n  private _ops: Operator[];\r\n  private _executionPlan: ExecutionPlan;\r\n\r\n  private backendHint?: string;\r\n\r\n  private sessionHandler: SessionHandlerType;\r\n  private context: Session.Context;\r\n  private profiler: Readonly<Profiler>;\r\n}\r\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||\n  function getOwnPropertyDescriptors(obj) {\n    var keys = Object.keys(obj);\n    var descriptors = {};\n    for (var i = 0; i < keys.length; i++) {\n      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n    }\n    return descriptors;\n  };\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  if (typeof process !== 'undefined' && process.noDeprecation === true) {\n    return fn;\n  }\n\n  // Allow for deprecating things in the process of starting up.\n  if (typeof process === 'undefined') {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n\nexports.promisify = function promisify(original) {\n  if (typeof original !== 'function')\n    throw new TypeError('The \"original\" argument must be of type Function');\n\n  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n    var fn = original[kCustomPromisifiedSymbol];\n    if (typeof fn !== 'function') {\n      throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n    }\n    Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n      value: fn, enumerable: false, writable: false, configurable: true\n    });\n    return fn;\n  }\n\n  function fn() {\n    var promiseResolve, promiseReject;\n    var promise = new Promise(function (resolve, reject) {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n    args.push(function (err, value) {\n      if (err) {\n        promiseReject(err);\n      } else {\n        promiseResolve(value);\n      }\n    });\n\n    try {\n      original.apply(this, args);\n    } catch (err) {\n      promiseReject(err);\n    }\n\n    return promise;\n  }\n\n  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n\n  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n    value: fn, enumerable: false, writable: false, configurable: true\n  });\n  return Object.defineProperties(\n    fn,\n    getOwnPropertyDescriptors(original)\n  );\n}\n\nexports.promisify.custom = kCustomPromisifiedSymbol\n\nfunction callbackifyOnRejected(reason, cb) {\n  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\n  // Because `null` is a special error value in callbacks which means \"no error\n  // occurred\", we error-wrap so the callback consumer can distinguish between\n  // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\n  if (!reason) {\n    var newReason = new Error('Promise was rejected with a falsy value');\n    newReason.reason = reason;\n    reason = newReason;\n  }\n  return cb(reason);\n}\n\nfunction callbackify(original) {\n  if (typeof original !== 'function') {\n    throw new TypeError('The \"original\" argument must be of type Function');\n  }\n\n  // We DO NOT return the promise as it gives the user a false sense that\n  // the promise is actually somehow related to the callback's execution\n  // and that the callback throwing will reject the promise.\n  function callbackified() {\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    var maybeCb = args.pop();\n    if (typeof maybeCb !== 'function') {\n      throw new TypeError('The last argument must be of type Function');\n    }\n    var self = this;\n    var cb = function() {\n      return maybeCb.apply(self, arguments);\n    };\n    // In true node style we process the callback on `nextTick` with all the\n    // implications (stack, `uncaughtException`, `async_hooks`)\n    original.apply(this, args)\n      .then(function(ret) { process.nextTick(cb, null, ret) },\n            function(rej) { process.nextTick(callbackifyOnRejected, rej, cb) });\n  }\n\n  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n  Object.defineProperties(callbackified,\n                          getOwnPropertyDescriptors(original));\n  return callbackified;\n}\nexports.callbackify = callbackify;\n","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Graph} from './graph';\r\nimport {Operator} from './operators';\r\nimport {OpSet} from './opset';\r\nimport {Session} from './session';\r\n\r\nexport interface InferenceHandler {\r\n  /**\r\n   * dispose the inference handler. it will be called as the last step in Session.run()\r\n   */\r\n  dispose(): void;\r\n}\r\n\r\nexport interface SessionHandler {\r\n  /**\r\n   * transform the graph at initialization time\r\n   * @param graphTransformer the graph transformer to manipulate the model graph\r\n   */\r\n  transformGraph?(graphTransformer: Graph.Transformer): void;\r\n\r\n  /**\r\n   * create an instance of InferenceHandler to use in a Session.run() call\r\n   */\r\n  createInferenceHandler(): InferenceHandler;\r\n\r\n  /**\r\n   * dispose the session handler. it will be called when a session is being disposed explicitly\r\n   */\r\n  dispose(): void;\r\n\r\n  /**\r\n   * Resolves the operator from the name and opset version; backend specific\r\n   * @param node the node to resolve\r\n   * @param opsets a list of opsets that exported from the model\r\n   * @param graph the completely initialized graph\r\n   */\r\n  resolve(node: Graph.Node, opsets: ReadonlyArray<OpSet>, graph: Graph): Operator;\r\n\r\n  /**\r\n   * This method let's the sessionHandler know that the graph initialization is complete\r\n   * @param graph the completely initialized graph\r\n   */\r\n  onGraphInitialized?(graph: Graph): void;\r\n\r\n  /**\r\n   * a reference to the corresponding backend\r\n   */\r\n  readonly backend: Backend;\r\n\r\n  /**\r\n   * a reference to the session context\r\n   */\r\n  readonly context: Session.Context;\r\n}\r\n\r\nexport interface Backend {\r\n  /**\r\n   * initialize the backend. will be called only once, when the first time the\r\n   * backend it to be used\r\n   */\r\n  initialize(): boolean|Promise<boolean>;\r\n\r\n  /**\r\n   * create an instance of SessionHandler to use in a Session object's lifecycle\r\n   */\r\n  createSessionHandler(context: Session.Context): SessionHandler;\r\n\r\n  /**\r\n   * dispose the backend. currently this will not be called\r\n   */\r\n  dispose(): void;\r\n}\r\n\r\n// caches all initialized backend instances\r\nconst backendsCache: Map<string, Backend> = new Map();\r\n\r\n/**\r\n * Resolve a reference to the backend. If a hint is specified, the corresponding\r\n * backend will be used.\r\n */\r\nexport async function Backend(hint?: string|ReadonlyArray<string>): Promise<Backend> {\r\n  if (!hint) {\r\n    return Backend(['webgl', 'wasm', 'cpu']);\r\n  } else {\r\n    const hints = typeof hint === 'string' ? [hint] : hint;\r\n\r\n    for (const backendHint of hints) {\r\n      const cache = backendsCache.get(backendHint);\r\n      if (cache) {\r\n        return cache;\r\n      }\r\n\r\n      const backend = await tryLoadBackend(backendHint);\r\n      if (backend) {\r\n        return backend;\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new Error('no available backend to use');\r\n}\r\n\r\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\r\n  const backendObj = onnx.backend;\r\n\r\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\r\n    if (!backendObj[backendHint].disabled) {\r\n      const backend = backendObj[backendHint] as Backend;\r\n      let init = backend.initialize();\r\n      if (typeof init === 'object' && 'then' in init) {\r\n        init = await init;\r\n      }\r\n      if (init) {\r\n        backendsCache.set(backendHint, backend);\r\n        return backend;\r\n      }\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nfunction isBackend(obj: unknown) {\r\n  // tslint:disable-next-line:no-any\r\n  const o = obj as any;\r\n\r\n  // check if an object is a Backend instance\r\n  if (\r\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\r\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\r\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\r\n  ) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport type BackendType = Backend;\r\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\r\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {SessionHandler} from './backend';\r\nimport {Graph} from './graph';\r\nimport {Logger, Profiler} from './instrument';\r\nimport {Operator} from './operators';\r\nimport {Tensor} from './tensor';\r\n\r\nclass KernelOp {\r\n  constructor(public op: Operator, public node: Graph.Node) {}\r\n}\r\n\r\nexport class ExecutionPlan {\r\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\r\n    this.initialize(ops);\r\n  }\r\n\r\n  initialize(ops: Operator[]) {\r\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\r\n      const graphNodes = this.graph.getNodes();\r\n      if (graphNodes.length !== ops.length) {\r\n        throw new Error('The size of nodes and OPs do not match.');\r\n      }\r\n\r\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\r\n      this.reset();\r\n\r\n      // look for starter node(s)\r\n      this._starter = [];\r\n      this._ops.forEach((op, i) => {\r\n        let resolved = true;\r\n        for (const input of op.node.inputs) {\r\n          if (\r\n              !this._values[input]                                   // not an initialized input\r\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\r\n          ) {\r\n            resolved = false;\r\n            break;\r\n          }\r\n        }\r\n        if (resolved) {\r\n          this._starter.push(i);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  reset() {\r\n    this._values = this.graph.getValues().map(i => i.tensor);\r\n  }\r\n\r\n  execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\r\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\r\n      // reset mediem result\r\n      this.reset();\r\n\r\n      // create inference handler\r\n      const inferenceHandler = sessionHandler.createInferenceHandler();\r\n\r\n      // populate inputs value\r\n      const graphInputs = this.graph.getInputIndices();\r\n      if (modelInputs.length !== graphInputs.length) {\r\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\r\n            modelInputs.length} expected: ${graphInputs.length}`);\r\n      }\r\n\r\n      modelInputs.forEach((input, i) => {\r\n        const index = graphInputs[i];\r\n        this._values[index] = input;\r\n      });\r\n\r\n      // prepare running sequence\r\n      const sequence: number[] = this._starter.slice(0);\r\n\r\n      // execution iterations\r\n      const graphValues = this.graph.getValues();\r\n      const graphNodes = this.graph.getNodes();\r\n\r\n      let rear = 0;\r\n      while (rear < sequence.length) {\r\n        const thisOpIndex = sequence[rear++];\r\n        const thisOp = this._ops[thisOpIndex];\r\n\r\n        // check input\r\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\r\n        if (inputList.indexOf(undefined) !== -1) {\r\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\r\n        }\r\n\r\n        // run\r\n        const inputTensors = inputList as Tensor[];\r\n        Logger.verbose(\r\n            'ExecPlan',\r\n            `Runing op:${thisOp.node.name} (${\r\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\r\n\r\n        const outputList = await this.profiler.event('node', thisOp.node.name, async () => {\r\n          const op = thisOp.op;\r\n          if (!op.checkInputs(inputTensors)) {\r\n            throw new Error(`invalid inputs detected; op: ${thisOp.node.name}`);\r\n          }\r\n\r\n          const result = op.run(inferenceHandler, inputTensors);\r\n\r\n          return result;\r\n        });\r\n\r\n        // check output\r\n        if (outputList.length !== thisOp.node.outputs.length) {\r\n          throw new Error('the size of output does not match model definition.');\r\n        }\r\n\r\n        // fill value\r\n        outputList.forEach((output, i) => {\r\n          const j = thisOp.node.outputs[i];\r\n          if (this._values[j]) {\r\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\r\n          }\r\n          this._values[j] = output;\r\n        });\r\n\r\n        // resolve downstream nodes\r\n        const downstreamNodes = new Set<number>();\r\n        outputList.forEach((output, i) => {\r\n          const j = thisOp.node.outputs[i];\r\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\r\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\r\n            let resolved = true;\r\n            for (const k of currentDownstreamNode.inputs) {\r\n              if (!this._values[k]) {\r\n                resolved = false;\r\n                break;\r\n              }\r\n            }\r\n            if (resolved) {\r\n              downstreamNodes.add(currentDownstreamNodeIndex);\r\n            }\r\n          }\r\n        });\r\n        sequence.push(...downstreamNodes);\r\n      }\r\n\r\n      const output: Tensor[] = [];\r\n      this.graph.getOutputIndices().forEach((outputIndex, i) => {\r\n        const thisValue = this._values[outputIndex];\r\n        if (thisValue === undefined) {\r\n          throw new Error(`required output [${outputIndex}] does not have value`);\r\n        }\r\n        // tslint:disable-next-line:no-unused-expression-chai\r\n        thisValue.data;\r\n        output.push(thisValue);\r\n      });\r\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\r\n      inferenceHandler.dispose();\r\n      return output;\r\n    });\r\n  }\r\n\r\n  _values: Array<Tensor|undefined>;\r\n  _ops: KernelOp[];\r\n  _starter: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {Graph} from './graph';\r\nimport {OpSet} from './opset';\r\nimport {LongUtil} from './util';\r\n\r\nexport class Model {\r\n  // empty model\r\n  constructor() {}\r\n\r\n  load(buf: Buffer, graphInitializer?: Graph.Initializer): void {\r\n    const modelProto = onnx.ModelProto.decode(buf);\r\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\r\n    if (irVersion < 3) {\r\n      throw new Error('only support ONNX model with IR_VERSION>=3');\r\n    }\r\n\r\n    this._opsets = modelProto.opsetImport.map(i => {\r\n      return {domain: i.domain as string, version: LongUtil.longToNumber(i.version!)};\r\n    });\r\n\r\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\r\n  }\r\n\r\n  private _graph: Graph;\r\n  get graph(): Graph {\r\n    return this._graph;\r\n  }\r\n\r\n  private _opsets: OpSet[];\r\n  get opsets(): ReadonlyArray<OpSet> {\r\n    return this._opsets;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {Attribute} from './attribute';\r\nimport {Tensor} from './tensor';\r\nimport {ProtoUtil} from './util';\r\n\r\nexport declare namespace Graph {\r\n  export interface Shape {\r\n    readonly dims: ReadonlyArray<number>;\r\n  }\r\n  export interface ValueType {\r\n    readonly tensorType: Tensor.DataType;\r\n    readonly shape: Shape;\r\n  }\r\n  export interface Value {\r\n    // the tensor data. empty for non-initialized inputs\r\n    readonly tensor?: Tensor;\r\n\r\n    // index to the Node where the value comes from. -1 for initializer.\r\n    readonly from: number;\r\n\r\n    // indices to the Nodes where the values go to.\r\n    readonly to: ReadonlyArray<number>;\r\n\r\n    // value type specification. empty for non-input values.\r\n    readonly type?: ValueType;\r\n  }\r\n  export interface Node {\r\n    // name of the node\r\n    readonly name: string;\r\n\r\n    // the operator type\r\n    readonly opType: string;\r\n\r\n    // indices to the Values where the inputs come from.\r\n    readonly inputs: ReadonlyArray<number>;\r\n\r\n    // indices to the Values where the outpus go to.\r\n    readonly outputs: ReadonlyArray<number>;\r\n\r\n    // the attributes that used by the operator\r\n    readonly attributes: Attribute;\r\n  }\r\n\r\n  /**\r\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\r\n   */\r\n  export interface Transformer {\r\n    removeAllIdentityNodes(): void;\r\n    removeAllDropoutNodes(): void;\r\n    // TODO: add generic functions to manipulate the graph\r\n  }\r\n\r\n  // an initializer can use transformer to transform the graph\r\n  export interface Initializer {\r\n    transformGraph(transformer: Transformer): void;\r\n  }\r\n}\r\n\r\nexport interface Graph {\r\n  getInputIndices(): ReadonlyArray<number>;\r\n  getInputNames(): ReadonlyArray<string>;\r\n  getOutputIndices(): ReadonlyArray<number>;\r\n  getOutputNames(): ReadonlyArray<string>;\r\n  getValues(): ReadonlyArray<Graph.Value>;\r\n  getNodes(): ReadonlyArray<Graph.Node>;\r\n}\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const Graph = {\r\n  /**\r\n   * construct a graph from a graph protobuf type\r\n   */\r\n  from: (graphProto: onnx.IGraphProto, initializer?: Graph.Initializer) => new GraphImpl(graphProto, initializer)\r\n};\r\n\r\nclass Value implements Graph.Value {\r\n  constructor(valueInfo?: onnx.IValueInfoProto) {\r\n    this._from = undefined;\r\n    this._to = [];\r\n    this.tensor = undefined;\r\n    this.type = undefined;\r\n\r\n    if (valueInfo) {\r\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\r\n    }\r\n  }\r\n\r\n  _from?: number;  // -1 represent from initializer\r\n  get from() {\r\n    return this._from!;\r\n  }\r\n  _to: number[];\r\n  get to() {\r\n    return this._to;\r\n  }\r\n  type?: Graph.ValueType;\r\n  tensor?: Tensor;\r\n}\r\n\r\nclass Node implements Graph.Node {\r\n  constructor(_nodeProto: onnx.INodeProto) {\r\n    this.name = _nodeProto.name!;\r\n    this.opType = _nodeProto.opType!;\r\n    this.inputs = [];\r\n    this.outputs = [];\r\n    this.attributes = new Attribute(_nodeProto.attribute);\r\n    this.executeNode = true;\r\n  }\r\n\r\n  name: string;\r\n  opType: string;\r\n  inputs: number[];\r\n  outputs: number[];\r\n  attributes: Attribute;\r\n  executeNode: boolean;\r\n}\r\n\r\nclass GraphImpl implements Graph, Graph.Transformer {\r\n  private _allData: Value[];\r\n\r\n  private _allInputIndices: number[];\r\n  private _allInputNames: string[];\r\n\r\n  private _allOutputIndices: number[];\r\n  private _allOutputNames: string[];\r\n\r\n  private _nodes: Node[];\r\n\r\n  constructor(graph: onnx.IGraphProto, graphInitializer?: Graph.Initializer) {\r\n    if (!graph) {\r\n      throw new TypeError('graph is empty');\r\n    }\r\n\r\n    // build the graph - will throw exceptions if something fatal is detected\r\n    this.buildGraph(graph);\r\n\r\n    // execute any transformation logic for the graph (if applicable)\r\n    this.transformGraph(graphInitializer);\r\n\r\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\r\n    this.checkIsAcyclic();\r\n  }\r\n\r\n  getInputIndices(): ReadonlyArray<number> {\r\n    return this._allInputIndices;\r\n  }\r\n\r\n  getInputNames(): ReadonlyArray<string> {\r\n    return this._allInputNames;\r\n  }\r\n\r\n  getOutputIndices(): ReadonlyArray<number> {\r\n    return this._allOutputIndices;\r\n  }\r\n\r\n  getOutputNames(): ReadonlyArray<string> {\r\n    return this._allOutputNames;\r\n  }\r\n\r\n  getValues(): ReadonlyArray<Graph.Value> {\r\n    return this._allData;\r\n  }\r\n\r\n  getNodes(): ReadonlyArray<Graph.Node> {\r\n    return this._nodes;\r\n  }\r\n\r\n  private buildGraph(graph: onnx.IGraphProto) {\r\n    const dataIndices = new Map<string, number>();\r\n    this._allData = [];\r\n\r\n    this._allInputIndices = [];\r\n    this._allInputNames = [];\r\n\r\n    this._allOutputIndices = [];\r\n    this._allOutputNames = [];\r\n\r\n    this._nodes = [];\r\n\r\n    const nodesIndices = new Map<string, number>();\r\n\r\n    // scan all inputs\r\n    if (!graph.input) {\r\n      throw new Error('missing information in graph: input');\r\n    }\r\n    const inputValueNames = [];\r\n    for (const i of graph.input) {\r\n      if (dataIndices.has(i.name!)) {\r\n        throw new Error(`duplicated input name: ${i.name}`);\r\n      }\r\n      const currentIndex = this._allData.push(new Value(i)) - 1;\r\n      dataIndices.set(i.name!, currentIndex);\r\n      inputValueNames.push(i.name!);\r\n    }\r\n\r\n    // scan all initializers\r\n    if (!graph.initializer) {\r\n      throw new Error('missing information in graph: initializer');\r\n    }\r\n    for (const i of graph.initializer) {\r\n      let index = dataIndices.get(i.name!);\r\n      if (index === undefined) {\r\n        const value = new Value();\r\n        value.type = {\r\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\r\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\r\n        };\r\n        index = this._allData.push(value) - 1;\r\n        dataIndices.set(i.name!, index);\r\n      }\r\n      this._allData[index]._from = -1;\r\n      this._allData[index].tensor = Tensor.fromProto(i);\r\n    }\r\n\r\n    // filter out input indices\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      if (!this._allData[i].tensor) {\r\n        this._allInputIndices.push(i);\r\n        this._allInputNames.push(inputValueNames[i]);\r\n      }\r\n    }\r\n\r\n    // scan all outputs\r\n    if (!graph.output) {\r\n      throw new Error('missing information in graph: output');\r\n    }\r\n    for (const i of graph.output) {\r\n      if (dataIndices.has(i.name!)) {\r\n        throw new Error(`duplicated output name: ${i.name}`);\r\n      }\r\n      const currentIndex = this._allData.push(new Value(i)) - 1;\r\n      dataIndices.set(i.name!, currentIndex);\r\n      this._allOutputIndices.push(currentIndex);\r\n      this._allOutputNames.push(i.name!);\r\n    }\r\n\r\n    // scan all nodes\r\n    if (!graph.node) {\r\n      throw new Error('missing information in graph: node');\r\n    }\r\n    for (const nodeProto of graph.node) {\r\n      if (!nodeProto.name) {\r\n        // assign a name to the node if it doesn't have one\r\n        for (let pick = 0;; pick++) {\r\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\r\n          if (!nodesIndices.has(name)) {\r\n            nodeProto.name = name;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (nodesIndices.has(nodeProto.name)) {\r\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\r\n      }\r\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\r\n      nodesIndices.set(nodeProto.name, currentIndex);\r\n    }\r\n\r\n    // scan node's outputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.node[i];\r\n      if (!nodeProto.output) {\r\n        throw new Error(`missing output for node: ${nodeProto.name}`);\r\n      }\r\n      for (const output of nodeProto.output) {\r\n        let dataIndex = dataIndices.get(output);\r\n        if (typeof dataIndex === 'undefined') {\r\n          dataIndex = this._allData.push(new Value()) - 1;\r\n          dataIndices.set(output, dataIndex);\r\n        }\r\n        node.outputs.push(dataIndex);\r\n\r\n        if (this._allData[dataIndex]._from !== undefined) {\r\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\r\n        }\r\n        this._allData[dataIndex]._from = i;\r\n\r\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\r\n        // operator and ignore the node from the graph\r\n        if (nodeProto.opType === 'Constant') {\r\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\r\n            throw new Error(`missing attributes or missing tensor value in attributes for this Constant operator`);\r\n          }\r\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\r\n            throw new Error(`missing output or incorrect number of outputs for this Constant operator`);\r\n          }\r\n          node.outputs.pop();\r\n          node.executeNode = false;\r\n\r\n          this._allData[dataIndex]._from = -1;\r\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\r\n        }\r\n      }\r\n    }\r\n\r\n    // scan node's inputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.node[i];\r\n\r\n      if (!nodeProto.input) {\r\n        throw new Error(`missing input for node: ${nodeProto.name}`);\r\n      }\r\n      for (const input of nodeProto.input) {\r\n        const dataIndex = dataIndices.get(input);\r\n        if (typeof dataIndex === 'undefined') {\r\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\r\n        }\r\n        node.inputs.push(dataIndex);\r\n\r\n        this._allData[dataIndex]._to.push(i);\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private checkIsAcyclic() {\r\n    // go through the graph and check for cycles or other fatal inconsistencies\r\n    const starters: Set<number> = new Set<number>();\r\n    this._allInputIndices.forEach(i => {\r\n      const data = this._allData[i];\r\n      data._to.forEach(j => {\r\n        starters.add(j);\r\n      });\r\n    });\r\n\r\n    // Iterative DFS to check for cycles\r\n    const nodesStack = Array.from(starters);\r\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\r\n\r\n    while (nodesStack.length > 0) {\r\n      const nodeIndex = nodesStack.pop()!;\r\n      // this node has now been processed completely. Mark this node 'black' to denote this.\r\n      if (nodesState[nodeIndex] === 'gray') {\r\n        nodesState[nodeIndex] = 'black';\r\n      } else {\r\n        // this node is under processing stage. mark this node 'gray' to denote this.\r\n        nodesStack.push(nodeIndex);\r\n        nodesState[nodeIndex] = 'gray';\r\n\r\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\r\n          const data = this._allData[outgoingEdgeIndex];\r\n          if (typeof data.tensor !== 'undefined') {\r\n            throw new Error(`node outputs should not be initialized`);\r\n          }\r\n          if (data._from !== nodeIndex) {\r\n            throw new Error(`from property of the Value object doesn't match index of Node being processed`);\r\n          }\r\n          data._to.forEach((downstreamNodeIndex) => {\r\n            // back edge found - cyclic\r\n            if (nodesState[downstreamNodeIndex] === 'gray') {\r\n              throw new Error(`model graph is cyclic`);\r\n            }\r\n            // tree edge found - continue processing by adding it to stack\r\n            else if (nodesState[downstreamNodeIndex] === 'white') {\r\n              nodesStack.push(downstreamNodeIndex);\r\n            }\r\n          });\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\r\n    // apply common transform\r\n    this.removeAllIdentityNodes();\r\n    this.removeAllDropoutNodes();\r\n\r\n    // apply initializer specific transform\r\n    if (graphInitializer) {\r\n      graphInitializer.transformGraph(this);\r\n    }\r\n\r\n    // finalize graph\r\n    this.finalizeGraph();\r\n  }\r\n\r\n  /**\r\n   * finalize the graph.\r\n   *\r\n   * this function should be called after all the transformation completed.\r\n   * this function removes all unnecessary nodes and values from the graph\r\n   */\r\n  finalizeGraph() {\r\n    let offset = 0;\r\n    // delete all nodes that are not being executed\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      if (!this._nodes[i].executeNode) {\r\n        // delete this node and shift all subsequent nodes up\r\n        offset++;\r\n        // delete all output values\r\n        this._nodes[i].outputs.forEach(ind => {\r\n          this._allData[ind]._from = -2;\r\n        });\r\n        this._nodes.splice(i, 1);\r\n        i--;\r\n        continue;\r\n      }\r\n      if (offset > 0) {\r\n        // update the value table\r\n        this._nodes[i].inputs.forEach(value => {\r\n          const ind = this._allData[value]._to.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._allData[value]._to[ind] = i;\r\n          }\r\n        });\r\n        this._nodes[i].outputs.forEach(value => {\r\n          if (this._allData[value]._from && this._allData[value]._from! === i + offset) {\r\n            this._allData[value]._from! = i;\r\n          }\r\n        });\r\n      }\r\n    }\r\n    offset = 0;\r\n    // delete all values that are not being referenced\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      // if current value is neither linked to next node, nor an output value, remove it.\r\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\r\n        offset++;\r\n        this._allData.splice(i, 1);\r\n        i--;\r\n        continue;\r\n      }\r\n      if (offset > 0) {\r\n        let ind = -1;\r\n        // if current value is neither an input value nor an initializer, find the node it's\r\n        // coming from and update the corresponding node output\r\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\r\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._nodes[this._allData[i].from].outputs[ind] = i;\r\n          }\r\n        } else {\r\n          // if current value is an input value, update its reference in inputIndices\r\n          ind = this._allInputIndices.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._allInputIndices[ind] = i;\r\n          }\r\n        }\r\n\r\n        // find the node that the current value is linking to and update its input reference\r\n        this._allData[i].to.forEach(node => {\r\n          ind = this._nodes[node].inputs.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._nodes[node].inputs[ind] = i;\r\n          }\r\n        });\r\n        if (this._allData[i].to.length === 0) {\r\n          // if current value is a graph output, update its reference in outputIndices\r\n          ind = this._allOutputIndices.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._allOutputIndices[ind] = i;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete the specifed node. Assume the node has only one input and the first output connected to other nodes\r\n   * @param nodeIndex The index of node to be deleted\r\n   */\r\n  private deleteNode(nodeIndex: number) {\r\n    const node = this._nodes[nodeIndex];\r\n    if (node.inputs.length > 1) {\r\n      throw new Error(`Node deletion with multiple inputs is not supported. `);\r\n    }\r\n    if (node.outputs.length > 1) {\r\n      for (let i = 1; i < node.outputs.length; i++) {\r\n        if (this._allData[node.outputs[i]].to.length > 0) {\r\n          throw new Error(`Node deletion with more than one output connected to other nodes is not supported. `);\r\n        }\r\n      }\r\n    }\r\n\r\n    // this node wil not be executed\r\n    node.executeNode = false;\r\n    const inputValueIndex = node.inputs[0];\r\n    const outputValueIndex = node.outputs[0];\r\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\r\n\r\n    // remove this node from the to property of the input Value\r\n    const delIndex = this._allData[inputValueIndex].to.indexOf(nodeIndex);\r\n    // should not happen\r\n    if (delIndex === -1) {\r\n      throw new Error(`The Value object doesn't have the current Node in it's 'to' property `);\r\n    }\r\n    this._allData[inputValueIndex].to.splice(delIndex, 1);\r\n\r\n    // clear node indices consuming this output Value\r\n    this._allData[outputValueIndex]._to = [];\r\n\r\n    // if the output of this node is a graph output, adjust the index appropriately\r\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\r\n    if (index !== -1) {\r\n      this._allOutputIndices[index] = inputValueIndex;\r\n    }\r\n\r\n    // override the inputs for nodes consuming this node's output with the input to this node\r\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\r\n      for (const nodeIndex of nodesConsumingOutput) {\r\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\r\n        // should not happen\r\n        if (replaceIndex === -1) {\r\n          throw new Error(`The Node object doesn't have the output Value in it's 'inputs' property `);\r\n        }\r\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\r\n        this._allData[inputValueIndex].to.push(nodeIndex);\r\n      }\r\n    }\r\n  }\r\n\r\n  removeAllDropoutNodes() {\r\n    let nodeIndex = 0;\r\n    for (const node of this._nodes) {\r\n      // weed out 'Dropout' nodes so that no time is wasted in execution\r\n      if (node.opType === 'Dropout') {\r\n        // the node should have exactly 1 input and 1 or 2 outputs\r\n        if (node.inputs.length !== 1) {\r\n          throw new Error(`Dropout nodes should only contain one input. `);\r\n        }\r\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\r\n          throw new Error(`Dropout nodes should contain either 1 or 2 output(s)`);\r\n        }\r\n        // the second output should not be referenced by any other node\r\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\r\n          throw new Error(`Dropout nodes's second output should not be referenced by other nodes`);\r\n        }\r\n        this.deleteNode(nodeIndex);\r\n      }\r\n      nodeIndex++;\r\n    }\r\n  }\r\n\r\n  removeAllIdentityNodes() {\r\n    let nodeIndex = 0;\r\n    for (const node of this._nodes) {\r\n      // weed out 'Identity' nodes so that no time is wasted in execution\r\n      if (node.opType === 'Identity') {\r\n        this.deleteNode(nodeIndex);\r\n      }\r\n      nodeIndex++;\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport Long from 'long';\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {Tensor} from './tensor';\r\nimport {LongUtil} from './util';\r\n\r\nexport declare namespace Attribute {\r\n  export interface DataTypeMap {\r\n    float: number;\r\n    int: number;\r\n    string: string;\r\n    tensor: Tensor;\r\n    floats: number[];\r\n    ints: number[];\r\n    strings: string[];\r\n    tensors: Tensor[];\r\n  }\r\n\r\n  export type DataType = keyof DataTypeMap;\r\n}\r\n\r\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\r\n\r\ntype Value = [ValueTypes, Attribute.DataType];\r\n\r\nexport class Attribute {\r\n  constructor(attributes: onnx.IAttributeProto[]|null|undefined) {\r\n    this._attributes = new Map();\r\n    if (attributes !== null && attributes !== undefined) {\r\n      for (const attr of attributes) {\r\n        this._attributes.set(attr.name!, [Attribute.getValue(attr), Attribute.getType(attr)]);\r\n      }\r\n\r\n      if (this._attributes.size < attributes.length) {\r\n        throw new Error('duplicated attribute names');\r\n      }\r\n    }\r\n  }\r\n\r\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\r\n    this._attributes.set(key, [value, type]);\r\n  }\r\n  delete(key: string): void {\r\n    this._attributes.delete(key);\r\n  }\r\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\r\n    return this.get(key, 'float', defaultValue);\r\n  }\r\n\r\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\r\n    return this.get(key, 'int', defaultValue);\r\n  }\r\n\r\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\r\n    return this.get(key, 'string', defaultValue);\r\n  }\r\n\r\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\r\n    return this.get(key, 'tensor', defaultValue);\r\n  }\r\n\r\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\r\n    return this.get(key, 'floats', defaultValue);\r\n  }\r\n\r\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\r\n    return this.get(key, 'ints', defaultValue);\r\n  }\r\n\r\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\r\n    return this.get(key, 'strings', defaultValue);\r\n  }\r\n\r\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\r\n    return this.get(key, 'tensors', defaultValue);\r\n  }\r\n\r\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\r\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\r\n    const valueAndType = this._attributes.get(key);\r\n    if (valueAndType === undefined) {\r\n      if (defaultValue !== undefined) {\r\n        return defaultValue;\r\n      }\r\n      throw new Error(`required attribute not found: ${key}`);\r\n    }\r\n    if (valueAndType[1] !== type) {\r\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\r\n    }\r\n    return valueAndType[0] as V;\r\n  }\r\n\r\n  private static getType(attr: onnx.IAttributeProto): Attribute.DataType {\r\n    switch (attr.type!) {\r\n      case onnx.AttributeProto.AttributeType.FLOAT:\r\n        return 'float';\r\n      case onnx.AttributeProto.AttributeType.INT:\r\n        return 'int';\r\n      case onnx.AttributeProto.AttributeType.STRING:\r\n        return 'string';\r\n      case onnx.AttributeProto.AttributeType.TENSOR:\r\n        return 'tensor';\r\n      case onnx.AttributeProto.AttributeType.FLOATS:\r\n        return 'floats';\r\n      case onnx.AttributeProto.AttributeType.INTS:\r\n        return 'ints';\r\n      case onnx.AttributeProto.AttributeType.STRINGS:\r\n        return 'strings';\r\n      case onnx.AttributeProto.AttributeType.TENSORS:\r\n        return 'tensors';\r\n      default:\r\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\r\n    }\r\n  }\r\n\r\n  private static getValue(attr: onnx.IAttributeProto) {\r\n    if (attr.type === onnx.AttributeProto.AttributeType.GRAPH ||\r\n        attr.type === onnx.AttributeProto.AttributeType.GRAPHS) {\r\n      throw new Error('graph attribute is not supported yet');\r\n    }\r\n\r\n    const value = this.getValueNoCheck(attr);\r\n\r\n    // cast LONG to number\r\n    if (attr.type === onnx.AttributeProto.AttributeType.INT && Long.isLong(value)) {\r\n      return value.toNumber();\r\n    }\r\n\r\n    // cast LONG[] to number[]\r\n    if (attr.type === onnx.AttributeProto.AttributeType.INTS) {\r\n      const arr = (value as Array<number|Long>);\r\n      const numberValue: number[] = new Array<number>(arr.length);\r\n\r\n      for (let i = 0; i < arr.length; i++) {\r\n        const maybeLong = arr[i];\r\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\r\n      }\r\n\r\n      return numberValue;\r\n    }\r\n\r\n    // cast onnx.TensorProto to onnxjs.Tensor\r\n    if (attr.type === onnx.AttributeProto.AttributeType.TENSOR) {\r\n      return Tensor.fromProto(value as onnx.ITensorProto);\r\n    }\r\n\r\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\r\n    if (attr.type === onnx.AttributeProto.AttributeType.TENSORS) {\r\n      const tensorProtos = value as onnx.ITensorProto[];\r\n      return tensorProtos.map(value => Tensor.fromProto(value));\r\n    }\r\n\r\n    // cast Uint8Array to string\r\n    if (attr.type === onnx.AttributeProto.AttributeType.STRING) {\r\n      const utf8String = value as Uint8Array;\r\n      return Buffer.from(utf8String.buffer, utf8String.byteOffset, utf8String.byteLength).toString();\r\n    }\r\n\r\n    // cast Uint8Array[] to string[]\r\n    if (attr.type === onnx.AttributeProto.AttributeType.STRINGS) {\r\n      const utf8Strings = value as Uint8Array[];\r\n      return utf8Strings.map(\r\n          utf8String => Buffer.from(utf8String.buffer, utf8String.byteOffset, utf8String.byteLength).toString());\r\n    }\r\n\r\n    return value as ValueTypes;\r\n  }\r\n\r\n  private static getValueNoCheck(attr: onnx.IAttributeProto) {\r\n    switch (attr.type!) {\r\n      case onnx.AttributeProto.AttributeType.FLOAT:\r\n        return attr.f;\r\n      case onnx.AttributeProto.AttributeType.INT:\r\n        return attr.i;\r\n      case onnx.AttributeProto.AttributeType.STRING:\r\n        return attr.s;\r\n      case onnx.AttributeProto.AttributeType.TENSOR:\r\n        return attr.t;\r\n      case onnx.AttributeProto.AttributeType.GRAPH:\r\n        return attr.g;\r\n      case onnx.AttributeProto.AttributeType.FLOATS:\r\n        return attr.floats;\r\n      case onnx.AttributeProto.AttributeType.INTS:\r\n        return attr.ints;\r\n      case onnx.AttributeProto.AttributeType.STRINGS:\r\n        return attr.strings;\r\n      case onnx.AttributeProto.AttributeType.TENSORS:\r\n        return attr.tensors;\r\n      case onnx.AttributeProto.AttributeType.GRAPHS:\r\n        return attr.graphs;\r\n      default:\r\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\r\n    }\r\n  }\r\n\r\n  protected _attributes: Map<string, Value>;\r\n}\r\n"],"sourceRoot":""}